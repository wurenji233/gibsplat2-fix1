Developer Reference




"ENTITY/FireAnimationEvent"
ENTITY:FireAnimationEvent( Vector pos, Angle ang, number event, string name ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Called before firing animation events, such as muzzle flashes or shell ejections.



NOTE


This hook only works on anim type entities.


 Arguments

 Vector pos


Position of the effect

 Arguments

 Angle ang


Angle of the effect

 Arguments

 number event



 Arguments

 string name


Name of the event

 Returns

 boolean


Return true to disable the effect


"ENTITY/HandleAnimEvent"
ENTITY:HandleAnimEvent( number event, number eventTime, number cycle, number type, string options ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Called before firing animation events, such as muzzle flashes or shell ejections.



NOTE


This hook only works on anim type entities.


 Arguments

 number event



 Arguments

 number eventTime


The absolute time this event occurred using CurTime.

 Arguments

 number cycle


The frame this event occurred as a number between 0 and 1.

 Arguments

 number type



 Arguments

 string options


Name or options of this event.


"ENTITY/NextTask"
ENTITY:NextTask( table sched ) 
 Description
Start the next task in specific schedule.

 Arguments

 table sched


The schedule to start next task in.


"ENTITY/AcceptInput"
ENTITY:AcceptInput( string inputName, Entity activator, Entity called, string data ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Called when another entity fires an event to this entity.

 Arguments

 string inputName


The name of the input that was triggered.

 Arguments

 Entity activator


The initial cause for the input getting triggered.

 Arguments

 Entity called


The entity that directly trigger the input.

 Arguments

 string data


The data passed.

 Returns

 boolean


Should we suppress the default action for this input?


"ENTITY/Initialize"
ENTITY:Initialize(  ) 
Contents

1 Description
2 Examples

2.1 Example


3 Examples

3.1 Example




 Description
Called when the entity is created. This is called when you Entity:Spawn the custom entity.
This is called after ENTITY:SetupDataTables and GM:OnEntityCreated.



BUG


This is sometimes not called clientside. You can work around this by setting a variable in Initialize and check if it exists in ENTITY:Think. See the example below.



 Examples
 Example
Example Initialize function

function ENT:Initialize()
	-- Sets what model to use
	self:SetModel( models/props/cs_assault/money.mdl )

	-- Sets what color to use
	self:SetColor( Color( 200, 255, 200 ) )

	-- Physics stuff
	self:SetMoveType( MOVETYPE_VPHYSICS )
	self:SetSolid( SOLID_VPHYSICS )

	-- Init physics only on server, so it doesnt mess up physgun beam
	if ( SERVER ) then self:PhysicsInit( SOLID_VPHYSICS ) end
	
	-- Make prop to fall on spawn
	local phys = self:GetPhysicsObject()
	if ( IsValid( phys ) ) then phys:Wake() end
end


 Examples
 Example
Fixes the function not being called clientside.

function SWEP:Initialize()
	self.m_bInitialized = true

	-- Other code
end

function SWEP:Think()
	if ( not self.m_bInitialized ) then
		self:Initialize()
	end

	-- Other code
end


"EFFECT/Think"
EFFECT:Think(  ) 
 Description
Called when the effect should think, return false to kill the effect.

 Returns

 boolean


Return false to remove this effect.


"EFFECT/Init"
EFFECT:Init( CEffectData effectData ) 
 Description
Called when the effect is created.

 Arguments

 CEffectData effectData


The effect data used to create the effect.


"EFFECT/GetTracerShootPos"
EFFECT:GetTracerShootPos( Vector pos, Weapon ent, number attachment ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Used to get the real start position of a trace, for weapon tracer effects.
real meaning in 3rd person, the 3rd person position will be used, in first person the first person position will be used.

 Arguments

 Vector pos


Default position if we fail

 Arguments

 Weapon ent


The weapon to use.

 Arguments

 number attachment


Attachment ID of on the weapon muzzle, to use as the start position.



NOTE


Please note that it is expected that the same attachment ID is used on both, the world and the view model.



 Returns

 Vector


The real start position.


"EFFECT/PhysicsCollide"
EFFECT:PhysicsCollide( table colData, PhysObj collider ) 
 Description
Called when the effect collides with anything.

 Arguments

 table colData


Information regarding the collision. See CollisionData structure

 Arguments

 PhysObj collider


The physics object of the entity that collided with the effect.


"ENTITY/EndTouch"
ENTITY:EndTouch( Entity entity ) 
 Description
Called when the entity stops touching another entity.



WARNING


This only works for brush entities and for entities that have Entity:SetTrigger set to true.


 Arguments

 Entity entity


The entity which was touched.


"ENTITY/GravGunPickupAllowed"
ENTITY:GravGunPickupAllowed( Player ply ) 
 Description
Called by GM:GravGunPickupAllowed on ALL entites in Sandbox-derived gamemodes and acts as an override.

 Arguments

 Player ply


The player aiming at us

 Returns

 boolean


Return true to allow the entity to be picked up


"ENTITY/KeyValue"
ENTITY:KeyValue( string key, string value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Called when the engine sets a value for this scripted entity.
See GM:EntityKeyValue for a hook that works for all entities.
See WEAPON:KeyValue for a hook that works for scripted weapons.

 Arguments

 string key


The key that was affected.

 Arguments

 string value


The new value.

 Returns

 boolean


Return true to suppress this KeyValue or return false or nothing to apply this key value.


"ENTITY/DrawTranslucent"
ENTITY:DrawTranslucent( number flags ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Called when the entity should be drawn translucently.

 Arguments

 number flags


The bit flags from STUDIO_ Enums

 Examples
 Example
The default action for this hook is to call ENTITY:Draw.

function ENT:DrawTranslucent()

	-- This is here just to make it backwards compatible.
	-- You shouldnt really be drawing your model here unless its translucent

	self:Draw()

end


"ENTITY/EngineScheduleFinish"
ENTITY:EngineScheduleFinish(  ) 
 Description
Called whenever an engine schedule is finished.


"ENTITY/DoingEngineSchedule"
ENTITY:DoingEngineSchedule(  ) 
 Description
Called whenever an engine schedule is being ran.


"ENTITY/GetRenderMesh"
ENTITY:GetRenderMesh(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Specify a mesh that should be rendered instead of this SENTs model.

 Returns

 table


A table containing the following keys:

IMesh Mesh - Required
IMaterial Material - Required
VMatrix Matrix - Optional


 Examples
 Example
A box that renders nicely with ambient lighting, projected textures, and bumpmaps. Performed in the most lines of code possible.

AddCSLuaFile()

DEFINE_BASECLASS( base_anim )

ENT.PrintName = Other Cube
ENT.Spawnable = true

ENT.Mins = Vector( -16, -16, -16 )
ENT.Maxs = Vector(  16,  16,  16 )

ENT.Material = Material( hunter/myplastic )

function ENT:SpawnFunction( ply, tr, ClassName )
    local ent = ents.Create( ClassName )
    ent:SetPos( tr.HitPos + tr.HitNormal * 32 )
    ent:Spawn()
    return ent
end

function ENT:Initialize()
    if ( CLIENT ) then
        self:CreateMesh()
        self:SetRenderBounds( self.Mins, self.Maxs )
    end

    self:DrawShadow( false )
end

function ENT:GetRenderMesh()
    return { Mesh = self.Mesh, Material = self.Material }

end

function ENT:CreateMesh()
    self.Mesh = Mesh()

    local positions =
{
        Vector( -0.5, -0.5, -0.5 ),
        Vector(  0.5, -0.5, -0.5 ),
        Vector( -0.5,  0.5, -0.5 ),
        Vector(  0.5,  0.5, -0.5 ),
        Vector( -0.5, -0.5,  0.5 ),
        Vector(  0.5, -0.5,  0.5 ),
        Vector( -0.5,  0.5,  0.5 ),
        Vector(  0.5,  0.5,  0.5 ),
    };

    local indices =
{
        1, 7, 5,
        1, 3, 7,
        6, 4, 2,
        6, 8, 4,
        1, 6, 2,
        1, 5, 6,
        3, 8, 7,
        3, 4, 8,
        1, 4, 3,
        1, 2, 4,
        5, 8, 6,
        5, 7, 8,
    }


    local normals =
{
       Vector( -1,  0,  0 ),
       Vector(  1,  0,  0 ),
       Vector(  0, -1,  0 ),
       Vector(  0,  1,  0 ),
       Vector(  0,  0, -1 ),
       Vector(  0,  0,  1 ),
    }


    local tangents =
{
        { 0, 1, 0, -1 },
        { 0, 1, 0, -1 },
        { 0, 0, 1, -1 },
        { 1, 0, 0, -1 },
        { 1, 0, 0, -1 },
        { 0, 1, 0, -1 },
    }


    local uCoords =
{
       0, 1, 0,
       0, 1, 1,
       0, 1, 0,
       0, 1, 1,
       0, 1, 0,
       0, 1, 1,
       0, 1, 0,
       0, 1, 1,
       0, 1, 0,
       0, 1, 1,
       0, 1, 0,
       0, 1, 1,
    }


    local vCoords =
{
       0, 1, 1,
       0, 0, 1,
       0, 1, 1,
       0, 0, 1,
       0, 1, 1,
       0, 0, 1,
       0, 1, 1,
       0, 0, 1,
       0, 1, 1,
       0, 0, 1,
       0, 1, 1,
       0, 0, 1,
    }


    local verts = {}

    local scale = self.Maxs - self.Mins

    for vert_i = 1, #indices do
        local face_i = math.ceil( vert_i / 6 )

        verts[vert_i] =
{
            pos = positions[indices[vert_i]] * scale,
            normal = normals[face_i],
            u = uCoords[vert_i],
            v = vCoords[vert_i],
            userdata = tangents[face_i]
        }

    end
    
    self.Mesh:BuildFromTriangles( verts )
end


"ENTITY/Blocked"
ENTITY:Blocked( Entity other ) 
 Description
Called when the entity is blocked.



NOTE


This only works for entities with MOVETYPE_PUSH as their Entity:SetMoveType


 Arguments

 Entity other


The entity that is blocking this entity.


"ENTITY/CalcAbsolutePosition"
ENTITY:CalcAbsolutePosition( Vector pos, Angle ang ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns


 Description
Called whenever the entitys position changes. A callback for when an entitys angle changes is available via Entity:AddCallback.
Like ENTITY:RenderOverride, this hook works on any entity (scripted or not) it is applied on.

 Arguments

 Vector pos


The entitys actual position. May differ from Entity:GetPos

 Arguments

 Angle ang


The entitys actual angles. May differ from Entity:GetAngles

 Returns

 Vector


New position

 Returns

 Angle


New angles


"ENTITY/Draw"
ENTITY:Draw( number flags ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Called if and when the entity should be drawn opaquely, based on the Entity:GetRenderGroup of the entity.
See ENT structure and RENDERGROUP_ Enums for more information.
See also ENTITY:DrawTranslucent.

 Arguments

 number flags


The bit flags from STUDIO_ Enums

 Examples
 Example
Draws the model and makes a rotating text over the entity

function ENT:Draw()
	// Draw the model
	self:DrawModel()

	// The text to display
	local text = Example Text

	// The position. We use model bounds to make the text appear just above the model. Customize this to your liking.
	local mins, maxs = self:GetModelBounds()
	local pos = self:GetPos() + Vector( 0, 0, maxs.z + 2 )

	// The angle
	local ang = Angle( 0, SysTime() * 100% 360, 90 )

	// Draw front
	cam.Start3D2D( pos, ang, 0.2 )
		// Actually draw the text. Customize this to your liking.
		draw.DrawText( text, Default, 0, 0, Color( 0, 255, 0, 255 ), TEXT_ALIGN_CENTER )
	cam.End3D2D()

	// Flip the angle 180 degress around the UP axis
	ang:RotateAroundAxis( Vector( 0, 0, 1 ), 180 )

	// Draw back
	cam.Start3D2D( pos, ang, 0.2 )
		// Actually draw the text. Customize this to your liking.
		draw.DrawText( text, Default, 0, 0, Color( 0, 255, 0, 255 ), TEXT_ALIGN_CENTER )
	cam.End3D2D()
end


"ENTITY/GravGunPunt"
ENTITY:GravGunPunt( Player ply ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Called when this entity is about to be punted with the gravity gun (primary fire).
Only works in Sandbox derived gamemodes and only if GM:GravGunPunt is not overridden.

 Arguments

 Player ply


The player pressing left-click with the gravity gun at an entity

 Returns

 boolean


Return true or false to enable or disable punting respectively.

 Examples
 Example
Enables a scripted entity to be punted even when frozen.

function ENT:GravGunPunt( ply )
	self:GetPhysicsObject():EnableMotion( true )
	return true
end


"ENTITY/ImpactTrace"
ENTITY:ImpactTrace( table traceResult, number damageType, string customImpactName=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Called when a bullet trace hits this entity and allows you to override the default behavior by returning true.

 Arguments

 table traceResult


The trace that hit this entity as a TraceResult structure.

 Arguments

 number damageType


The damage bits associated with the trace, see DMG_ Enums

 Arguments

 string customImpactName=nil


The effect name to override the impact effect with.

Possible arguments are ImpactJeep, AirboatGunImpact, HelicopterImpact, ImpactGunship.

 Returns

 boolean


Return true to override the default impact effects.

 Examples
 Example
Hides the original bullet impact effect and dispatches explosions instead.

function ENT:ImpactTrace( trace,dmgtype,customimpactname )
	local effectdata = EffectData()
	effectdata:SetOrigin( trace.HitPos )
	util.Effect( Explosion, effectdata )
	return true
end


"EFFECT/StartTouch"
EFFECT:StartTouch(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"EFFECT/Touch"
EFFECT:Touch(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"ENTITY/GetRelationship"
ENTITY:GetRelationship( Entity ent ) 
 Description
Called when scripted NPC needs to check how he feels against another entity, such as when NPC:Disposition is called.

 Arguments

 Entity ent


The entity in question

 Returns

 number


How our scripter NPC feels towards the entity in question. See D_ Enums.


"EFFECT/EndTouch"
EFFECT:EndTouch(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"ENTITY/GetAttackSpread"
ENTITY:GetAttackSpread( Entity wep, Entity target ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Validation required.
This page contains possibly incorrect or incomplete information. Further testing is required. Called to determine how good an NPC is at using a particular weapon.
 Arguments

 Entity wep


The weapon being used by the NPC.

 Arguments

 Entity target


The target the NPC is attacking

 Returns

 number


The number of degrees of inaccuracy in the NPCs attack.


"ENTITY/DoSchedule"
ENTITY:DoSchedule( table sched ) 
 Description
Runs a Lua schedule. Runs tasks inside the schedule.

 Arguments

 table sched


The schedule to run.


"ENTITY/CanProperty"
ENTITY:CanProperty( Player ply, string property ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Controls if a property can be used on this entity or not.
This hook will only work in Sandbox derived gamemodes that do not have SANDBOX:CanProperty overridden.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Player ply


Player, that tried to use the property

 Arguments

 string property


Class of the property that is tried to use, for example - bonemanipulate

 Returns

 boolean


Return false to disallow using that property, return true to allow.


"ENTITY/ExpressionFinished"
ENTITY:ExpressionFinished( string strExp ) 
 Description
Validation required.
This page contains possibly incorrect or incomplete information. Further testing is required.Called when an NPCs expression has finished.
 Arguments

 string strExp


The path of the expression.


"ENTITY/OnCondition"
ENTITY:OnCondition( number conditionID ) 
 Description
Called each time the NPC updates its condition.

 Arguments

 number conditionID


The ID of condition. See NPC:ConditionName.


"ENTITY/OnEntityCopyTableFinish"
ENTITY:OnEntityCopyTableFinish( table data ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Called after duplicator finishes saving the entity, allowing you to modify the save data.
This is called after ENTITY:PostEntityCopy.

 Arguments

 table data


The save EntityCopyData structure that you can modify.

 Examples
 Example
Prevent this entity from being copied and subsequently pasted.

function ENT:OnEntityCopyTableFinish( data )
	for k, v in pairs( data ) do data[ k ] = nil end
end


"ENTITY/OnDuplicated"
ENTITY:OnDuplicated( table entTable ) 
 Description
Called on any entity after it has been created by the duplicator library and before any bone/entity modifiers have been applied.
This hook is called after ENTITY:Initialize and before ENTITY:PostEntityPaste.

 Arguments

 table entTable


EntityCopyData structure of the source entity.


"ENTITY/OnRestore"
ENTITY:OnRestore(  ) 
 Description
Called when the entity is reloaded from a Source Engine save (not the Sandbox saves or dupes) or on a changelevel (for example Half-Life 2 campaign level transitions).
For the duplicator library callbacks, see ENTITY:OnDuplicated.


"ENTITY/OnTakeDamage"
ENTITY:OnTakeDamage( CTakeDamageInfo damage ) 
 Description
Called when the entity is taking damage.

 Arguments

 CTakeDamageInfo damage


The damage to be applied to the entity.


"ENTITY/OnReloaded"
ENTITY:OnReloaded(  ) 
 Description
Called when the entity is reloaded by the lua auto-refresh system, i.e. when the developer edits the lua file for the entity while the game is running.


"ENTITY/OnTaskComplete"
ENTITY:OnTaskComplete(  ) 
 Description
Called from the engine when TaskComplete is called.
This allows us to move onto the next task - even when TaskComplete was called from an engine side task.


"ENTITY/StartEngineSchedule"
ENTITY:StartEngineSchedule( number scheduleID ) 
 Description
Starts an engine schedule.

 Arguments

 number scheduleID


Schedule ID to start. See SCHED_ Enums


"ENTITY/OnRemove"
ENTITY:OnRemove(  ) 
 Description
Called when the entity is about to be removed.
See also Entity:CallOnRemove, which can even be used on engine (non-Lua) entities.

 Clientside behaviour remarks
Validation required.
This page contains possibly incorrect or incomplete information. Further testing is required.
This hook may be called at odd times (when entity has actually not yet been removed from the server). This happens during fullupdate with the ENTITY:Initialize function not being called even when the entity reappears.
You can debug this behaviour by enabling cheats and running cl_fullupdate on the client.
GM:NotifyShouldTransmit can be used to circumvent this problem. ENTITY:Think can also be used to detect that the entity has reappeared. You may reinitialize any necessary data in these hooks.


"ENTITY/PassesDamageFilter"
ENTITY:PassesDamageFilter( CTakeDamageInfo dmg ) 
 Description
Called by Entity:PassesDamageFilter and engine entities to determine whether an entity passes this filters damage filter.



NOTE


This hook only works for filter type SENTs.


 Arguments

 CTakeDamageInfo dmg


Damage to test.

 Returns

 boolean


Whether the entity passes the damage filter ( true ) or not. ( false )


"ENTITY/PhysicsCollide"
ENTITY:PhysicsCollide( table colData, PhysObj collider ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Called when the entity collides with anything. The move type and solid type must be VPHYSICS for the hook to be called.



NOTE


If you want to use this hook on default/engine/non-Lua entites ( like prop_physics ), use Entity:AddCallback instead! This page describes a hook for Lua entities


 Arguments

 table colData


Information regarding the collision. See CollisionData structure.

 Arguments

 PhysObj collider


The physics object that collided.

 Examples
 Example
Play a sound when we hit something.

function ENT:PhysicsCollide( data, phys )
	if ( data.Speed &gt; 50 ) then self:EmitSound( Sound( Flashbang.Bounce ) ) end
end


"ENTITY/PhysicsUpdate"
ENTITY:PhysicsUpdate( PhysObj phys ) 
 Description
Called whenever the physics of the entity are updated.



WARNING


This hook wont be called if the Entitys PhysObj goes asleep


 Arguments

 PhysObj phys


The physics object of the entity.


"ENTITY/StartTouch"
ENTITY:StartTouch( Entity entity ) 
 Description
Called when the entity starts touching another entity.



WARNING


This only works for brush entities and for entities that have Entity:SetTrigger set to true.


 Arguments

 Entity entity


The entity which is being touched.


"ENTITY/SpawnFunction"
ENTITY:SpawnFunction( Player ply, table tr, string ClassName ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
This is the spawn function. Its called when a player spawns the entity from the spawnmenu.
If you want to make your SENT spawnable you need this function to properly create the entity.

 Arguments

 Player ply


The player that is spawning this SENT

 Arguments

 table tr


A TraceResult structure from player eyes to their aim position

 Arguments

 string ClassName


The classname of your entity

 Examples
 Example
This is how it is defined in sent_ball

function ENT:SpawnFunction( ply, tr, ClassName )

	if ( !tr.Hit ) then return end

	local SpawnPos = tr.HitPos + tr.HitNormal * 16

	local ent = ents.Create( ClassName )
	ent:SetPos( SpawnPos )
	ent:SetBallSize( math.random( 16, 48 ) )
	ent:Spawn()
	ent:Activate()

	return ent

end


 Examples
 Example
This is how base_edit spawns (also rotates the entity to face the player, remove * 10 if it spawns in the air)

function ENT:SpawnFunction( ply, tr, ClassName )

	if ( !tr.Hit ) then return end
	
	local SpawnPos = tr.HitPos + tr.HitNormal * 10
	local SpawnAng = ply:EyeAngles()
	SpawnAng.p = 0
	SpawnAng.y = SpawnAng.y + 180
	
	local ent = ents.Create( ClassName )
	ent:SetPos( SpawnPos )
	ent:SetAngles( SpawnAng )
	ent:Spawn()
	ent:Activate()
	
	return ent
	
end


"ENTITY/RunAI"
ENTITY:RunAI(  ) 
 Description
Called from the engine every 0.1 seconds.


"ENTITY/SelectSchedule"
ENTITY:SelectSchedule( number iNPCState ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Set the schedule we should be playing right now.

 Arguments

 number iNPCState


 Examples
 Example
Creates a new schedule and assigns it to a scripted NPC.

local schdTest = ai_schedule.New( Test Schedule )
 
schdTest:EngTask( TASK_GET_PATH_TO_RANDOM_NODE,  128 )
schdTest:EngTask( TASK_RUN_PATH, 		   0   )
schdTest:EngTask( TASK_WAIT_FOR_MOVEMENT, 	   0   )
 
 
function ENT:SelectSchedule()
 
	self:StartSchedule( schdTest )
 
end
Output:

The scripted NPC will run around when spawned.


"ENTITY/PreEntityCopy"
ENTITY:PreEntityCopy(  ) 
 Description
Called before the duplicator copies the entity.
If you are looking for a way to make the duplicator spawn another entity when duplicated. ( For example, you duplicate a prop_physics, but you want the duplicator to spawn prop_physics_my ), you should add prop_physics.ClassOverride = prop_physics_my. The duplication table should be also stored on that prop_physics, not on prop_physics_my.

 Examples
 Example
Example on how to store values for duplicator, and then restore them afterwards

-- Store the value for duplicator
function ENT:PreEntityCopy()
	self.MyDuplicatorVariasble = self:GetSequence()
end

-- Restore the saved value
function ENT:PostEntityPaste()
	-- Always validate data before using it
	if ( !self.MyDuplicatorVariasble ) then return end

	self:ResetSequence( self.MyDuplicatorVariasble )
end


"ENTITY/SetupDataTables"
ENTITY:SetupDataTables(  ) 
 Description
Called when the entity should set up its  Data Tables.
This is a much better option than using Set/Get Networked Values.

 Examples
 Example
Sets up networked variables, adds functions SetAmount, GetAmount, GetBloodPos, SetBloodPos, GetUrinePos, SetUrinePos.
This function only supports 64 data tables per type (#0-63), except for strings which only supports 4.

function ENT:SetupDataTables()

	self:NetworkVar( Float, 0, Amount )
	self:NetworkVar( Vector, 0, BloodPos )
	self:NetworkVar( Vector, 1, UrinePos )

	if ( SERVER ) then
		self:SetAmount( 3 )
		self:SetBloodPos( Vector( 0,-32,0 ) )
		self:SetUrinePos( Vector( 0,0,-16 ) )
	end

end


"ENTITY/PostEntityCopy"
ENTITY:PostEntityCopy(  ) 
 Description
Called after the duplicator finished copying the entity


"ENTITY/StartSchedule"
ENTITY:StartSchedule( Schedule sched ) 
 Description
Starts a schedule previously created by ai_schedule.New.
Not to be confused with ENTITY:StartEngineSchedule or NPC:SetSchedule which start an Engine-based schedule.

 Arguments

 Schedule sched


Schedule to start.


"ENTITY/StartTask"
ENTITY:StartTask( Task task ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Called once on starting task.

 Arguments

 Task task


The task to start, created by ai_task.New.

 Examples
 Example
How it is defined:

function ENT:StartTask( task )
	task:Start( self.Entity )
end


"ENTITY/PhysicsSimulate"
ENTITY:PhysicsSimulate( PhysObj phys, number deltaTime ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns
6 Returns


 Description
Called from the Entitys motion controller to simulate physics.
This will only be called after using Entity:StartMotionController on a scripted entity of anim type.



NOTE


This hook can work on the CLIENT if you call Entity:StartMotionController and use Entity:AddToMotionController on the physics objects you want to control




WARNING


Do not use functions such as PhysObj:EnableCollisions or PhysObj:EnableGravity in this hook as theyre very likely to crash your game. You may want to use ENTITY:PhysicsUpdate instead.


 Arguments

 PhysObj phys


The physics object of the entity.

 Arguments

 number deltaTime


Time since the last call.

 Returns

 Vector


Angular force

 Returns

 Vector


Linear force

 Returns

 number


One of the SIM_ Enums.


"ENTITY/StartEngineTask"
ENTITY:StartEngineTask( number taskID, number TaskData ) 
 Description
Called when an engine task has been started on the entity.



NOTE


This hook only exists for ai type SENTs


 Arguments

 number taskID



 Arguments

 number TaskData


Task data


"ENTITY/SetTask"
ENTITY:SetTask( table task ) 
 Description
Sets the current task.

 Arguments

 table task


The task to set.


"EFFECT/Render"
EFFECT:Render(  ) 
 Description
Called when the effect should be rendered.


"ENTITY/PassesTriggerFilters"
ENTITY:PassesTriggerFilters( Entity ent ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Polls whenever the entity should trigger the brush.



WARNING


This hook is broken and will not work without code below


 Arguments

 Entity ent


The entity that is about to trigger.

 Returns

 boolean


Should trigger or not.

 Examples
 Example
How this is supposed to work internally

ENT.Entities = {}


function ENT:IsTouchedBy( ent )
	return table.HasValue( self.Entities, ent )
end

function ENT:StartTouch( ent )
	if ( !self:PassesTriggerFilters( ent ) ) then return end
	table.insert( self.Entities, ent )

	/* Code */
end

function ENT:Touch( ent )
	if ( !self:PassesTriggerFilters( ent ) ) then return end
	if ( !table.HasValue( ent ) ) then table.insert( self.Entities, ent ) end

	/* Code */
end

function ENT:EndTouch( ent )
	if ( !self:IsTouchedBy( ent ) ) then return end
	table.RemoveByValue( self.Entities, ent )

	/* Code */
end


"ENTITY/RunEngineTask"
ENTITY:RunEngineTask( number taskID, number taskData ) 
 Description
Called when an engine task is ran on the entity.



NOTE


This hook only exists for ai type SENTs


 Arguments

 number taskID



 Arguments

 number taskData


The task data.


"ENTITY/ScheduleFinished"
ENTITY:ScheduleFinished(  ) 
 Description
Called whenever a schedule is finished.


"ENTITY/RunTask"
ENTITY:RunTask( table task ) 
 Description
Called every think on running task.
The actual task function should tell us when the task is finished.

 Arguments

 table task


The task to run


"ENTITY/SetAutomaticFrameAdvance"
ENTITY:SetAutomaticFrameAdvance( boolean enable ) 
 Description
Toggles automatic frame advancing for animated sequences on an entity.
This has the same effect as setting the ENT.AutomaticFrameAdvance property.

 Arguments

 boolean enable


Whether or not to set automatic frame advancing.


"ENTITY/PassesFilter"
ENTITY:PassesFilter( Entity trigger, Entity ent ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Called by Entity:PassesFilter and engine entities to determine whether an entity passes this filters filter.



NOTE


This hook only works for filter type SENTs.


 Arguments

 Entity trigger


The caller entity, the one that wants to know if the entity passes the filter

 Arguments

 Entity ent


The entity in question that is being tested

 Returns

 boolean


Whether the entity passes the filter ( true ) or not ( false )


"ENTITY/PostEntityPaste"
ENTITY:PostEntityPaste( Player ply, Entity ent, table createdEntities ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Called after the duplicator library pastes the entity, after the bone/entity modifiers have been applied to the entity.
This hook is called after ENTITY:OnDuplicated.

 Arguments

 Player ply


The player who pasted the entity.



WARNING


This may not be a valid player in some circumstances. For example, when a save is loaded from the main menu, this hook will be called before the player is spawned. This argument will be a NULL entity in that case.




BUG


This will be nil for invalid players.




 Arguments

 Entity ent


The entity itself. Same as self.

 Arguments

 table createdEntities


All entities that are within the placed dupe.



NOTE


The keys of each value in this table are the original entity indexes when the duplication was created. This can be utilized to restore entity references that dont get saved in duplications.


"ENTITY/RenderOverride"
ENTITY:RenderOverride(  ) 
 Description
Called instead of the engine drawing function of the entity. This hook works on any entity (scripted or not) it is applied on.
This does not work on physgun_beam, use GM:DrawPhysgunBeam instead.



NOTE


As a downside of this implementation, only one RenderOverride may be applied at a time.




BUG


Drawing a viewmodel in this function will cause GM:PreDrawViewModel, WEAPON:PreDrawViewModel, WEAPON:ViewModelDrawn, GM:PostDrawViewModel, and WEAPON:PostDrawViewModel to be called twice.





BUG


This is called before PrePlayerDraw for players. If this function exists at all on a player, their worldmodel will always be rendered regardless of PrePlayerDraws return.



 Examples
 Example
Set the entity the player is looking at to not draw if the player is its owner.

local function DontDrawMe( self )
	if ( self:GetOwner() == LocalPlayer() ) then
		return
	end
	
	self:DrawModel()
end

local pickent = LocalPlayer():GetEyeTrace().Entity

if ( IsValid( pickent ) ) then
	pickent.RenderOverride = DontDrawMe
end


"ENTITY/TaskFinished"
ENTITY:TaskFinished(  ) 
 Description
Returns true if the current running Task is finished.

 Returns

 boolean


Is the current running Task is finished or not.


"ENTITY/StoreOutput"
ENTITY:StoreOutput( string name, string info ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Used to store an output so it can be triggered with ENTITY:TriggerOutput.
Outputs compiled into a map are passed to entities as key/value pairs through ENTITY:KeyValue.
TriggerOutput will do nothing if this function has not been called first.

 Arguments

 string name


Name of output to store

 Arguments

 string info


Output info

 Examples
 Example
Stores all outputs that are assigned to an entity in Hammer.

function ENT:KeyValue( k, v )
	-- 99% of all outputs are named OnSomethingHappened.
	if ( string.Left( k, 2 ) == On ) then
		self:StoreOutput( k, v )
	end
end


"ENTITY/TaskTime"
ENTITY:TaskTime(  ) 
 Description
Returns how many seconds weve been doing this current task

 Returns

 number


How many seconds weve been doing this current task


"ENTITY/Think"
ENTITY:Think(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Called every frame on the client.
Called every tick on the server.



NOTE


By default, it runs about 5-6 times per second on the server, but you can force it to run at servers tickrate using the example below.


 Returns

 boolean


Return true if you used Entity:NextThink to override the next execution time.

 Examples
 Example
Force the think hook to run at the maximum frequency.
This is generally only useable for anim entities, if the entity has any animations.

function ENT:Think()
	-- Do stuff

	self:NextThink( CurTime() )
	return true
end


"ENTITY/Touch"
ENTITY:Touch( Entity entity ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Called every tick for every entity being touched.
See also ENTITY:StartTouch and ENTITY:EndTouch.



WARNING


This only works for brush entities and for entities that have Entity:SetTrigger set to true.




NOTE


For physics enabled entities, this hook will not be ran while the entitys physics is asleep. See PhysObj:Wake.


 Arguments

 Entity entity


The entity that touched it.

 Examples
 Example
function ENTITY:Touch( entity )
	self:EmitSound( ambient/explosions/explode_ .. math.random( 1, 9 ) .. .wav )
	self:Remove()
end


"ENTITY/TriggerOutput"
ENTITY:TriggerOutput( string output, Entity activator, string data=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Triggers all outputs stored using ENTITY:StoreOutput.

 Arguments

 string output


Name of output to fire

 Arguments

 Entity activator


Activator entity

 Arguments

 string data=nil


The data to give to the output.


"ENTITY/UpdateTransmitState"
ENTITY:UpdateTransmitState(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Called whenever the transmit state should be updated.

 Returns

 number


Transmit state to set, see TRANSMIT_ Enums.

 Examples
 Example
Entity pickup example, stops the entity from being networked after its been picked up, and restores it once it respawns.

function ENT:Touch( other )
	if ( self.NextRespawn &gt; CurTime() ) then return end
	
	self.NextRespawn = CurTime() + 5
	self:AddEFlags( EFL_FORCE_CHECK_TRANSMIT )
end

function ENT:UpdateTransmitState()
	if ( self.NextRespawn &gt; CurTime() ) then
		return TRANSMIT_NEVER
	end
	
	return TRANSMIT_PVS
end

function ENT:Think()
	if ( self.NextRespawn!= -1 &amp;&amp; self.NextRespawn &lt; CurTime() ) then
		self.NextRespawn = -1
		self:AddEFlags( EFL_FORCE_CHECK_TRANSMIT )
	end
end


"GM/AcceptInput"
GM:AcceptInput( Entity ent, string input, Entity activator, Entity caller, any value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Returns
8 Examples

8.1 Example




 Description
Called when a map I/O event occurs.

 Arguments

 Entity ent


Entity that receives the input

 Arguments

 string input


The input name

 Arguments

 Entity activator


Activator of the input

 Arguments

 Entity caller


Caller of the input

 Arguments

 any value


Data provided with the input

 Returns

 boolean


Return true to prevent this input from being processed.

 Examples
 Example
This would block any input that the lua_run entity would receive.

hook.Add( AcceptInput, BlockLuaRun, function( ent, name, activator, caller, data )
    if ( ent:GetClass() == lua_run ) then
        return true
    end
end )


"GM/AllowPlayerPickup"
GM:AllowPlayerPickup( Player ply, Entity ent ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Called when a player tries to pick up something using the use key, return to override.
See GM:GravGunPickupAllowed for the Gravity Gun pickup variant.

 Arguments

 Player ply


The player trying to pick up something.

 Arguments

 Entity ent


The Entity the player attempted to pick up.

 Returns

 boolean


Allow the player to pick up the entity or not.

 Examples
 Example
Allows only admins to pick up things

local function up( ply, ent )
    return ply:IsAdmin()
end
hook.Add( AllowPlayerPickup, some_unique_name, up )


"GM/AdjustMouseSensitivity"
GM:AdjustMouseSensitivity( number defaultSensitivity ) 
 Description
Allows you to adjust the mouse sensitivity.

 Arguments

 number defaultSensitivity


The old sensitivity

In general it will be 0, which is equivalent to a sensitivity of 1.

 Returns

 number


A fraction of the normal sensitivity (0.5 would be half as sensitive), return -1 to not override.


"GM/CalcVehicleView"
GM:CalcVehicleView( Vehicle veh, Player ply, table view ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Called from GM:CalcView when player is in driving a vehicle.
This hook may not be called in gamemodes that override GM:CalcView.

 Arguments

 Vehicle veh


The vehicle the player is driving

 Arguments

 Player ply


The vehicle driver

 Arguments

 table view


The view data containing players FOV, view position and angles, see CamData structure

 Returns

 table


The modified view table containing new values, see CamData structure


"GM/CalcMainActivity"
GM:CalcMainActivity( Player ply, Vector vel ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns


 Description
This hook is used to calculate animations for a player.



WARNING


This hook must return the same values at the same time on both, client and server. On client for players to see the animations, on server for hit detection to work properly.




BUG


This can return the incorrect velocity when on a moving object.



 Arguments

 Player ply


The player to apply the animation.

 Arguments

 Vector vel


The velocity of the player.

 Returns

 number


ACT_ Enums for the activity the player should use. A nil return will be treated as ACT_INVALID.

 Returns

 number


Sequence for the player to use. This takes precedence over the activity (the activity is still used for layering). Return -1 or nil to let the activity determine the sequence.


"GM/CalcView"
GM:CalcView( Player ply, Vector origin, Angle angles, number fov, number znear, number zfar ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Returns
9 Examples

9.1 Example




 Description
Allows override of the default view.

 Arguments

 Player ply


The local player.

 Arguments

 Vector origin


The players view position.

 Arguments

 Angle angles


The players view angles.

 Arguments

 number fov


Field of view.

 Arguments

 number znear


Distance to near clipping plane.

 Arguments

 number zfar


Distance to far clipping plane.

 Returns

 table


View data table. See CamData structure

 Examples
 Example
Draws the LocalPlayer and sets the view behind.

local function MyCalcView( ply, pos, angles, fov )
    local view = {}

    view.origin = pos-( angles:Forward()*100 )
    view.angles = angles
    view.fov = fov
    view.drawviewer = true
 
    return view
end
 
hook.Add( CalcView, MyCalcView, MyCalcView )


"ENTITY/TestCollision"
ENTITY:TestCollision( Vector startpos, Vector delta, boolean isbox, Vector extents, number mask ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Returns
8 Examples

8.1 Example




 Description
Allows you to override trace result when a trace hits the entitys Bounding Box.



NOTE


Your entity must have Entity:EnableCustomCollisions enabled for this hook to work


 Arguments

 Vector startpos


Start position of the trace

 Arguments

 Vector delta


Offset from startpos to the endpos of the trace

 Arguments

 boolean isbox


Is the trace a hull trace?

 Arguments

 Vector extents


Size of the hull trace?

 Arguments

 number mask


The CONTENTS_ Enums mask

 Returns

 table


A table containing new HitPos, Fraction and Normal. Returning nothing allows the trace to ignore the entity completely.

 Examples
 Example
Example taken from lua/entities/widget_base.lua

function ENT:TestCollision( startpos, delta, isbox, extents )

        if ( isbox ) then return end
        if ( !widgets.Tracing ) then return end
        
        -- TODO. Actually trace against our cube!
        
        return 
        { 
                HitPos                = self:GetPos(),
                Fraction        = 0.5 * self:GetPriority()
        }


end


"GM/CalcViewModelView"
GM:CalcViewModelView( Weapon wep, Entity vm, Vector oldPos, Angle oldAng, Vector pos, Angle ang ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Returns
9 Returns


 Description
Allows overriding the position and angle of the viewmodel.

 Arguments

 Weapon wep


The weapon entity

 Arguments

 Entity vm


The viewmodel entity

 Arguments

 Vector oldPos


Original position (before viewmodel bobbing and swaying)

 Arguments

 Angle oldAng


Original angle (before viewmodel bobbing and swaying)

 Arguments

 Vector pos


Current position

 Arguments

 Angle ang


Current angle

 Returns

 Vector


New position

 Returns

 Angle


New angle


"GM/AddDeathNotice"
GM:AddDeathNotice( string attacker, number attackerTeam, string inflictor, string victim, number victimTeam ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example




 Description
Adds a death notice entry.



BUG


You cannot use hook.Add on this hook yet.




 Arguments

 string attacker


The name of the attacker

 Arguments

 number attackerTeam


The team of the attacker

 Arguments

 string inflictor


Class name of the entity inflicting the damage

 Arguments

 string victim


Name of the victim

 Arguments

 number victimTeam


Team of the victim

 Examples
 Example
Shows a suicide death notice in Sandbox.

local ply = Entity( 1 )
GAMEMODE:AddDeathNotice( ply:GetName(), ply:Team(), nil, ply:GetName(), ply:Team() )
Output:


"ENTITY/Use"
ENTITY:Use( Entity activator, Entity caller, number useType, number value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Called when another entity uses this entity, example would be a player pressing +use this entity.
To change how often the function is called, see Entity:SetUseType.

 Arguments

 Entity activator


The initial cause for the input getting triggered. This can be different from the caller in some cases.

 Arguments

 Entity caller


The entity originally responsible for the input. Typically you should use this if youre checking for which player pressed +use.

 Arguments

 number useType


Use type, see USE_ Enums.

 Arguments

 number value


Any passed value.

 Examples
 Example
Kills any player that uses this entity.

function ENT:Use( activator, caller )
	if ( IsValid( caller ) and caller:IsPlayer() then 
		caller:Kill()
	end
end


"GM/CanEditVariable"
GM:CanEditVariable( Entity ent, Player ply, string key, string val, table editor ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Returns
8 Examples

8.1 Example




 Description
Called when a variable is edited on an Entity (called by Edit Properties... menu), to determine if the edit should be permitted.
See Editable entities for more details about the system.

 Arguments

 Entity ent


The entity being edited

 Arguments

 Player ply


The player doing the editing

 Arguments

 string key


The name of the variable

 Arguments

 string val


The new value, as a string which will later be converted to its appropriate type

 Arguments

 table editor


The edit table defined in Entity:NetworkVar

 Returns

 boolean


Return true to allow editing

 Examples
 Example
From base/gamemode/variable_edit.lua
Makes Edit Properties... right click property admin only

function GM:CanEditVariable( ent, ply, key, val, editor )
    return ply:IsAdmin()
end


"GM/CanPlayerEnterVehicle"
GM:CanPlayerEnterVehicle( Player player, Vehicle vehicle, number role ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Determines whether or not the player can enter the vehicle.
Called just before GM:PlayerEnteredVehicle.

 Arguments

 Player player


The player

 Arguments

 Vehicle vehicle


The vehicle

 Arguments

 number role


 Returns

 boolean


False if the player is not allowed to enter the vehicle.


"GM/CanExitVehicle"
GM:CanExitVehicle( Vehicle veh, Player ply ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Determines if the player can exit the vehicle.

 Arguments

 Vehicle veh


The vehicle entity

 Arguments

 Player ply


The player

 Returns

 boolean


True if the player can exit the vehicle.

 Examples
 Example
Only lets player exit vehicle if it is not in motion.

function GM:CanExitVehicle( veh, ply )
    return ( veh:GetVelocity() == Vector( 0,0,0 ) )
end


"GM/CreateEntityRagdoll"
GM:CreateEntityRagdoll( Entity owner, Entity ragdoll ) 
 Description
Called when a serverside ragdoll of an entity has been created.
See GM:CreateClientsideRagdoll for clientside ragdolls.

 Arguments

 Entity owner


Entity that owns the ragdoll

 Arguments

 Entity ragdoll


The ragdoll entity


"GM/ChatText"
GM:ChatText( number index, string name, string text, string type ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example




 Description
Called when a message is printed to the chat box. Note, that this isnt working with player messages even though there are arguments for it.
For player messages see GM:PlayerSay and GM:OnPlayerChat

 Arguments

 number index


The index of the player.

 Arguments

 string name


The name of the player.

 Arguments

 string text


The text that is being sent.

 Arguments

 string type


Chat filter type. Possible values are:

 joinleave - Player join and leave messages
 namechange - Player name change messages
 servermsg - Server messages such as convar changes
 teamchange - Team changes?
 chat - (Obsolete?) Player chat?
 none - A fallback value


 Returns

 boolean


Return true to suppress the chat message

 Examples
 Example
Hides default join and leave messages in chat.

hook.Add( ChatText, hide_joinleave, function( index, name, text, typ )
	if ( typ == joinleave ) then return true end
end )


"GM/CreateClientsideRagdoll"
GM:CreateClientsideRagdoll( Entity entity, Entity ragdoll ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Called whenever an entity becomes a clientside ragdoll.
See GM:CreateEntityRagdoll for serverside ragdolls.

 Arguments

 Entity entity


The Entity that created the ragdoll

 Arguments

 Entity ragdoll


The ragdoll being created.

 Examples
 Example

hook.Add( CreateClientsideRagdoll, fade_out_corpses, function( entity, ragdoll )

	ragdoll:SetSaveValue( m_bFadingOut, true ) -- Set the magic internal variable that will cause the ragdoll to immediately start fading out

end )


"GM/CloseDermaMenus"
GM:CloseDermaMenus(  ) 
 Description
Called when derma menus are closed with CloseDermaMenus.


"GM/CaptureVideo"
GM:CaptureVideo(  ) 
 Description
Called each frame to record demos to video using IVideoWriter.



NOTE


This hook is called every frame regardless of whether or not a demo is being recorded


"GM/CanPlayerUnfreeze"
GM:CanPlayerUnfreeze( Player player, Entity entity, PhysObj phys ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Determines if the player can unfreeze the entity.

 Arguments

 Player player


The player

 Arguments

 Entity entity


The entity

 Arguments

 PhysObj phys


The physics object of the entity

 Returns

 boolean


True if they can unfreeze.


"GM/CheckPassword"
GM:CheckPassword( string steamID64, string ipAddress, string svPassword, string clPassword, string name ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Returns
8 Returns
9 Examples

9.1 Example




 Description
Called when a non local player connects to allow the Lua system to check the password.
The default behaviour in the base gamemodes emulates what would normally happen. If sv_password is set and its value matches the password passed in by the client - then they are allowed to join. If it isnt set it lets them in too.

 Arguments

 string steamID64


The 64bit Steam ID of the joining player, use util.SteamIDFrom64 to convert it to a STEAM_0: one.

 Arguments

 string ipAddress


The IP of the connecting client

 Arguments

 string svPassword


The current value of sv_password (the password set by the server)

 Arguments

 string clPassword


The password provided by the client

 Arguments

 string name


The name of the joining player

 Returns

 boolean


If the hook returns false then the player is disconnected

 Returns

 string


If returning false in the first argument, then this should be the disconnect message. This will default to #GameUI_ServerRejectBadPassword, which is Bad Password. translated to the clients language.

 Examples
 Example
A user access whitelist to the server
Available pre-defined messages can be found in ../sourceengine/resource/gameui_english.txt files.
Suggested messages are #GameUI_ConnectionFailed and #GameUI_ServerRejectLANRestrict

local allowed =
{
	[76561198012345678] = true, -- Me
	[76561198123456789] = true, -- Friend #1
	[76561198234567890] = true, -- Friend #2
}


hook.Add( CheckPassword, access_whitelist, function( steamID64 )
	if ( not allowed[steamID64] ) then
		return false, #GameUI_ServerRejectLANRestrict
	end
end )


"GM/ChatTextChanged"
GM:ChatTextChanged( string text ) 
 Description
Called whenever the content of the users chat input box is changed.

 Arguments

 string text


The new contents of the input box


"GM/CreateTeams"
GM:CreateTeams(  ) 
 Description
Teams are created within this hook using team.SetUp.



NOTE


This hook is called before GM:PreGamemodeLoaded.


"GM/CanPlayerSuicide"
GM:CanPlayerSuicide( Player player ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Determines if the player can kill themselves using the concommands kill or explode.

 Arguments

 Player player


The player

 Returns

 boolean


True if they can suicide.

 Examples
 Example
Makes suiciding only accessible for super admins.

function GM:CanPlayerSuicide( ply )
	return ply:IsSuperAdmin()
end


"GM/DoAnimationEvent"
GM:DoAnimationEvent( Player ply, number event, number data=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Called upon an animation event, this is the ideal place to call player animation functions such as Player:AddVCDSequenceToGestureSlot, Player:AnimRestartGesture and so on.

 Arguments

 Player ply


Player who is being animated

 Arguments

 number event


Animation event. See PLAYERANIMEVENT_ Enums

 Arguments

 number data=0


The data for the event. This is interpreted as an ACT_ Enums by PLAYERANIMEVENT_CUSTOM and PLAYERANIMEVENT_CUSTOM_GESTURE, or a sequence by PLAYERANIMEVENT_CUSTOM_SEQUENCE.

 Returns

 number


The translated activity to send to the weapon. See ACT_ Enums. Return ACT_INVALID if you dont want to send an activity.

 Examples
 Example
Fires a custom animation event with PLAYERANIMEVENT_ATTACK_GRENADE as the event, and 123 as the extra data on primary attack, and 321 as the secondary attack.
The player will play the item throw gesture on the primary attack, and the drop one on secondary.

function SWEP:PrimaryAttack()
	self.Owner:DoCustomAnimEvent( PLAYERANIMEVENT_ATTACK_GRENADE , 123 )
	self:SetNextPrimaryFire( CurTime() + 0.5 )
	self:SetNextSecondaryFire( CurTime() + 0.5 )
end

function SWEP:SecondaryAttack()
	self.Owner:DoCustomAnimEvent( PLAYERANIMEVENT_ATTACK_GRENADE , 321 )
	self:SetNextPrimaryFire( CurTime() + 0.5 )
	self:SetNextSecondaryFire( CurTime() + 0.5 )
end

hook.Add( DoAnimationEvent , AnimEventTest , function( ply , event , data )
	if ( event == PLAYERANIMEVENT_ATTACK_GRENADE ) then
		if ( data == 123 ) then
			ply:AnimRestartGesture( GESTURE_SLOT_GRENADE, ACT_GMOD_GESTURE_ITEM_THROW, true )
			return ACT_INVALID
		end
		
		if ( data == 321 ) then
			ply:AnimRestartGesture( GESTURE_SLOT_GRENADE, ACT_GMOD_GESTURE_ITEM_DROP, true )
			return ACT_INVALID
		end
	end
end )


"GM/DoPlayerDeath"
GM:DoPlayerDeath( Player ply, Entity attacker, CTakeDamageInfo dmg ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Handles the players death.
This hook is not called if the player is killed by Player:KillSilent. See GM:PlayerSilentDeath for that.

 GM:PlayerDeath is called after this hook
 GM:PostPlayerDeath is called after that





NOTE


Player:Alive returns true when this is called


 Arguments

 Player ply


The player

 Arguments

 Entity attacker


The entity that killed the player

 Arguments

 CTakeDamageInfo dmg


Damage info


"GM/DrawMonitors"
GM:DrawMonitors(  ) 
 Description
Called every frame before drawing the in-game monitors ( Breencast, in-game TVs, etc ), but doesnt seem to be doing anything, trying to render 2D or 3D elements fail.


"GM/DrawDeathNotice"
GM:DrawDeathNotice( number x, number y ) 
 Description
This hook is called every frame to draw all of the current death notices.

 Arguments

 number x


X position to draw death notices as a ratio

 Arguments

 number y


Y position to draw death notices as a ratio


"GM/DrawOverlay"
GM:DrawOverlay(  ) 
 Description
Called after all other 2D draw hooks are called. Draws over all VGUI Panels and HUDs.
Unlike GM:HUDPaint, this hook is called with the game paused and while the Camera SWEP is equipped.



NOTE


Only be called when r_drawvgui is enabled




NOTE


This is a rendering hook with a 2D rendering context.This means that the only rendering functions will work in it are functions with a 2D rendering context.


"GM/EntityFireBullets"
GM:EntityFireBullets( Entity ent, table data ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Called every time a bullet is fired from an entity.



WARNING


This hook is called directly from Entity:FireBullets. Due to this, you cannot call Entity:FireBullets inside this hook or an infinite loop will occur crashing the game.


 Arguments

 Entity ent


The entity that fired the bullet

 Arguments

 table data


The bullet data. See Bullet structure

 Returns

 boolean


Return true to apply all changes done to the bullet table.Return false to suppress the bullet.


"GM/CreateMove"
GM:CreateMove( CUserCmd cmd ) 
 Description
Allows you to change the players movements before theyre sent to the server.



NOTE


Due to this hook being clientside only, it could be overridden by the user allowing them to completely skip your logic, it is recommended to use GM:StartCommand in a shared file instead.


 Arguments

 CUserCmd cmd


The User Command data

 Returns

 boolean


Return true to:

 Disable Sandbox C menu screen clicking
 Disable Teammate nocollide (verification required)
 Prevent calling of C_BaseHLPlayer::CreateMove &amp; subsequently C_BasePlayer::CreateMove


"GM/DrawPhysgunBeam"
GM:DrawPhysgunBeam( Player ply, Weapon physgun, boolean enabled, Entity target, number physBone, Vector hitPos ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Returns
9 Examples

9.1 Example




 Description
Allows you to override physgun beam drawing.



BUG


This is still called when physgun_drawbeams is disabled.



 Arguments

 Player ply


Physgun owner

 Arguments

 Weapon physgun


The physgun

 Arguments

 boolean enabled


Is the beam enabled

 Arguments

 Entity target


Entity we are grabbing. This will be NULL if nothing is being held

 Arguments

 number physBone


ID of the physics bone (PhysObj) we are grabbing at. Use Entity:TranslatePhysBoneToBone to translate to an actual bone.

 Arguments

 Vector hitPos


Beam hit position relative to the physics bone (PhysObj) we are grabbing.

 Returns

 boolean


Return false to hide default beam

 Examples
 Example
Example code that will draw a direct line from the physgun to the target.

hook.Add( DrawPhysgunBeam, test, function( ply, wep, enabled, target, bone, deltaPos )

	-- Draw any physgun effects here that are not the beam.

	-- Not firing the physgun? Dont draw anything.
	if ( !enabled ) then return false end

	local clr = Color( 255, 0, 0 )

	-- White when not firing physgun, this will not work with the if above
	if ( !enabled ) then clr = Color( 255, 255, 255, 255 ) end

	local hitpos = ply:GetEyeTrace().HitPos
	if ( IsValid( target ) ) then
		local mt = target:GetBoneMatrix( bone )
		if ( target:TranslatePhysBoneToBone( bone ) &gt;= 0 ) then
			mt = target:GetBoneMatrix( target:TranslatePhysBoneToBone( bone ) )
		end

		hitpos = LocalToWorld( deltaPos, Angle( 0, 0, 0 ), mt:GetTranslation(), mt:GetAngles() )
	end

	local srcPos = wep:GetAttachment( 1 ).Pos
	if ( !ply:ShouldDrawLocalPlayer() ) then
		srcPos = ply:GetViewModel():GetAttachment( 1 ).Pos
	end

	render.DrawLine( srcPos, hitpos, clr )

	return false -- Hide original physics gun beam

end )


"GM/EntityKeyValue"
GM:EntityKeyValue( Entity ent, string key, string value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Called when a key-value pair is set on an entity, either by the engine (for example when map spawns) or Entity:SetKeyValue.
See ENTITY:KeyValue for a hook that works for scripted entities.
See WEAPON:KeyValue for a hook that works for scripted weapons.

 Arguments

 Entity ent


Entity that the keyvalue is being set on

 Arguments

 string key


Key of the key/value pair

 Arguments

 string value


Value of the key/value pair

 Returns

 string


If set, the value of the key-value pair will be overridden by this string.


"GM/EntityRemoved"
GM:EntityRemoved( Entity ent ) 
 Description
Called right before the removal of an entity.

 Arguments

 Entity ent


Entity being removed


"GM/ForceDermaSkin"
GM:ForceDermaSkin(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Called to allow override of the default Derma skin for all panels.



NOTE


This hook is only called on Lua start up, changing its value (or adding new hooks) after it has been already called will not have any effect.


 Returns

 string


A case sensitive Derma skin name to be used as default, registered previously via derma.DefineSkin.

Returning nothing, nil or invalid name will make it fallback to the Default skin.

 Examples
 Example
Example on how to use this hook. This will make that all panels

hook.Add( ForceDermaSkin, my_new_skin, function()
	return some_skin
end )


"GM/EntityTakeDamage"
GM:EntityTakeDamage( Entity target, CTakeDamageInfo dmg ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Called when an entity takes damage. You can modify all parts of the damage info in this hook.

 Arguments

 Entity target


The entity taking damage

 Arguments

 CTakeDamageInfo dmg


Damage info

 Returns

 boolean


Return true to completely block the damage event

 Examples
 Example
Explosion damage is reduced to players only.

function GM:EntityTakeDamage( target, dmginfo )

    if ( target:IsPlayer() and dmginfo:IsExplosionDamage() ) then
 
        dmginfo:ScaleDamage( 0.5 ) // Damage is now half of what you would normally take.

    end

end


 Examples
 Example
Players in vehicles takes halved damage.

function GM:EntityTakeDamage( target, dmginfo )

    if ( target:IsVehicle() ) then
 
        local ply = target:GetDriver()
        if ( IsValid( ply ) &amp;&amp; dmginfo:GetDamage() &gt; 1 ) then
            dmginfo:SetDamage( dmginfo:GetDamage() / 2 )
            ply:TakeDamageInfo( dmginfo )
            dmginfo:SetDamage( 0 )
        
        end

    end

end


"GM/EndEntityDriving"
GM:EndEntityDriving( Entity ent, Player ply ) 
 Description
Called right before an entity stops driving. Overriding this hook will cause it to not call drive.End and the player will not stop driving.

 Arguments

 Entity ent


The entity being driven

 Arguments

 Player ply


The player driving the entity


"GM/FindUseEntity"
GM:FindUseEntity( Player ply, Entity defaultEnt ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description

 Arguments

 Player ply


The player who initiated the use action.

 Arguments

 Entity defaultEnt


The entity that was chosen by the engine.

 Returns

 Entity


The entity to use instead of default entity


"GM/FinishChat"
GM:FinishChat(  ) 
 Description
Runs when user cancels/finishes typing.

 Examples
 Example
Prints User has closed the chatbox. when player closes their chat or sends the message.

hook.Add( FinishChat, ClientFinishTyping, function()
	print( User has closed the chatbox. )
end )


"GM/GetFallDamage"
GM:GetFallDamage( Player ply, number speed ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Called when a player takes damage from falling, allows to override the damage.

 Arguments

 Player ply


The player

 Arguments

 number speed


The fall speed

 Returns

 number


New fall damage

 Examples
 Example
The player takes a realistic amount of damage when they fall. Fall damage becomes the fall speed divided by 8.

function GM:GetFallDamage( ply, speed )
    return ( speed / 8 )
end


 Examples
 Example
Closely approximates the Counter-Strike: Source fall damage.

function GM:GetFallDamage( ply, speed )
	return math.max( 0, math.ceil( 0.2418*speed - 141.75 ) )
end


"GM/EntityNetworkedVarChanged"
GM:EntityNetworkedVarChanged( Entity ent, string name, any oldval, any newval ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Called when an NWVar is changed.



NOTE


Currently this hook only works for the NW2Var system (accessed by adding a 2 in between NW and Var for most NWVar functions), which will replace the original one at some point in the future




NOTE


This hook is fired before the client value is actually changed. Calling the GetNW function for the specified variable name within this hook will return the old value, not the current/updated one.


 Arguments

 Entity ent


The owner entity of changed NWVar

 Arguments

 string name


The name if changed NWVar

 Arguments

 any oldval


The old value of the NWVar

 Arguments

 any newval


The new value of the NWVar

 Examples
 Example
Example usage of the hook. Prints out all NWVar changes.

hook.Add( EntityNetworkedVarChanged,printchange, print )

-- Trigger a change!
Entity( 1 ):SetNWString( UserGroup, owner )
Output:

Player [1][Player1]	UserGroup	superadmin	owner


"GM/FinishMove"
GM:FinishMove( Player ply, CMoveData mv ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Called after GM:Move , applies all the changes from the CMoveData to the player.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Player ply


Player

 Arguments

 CMoveData mv


Movement data

 Returns

 boolean


Return true to suppress default engine behavior, i.e. declare that you have already moved the player according to the move data in a custom way.


"GM/GetGameDescription"
GM:GetGameDescription(  ) 
 Description
Called when the game(server) needs to update the text shown in the server browser as the gamemode.

 Returns

 string


The text to be shown in the server browser as the gamemode


"GM/GetTeamColor"
GM:GetTeamColor( Entity ent ) 
 Description
Returns the color for the given entitys team. This is used in chat and deathnotice text.

 Arguments

 Entity ent


Entity

 Returns

 table


Team Color


"GM/GetMotionBlurValues"
GM:GetMotionBlurValues( number horizontal, number vertical, number forward, number rotational ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Returns
8 Returns
9 Returns
10 Examples

10.1 Example




 Description
Allows you to modify the Source Engines motion blur shaders.

 Arguments

 number horizontal


The amount of horizontal blur.

 Arguments

 number vertical


The amount of vertical blur.

 Arguments

 number forward


The amount of forward/radial blur.

 Arguments

 number rotational


The amount of rotational blur.

 Returns

 number


New amount of horizontal blur.

 Returns

 number


New amount of vertical blur.

 Returns

 number


New amount of forward/radial blur.

 Returns

 number


New amount of rotational blur.

 Examples
 Example
Makes your forward/radial blur pulse.

local function GetNewMotionBlurValues( h, v, f, r )
    f = f * math.sin( CurTime() * 5 )
    return h, v, f, r
end
hook.Add( GetMotionBlurValues, GetNewMotionBlurValues, GetNewMotionBlurValues )
Output:

Your radial blur pulses.


"GM/GameContentChanged"
GM:GameContentChanged(  ) 
 Description
Called to refresh menu content once it has initialized or something has been mounted.


"GM/GravGunPunt"
GM:GravGunPunt( Player ply, Entity ent ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Called when an entity is about to be punted with the gravity gun (primary fire).
By default this function makes ENTITY:GravGunPunt work in Sandbox derived gamemmodes.

 Arguments

 Player ply


The player wielding the gravity gun

 Arguments

 Entity ent


The entity the player is attempting to punt

 Returns

 boolean


Return true to allow and false to disallow.


"GM/EntityEmitSound"
GM:EntityEmitSound( table data ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Called whenever a sound has been played. This will not be called clientside if the server played the sound without the client also calling Entity:EmitSound.



BUG


This is not called for scripted sequences.



 Arguments

 table data


Information about the played sound. Changes done to this table can be applied by returning true from this hook.See EmitSoundInfo structure.

 Returns

 boolean


Return true to apply all changes done to the data table.Return false to prevent the sound from playing.Return nil or nothing to play the sound without altering it.

 Examples
 Example
Slows down all sounds to reflect game.SetTimeScale.

hook.Add( EntityEmitSound, TimeWarpSounds, function( t )
	
	local p = t.Pitch
	
	if ( game.GetTimeScale()!= 1 ) then
		p = p * game.GetTimeScale()
	end
	
	if ( GetConVarNumber( host_timescale )!= 1 &amp;&amp; GetConVarNumber( sv_cheats ) &gt;= 1 ) then
		p = p * GetConVarNumber( host_timescale )
	end
	
	if ( p!= t.Pitch ) then
		t.Pitch = math.Clamp( p, 0, 255 )
		return true
	end
	
	if ( CLIENT &amp;&amp; engine.GetDemoPlaybackTimeScale()!= 1 ) then
		t.Pitch = math.Clamp( t.Pitch * engine.GetDemoPlaybackTimeScale(), 0, 255 )
		return true
	end
	
end )


"GM/GravGunPickupAllowed"
GM:GravGunPickupAllowed( Player ply, Entity ent ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Called every tick to poll whether a player is allowed to pick up an entity with the gravity gun or not.
See GM:AllowPlayerPickup for the +USE pickup variant.
Calls ENTITY:GravGunPickupAllowed on the entity being hovered every frame in Sandbox-derived gamemodes.

 Arguments

 Player ply


The player wielding the gravity gun

 Arguments

 Entity ent


The entity the player is attempting to pick up

 Returns

 boolean


Return true to allow entity pick up


"GM/GetTeamNumColor"
GM:GetTeamNumColor( number team ) 
 Description
Returns the team color for the given team index.

 Arguments

 number team


Team index

 Returns

 table


Team Color


"GM/GUIMousePressed"
GM:GUIMousePressed( number mouseCode, Vector aimVector ) 
 Description
Called whenever a players presses a mouse key on the context menu in Sandbox or on any panel derived from CGModBase, such as the panel used by gui.EnableScreenClicker and the panel used by Panel:ParentToHUD.
See GM:VGUIMousePressed for a hook that is called on all VGUI elements.

 Arguments

 number mouseCode


The key that the player pressed using MOUSE_ Enums.

 Arguments

 Vector aimVector


A normalized direction vector local to the camera. Internally, this is gui.ScreenToVector( gui.MousePos() ).


"GM/GrabEarAnimation"
GM:GrabEarAnimation( Player ply ) 
 Description
Override this hook to disable/change ear-grabbing in your gamemode.

 Arguments

 Player ply


Player


"GM/GravGunOnPickedUp"
GM:GravGunOnPickedUp( Player ply, Entity ent ) 
 Description
Called when an entity is picked up by a gravity gun.

 Arguments

 Player ply


The player wielding the gravity gun

 Arguments

 Entity ent


The entity that has been picked up by the gravity gun


"GM/GetPreferredCarryAngles"
GM:GetPreferredCarryAngles( Entity ent ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Called to determine preferred carry angles for the entity. It works for both, +use pickup and gravity gun pickup.



WARNING


Due to nature of the gravity gun coding in multiplayer, this hook MAY seem to not work ( but rest assured it does ), due to clientside prediction not knowing the carry angles. The +use pickup doesnt present this issue as it doesnt predict the player carrying the object clientside ( as you may notice by the prop lagging behind in multiplayer )




NOTE


This hook can not override preferred carry angles of props such as the sawblade and the harpoon.


 Arguments

 Entity ent


The entity to generate carry angles for

 Returns

 Angle


The preferred carry angles for the entity.

 Examples
 Example
Makes all pickupable entities default to Angle( 0, 0, 0 ) relatively to players aim direction.

hook.Add( GetPreferredCarryAngles, MyPreferredCarryAngles, function( ent )
	return Angle( 0, 0, 0 )
end )


"GM/GravGunOnDropped"
GM:GravGunOnDropped( Player ply, Entity ent ) 
 Description
Called when an entity is released by a gravity gun.

 Arguments

 Player ply


Player who is wielding the gravity gun

 Arguments

 Entity ent


The entity that has been dropped


"GM/HandlePlayerJumping"
GM:HandlePlayerJumping( Player ply, number velocity ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Allows to override player jumping animations.

 Arguments

 Player ply


The player

 Arguments

 number velocity


Players velocity

 Returns

 boolean


Return true if weve changed/set the animation, false otherwise


"GM/GUIMouseDoublePressed"
GM:GUIMouseDoublePressed( number mouseCode, Vector aimVector ) 
 Description
Called when the mouse has been double clicked on any panel derived from CGModBase, such as the panel used by gui.EnableScreenClicker and the panel used by Panel:ParentToHUD.
By default this hook calls GM:GUIMousePressed.

 Arguments

 number mouseCode


The code of the mouse button pressed, see MOUSE_ Enums

 Arguments

 Vector aimVector


A normalized vector pointing in the direction the client has clicked


"GM/GUIMouseReleased"
GM:GUIMouseReleased( number mouseCode, Vector aimVector ) 
 Description
Called whenever a players releases a mouse key on the context menu in Sandbox or on any panel derived from CGModBase, such as the panel used by gui.EnableScreenClicker and the panel used by Panel:ParentToHUD.

 Arguments

 number mouseCode


The key the player released, see MOUSE_ Enums

 Arguments

 Vector aimVector


A normalized direction vector local to the camera. Internally this is gui.ScreenToVector( gui.MousePos() ).


"GM/HandlePlayerDucking"
GM:HandlePlayerDucking( Player ply, number velocity ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Allows to override player crouch animations.

 Arguments

 Player ply


The player

 Arguments

 number velocity


Players velocity

 Returns

 boolean


Return true if weve changed/set the animation, false otherwise


"GM/HandlePlayerSwimming"
GM:HandlePlayerSwimming( Player ply, number velocity ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Allows to override player swimming animations.

 Arguments

 Player ply


The player

 Arguments

 number velocity


Players velocity

 Returns

 boolean


Return true if weve changed/set the animation, false otherwise


"GM/HandlePlayerVaulting"
GM:HandlePlayerVaulting( Player ply, number velocity ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Allows to override player flying ( in mid-air, not noclipping ) animations.

 Arguments

 Player ply


The player

 Arguments

 number velocity


Players velocity

 Returns

 boolean


Return true if weve changed/set the animation, false otherwise


"GM/HandlePlayerDriving"
GM:HandlePlayerDriving( Player ply ) 
 Description
Allows to override player driving animations.

 Arguments

 Player ply


Player to process

 Returns

 boolean


Return true if weve changed/set the animation, false otherwise


"GM/HUDAmmoPickedUp"
GM:HUDAmmoPickedUp( string itemName, number amount ) 
 Description
Called when the client has picked up ammo. Override to disable default HUD notification.

 Arguments

 string itemName


Name of the item (ammo) picked up

 Arguments

 number amount


Amount of the item (ammo) picked up


"GM/HideTeam"
GM:HideTeam(  ) 
 Description
Hides the team selection panel.


"GM/HUDDrawScoreBoard"
GM:HUDDrawScoreBoard(  ) 
 Description
Called every frame to render the scoreboard.
It is recommended to use Derma and VGUI for this job instead of this hook. Called right after GM:HUDPaint.



NOTE


This is a rendering hook with a 2D rendering context.This means that the only rendering functions will work in it are functions with a 2D rendering context.


"GM/HandlePlayerLanding"
GM:HandlePlayerLanding( Player ply, number velocity, boolean onGround ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Allows to override player landing animations.

 Arguments

 Player ply


The player

 Arguments

 number velocity


Players velocity

 Arguments

 boolean onGround


Was the player on ground?

 Returns

 boolean


Return true if weve changed/set the animation, false otherwise


"GM/HUDDrawPickupHistory"
GM:HUDDrawPickupHistory(  ) 
 Description
Renders the HUD pick-up history. Override to hide default or draw your own HUD.


"GM/HUDDrawTargetID"
GM:HUDDrawTargetID(  ) 
 Description
Called from GM:HUDPaint to draw player info when you hover over a player with your crosshair or mouse.

 Examples
 Example
This code will turn off the player and health appearing when you look at them.

function GM:HUDDrawTargetID()
end


"GM/HUDPaint"
GM:HUDPaint(  ) 
 Description
Called whenever the HUD should be drawn. Called right before GM:HUDDrawScoreBoard and after GM:HUDPaintBackground.
Not called when the Camera SWEP is equipped. See also GM:DrawOverlay.



NOTE


Only be called when r_drawvgui is enabled and the game is not paused




NOTE


This is a rendering hook with a 2D rendering context.This means that the only rendering functions will work in it are functions with a 2D rendering context.


 Examples
 Example
Draws a transparent black box in the top left corner of the screen.

hook.Add( HUDPaint, HUDPaint_DrawABox, function()
	surface.SetDrawColor( 0, 0, 0, 128 )
	surface.DrawRect( 50, 50, 128, 128 )
end )


"GM/HUDShouldDraw"
GM:HUDShouldDraw( string name ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Called when the Gamemode is about to draw a given element on the clients HUD (heads-up display).



NOTE


This hook is called HUNDREDS of times per second (more than 5 times per frame on average). You shouldnt be performing any computationally intensive operations.


 Arguments

 string name


The name of the HUD element. You can find a full list of HUD elements for this hook here.

 Returns

 boolean


Return false to prevent the given element from being drawn on the clients screen.

 Examples
 Example
Hides the default health and battery (armor) HUD elements, while still allowing the display of other elements to be controlled by other addons.

local hide =
{
	[CHudHealth] = true,
	[CHudBattery] = true
}


hook.Add( HUDShouldDraw, HideHUD, function( name )
	if ( hide[ name ] ) then return false end

	-- Dont return anything here, it may break other addons that rely on this hook.
end )


"GM/HUDPaintBackground"
GM:HUDPaintBackground(  ) 
 Description
Called after GM:HUDPaint when the HUD background is being drawn.
Things rendered in this hook will always appear behind things rendered in GM:HUDPaint.



NOTE


This is a rendering hook with a 2D rendering context.This means that the only rendering functions will work in it are functions with a 2D rendering context.


"GM/HUDItemPickedUp"
GM:HUDItemPickedUp( string itemName ) 
 Description
Called when an item has been picked up. Override to disable the default HUD notification.

 Arguments

 string itemName


Name of the picked up item


"GM/HandlePlayerNoClipping"
GM:HandlePlayerNoClipping( Player ply, number velocity ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Allows to override player noclip animations.

 Arguments

 Player ply


The player

 Arguments

 number velocity


Players velocity

 Returns

 boolean


Return true if weve changed/set the animation, false otherwise


"GM/InitPostEntity"
GM:InitPostEntity(  ) 
 Description
Called after all the entities are initialized.



NOTE




 Examples
 Example
Some message will be printed in the console when the entities initialize.

function GM:InitPostEntity()
	print( All Entities have initialized )
end

-- That way you are overriding the default hook
-- you can use hook.Add to make more functions get called when this event occurs

hook.Add( InitPostEntity, some_unique_name, function()
	print( Initialization hook called )
end )
Output:

Initialization hook called
All Entities have initialized


"GM/InputMouseApply"
GM:InputMouseApply( CUserCmd cmd, number x, number y, Angle ang ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example




 Description
Allows you to modify the supplied User Command with mouse input. This could be used to make moving the mouse do funky things to view angles.

 Arguments

 CUserCmd cmd


User command

 Arguments

 number x


The amount of mouse movement across the X axis this frame

 Arguments

 number y


The amount of mouse movement across the Y axis this frame

 Arguments

 Angle ang


The current view angle

 Returns

 boolean


Return true if we modified something

 Examples
 Example
Prevents all players from turning with the mouse.

hook.Add( InputMouseApply, FreezeTurning, function( cmd )
	cmd:SetMouseX( 0 )
	cmd:SetMouseY( 0 )
	
	return true
end )


"GM/Initialize"
GM:Initialize(  ) 
 Description
Called after the gamemode loads and starts.

 Examples
 Example
hi will be printed to the console when the gamemode initializes.

function GM:Initialize()
	print( hi )
end

-- That way you are overriding the default hook
-- you can use hook.Add to make more functions get called on initialization
local function init()
	print( Initialization hook called )
end
hook.Add( Initialize, some_unique_name, init )
Output:

Initializtion hook called
hi


"GM/IsSpawnpointSuitable"
GM:IsSpawnpointSuitable( Player ply, Entity spawnpoint, boolean makeSuitable ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Check if a player can spawn at a certain spawnpoint.

 Arguments

 Player ply


The player who is spawned

 Arguments

 Entity spawnpoint


The spawnpoint entity (on the map)

 Arguments

 boolean makeSuitable


If this is true, itll kill any players blocking the spawnpoint

 Returns

 boolean


Return true to indicate that the spawnpoint is suitable (Allow for the player to spawn here), false to prevent spawning

 Examples
 Example
This will check if anyone is blocking the spawnpoint. If someone is, then itll, depending on the bMakeSuitable value, kill the player, or return false.

function GM:IsSpawnpointSuitable( ply, spawnpointent, bMakeSuitable )

	local Pos = spawnpointent:GetPos()

	-- Note that were searching the default hull size here for a player in the way of our spawning.
	-- This seems pretty rough, seeing as our players hull could be different.. but it should do the job
	-- ( HL2DM kills everything within a 128 unit radius )
	local Ents = ents.FindInBox( Pos + Vector( -16, -16, 0 ), Pos + Vector( 16, 16, 72 ) )

	if ( ply:Team() == TEAM_SPECTATOR or ply:Team() == TEAM_UNASSIGNED ) then return true end

	local Blockers = 0

	for k, v in pairs( Ents ) do
		if ( IsValid( v ) &amp;&amp; v:GetClass() == player &amp;&amp; v:Alive() ) then

			Blockers = Blockers + 1

			if ( bMakeSuitable ) then
				v:Kill()
			end

		end
	end

	if ( bMakeSuitable ) then return true end
	if ( Blockers &gt; 0 ) then return false end
	return true

end
Output:

true or false


"GM/KeyPress"
GM:KeyPress( Player ply, number key ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Called whenever a player pressed a key included within the IN keys.
For a more general purpose function that handles all kinds of input, see GM:PlayerButtonDown



WARNING


Due to this being a predicted hook, ParticleEffects created only serverside from this hook will not be networked to the client, so make sure to do that on both realms




NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Player ply


The player pressing the key. If running client-side, this will always be LocalPlayer

 Arguments

 number key


The key that the player pressed using IN_ Enums.

 Examples
 Example
hi will be printed to the console when the player presses the IN_USE (E) key.

hook.Add( KeyPress, keypress_use_hi, function( ply, key )
	if ( key == IN_USE ) then
		print( hi )
	end
end )
Output:

hi
 Examples
 Example
When a player tries to jump, they will be shot straight up in the air.

hook.Add( KeyPress, keypress_jump_super, function( ply, key )
    if ( key == IN_JUMP ) then
        ply:SetVelocity( ply:GetVelocity() + Vector( 0, 0, 1000 ) )
    end
end )


"GM/KeyRelease"
GM:KeyRelease( Player ply, number key ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Runs when a IN key was released by a player.
For a more general purpose function that handles all kinds of input, see GM:PlayerButtonUp



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Player ply


The player releasing the key. If running client-side, this will always be LocalPlayer

 Arguments

 number key


The key that the player released using IN_ Enums.

 Examples
 Example
hi will be printed to the console when the player releases the IN_USE (E) key.

function GM:KeyRelease( player, key )
    if ( key == IN_USE ) then
        print( hi )
    end
end
Output:

hi


"GM/LoadGModSave"
GM:LoadGModSave( string data, string map, number timestamp ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Called from gm_load when the game should load a map.

 Arguments

 string data


 Arguments

 string map


 Arguments

 number timestamp


"GM/HUDWeaponPickedUp"
GM:HUDWeaponPickedUp( Weapon weapon ) 
 Description
Called when a weapon has been picked up. Override to disable the default HUD notification.

 Arguments

 Weapon weapon


The picked up weapon


"GM/MouthMoveAnimation"
GM:MouthMoveAnimation( Player ply ) 
 Description
Override this gamemode function to disable mouth movement when talking on voice chat.

 Arguments

 Player ply


Player in question


"GM/MenuStart"
GM:MenuStart(  ) 
 Description
Called when menu.lua has finished loading.


"GM/Move"
GM:Move( Player ply, CMoveData mv ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
The Move hook is called for you to manipulate the players MoveData.
You shouldnt adjust the players position in any way in the move hook. This is because due to prediction errors, the netcode might run the move hook multiple times as packets arrive late. Therefore you should only adjust the movedata construct in this hook.
Generally you shouldnt have to use this hook - if you want to make a custom move type you should look at the drive system.
This hook is called after GM:PlayerTick.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Player ply


Player

 Arguments

 CMoveData mv


Movement information

 Returns

 boolean


Return true to suppress default engine action

 Examples
 Example
A noclip move type

function GM:Move( ply, mv )

	--
	-- Set up a speed, go faster if ( shift is held down
	--
	local speed = 0.0005 * FrameTime()
	if ( mv:KeyDown( IN_SPEED ) ) then speed = 0.005 * FrameTime() end

	--
	-- Get information from the movedata
	--
	local ang = mv:GetMoveAngles()
	local pos = mv:GetOrigin()
	local vel = mv:GetVelocity()

	--
	-- Add velocities. This can seem complicated. On the first line
	-- were basically saying get the forward vector, ) then multiply it
	-- by our forward speed ( which will be &gt; 0 if ( were holding W, &lt; 0 if ( were
	-- holding S and 0 if ( were holding neither ) - and add that to velocity.
	-- We do that for right and up too, which gives us our free movement.
	--
	vel = vel + ang:Forward() * mv:GetForwardSpeed() * speed
	vel = vel + ang:Right() * mv:GetSideSpeed() * speed
	vel = vel + ang:Up() * mv:GetUpSpeed() * speed

	--
	-- We dont want our velocity to get out of hand so we apply
	-- a little bit of air resistance. If no keys are down we apply
	-- more resistance so we slow down more.
	--
	if ( math.abs( mv:GetForwardSpeed() ) + math.abs( mv:GetSideSpeed() ) + math.abs( mv:GetUpSpeed() ) &lt; 0.1 ) then
	vel = vel * 0.90
	else
	vel = vel * 0.99
	end

	--
	-- Add the velocity to the position ( this is the movement )
	--
	pos = pos + vel

	--
	-- We dont set the newly calculated values on the entity itself
	-- we instead store them in the movedata. They should get applied
	-- in the FinishMove hook.
	--
	mv:SetVelocity( vel )
	mv:SetOrigin( pos )

	--
	-- Return true to not use the default behavior
	--
	return true

end


"GM/OnContextMenuClose"
GM:OnContextMenuClose(  ) 
 Description
Called when the context menu was closed.


"GM/NetworkEntityCreated"
GM:NetworkEntityCreated( Entity ent ) 
 Description
Called when an entity has been created over the network.

 Arguments

 Entity ent


Created entity


"GM/OnChatTab"
GM:OnChatTab( string text ) 
 Description
Called when the local player presses TAB while having their chatbox opened.

 Arguments

 string text


The currently typed into chatbox text

 Returns

 string


What should be placed into the chatbox instead of what currently is when player presses tab


"GM/NeedsDepthPass"
GM:NeedsDepthPass(  ) 
 Description
Returning true in this hook will cause it to render depth buffers defined with render.GetResolvedFullFrameDepth.

 Returns

 boolean


Render depth buffer


"GM/OnLuaError"
GM:OnLuaError( string error, number realm, string name, number id ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Called when a Lua error occurs, only works in the Menu realm.



WARNING


Modify menu state Lua code at your own risk!


 Arguments

 string error


The error that occurred.

 Arguments

 number realm


Where the Lua error took place

 Arguments

 string name


Title of the addon that is creating the Lua errors

 Arguments

 number id


Steam Workshop ID of the addon creating Lua errors, if it is an addon.

 Examples
 Example
Code from garrysmod/lua/menu/errors.lua

hook.Add( OnLuaError, MenuErrorHandler, function( str, realm, addontitle, addonid )

	local text = Something is creating script errors

	--
	-- This error is caused by a specific addon
	--
	if ( isstring( addonid ) ) then

		--
		-- Down Vote
		--
		-- steamworks.Vote( addonid, false )

		--
		-- Disable Naughty Addon
		--
		--timer.Simple( 5, function()
		--	MsgN( Disabling addon , addontitle,  due to lua errors )
		--	steamworks.SetShouldMountAddon( addonid, false )
		--	steamworks.ApplyAddons()
		--end )

		text = The addon \ .. addontitle .. \ is creating errors, check the console for details

	end

	if ( ( addonid == nil ) then addonid = 0 end

	if ( Errors[ addonid ] ) then

		Errors[ addonid ].times	= Errors[ addonid ].times + 1
		Errors[ addonid ].last	= SysTime()

		return
	end

	local error =
	{
		first	= SysTime(),
		last	= SysTime(),
		times	= 1,
		title	= addontitle,
		x		= 32,
		text	= text
	}


	Errors[ addonid ] = error

end )


"GM/OnGamemodeLoaded"
GM:OnGamemodeLoaded(  ) 
 Description
Called when the gamemode is loaded.
LocalPlayer() returns NULL at the time this is run.


"GM/OnNPCKilled"
GM:OnNPCKilled( NPC npc, Entity attacker, Entity inflictor ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Called whenever an NPC is killed.

 Arguments

 NPC npc


The killed NPC

 Arguments

 Entity attacker


The NPCs attacker, the entity that gets the kill credit, for example a player or an NPC.

 Arguments

 Entity inflictor


Death inflictor. The entity that did the killing. Not necessarily a weapon.


"GM/OnDamagedByExplosion"
GM:OnDamagedByExplosion( Player ply, CTakeDamageInfo dmginfo ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Called when a player has been hurt by an explosion. Override to disable default sound effect.

 Arguments

 Player ply


Player who has been hurt

 Arguments

 CTakeDamageInfo dmginfo


Damage info from explsion

 Examples
 Example
Disables the high pitched ringing sound effect.
Note that this hook does not have a return value, and instead by default it calls Player:SetDSP( 35, false ) in the base gamemode.

hook.Add( OnDamagedByExplosion, DisableSound, function()
	return true
end )


"GM/OnEntityCreated"
GM:OnEntityCreated( Entity entity ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Called right after the Entity has been made visible to Lua.
Invalid NPCs passed through this hook are used by the engine to precache things like models and sounds, so always check their validity with IsValid.



WARNING


Removing the created entity during this event can lead to unexpected problems. Use timer.Simple( 0, .... ) to safely remove the entity.


 Arguments

 Entity entity


The entity

 Examples
 Example
When a prop spawns it yells.

function GM:OnEntityCreated( ent )
	if ( ent:GetClass() == prop_physics ) then
		ent:EmitSound( vo/npc/male01/no02.wav )
	end
end


 Examples
 Example
Adds all props and ragdolls into a list. More efficient alternative to looping over ents.GetAll().

local TrackedEnts =
{
	[ prop_physics ] = true,
	[ prop_ragdoll ] = true
}


local EntList = {}


hook.Add( OnEntityCreated, SoftEntList, function( ent )
	if ( not ( ent:IsValid() and TrackedEnts[ ent:GetClass() ] ) ) then return end
	
	EntList[ ent:EntIndex() ] = ent
end )


"GM/OnPhysgunReload"
GM:OnPhysgunReload( Weapon physgun, Player ply ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Called when a player reloads with the physgun. Override this to disable default unfreezing behavior.

 Arguments

 Weapon physgun


The physgun in question

 Arguments

 Player ply


The player wielding the physgun

 Returns

 boolean


Whether the player can reload with the physgun or not


"GM/OnPlayerChat"
GM:OnPlayerChat( Player ply, string text, boolean teamChat, boolean isDead ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example


8 Examples

8.1 Example




 Description
Called whenever a player sends a chat message. For the serverside equivalent, see GM:PlayerSay.

 Arguments

 Player ply


The player

 Arguments

 string text


The messages text

 Arguments

 boolean teamChat


Is the player typing in team chat?

 Arguments

 boolean isDead


Is the player dead?

 Returns

 boolean


Should the message be suppressed?

 Examples
 Example
Code from base gamemode. See garrysmod/gamemodes/base/gamemode/cl_init.lua#L139

function GM:OnPlayerChat( player, strText, bTeamOnly, bPlayerIsDead )
 
	--
	-- Ive made this all look more complicated than it is. Heres the easy version
	--
	-- chat.AddText( player, Color( 255, 255, 255 ), : , strText )
	--

	local tab = {}


	if ( bPlayerIsDead ) then
		table.insert( tab, Color( 255, 30, 40 ) )
		table.insert( tab, *DEAD*  )
	end

	if ( bTeamOnly ) then
		table.insert( tab, Color( 30, 160, 40 ) )
		table.insert( tab, ( TEAM )  )
	end

	if ( IsValid( player ) ) then
		table.insert( tab, player )
	else
		table.insert( tab, Console )
	end

	table.insert( tab, Color( 255, 255, 255 ) )
	table.insert( tab, : ..strText )

	chat.AddText( unpack( tab ) )

	return true
 
end


 Examples
 Example
How you could create a clientside only chat command.

hook.Add( OnPlayerChat, HelloCommand, function( ply, strText, bTeam, bDead ) 
    if ( ply!= LocalPlayer() ) then return end

	strText = string.lower( strText ) -- make the string lower case

	if ( strText == /hello ) then -- if ( the player typed /hello ) then
		print( Hello world! ) -- print Hello world to the console
		return true -- this suppresses the message from being shown
	end

end )
Output:

Prints Hello world! to the console when you type /hello in the chat.


"GM/OnPhysgunFreeze"
GM:OnPhysgunFreeze( Entity weapon, PhysObj physobj, Entity ent, Player ply ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example




 Description
Called when a player freezes an entity with the physgun.



BUG


This is not called for players or NPCs being held with the physgun.



 Arguments

 Entity weapon


The weapon that was used to freeze the entity.

 Arguments

 PhysObj physobj


Physics object of the entity.

 Arguments

 Entity ent


The target entity.

 Arguments

 Player ply


The player who tried to freeze the entity.

 Returns

 boolean


Allows you to override whether the player can freeze the entity

 Examples
 Example
Only allows admins to freeze things.

hook.Add( OnPhysgunFreeze, PhysFreeze, function( weapon, phys, ent, ply )

  	if ( !ply:IsAdmin() ) then

		return false

	end

end )


"GM/OnContextMenuOpen"
GM:OnContextMenuOpen(  ) 
 Description
Called when the context menu is opened.


"GM/OnPlayerHitGround"
GM:OnPlayerHitGround( Entity player, boolean inWater, boolean onFloater, number speed ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example




 Description
Called when a player makes contact with the ground.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Entity player


Player

 Arguments

 boolean inWater


Did the player land in water?

 Arguments

 boolean onFloater


Did the player land on an object floating in the water?

 Arguments

 number speed


The speed at which the player hit the ground

 Returns

 boolean


Return true to suppress default action

 Examples
 Example
Explode players when they hit the ground too hard.

function GM:OnPlayerHitGround( ply, inWater, onFloater, speed )
    if ( speed &gt; 1000 &amp;&amp;!inWater ) then
        local exp = ents.Create( env_explosion )
        exp:SetPos( ply:GetPos() )
        exp:Spawn()
        exp:SetKeyValue( iMagnitude, 0 )
        exp:Fire( Explode, 0, 0 )
 
        ply:Kill()
    end
end


"GM/NetworkIDValidated"
GM:NetworkIDValidated( string name, string steamID ) 
 Description
Called when a player has been validated by Steam.

 Arguments

 string name


Player name

 Arguments

 string steamID


Player SteamID


"GM/NotifyShouldTransmit"
GM:NotifyShouldTransmit( Entity ent, boolean shouldtransmit ) 
 Description
Called whenever this entity changes its transmission state for this LocalPlayer, such as exiting or re entering the PVS.



NOTE


This is the best place to handle the reset of Entity:SetPredictable, as this would be usually called when the player lags and requests a full packet update




NOTE


When the entity stops transmitting, Entity:IsDormant will only return true after this hook


 Arguments

 Entity ent


The entity that changed its transmission state.

 Arguments

 boolean shouldtransmit


True if we started transmitting to this client and false if we stopped.


"GM/OnSpawnMenuClose"
GM:OnSpawnMenuClose(  ) 
 Description
Called when a player releases the +menu bind on their keyboard, which is bound to Q by default.


"GM/OnTextEntryLoseFocus"
GM:OnTextEntryLoseFocus( Panel panel ) 
 Description
Called when DTextEntry loses focus.

 Arguments

 Panel panel


The panel that lost focus


"GM/OnSpawnMenuOpen"
GM:OnSpawnMenuOpen(  ) 
 Description
Called when a player presses the +menu bind on their keyboard, which is bound to Q by default.


"GM/OnAchievementAchieved"
GM:OnAchievementAchieved( Player ply, number achievement ) 
 Description
Called when a player has achieved an achievement. You can get the name and other information from an achievement ID with the achievements library.

 Arguments

 Player ply


The player that earned the achievement

 Arguments

 number achievement


The index of the achievement


"GM/OnTextEntryGetFocus"
GM:OnTextEntryGetFocus( Panel panel ) 
 Description
Called when a DTextEntry gets focus.
This hook is run from DTextEntry:OnGetFocus and PANEL:OnMousePressed of DTextEntry.

 Arguments

 Panel panel


The panel that got focus


"GM/OnUndo"
GM:OnUndo( string name, string customText ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Called when the player undoes something.

 Arguments

 string name


The name of the undo action

 Arguments

 string customText


The custom text for the undo, set by undo.SetCustomUndoText

 Examples
 Example
Print a message when the player undoes something.

function GM:OnUndo( name, customText )
     if ( customText!= nil ) then
          MsgN( Undone  .. customText )
     else
          MsgN( Undone  .. name )
     end
end
Output:

Undone &lt;action&gt;


"GM/OnReloaded"
GM:OnReloaded(  ) 
 Description
Called when gamemode has been reloaded by auto refresh.



NOTE


It seems that this event can be triggered more than once for a single refresh event.


"GM/OnPlayerChangedTeam"
GM:OnPlayerChangedTeam( Player ply, number oldTeam, number newTeam ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Called when a player has changed team using GM:PlayerJoinTeam.



WARNING


This hook will not work with hook.Add and it is only called manually from GM:PlayerJoinTeam by the base gamemode


 Arguments

 Player ply


Player who has changed team

 Arguments

 number oldTeam


Index of the team the player was originally in

 Arguments

 number newTeam


Index of the team the player has changed to


"GM/PhysgunPickup"
GM:PhysgunPickup( Player player, Entity entity ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Called whenever a player picks up an entity with the Physgun.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Player player


The player that is picking up using the phys gun.

 Arguments

 Entity entity


The entity that is being picked up.

 Returns

 boolean


Returns whether the player can pick up the entity or not.

 Examples
 Example
Allows Admins to pick up players.

local function PlayerPickup( ply, ent )
	if ( ply:IsAdmin() and ent:GetClass():lower() == player ) then
		return true
	end
end
hook.Add( PhysgunPickup, Allow Player Pickup, PlayerPickup )


"GM/PlayerBindPress"
GM:PlayerBindPress( Player ply, string bind, boolean pressed ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Runs when a bind has been pressed. Allows to block commands.



NOTE


By using the alias console command, this hook can be effectively circumvented




NOTE


To stop the user from using +attack, +left and any other movement commands of the sort, please look into using GM:StartCommand instead




BUG


This is not called when the key is released (the third argument will always be true).





BUG


This does not run for function keys binds (F1-F12).



 Arguments

 Player ply


The player who used the command; this will always be equal to LocalPlayer

 Arguments

 string bind


The bind command

 Arguments

 boolean pressed


If the bind was activated or deactivated

 Returns

 boolean


Return true to prevent the bind

 Examples
 Example
Prevents players from using flashlight.

function GM:PlayerBindPress( ply, bind, pressed )
	--To block more commands, you could add another line similar to
	--the one below, just replace the command
	if ( string.find( bind, impulse 100 ) ) then return true end
end


"GM/PhysgunDrop"
GM:PhysgunDrop( Player ply, Entity ent ) 
 Description
Called when a player drops an entity with the Physgun.

 Arguments

 Player ply


The player who dropped an entitiy

 Arguments

 Entity ent


The dropped entity


"GM/OnViewModelChanged"
GM:OnViewModelChanged( Entity viewmodel, string oldModel, string newModel ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Called when the player changes their weapon to another one - and their viewmodel model changes.



BUG


This is not always called clientside.



 Arguments

 Entity viewmodel


The viewmodel that is changing

 Arguments

 string oldModel


The old model

 Arguments

 string newModel


The new model


"GM/PlayerCanPickupItem"
GM:PlayerCanPickupItem( Player ply, Entity item ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns whether or not a player is allowed to pick an item up.

 Arguments

 Player ply


Player attempting to pick up

 Arguments

 Entity item


The item the player is attempting to pick up

 Returns

 boolean


Allow pick up


"GM/PlayerButtonDown"
GM:PlayerButtonDown( Player ply, number button ) 
 Description
Called when a player presses a button.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Player ply


Player who pressed the button

 Arguments

 number button


The button, see BUTTON_CODE_ Enums


"GM/PlayerButtonUp"
GM:PlayerButtonUp( Player ply, number button ) 
 Description
Called when a player releases a button.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Player ply


Player who released the button

 Arguments

 number button


The button, see BUTTON_CODE_ Enums


"GM/PlayerCanSeePlayersChat"
GM:PlayerCanSeePlayersChat( string text, boolean teamOnly, Player listener, Player speaker ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Returns whether or not the player can see the other players chat.

 Arguments

 string text


The chat text

 Arguments

 boolean teamOnly


If the message is team-only

 Arguments

 Player listener


The player receiving the message

 Arguments

 Player speaker


The player sending the message

 Returns

 boolean


Can see other players chat


"GM/PlayerDeath"
GM:PlayerDeath( Player victim, Entity inflictor, Entity attacker ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Called when a player is killed by Player:Kill or any other normal means.
This hook is not called if the player is killed by Player:KillSilent. See GM:PlayerSilentDeath for that.

 GM:DoPlayerDeath is called before this hook.
 GM:PostPlayerDeath is called after this hook.

See Player:LastHitGroup if you need to get the last hit hitgroup of the player.



NOTE




 Arguments

 Player victim


The player who died

 Arguments

 Entity inflictor


Item used to kill the person

 Arguments

 Entity attacker


Player or entity that killed the victim

 Examples
 Example
If the player suicides (he is the killer and the victim (ply)), then it will print a message to console. If someone else kills him, it will print a different message to console.

function GM:PlayerDeath( victim, inflictor, attacker )
    if ( victim == attacker ) then
        PrintMessage( HUD_PRINTTALK, victim:Name() ..  committed suicide. )
    else
        PrintMessage( HUD_PRINTTALK, victim:Name() ..  was killed by  .. attacker:Name() .. . )
    end
end
Output:

If suicide:
Player1 has committed suicide.
Else:

Player1 was killed by Player2.


"GM/PlayerDeathThink"
GM:PlayerDeathThink( Player ply ) 
 Description
Called every think while the player is dead. The return value will determine if the player respawns.
Overwriting this function will prevent players from respawning by pressing space or clicking.



BUG


This hook is not called for players with the FL_FROZEN flag applied.



 Arguments

 Player ply


The player affected in the hook.

 Returns

 boolean


Allow spawn


"GM/PlayerConnect"
GM:PlayerConnect( string name, string ip ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Executes when a player connects to the server. Called before the player has been assigned a UserID and entity. See the player_connect gameevent for a version of this hook called after the player entity has been created.



NOTE


This is only called clientside for listen server hosts.




NOTE


This is not called clientside for the local player.


 Arguments

 string name


The players name.

 Arguments

 string ip


The players IP address. Will be none for bots.



NOTE


This argument will only be passed serverside.



 Examples
 Example
prints a message to the chatbox when a player joins the game

function GM:PlayerConnect( name, ip )
	PrintMessage( HUD_PRINTTALK, name ..  has joined the game. )
end
Output:

if a person with the name Garry:D joins the game, a message in the chatbox will say Garry:D has joined the game.


"GM/PlayerCanHearPlayersVoice"
GM:PlayerCanHearPlayersVoice( Player listener, Player talker ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns
6 Examples

6.1 Example




 Description
Decides whether a player can hear another player using voice chat.

 Arguments

 Player listener


The listening player.

 Arguments

 Player talker


The talking player.

 Returns

 boolean


Return true if the listener should hear the talker, false if they shouldnt.

 Returns

 boolean


3D sound. If set to true, will fade out the sound the further away listener is from the talker, the voice will also be in stereo, and not mono.

 Examples
 Example
Players can only hear each other if they are within 500 units.

hook.Add( PlayerCanHearPlayersVoice, Maximum Range, function( listener, talker )
    if ( listener:GetPos():Distance( talker:GetPos() ) &gt; 500 ) then return false end
end )


"GM/PlayerDroppedWeapon"
GM:PlayerDroppedWeapon( Player owner, Weapon wep ) 
 Description
Called when a weapon is dropped by a player via Player:DropWeapon.
The weapons Entity:GetOwner will be NULL at the time this hook is called.
WEAPON:OnDrop will be called before this hook is.

 Arguments

 Player owner


The player who owned this weapon before it was dropped

 Arguments

 Weapon wep


The weapon that was dropped


"GM/PlayerDeathSound"
GM:PlayerDeathSound(  ) 
 Description
Returns whether or not the default death sound should be muted.

 Returns

 boolean


Mute death sound


"GM/PlayerDriveAnimate"
GM:PlayerDriveAnimate( Player ply ) 
 Description
Called to update the players animation during a drive.

 Arguments

 Player ply


The driving player


"GM/PlayerEnteredVehicle"
GM:PlayerEnteredVehicle( Player ply, Vehicle veh, number role ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Called when a player enters a vehicle.
Called just after GM:CanPlayerEnterVehicle.
See also GM:PlayerLeaveVehicle.

 Arguments

 Player ply


Player who entered vehicle

 Arguments

 Vehicle veh


Vehicle the player entered

 Arguments

 number role


"GM/PlayerEndVoice"
GM:PlayerEndVoice( Player ply ) 
 Description
Called when player stops using voice chat.

 Arguments

 Player ply


Player who stopped talking


"GM/PlayerAuthed"
GM:PlayerAuthed( Player ply, string steamid, string uniqueid ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Called once when the player is authenticated.



BUG


CurTime returns 0 in this hook.



 Arguments

 Player ply


The player

 Arguments

 string steamid


The players SteamID

 Arguments

 string uniqueid


The players UniqueID

 Examples
 Example
function GM:PlayerAuthed( ply, steamid, uniqueid )
    print( ply:Name() ..  has been authenticated as  .. steamid .. . )
end
Output:

If a person with the name Garry:D and SteamID STEAM_0:1:12345678 joins the game, once authenticated, console will print out Garry:D has been authenticated as STEAM_0:1:12345678.


"GM/PlayerFrozeObject"
GM:PlayerFrozeObject( Player ply, Entity ent, PhysObj physobj ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Called when a player freezes an object.

 Arguments

 Player ply


Player who has frozen an object

 Arguments

 Entity ent


The frozen object

 Arguments

 PhysObj physobj


The frozen physics object of the frozen entity ( For ragdolls )


"GM/PlayerDisconnected"
GM:PlayerDisconnected( Player ply ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Called when a player leaves the server. See the player_disconnect gameevent for a shared version of this hook.



BUG


This is not called in single-player or listen servers for the host.



 Arguments

 Player ply


the player

 Examples
 Example
Print a message to the chatbox upon player disconnect

function GM:PlayerDisconnected( ply )
     PrintMessage( HUD_PRINTTALK, ply:Name()..  has left the server. )
end
Output:

Garry:D has left the server.


"GM/PlayerJoinTeam"
GM:PlayerJoinTeam( Player ply, number team ) 
 Description
Makes the player join a specified team. This is a convenience function that calls Player:SetTeam and runs the GM:OnPlayerChangedTeam hook.

 Arguments

 Player ply


Player to force

 Arguments

 number team


The team to put player into


"GM/PlayerCanJoinTeam"
GM:PlayerCanJoinTeam( Player ply, number team ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns whether or not a player is allowed to join a team

 Arguments

 Player ply


Player attempting to switch teams

 Arguments

 number team


Index of the team

 Returns

 boolean


Allowed to switch


"GM/PlayerLeaveVehicle"
GM:PlayerLeaveVehicle( Player ply, Vehicle veh ) 
 Description
Called when a player leaves a vehicle.



BUG


This is not called when a different vehicle is immediately entered with Player:EnterVehicle.



 Arguments

 Player ply


Player who left a vehicle.

 Arguments

 Vehicle veh


Vehicle the player left.


"GM/PlayerInitialSpawn"
GM:PlayerInitialSpawn( Player player ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Called when the player spawns for the first time.
See GM:PlayerSpawn for a hook called every player spawn.



NOTE


This hook is called before the player has fully loaded, when the player is still in seeing the Sending Client Info screen. For example, trying to use the Entity:GetModel function will return the default model (player/default.mdl)


 Arguments

 Player player


The player who spawned.

 Examples
 Example
Prints the name of the player joining.

function GM:PlayerInitialSpawn( ply )
	print( ply:GetName().. joined the server.\n )
end

-- That way you are overriding the default hook
-- you can use hook.Add to make more functions get called when this event occurs
local function spawn( ply )
	print( ply:GetName().. joined the game.\n )
end
hook.Add( PlayerInitialSpawn, some_unique_name, spawn )
Output:

&lt;somebody&gt; joined the game


"GM/PlayerHurt"
GM:PlayerHurt( Player victim, Entity attacker, number healthRemaining, number damageTaken ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Called when a player gets hurt.

 Arguments

 Player victim


Victim

 Arguments

 Entity attacker


Attacker Entity

 Arguments

 number healthRemaining


Remaining Health

 Arguments

 number damageTaken


Damage Taken

 Examples
 Example
Show players attacker in Chat.

function GM:PlayerHurt( victim, attacker )
    if ( attacker:IsPlayer() ) then
        victim:ChatPrint( You were attacked by:  .. attacker:Nick() )
    end
end


"GM/PlayerPostThink"
GM:PlayerPostThink( Player ply ) 
 Description
Called after the players think.

 Arguments

 Player ply


The player


"GM/PlayerCanPickupWeapon"
GM:PlayerCanPickupWeapon( Player ply, Weapon wep ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Returns whether or not a player is allowed to pick up a weapon.

 Arguments

 Player ply


The player attempting to pick up the weapon

 Arguments

 Weapon wep


The weapon entity in question

 Returns

 boolean


Allowed pick up or not

 Examples
 Example
Disallows picking up a weapon if player already has this weapon.
( Prevents ammo pickups from lying guns )

hook.Add( PlayerCanPickupWeapon, noDoublePickup, function( ply, wep )
    if ( ply:HasWeapon( wep:GetClass() ) ) then return false end
end )


 Examples
 Example
Players can only pick up the HL2 Pistol.

function GM:PlayerCanPickupWeapon( ply, wep )
    return ( wep:GetClass() == weapon_pistol )
end


 Examples
 Example
How you could give a player an alternate weapon to the one they picked up (such as an RPG Launcher rather than a pistol)

hook.Add( PlayerCanPickupWeapon, NoPistolGiveFists, function( ply, wep )
	if ( wep:GetClass() == weapon_pistol ) then -- if ( the weapon they are trying to pick up is a pistol
		ply:Give( weapon_rpg ) -- give them an RPG
		wep:Remove() -- remove the one they were trying to pick up
		return false -- dont give them a pistol
	end
end )


"GM/PlayerFootstep"
GM:PlayerFootstep( Player ply, Vector pos, number foot, string sound, number volume, CRecipientFilter filter ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Returns
9 Examples

9.1 Example




 Description
Called whenever a player steps. Return true to mute the normal sound.

 Arguments

 Player ply


The stepping player

 Arguments

 Vector pos


The position of the step

 Arguments

 number foot


Foot that is stepped. 0 for left, 1 for right

 Arguments

 string sound


Sound that is going to play

 Arguments

 number volume


Volume of the footstep

 Arguments

 CRecipientFilter filter


The Recipient filter of players who can hear the footstep

 Returns

 boolean


Prevent default step sound

 Examples
 Example
Disables default player footsteps and plays custom ones.

function GM:PlayerFootstep( ply, pos, foot, sound, volume, rf ) 
	ply:EmitSound( NPC_Hunter.Footstep ) -- Play the footsteps hunter is using
	return true -- Dont allow default footsteps
end


"GM/PlayerNoClip"
GM:PlayerNoClip( Player ply, boolean desiredState ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Called when a player tries to switch noclip mode.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Player ply


The person who entered/exited noclip

 Arguments

 boolean desiredState


Represents the noclip state (on/off) the user will enter if this hook allows them to.

 Returns

 boolean


Return false to disallow the switch.

 Examples
 Example
Disable Noclip for all but admins.

local function DisableNoclip( ply )
	return ply:IsAdmin()
end
hook.Add( PlayerNoClip, DisableNoclip, DisableNoclip )


 Examples
 Example
Get the player when they enter/exit no clip and display their status

hook.Add( PlayerNoClip, isInNoClip, function( ply, desiredNoClipState )
	if ( desiredNoClipState ) then
		print( ply:Name() ..  wants to enter noclip. )
	else
		print( ply:Name() ..  wants to leave noclip. )
	end
end )
Output:

Player [1][Player1]	true
Player [1][Player2]	false
 Examples
 Example
While keeping the default behaviour of admin-only noclip, the following example will also allow anyone to turn it off (if its set on by a third-party administration addon, for example).

hook.Add( PlayerNoClip, FeelFreeToTurnItOff, function( ply, desiredState )
	if ( desiredState == false ) then -- the player wants to turn noclip off
		return true -- always allow
	elseif ( ply:IsAdmin() ) then
		return true -- allow administrators to enter noclip
	end
end )


"GM/PlayerSay"
GM:PlayerSay( Player sender, string text, boolean teamChat ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Called when a player dispatched a chat message. For the clientside equivalent, see GM:OnPlayerChat.

 Arguments

 Player sender


The player which sent the message.

 Arguments

 string text


The messages content

 Arguments

 boolean teamChat


Is team chat?

 Returns

 string


What to show instead of original text.

Set to  to stop the message from displaying.

 Examples
 Example
Will put [Global] in front of the players message if they type /all  before the message.

hook.Add( PlayerSay, PlayerSayExample, function( ply, text, team )
	-- Make the chat message entirely lowercase
	if ( string.sub( string.lower( text ),1,4 ) == /all ) then
		return [Global]  .. string.sub( text, 5 ) -- add [Global] in front of the players text ) then display
	end
end )


"GM/PlayerSelectSpawn"
GM:PlayerSelectSpawn( Player ply ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Called to determine a spawn point for a player to spawn at.

 Arguments

 Player ply


The player who needs a spawn point

 Returns

 Entity


The spawnpoint entity to spawn the player at

 Examples
 Example
Find a random spawn point

function GM:PlayerSelectSpawn( pl )
    
    local spawns = ents.FindByClass( info_player_start )
    local random_entry = math.random( #spawns )
    
    return spawns[ random_entry ]
	
end


"GM/PlayerSelectTeamSpawn"
GM:PlayerSelectTeamSpawn( number team, Player ply ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Find a team spawn point entity for this player.

 Arguments

 number team


Players team

 Arguments

 Player ply


The player

 Returns

 Entity


The entity to use as a spawn point.


"GM/PlayerLoadout"
GM:PlayerLoadout( Player ply ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Called to give players the default set of weapons.



NOTE


This function may not work in your custom gamemode if you have overridden your GM:PlayerSpawn and you do not use self.BaseClass.PlayerSpawn or hook.Call.


 Arguments

 Player ply


Player to give weapons to.

 Examples
 Example
Gives the player only a pistol.

function GM:PlayerLoadout( ply )
	ply:Give( weapon_pistol )

	-- Prevent default Loadout.
	return true
end


"GM/PlayerRequestTeam"
GM:PlayerRequestTeam( Player ply, number team ) 
 Description
Request a player to join the team. This function will check if the team is available to join or not.
This hook is called when the player runs changeteam in the console.
To prevent the player from changing teams, see GM:PlayerCanJoinTeam

 Arguments

 Player ply


The player to try to put into a team

 Arguments

 number team


Team to put the player into if the checks succeeded


"GM/PlayerShouldTakeDamage"
GM:PlayerShouldTakeDamage( Player ply, Entity attacker ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns true if the player should take damage from the given attacker.

 Arguments

 Player ply


The player

 Arguments

 Entity attacker


The attacker

 Returns

 boolean


Allow damage


"GM/PlayerSpray"
GM:PlayerSpray( Player sprayer ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Determines if the player can spray using the impulse 201 console command.

 Arguments

 Player sprayer


The player

 Returns

 boolean


Return false to allow spraying, return true to prevent spraying.

 Examples
 Example
Makes so that only Admins can spray.

hook.Add( PlayerSpray, DisablePlayerSpray, function( ply )
	return!ply:IsAdmin()
end )


"GM/PlayerSetHandsModel"
GM:PlayerSetHandsModel( Player ply, Entity ent ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Called whenever view model hands needs setting a model. By default this calls PLAYER:GetHandsModel and if that fails, sets the hands model according to his player model.

 Arguments

 Player ply


The player whose hands needs a model set

 Arguments

 Entity ent


The hands to set model of

 Examples
 Example
Sets the players hands to the models hands.

function GM:PlayerSetHandsModel( ply, ent )
   local simplemodel = player_manager.TranslateToPlayerModelName( ply:GetModel() )
   local info = player_manager.TranslatePlayerHands( simplemodel )
   if ( info ) then
      ent:SetModel( info.model )
      ent:SetSkin( info.skin )
      ent:SetBodyGroups( info.body )
   end
end


"GM/PlayerSilentDeath"
GM:PlayerSilentDeath( Player ply ) 
 Description
Called when the player is killed by Player:KillSilent.
The player is already considered dead when this hook is called.

See GM:PlayerDeath for a hook which handles all other death causes.



NOTE


Player:Alive will return false in this hook.


 Arguments

 Player ply


The player


"GM/PlayerStartTaunt"
GM:PlayerStartTaunt( Player ply, number act, number length ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Called when player starts taunting.

 Arguments

 Player ply


The player who is taunting

 Arguments

 number act


The sequence ID of the taunt

 Arguments

 number length


Length of the taunt


"GM/PlayerStepSoundTime"
GM:PlayerStepSoundTime( Player ply, number type, boolean walking ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Allows you to override the time between footsteps.

 Arguments

 Player ply


Player who is walking

 Arguments

 number type


The type of footsteps, see STEPSOUNDTIME_ Enums

 Arguments

 boolean walking


Is the player walking or not ( +walk? )

 Returns

 number


Time between footsteps, in ms


"GM/PlayerStartVoice"
GM:PlayerStartVoice( Player ply ) 
 Description
Called when a player starts using voice chat.

 Arguments

 Player ply


Player who started using voice chat


"GM/PlayerSwitchFlashlight"
GM:PlayerSwitchFlashlight( Player ply, boolean enabled ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Called whenever a player attempts to either turn on or off their flashlight, returning false will deny the change.



NOTE


Also gets called when using Player:Flashlight.


 Arguments

 Player ply


The player who attempts to change their flashlight state.

 Arguments

 boolean enabled


The new state the player requested, true for on, false for off.

 Returns

 boolean


Can toggle the flashlight or not


"GM/PlayerSpawn"
GM:PlayerSpawn( Player player ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Called whenever a player spawns, including respawns.
See GM:PlayerInitialSpawn for a hook called only the first time a player spawns.
See the player_spawn gameevent for a shared version of this hook.



WARNING


By default, in base derived gamemodes, this hook will also call GM:PlayerLoadout and GM:PlayerSetModel, which may override your Entity:SetModel and Player:Give calls. Consider using the other hooks or a 0-second timer.


 Arguments

 Player player


The player who spawned.

 Examples
 Example
Prints a message when a player spawns.

function GM:PlayerSpawn( ply )
    MsgN( ply:Nick() ..  has spawned! )
end
Output:

Player1 has spawned!
 Examples
 Example
Prints a message when a player spawns using a hook.

local function spawn( ply )
	print( ply:Nick()..  has spawned!. )
end
hook.Add( PlayerSpawn, some_unique_name, spawn )
Output:

Player1 has spawned!


"GM/PlayerTick"
GM:PlayerTick( Player player, CMoveData mv ) 
 Description
The Move hook is called for you to manipulate the players CMoveData. This hook is called moments before GM:Move and GM:PlayerNoClip.



WARNING


This hook will not run when inside a vehicle. GM:VehicleMove will be called instead.




NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Player player


The player

 Arguments

 CMoveData mv


The current movedata for the player.


"GM/PlayerUse"
GM:PlayerUse( Player ply, Entity ent ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Triggered when the player presses use on an object. Continuously runs until USE is released but will not activate other Entities until the USE key is released; dependent on activation type of the Entity.

 Arguments

 Player ply


The player pressing the use key.

 Arguments

 Entity ent


The entity which the player is looking at / activating USE on.

 Returns

 boolean


Return false if the player is not allowed to USE the entity.

 Examples
 Example
The arguments will continue to be output as long as the user holds their USE key. If the user activates one object, say a door, and looks at a different object, say a different door, then the print statement will reflect the new Entity, however even when true is returned the new Entity will not be activated until the user lets go of USE and depresses it once again; this is dependent on the USE TYPE of the Entity.

hook.Add( PlayerUse, some_unique_name2, function( ply, ent )
	print( ply, ent )
end )
Output:

After holding it for a VERY brief moment looking at one door in a way that I would look at the other door once the first opens.
Player [1][Example_User_Name] 	Entity [369][func_door_rotating]
Player [1][Example_User_Name] 	Entity [369][func_door_rotating]
Player [1][Example_User_Name] 	Entity [368][func_door_rotating]
Player [1][Example_User_Name] 	Entity [368][func_door_rotating]

 Examples
 Example
Prevent users from using the ammo cache on the back of a Jeep.

hook.Add( PlayerUse, some_unique_name, function( ply, ent )
	if ( !IsValid( ent ) or!ent:IsVehicle() ) then return end
	
	if ( ply:GetEyeTrace().HitGroup == 5 ) then
		return false
	end
end )


"GM/PlayerUnfrozeObject"
GM:PlayerUnfrozeObject( Player ply, Entity ent, PhysObj physobj ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Called when a player unfreezes an object.

 Arguments

 Player ply


Player who has unfrozen an object

 Arguments

 Entity ent


The unfrozen object

 Arguments

 PhysObj physobj


The frozen physics object of the unfrozen entity ( For ragdolls )


"GM/PlayerSetModel"
GM:PlayerSetModel( Player ply ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Called whenever a player spawns and must choose a model. A good place to assign a model to a player.



NOTE


This function may not work in your custom gamemode if you have overridden your GM:PlayerSpawn and you do not use self.BaseClass.PlayerSpawn or hook.Call.


 Arguments

 Player ply


The player being chosen

 Examples
 Example
Sets the players model to Odessa

function GM:PlayerSetModel( ply )
   ply:SetModel( models/player/odessa.mdl )
end


"GM/PlayerSwitchWeapon"
GM:PlayerSwitchWeapon( Player player, Weapon oldWeapon, Weapon newWeapon ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Called when a player switches their weapon.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Player player


The player switching weapons.

 Arguments

 Weapon oldWeapon


The previous weapon. Will be NULL if the previous weapon was removed or the player is switching from nothing.

 Arguments

 Weapon newWeapon


The weapon the player switched to. Will be NULL if the player is switching to nothing.



BUG


This can be NULL on the client if the weapon hasnt been created over the network yet.




 Returns

 boolean


Return true to prevent weapon switch

 Examples
 Example
The players weapon information will be printed when the player switched weapons.

function GM:PlayerSwitchWeapon( ply, oldWeapon, newWeapon )
	//GetClass() will return the weapons class as a string.
	MsgN( You switched weapons! Your old weapon is  .. oldWeapon:GetClass() ... )
	MsgN( Your new weapon is  .. newWeapon:GetClass() .. . );
end
Output:

You switched weapons! Your old weapon is gmod_camera.
Your new weapon is weapon_crossbow.


"GM/PostCleanupMap"
GM:PostCleanupMap(  ) 
 Description
Called right after the map has cleaned up (usually because game.CleanUpMap was called)
See also GM:PreCleanupMap.


"GM/PlayerShouldTaunt"
GM:PlayerShouldTaunt( Player ply, number act ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Allows to suppress player taunts.

 Arguments

 Player ply


Player who tried to taunt

 Arguments

 number act


Act ID of the taunt player tries to do, see ACT_ Enums

 Returns

 boolean


Return false to disallow player taunting


"GM/PostDrawEffects"
GM:PostDrawEffects(  ) 
 Description
Called after rendering effects. This is where halos are drawn. Called just before GM:PreDrawHUD.



NOTE


This is a rendering hook with a 2D rendering context.This means that the only rendering functions will work in it are functions with a 2D rendering context.


"GM/PlayerSpawnAsSpectator"
GM:PlayerSpawnAsSpectator( Player ply ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Called to spawn the player as a spectator.

 Arguments

 Player ply


The player to spawn as a spectator

 Examples
 Example
Makes all players spawn as spectators.

function GM:PlayerSpawn( ply )
 
	GAMEMODE:PlayerSpawnAsSpectator( ply )
 
end


"GM/PostDrawPlayerHands"
GM:PostDrawPlayerHands( Entity hands, Entity vm, Player ply, Weapon weapon ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Called after the player hands are drawn.

 Arguments

 Entity hands


This is the gmod_hands entity.

 Arguments

 Entity vm


This is the view model entity.

 Arguments

 Player ply


The the owner of the view model.

 Arguments

 Weapon weapon


This is the weapon that is from the view model.


"GM/PostDrawHUD"
GM:PostDrawHUD(  ) 
 Description
Called after GM:PreDrawHUD, GM:HUDPaintBackground and GM:HUDPaint but before GM:DrawOverlay.



NOTE


This is a rendering hook with a 2D rendering context.This means that the only rendering functions will work in it are functions with a 2D rendering context.


"GM/PostDrawOpaqueRenderables"
GM:PostDrawOpaqueRenderables( boolean bDrawingDepth, boolean bDrawingSkybox ) 
 Description
Called after drawing opaque entities.
See also GM:PostDrawTranslucentRenderables and GM:PreDrawOpaqueRenderables.



NOTE


This is a rendering hook with a 3D rendering context.This means that the only rendering functions will work in it are functions with a 3D rendering context.


 Arguments

 boolean bDrawingDepth


Whether the current draw is writing depth.

 Arguments

 boolean bDrawingSkybox


Whether the current draw is drawing the skybox.


"GM/PostDrawSkyBox"
GM:PostDrawSkyBox(  ) 
 Description
Called after drawing the skybox.



NOTE


This is a rendering hook with a 3D rendering context.This means that the only rendering functions will work in it are functions with a 3D rendering context.


"GM/PostDraw2DSkyBox"
GM:PostDraw2DSkyBox(  ) 
 Description
Called right after the 2D skybox has been drawn - allowing you to draw over it.



NOTE


This is a rendering hook with a 3D rendering context.This means that the only rendering functions will work in it are functions with a 3D rendering context.


 Examples
 Example
Draw a textured quad on the horizon, behind the 3D skybox.

local Mat = Material( dev/graygrid )

hook.Add( PostDraw2DSkyBox, ExampleHook, function()
    
    render.OverrideDepthEnable( true, false ) -- ignore Z to prevent drawing over 3D skybox

    -- Start 3D cam centered at the origin
    cam.Start3D( Vector( 0, 0, 0 ), EyeAngles() )
        render.SetMaterial( Mat )
        render.DrawQuadEasy( Vector( 1,0,0 ) * 200, Vector( -1,0,0 ), 64, 64, Color( 255,255,255 ), 0 )
    cam.End3D()

    render.OverrideDepthEnable( false, false )

end )


"GM/PopulateMenuBar"
GM:PopulateMenuBar( Panel menubar ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Called when its time to populate the context menu menu bar at the top.

 Arguments

 Panel menubar


The DMenuBar itself.

 Examples
 Example
Example usage of the hook

hook.Add( PopulateMenuBar, My_MenuBar, function( menubar )

	local m = menubar:AddOrGetMenu( Test )

	m:AddCVar( Item 1, console_var1, 1, 0 )

	m:AddSpacer()

	m:AddCVar( Item 2, console_var2, 0, 100 )

	m:AddCVar( Check console, console_var3, 1, 0, function() print( I was clicked! ) end )


	local submenu = m:AddSubMenu( Submenu )

	submenu:SetDeleteSelf( false )
	submenu:AddCVar( No password, password,  )
	submenu:AddSpacer()

	submenu:AddCVar( Password: test1, password, test1 )
	submenu:AddCVar( Password: lolno, password, lolno )

end )


"GM/PostDrawViewModel"
GM:PostDrawViewModel( Entity viewmodel, Player player, Weapon weapon ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Called after view model is drawn.



NOTE


This is a rendering hook with a 3D rendering context.This means that the only rendering functions will work in it are functions with a 3D rendering context.




NOTE


The 3D rendering context in this event is different from the main view. Every render operation will only be accurate with the view model entity.


 Arguments

 Entity viewmodel


Players view model

 Arguments

 Player player


The owner of the weapon/view model

 Arguments

 Weapon weapon


The weapon the player is currently holding


"GM/PlayerTraceAttack"
GM:PlayerTraceAttack( Player ply, CTakeDamageInfo dmginfo, Vector dir, table trace ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Called when a player has been hit by a trace and damaged (such as from a bullet). Returning true overrides the damage handling and prevents GM:ScalePlayerDamage from being called.

 Arguments

 Player ply


The player that has been hit

 Arguments

 CTakeDamageInfo dmginfo


The damage info of the bullet

 Arguments

 Vector dir


Normalized vector direction of the bullets path

 Arguments

 table trace


The trace of the bullets path, see TraceResult structure

 Returns

 boolean


Override engine handling


"GM/PostPlayerDeath"
GM:PostPlayerDeath( Player ply ) 
 Description
Called right after GM:DoPlayerDeath, GM:PlayerDeath and GM:PlayerSilentDeath.
This hook will be called for all deaths, including Player:KillSilent



NOTE


The player is considered dead when this is hook is called, Player:Alive will return false.


 Arguments

 Player ply


The player


"GM/PostDrawTranslucentRenderables"
GM:PostDrawTranslucentRenderables( boolean bDrawingDepth, boolean bDrawingSkybox ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Called after all translucent entities are drawn.
See also GM:PostDrawOpaqueRenderables and GM:PreDrawTranslucentRenderables.



NOTE


This is a rendering hook with a 3D rendering context.This means that the only rendering functions will work in it are functions with a 3D rendering context.




BUG


This is still called when r_drawentities or r_drawopaquerenderables is disabled.





BUG


This is not called when r_drawtranslucentworld is disabled.



 Arguments

 boolean bDrawingDepth


Whether the current call is writing depth.

 Arguments

 boolean bDrawingSkybox


Whether the current call is drawing skybox.

 Examples
 Example
Draws a solid black sphere at where the player is looking at, but not when the skybox is being drawn.
You can see why this is needed if you disable the skybox check and look into the sky on gm_flatgrass (or any other map where the 3d skybox is below the map) and you will notice 2 spheres and not 1.

hook.Add( PostDrawTranslucentRenderables, test, function( bDepth, bSkybox )

	-- If we are drawing in the skybox, bail
	if ( bSkybox ) then return end

	-- Set the draw material to solid white
	render.SetColorMaterial()

	-- The position to render the sphere at, in this case, the looking position of the local player
	local pos = LocalPlayer():GetEyeTrace().HitPos

	-- Draw the sphere!
	render.DrawSphere( pos, 500, 30, 30, Color( 0, 0, 0 ) )

end )


"GM/PostPlayerDraw"
GM:PostPlayerDraw( Player ply ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Called after the player was drawn.



NOTE


This is a rendering hook with a 3D rendering context.This means that the only rendering functions will work in it are functions with a 3D rendering context.


 Arguments

 Player ply


The player that was drawn.

 Examples
 Example
Show each players name above their model.

local function DrawName( ply )
	if ( !IsValid( ply ) ) then return end 
	if ( ply == LocalPlayer() ) then return end -- Dont draw a name when the player is you
	if ( !ply:Alive() ) then return end -- Check if ( the player is alive 
 
	local Distance = LocalPlayer():GetPos():Distance( ply:GetPos() ) --Get the distance between you and the player
	
	if ( Distance &lt; 1000 ) then --If the distance is less than 1000 units, it will draw the name
 
		local offset = Vector( 0, 0, 85 )
		local ang = LocalPlayer():EyeAngles()
		local pos = ply:GetPos() + offset + ang:Up()
	 
		ang:RotateAroundAxis( ang:Forward(), 90 )
		ang:RotateAroundAxis( ang:Right(), 90 )
	 
		
		cam.Start3D2D( pos, Angle( 0, ang.y, 90 ), 0.25 )
			draw.DrawText( ply:GetName(), HudSelectionText, 2, 2, team.GetColor( ply:Team() ), TEXT_ALIGN_CENTER )
		cam.End3D2D()
	end
end
hook.Add( PostPlayerDraw, DrawName, DrawName )


 Examples
 Example
Draw a headcrab hat on all players.

local model = ClientsideModel( models/headcrabclassic.mdl )
model:SetNoDraw( true )

hook.Add( PostPlayerDraw , manual_model_draw_example , function( ply )
	if ( not IsValid( ply ) or not ply:Alive() then return end

	local attach_id = ply:LookupAttachment( eyes )
	if ( not attach_id ) then return end
			
	local attach = ply:GetAttachment( attach_id )
			
	if ( not attach ) then return end
			
	local pos = attach.Pos
	local ang = attach.Ang
		
	model:SetModelScale( 1.1, 0 )
	pos = pos + ( ang:Forward() * 2.5 )
	ang:RotateAroundAxis( ang:Right(), 20 )
		
	model:SetPos( pos )
	model:SetAngles( ang )

	model:SetRenderOrigin( pos )
	model:SetRenderAngles( ang )
	model:SetupBones()
	model:DrawModel()
	model:SetRenderOrigin()
	model:SetRenderAngles()

end )


"GM/PostRender"
GM:PostRender(  ) 
 Description
Called after the frame has been rendered.


"GM/PostGamemodeLoaded"
GM:PostGamemodeLoaded(  ) 
 Description
Called after the gamemode has loaded.


"GM/PostProcessPermitted"
GM:PostProcessPermitted( string ppeffect ) 
 Description
Allows you to suppress post processing effect drawing.

 Arguments

 string ppeffect


The classname of Post Processing effect

 Returns

 boolean


Return true/false depending on whether this post process should be allowed


"GM/PostRenderVGUI"
GM:PostRenderVGUI(  ) 
 Description
Called after the VGUI has been drawn.



NOTE


This is a rendering hook with a 2D rendering context.This means that the only rendering functions will work in it are functions with a 2D rendering context.


"GM/PreDrawHalos"
GM:PreDrawHalos(  ) 
 Description
Called before rendering the halos. This is the place to call halo.Add. This hook is actually running inside of GM:PostDrawEffects.



NOTE


This is a rendering hook with a 3D rendering context.This means that the only rendering functions will work in it are functions with a 3D rendering context.


"GM/PreCleanupMap"
GM:PreCleanupMap(  ) 
 Description
Called right before the map cleans up (usually because game.CleanUpMap was called)
See also GM:PostCleanupMap.


"GM/PreDrawPlayerHands"
GM:PreDrawPlayerHands( Entity hands, Entity vm, Player ply, Weapon weapon ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Called before the player hands are drawn.

 Arguments

 Entity hands


This is the gmod_hands entity before it is drawn.

 Arguments

 Entity vm


This is the view model entity before it is drawn.

 Arguments

 Player ply


The the owner of the view model.

 Arguments

 Weapon weapon


This is the weapon that is from the view model.

 Returns

 boolean


Return true to prevent the viewmodel hands from rendering


"GM/PrePlayerDraw"
GM:PrePlayerDraw( Player player ) 
 Description
Called before the player is drawn.

 Arguments

 Player player


The player that is about to be drawn.

 Returns

 boolean


Prevent default player rendering. Return true to hide the player.


"GM/PreDrawOpaqueRenderables"
GM:PreDrawOpaqueRenderables( boolean isDrawingDepth, boolean isDrawSkybox ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Called before all opaque entities are drawn.
See also GM:PreDrawTranslucentRenderables and GM:PostDrawOpaqueRenderables.



NOTE


This is a rendering hook with a 3D rendering context.This means that the only rendering functions will work in it are functions with a 3D rendering context.


 Arguments

 boolean isDrawingDepth


Whether the current draw is writing depth.

 Arguments

 boolean isDrawSkybox


Whether the current draw is drawing the skybox.

 Returns

 boolean


Return true to prevent opaque renderables from drawing.


"GM/PreDrawEffects"
GM:PreDrawEffects(  ) 
 Description
Called just after GM:PreDrawViewModel and can technically be considered PostDrawAllViewModels.



NOTE


This is a rendering hook with a 3D rendering context.This means that the only rendering functions will work in it are functions with a 3D rendering context.


"GM/PreDrawHUD"
GM:PreDrawHUD(  ) 
 Description
Called before any of 2D drawing functions. Drawing anything in it seems to work incorrectly.

 Examples
 Example
Allows you to draw something before any other HUD elements.

local clr = Color( 20, 20, 20, 200 )
hook.Add( PreDrawHUD, PreDrawExample, function()
	cam.Start2D() -- If you dont call this the drawing will not work properly.
	
	surface.SetDrawColor( clr )
	surface.DrawRect( 0, 0, ScrW(), ScrH() )
	
	cam.End2D()
end )


"GM/RenderScene"
GM:RenderScene( Vector origin, Angle angles, number fov ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Render the scene. Used by the Stereoscopy Post-processing effect.

 Arguments

 Vector origin


View origin

 Arguments

 Angle angles


View angles

 Arguments

 number fov


View FOV

 Returns

 boolean


Return true to override drawing the scene


"GM/Restored"
GM:Restored(  ) 
 Description
Called when the game is reloaded from a Source Engine save system ( not the Sandbox saves or dupes ).
See GM:Saved for a hook that is called when such a save file is created.


"GM/ScaleNPCDamage"
GM:ScaleNPCDamage( NPC npc, number hitgroup, CTakeDamageInfo dmginfo ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Called when an NPC takes damage.



NOTE


This hook is called only when a specific hit group of the NPC is hit. In cases where the hitgroup doesnt matter, you should use GM:EntityTakeDamage instead!


 Arguments

 NPC npc


The NPC that takes damage

 Arguments

 number hitgroup


The hitgroup (hitbox) enum where the player took damage. See HITGROUP_ Enums

 Arguments

 CTakeDamageInfo dmginfo


Damage info

 Examples
 Example
Double the damage whenever a NPC is hurt.

function GM:ScaleNPCDamage( npc, hitgroup, dmginfo )
	dmginfo:ScaleDamage( 2 )
end


"GM/RenderScreenspaceEffects"
GM:RenderScreenspaceEffects(  ) 
 Description
Used to render post processing effects.



NOTE


This is a rendering hook with a 2D rendering context.This means that the only rendering functions will work in it are functions with a 2D rendering context.


 Examples
 Example
Renders color modify and sobel effects to create a cartoon effect.

local tab =
{
	[$pp_colour_addr] = 0,
	[$pp_colour_addg] = 0,
	[$pp_colour_addb] = 0,
	[$pp_colour_brightness] = -0.04,
	[$pp_colour_contrast] = 1.35,
	[$pp_colour_colour] = 5,
	[$pp_colour_mulr] = 0,
	[$pp_colour_mulg] = 0,
	[$pp_colour_mulb] = 0
}

function GM:RenderScreenspaceEffects()
	DrawColorModify( tab ) --Draws Color Modify effect
	DrawSobel( 0.5 ) --Draws Sobel effect
end


"GM/PreGamemodeLoaded"
GM:PreGamemodeLoaded(  ) 
 Description
Called before the gamemode is loaded.


"GM/SetupMove"
GM:SetupMove( Player ply, CMoveData mv, CUserCmd cmd ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
SetupMove is called before the engine process movements. This allows us to override the players movement.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Player ply


The player whose movement we are about to process

 Arguments

 CMoveData mv


The move data to override/use

 Arguments

 CUserCmd cmd


The command data

 Examples
 Example
Make drowning even more entertaining:

hook.Add( SetupMove, Drowning:HandleWaterInLungs, function( ply, mv, cmd )
	if ( ply:WaterLevel() &gt; 2 ) then
		mv:SetUpSpeed( -100 )
		cmd:SetUpMove( -100 )
	end
end )


 Examples
 Example
Disable the players ability to jump by removing a key from CMoveData:

local CMoveData = FindMetaTable( CMoveData )

function CMoveData:RemoveKeys( keys )
	-- Using bitwise operations to clear the key bits.
	local newbuttons = bit.band( self:GetButtons(), bit.bnot( keys ) )
	self:SetButtons( newbuttons )
end

hook.Add( SetupMove, Disable Jumping, function( ply, mvd, cmd )
	if ( mvd:KeyDown( IN_JUMP ) then
		mvd:RemoveKeys( IN_JUMP )
	end
end )


"GM/SetupPlayerVisibility"
GM:SetupPlayerVisibility( Player ply, Entity viewEntity ) 
 Description
Allows you to add extra positions to the players PVS. This is the place to call AddOriginToPVS.

 Arguments

 Player ply


The player

 Arguments

 Entity viewEntity


Players Player:GetViewEntity


"GM/PreDrawTranslucentRenderables"
GM:PreDrawTranslucentRenderables( boolean isDrawingDepth, boolean isDrawSkybox ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Called before all the translucent entities are drawn.
See also GM:PreDrawOpaqueRenderables and GM:PostDrawTranslucentRenderables.



NOTE


This is a rendering hook with a 3D rendering context.This means that the only rendering functions will work in it are functions with a 3D rendering context.




BUG


This is still called when r_drawentities or r_drawopaquerenderables is disabled.





BUG


This is not called when r_drawtranslucentworld is disabled.



 Arguments

 boolean isDrawingDepth


Whether the current draw is writing depth.

 Arguments

 boolean isDrawSkybox


Whether the current draw is drawing the skybox.

 Returns

 boolean


Return true to prevent translucent renderables from drawing.


"GM/PreDrawSkyBox"
GM:PreDrawSkyBox(  ) 
 Description
Called before the sky box is drawn.



NOTE


This is a rendering hook with a 3D rendering context.This means that the only rendering functions will work in it are functions with a 3D rendering context.


 Returns

 boolean


Return true to disable skybox drawing (both 2D and 3D skybox)


"GM/PreRender"
GM:PreRender(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Called before the renderer is about to start rendering the next frame.

 Returns

 boolean


Return true to prevent all rendering. This can make the whole game stop rendering anything.

 Examples
 Example
Fills the draw buffer with black pixels, removing tearing when looking at a world leak. Achieves the same effect as using gl_clear.

hook.Add( PreRender, ResetBuffer, function()
	cam.Start2D()
		surface.SetDrawColor( 0, 0, 0, 255 )
		surface.DrawRect( 0, 0, ScrW(), ScrH() )
	cam.End2D()
end )


"GM/SetPlayerSpeed"
GM:SetPlayerSpeed( Player ply, number walkSpeed, number runSpeed ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Sets player run and sprint speeds.



WARNING


This is not a hook. Treat this as a utility function to set the players speed.


 Arguments

 Player ply


The player to set the speed of.

 Arguments

 number walkSpeed


The walk speed.

 Arguments

 number runSpeed


The run speed.


"GM/ScoreboardHide"
GM:ScoreboardHide(  ) 
 Description
Called when player released the scoreboard button. ( TAB by default )


"GM/PreventScreenClicks"
GM:PreventScreenClicks(  ) 
 Description
This will prevent IN_ATTACK from sending to server when player tries to shoot from C menu.

 Returns

 boolean


Return true to prevent screen clicks


"GM/Saved"
GM:Saved(  ) 
 Description
Called when the game is saved using the Source Engine save system (not the Sandbox saves or dupes).
See GM:Restored for a hook that is called when such a save file is loaded.
See also the saverestore library for relevant functions.


"GM/ScalePlayerDamage"
GM:ScalePlayerDamage( Player ply, number hitgroup, CTakeDamageInfo dmginfo ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
This hook allows you to change how much damage a player receives when one takes damage to a specific body part.



NOTE


This is not called for all damage a player receives ( For example fall damage or NPC melee damage ), so you should use GM:EntityTakeDamage instead if you need to detect ALL damage.


 Arguments

 Player ply


The player taking damage.

 Arguments

 number hitgroup


The hitgroup where the player took damage. See HITGROUP_ Enums

 Arguments

 CTakeDamageInfo dmginfo


The damage info.

 Returns

 boolean


Return true to prevent damage that this hook is called for, stop blood particle effects and blood decals.

It is possible to return true only on client ( This will work only in multiplayer ) to stop the effects but still take damage.

 Examples
 Example
Makes the player take twice as much damage when shot in the head, and only half damage when shot in the limbs.

function GM:ScalePlayerDamage( ply, hitgroup, dmginfo )
	 if ( hitgroup == HITGROUP_HEAD ) then
		dmginfo:ScaleDamage( 2 ) // More damage when were shot in the head
 	 else
		dmginfo:ScaleDamage( 0.50 )  // Less damage when shot anywhere else
	 end
end


"GM/PreDrawViewModel"
GM:PreDrawViewModel( Entity vm, Player ply, Weapon weapon ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Called before the view model has been drawn. This hook by default also calls this on weapons, so you can use WEAPON:PreDrawViewModel.



NOTE


This is a rendering hook with a 3D rendering context.This means that the only rendering functions will work in it are functions with a 3D rendering context.




BUG


This is also called once a frame with no arguments.



 Arguments

 Entity vm


This is the view model entity before it is drawn. On server-side, this entity is the predicted view model.

 Arguments

 Player ply


The the owner of the view model.

 Arguments

 Weapon weapon


This is the weapon that is from the view model.

 Returns

 boolean


Return true to prevent the default view model rendering. This also affects GM:PostDrawViewModel.


"GM/PropBreak"
GM:PropBreak( Player attacker, Entity prop ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Called when a prop has been destroyed.

 Arguments

 Player attacker


The person who broke the prop.

 Arguments

 Entity prop


The entity that has been broken by the attacker.

 Examples
 Example
This kills a player when a person breaks a prop (i.e. a wooden crate).

hook.Add( PropBreak, PropVengeance, function( client, prop )
	client:Kill()
end )


"GM/ShouldCollide"
GM:ShouldCollide( Entity ent1, Entity ent2 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Called to decide whether a pair of entities should collide with each other. This is only called if Entity:SetCustomCollisionCheck was used on one or both entities.
Where applicable, consider using constraint.NoCollide instead - it is considerably easier to use.



WARNING


This hook must return the same value consistently for the same pair of entities. If an entity changed in such a way that its collision rules change, you must call Entity:CollisionRulesChanged on that entity immediately - not in this hook.




BUG


This hook can cause all physics to break under certain conditions.





NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Entity ent1


The first entity in the collision poll.

 Arguments

 Entity ent2


The second entity in the collision poll.

 Returns

 boolean


Whether the entities should collide.

 Examples
 Example
This should always return true unless you have a good reason for it not to.

function GM:ShouldCollide( ent1, ent2 )

    -- If players are about to collide with each other, ) then they wont collide.
    if ( IsValid( ent1 ) and IsValid( ent2 ) and ent1:IsPlayer() and ent2:IsPlayer() ) then return false end 

    -- We must call this because anything else should return true.
    return true

end


"GM/SetupWorldFog"
GM:SetupWorldFog(  ) 
 Description
Allows you to use render.Fog* functions to manipulate world fog.

 Returns

 boolean


Return true to tell the engine that fog is set up


"GM/ScoreboardShow"
GM:ScoreboardShow(  ) 
 Description
Called when player presses the scoreboard button. ( TAB by default )


"GM/ShowSpare1"
GM:ShowSpare1( Player ply ) 
 Description
Called when a player executes gm_showspare1 console command. ( Default bind is F3 )

 Arguments

 Player ply


Player who executed the command


"GM/ShowTeam"
GM:ShowTeam( Player ply ) 
 Description
Called when a player executes gm_showteam console command. ( Default bind is F2 )

 Arguments

 Player ply


Player who executed the command


"GM/SetupSkyboxFog"
GM:SetupSkyboxFog( number scale ) 
 Description
Allows you to use render.Fog* functions to manipulate skybox fog.

 Arguments

 number scale


The scale of 3D skybox

 Returns

 boolean


Return true to tell the engine that fog is set up


"GM/ShutDown"
GM:ShutDown(  ) 
 Description
Called whenever the lua environment is about to be shut down. (for example on map change, or when the server is going to shut down because of the exit-ConCommand)


"GM/SpawniconGenerated"
GM:SpawniconGenerated( string lastmodel, string imagename, number modelsleft ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Called when spawn icon is generated.

 Arguments

 string lastmodel


File path of previously generated model.

 Arguments

 string imagename


File path of the generated icon.

 Arguments

 number modelsleft


Amount of models left to generate.

 Examples
 Example
Thats how it is used in garrysmod/lua/includes/gui/icon_progress.lua for show progress of generating icons

local g_Progress = nil

hook.Add( SpawniconGenerated, SpawniconGenerated, function( lastmodel, imagename, modelsleft )

	if ( !IsValid( g_Progress ) ) then
	
		g_Progress = vgui.Create( DPanel )
		g_Progress:SetSize( 64+10, 64+10+20 )
		g_Progress:SetBackgroundColor( Color( 0, 0, 0, 100 ) )
		g_Progress:SetDrawOnTop( true )
		g_Progress:DockPadding( 5, 0, 5, 5 )
		g_Progress.Think = function()
		
			if ( SysTime() - g_Progress.LastTouch &lt; 3 ) then return end
			
			g_Progress:Remove()
			g_Progress.LastTouch = SysTime()
		
		end
		

		
		local label = g_Progress:Add( DLabel )
		label:Dock( BOTTOM )
		label:SetText( remaining )
		label:SetTextColor( Color( 255, 255, 255, 255 ) )
		label:SetExpensiveShadow( 1, Color( 0, 0, 0, 200 ) )
		label:SetContentAlignment( 5 )
		label:SetHeight( 14 )
		label:SetFont( DefaultSmall )
		
		g_Progress.Label = g_Progress:Add( DLabel )
		g_Progress.Label:Dock( BOTTOM )
		g_Progress.Label:SetTextColor( Color( 255, 255, 255, 255 ) )
		g_Progress.Label:SetExpensiveShadow( 1, Color( 0, 0, 0, 200 ) )
		g_Progress.Label:SetContentAlignment( 5 )
		g_Progress.Label:SetFont( DermaDefaultBold )
		g_Progress.Label:SetHeight( 14 )
		
		g_Progress.icon = vgui.Create( DImage, g_Progress )
		g_Progress.icon:SetSize( 64, 64 )
		g_Progress.icon:Dock( TOP )
	
	end
	
	g_Progress.LastTouch = SysTime()
	
	imagename = imagename:Replace( materials\\,  )
	imagename = imagename:Replace( materials/,  )
		
	g_Progress.icon:SetImage( imagename )
		
	g_Progress:AlignRight( 10 )
	g_Progress:AlignBottom( 10 )
	
	g_Progress.Label:SetText( modelsleft )

end )
Output:


"GM/ShowHelp"
GM:ShowHelp( Player ply ) 
 Description
Called when a player executes gm_showhelp console command. ( Default bind is F1 )

 Arguments

 Player ply


Player who executed the command


"GM/ShowSpare2"
GM:ShowSpare2( Player ply ) 
 Description
Called when a player executes gm_showspare2 console command. ( Default bind is F4 )

 Arguments

 Player ply


Player who executed the command


"GM/StartChat"
GM:StartChat( boolean isTeamChat ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Runs when the user tries to open the chat box.



BUG


Returning true wont stop the chatbox from taking VGUI focus.



 Arguments

 boolean isTeamChat


Whether the message was sent through team chat.

 Returns

 boolean


Return true to hide the default chat box.

 Examples
 Example
hook.Add( StartChat, HasStartedTyping, function( isTeamChat )
	if ( isTeamChat ) then
		print( Player started typing a message in teamchat. )
	else
		print( Player started typing a message. )
	end
end )


"GM/Tick"
GM:Tick(  ) 
 Description
Called every server tick. Serverside, this is similar to GM:Think.


"GM/StartGame"
GM:StartGame(  ) 
 Description
Called when you start a new game via the menu.


"GM/Think"
GM:Think(  ) 
 Description
Called every frame on client and every tick on server.
See GM:Tick for a hook that runs every tick on both the client and server.



NOTE


This hook WILL NOT run if the server is empty, unless you set the ConVar sv_hibernate_think to 1


"GM/ShouldDrawLocalPlayer"
GM:ShouldDrawLocalPlayer( Player ply ) 
 Description
Called to determine if the LocalPlayer should be drawn.



NOTE


If youre using this hook to draw a player for a GM:CalcView hook, then you may want to consider using the drawviewer variable you can use in your CamData structure table instead.


 Arguments

 Player ply


The player

 Returns

 boolean


True to draw the player, false to hide.


"GM/TranslateActivity"
GM:TranslateActivity( Player ply, number act ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Allows you to translate player activities.

 Arguments

 Player ply


The player

 Arguments

 number act


The activity. See ACT_ Enums

 Returns

 number


The new, translated activity


"GM/UpdateAnimation"
GM:UpdateAnimation( Player ply, Vector velocity, number maxSeqGroundSpeed ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Animation updates (pose params etc) should be done here.

 Arguments

 Player ply


The player to update the animation info for.

 Arguments

 Vector velocity


The players velocity.

 Arguments

 number maxSeqGroundSpeed


Speed of the animation - used for playback rate scaling.


"GM/StartEntityDriving"
GM:StartEntityDriving( Entity ent, Player ply ) 
 Description
Called right before an entity starts driving. Overriding this hook will cause it to not call drive.Start and the player will not begin driving the entity.

 Arguments

 Entity ent


The entity that is going to be driven

 Arguments

 Player ply


The player that is going to drive the entity


"GM/WorkshopDownloadedFile"
GM:WorkshopDownloadedFile( number id, string title ) 
 Description
Called when an addon from the Steam workshop finishes downloading. Used by default to update details on the workshop downloading panel.

 Arguments

 number id


Workshop ID of addon.

 Arguments

 string title


Name of addon.


"GM/VehicleMove"
GM:VehicleMove( Player ply, Vehicle veh, CMoveData mv ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Called when you are driving a vehicle. This hook works just like GM:Move.
This hook is called before GM:Move and will be called when GM:PlayerTick is not.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Player ply


Player who is driving the vehicle

 Arguments

 Vehicle veh


The vehicle being driven

 Arguments

 CMoveData mv


Move data


"GM/VGUIMousePressed"
GM:VGUIMousePressed( Panel pnl, number mouseCode ) 
 Description Called when a mouse button is pressed on a VGUI element or menu.
 Arguments

 Panel pnl


Panel that currently has focus.

 Arguments

 number mouseCode


The key that the player pressed using MOUSE_ Enums.


"GM/WorkshopDownloadFile"
GM:WorkshopDownloadFile( number id, number imageID, string title, number size ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Called when an addon from the Steam workshop begins downloading. Used by default to place details on the workshop downloading panel.

 Arguments

 number id


Workshop ID of addon.

 Arguments

 number imageID


ID of addons preview image.
For example, for Extended Spawnmenu addon, the image URL is
http://cloud-4.steamusercontent.com/ugc/702859018846106764/9E7E1946296240314751192DA0AD15B6567FF92D/

So, the value of this argument would be 702859018846106764.

 Arguments

 string title


Name of addon.

 Arguments

 number size


File size of addon in bytes.


"GM/WeaponEquip"
GM:WeaponEquip( Weapon weapon, Player owner ) 
 Description
Called as a weapon entity is picked up by a player.



NOTE


At the time when this hook is called Entity:GetOwner will return NULL. The owner is set on the next frame




NOTE


This will not be called when picking up a weapon you already have as the weapon will be removed and WEAPON:EquipAmmo will be called instead


 Arguments

 Weapon weapon


The equipped weapon.

 Arguments

 Player owner


The player that is picking up the weapon.


"GM/StartCommand"
GM:StartCommand( Player ply, CUserCmd ucmd ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Allows you to change the players inputs before they are processed by the server.
This is basically a shared version of GM:CreateMove.



NOTE


This function is also called for bots, making it the best solution to control them so far




NOTE


This hook is predicted, but not by usual means, this hook is called when a CUserCmd is generated on the client, and on the server when it is received, so it is necessary for this hook to be called clientside even on singleplayer


 Arguments

 Player ply


The player

 Arguments

 CUserCmd ucmd


The usercommand

 Examples
 Example
Example of how youd control a bot using this hook.
The example causes all bots to go kill any players they can get to with crowbars.

hook.Add( StartCommand, StartCommandExample, function( ply, cmd )

	-- If the player is not a bot or the bot is dead, do not do anything
	-- TODO: Maybe spawn the bot manually here if ( the bot is dead
	if ( !ply:IsBot() or!ply:Alive() ) then return end

	-- Clear any default movement or actions
	cmd:ClearMovement() 
	cmd:ClearButtons()

	-- Bot has no enemy, try to find one
	if ( !IsValid( ply.CustomEnemy ) ) then
		-- Scan through all players and select one not dead
		for id, pl in pairs( player.GetAll() ) do
			if ( !pl:Alive() or pl == ply ) then continue end -- Dont select dead players or self as enemies 
			ply.CustomEnemy = pl
		end
		-- TODO: Maybe add a Line Of Sight check so bots wont walk into walls to try to get to their target
		-- Or add path finding so bots can find their way to enemies
	end

	-- We failed to find an enemy, dont do anything
	if ( !IsValid( ply.CustomEnemy ) ) then return end

	-- Move forwards at the bots normal walking speed
	cmd:SetForwardMove( ply:GetWalkSpeed() )

	-- Aim at our enemy
	if ( ply.CustomEnemy:IsPlayer() ) then
		cmd:SetViewAngles( ( ply.CustomEnemy:GetShootPos() - ply:GetShootPos() ):GetNormalized():Angle() )
	else
		cmd:SetViewAngles( ( ply.CustomEnemy:GetPos() - ply:GetShootPos() ):GetNormalized():Angle() )
	end

	-- Give the bot a crowbar if ( the bot doesnt have one yet
	if ( SERVER and!ply:HasWeapon( weapon_crowbar ) ) then ply:Give( weapon_crowbar ) end

	-- Select the crowbar
	cmd:SelectWeapon( ply:GetWeapon( weapon_crowbar ) )

	-- Hold Mouse 1 to cause the bot to attack
	cmd:SetButtons( IN_ATTACK )

	-- Enemy is dead, clear our enemy so that we may acquire a new one
	if ( !ply.CustomEnemy:Alive() ) then
		ply.CustomEnemy = nil
	end

end )


"GM/WorkshopEnd"
GM:WorkshopEnd(  ) 
 Description
Called when downloading content from Steam workshop ends. Used by default to hide fancy workshop downloading panel.


"NEXTBOT/BehaveStart"
NEXTBOT:BehaveStart(  ) 
 Description
Called to initialize the behaviour.
You shouldnt override this - its used to kick off the coroutine that runs the bots behaviour.
This is called automatically when the NPC is created, there should be no need to call it manually.


"GM/WorkshopSubscriptionsProgress"
GM:WorkshopSubscriptionsProgress( number num, number max ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Called by the engine when the game initially fetches subscriptions to be displayed on the bottom of the main menu screen.

 Arguments

 number num


Amount of subscribed addons that have info retrieved.

 Arguments

 number max


Total amount of subscribed addons that need their info retrieved.


"NEXTBOT/BehaveUpdate"
NEXTBOT:BehaveUpdate( number interval ) 
 Description
Called to update the bots behaviour.

 Arguments

 number interval


How long since the last update


"GM/VGUIMousePressAllowed"
GM:VGUIMousePressAllowed( number button ) 
 Description Called when user clicks on a VGUI panel.
 Arguments

 number button


The button that was pressed, see MOUSE_ Enums

 Returns

 boolean


Return true if the mouse click should be ignored or not.


"GM/VariableEdited"
GM:VariableEdited( Entity ent, Player ply, string key, string val, table editor ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example




 Description
Called when a variable is edited on an Entity (called by Edit Properties... menu)

 Arguments

 Entity ent


The entity being edited

 Arguments

 Player ply


The player doing the editing

 Arguments

 string key


The name of the variable

 Arguments

 string val


The new value, as a string which will later be converted to its appropriate type

 Arguments

 table editor


The edit table defined in Entity:NetworkVar

 Examples
 Example
From base/gamemode/variable_edit.lua

function GM:VariableEdited( ent, ply, key, val, editor )
    if ( !IsValid( ent ) ) then return end
    if ( !IsValid( ply ) ) then return end
    local CanEdit = hook.Run( CanEditVariable, ent, ply, key, val, editor )
    if ( !CanEdit ) then return end
    ent:EditValue( key, val )
end


"GM/WorkshopStart"
GM:WorkshopStart(  ) 
 Description
Called when downloading content from Steam workshop begins. Used by default to show fancy workshop downloading panel.
The order of Workshop hooks is this:

 WorkshopStart
 WorkshopDownloadTotals
 These are called for each new item:
 WorkshopDownloadFile
 WorkshopDownloadProgress - This is called until the file is finished
 WorkshopDownloadedFile


 WorkshopEnd


"NEXTBOT/OnLandOnGround"
NEXTBOT:OnLandOnGround( Entity ent ) 
 Description
Called when the bots feet return to the ground.

 Arguments

 Entity ent


The entity the nextbot has landed on.


"NEXTBOT/BodyUpdate"
NEXTBOT:BodyUpdate(  ) 
 Description
Called to update the bots animation.


"GM/WorkshopDownloadProgress"
GM:WorkshopDownloadProgress( number id, number imageID, string title, number downloaded, number expected ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Called while an addon from the Steam workshop is downloading. Used by default to update details on the fancy workshop download panel.

 Arguments

 number id


Workshop ID of addon.

 Arguments

 number imageID


ID of addons preview image.
For example, for Extended Spawnmenu addon, the image URL is
http://cloud-4.steamusercontent.com/ugc/702859018846106764/9E7E1946296240314751192DA0AD15B6567FF92D/

So, the value of this argument would be 702859018846106764.

 Arguments

 string title


Name of addon.

 Arguments

 number downloaded


Current bytes of addon downloaded.

 Arguments

 number expected


Expected file size of addon in bytes.


"GM/WorkshopDownloadTotals"
GM:WorkshopDownloadTotals( number remain, number total ) 
 Description
Called after GM:WorkshopStart.

 Arguments

 number remain


Remaining addons to download

 Arguments

 number total


Total addons needing to be downloaded


"NEXTBOT/OnKilled"
NEXTBOT:OnKilled( CTakeDamageInfo info ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Called when the bot gets killed.

 Arguments

 CTakeDamageInfo info


The damage info

 Examples
 Example
Example of NPC becoming a ragdoll after death and sending death notification to everybodys killfeed.

function ENT:OnKilled( dmginfo )

	hook.Call( OnNPCKilled, GAMEMODE, self, dmginfo:GetAttacker(), dmginfo:GetInflictor() )

	self:BecomeRagdoll( dmginfo )

end


 Examples
 Example
Removes the body after 5 seconds, to prevent having lots of bodies laying around after a while.

function ENT:OnKilled( dmginfo )
	
	hook.Call( OnNPCKilled, GAMEMODE, self, dmginfo:GetAttacker(), dmginfo:GetInflictor() )
	
	local body = ents.Create( prop_ragdoll )
	body:SetPos( self:GetPos() )
	body:SetModel( self:GetModel() )
	body:Spawn()
	
	self:Remove()
	
	timer.Simple( 5, function()
	
		body:Remove()
		
	end )

end
Output:

The body disappears after 5 seconds.


"NEXTBOT/OnInjured"
NEXTBOT:OnInjured( CTakeDamageInfo info ) 
 Description
Called when the bot gets hurt.

 Arguments

 CTakeDamageInfo info


The damage info


"NEXTBOT/OnOtherKilled"
NEXTBOT:OnOtherKilled( Entity victim, CTakeDamageInfo info ) 
 Description
Called when someone else or something else has been killed.

 Arguments

 Entity victim


The victim that was killed

 Arguments

 CTakeDamageInfo info


The damage info


"NEXTBOT/OnStuck"
NEXTBOT:OnStuck(  ) 
 Description
Called when the bot thinks it is stuck.

 Examples
 Example
Kills the bot when getting stuck, using a new damageinfo object.

function ENT:OnStuck()

	local dmginfo = DamageInfo()
	dmginfo:SetAttacker( self )

	self:OnKilled( dmginfo )
	
end


"NEXTBOT/OnLeaveGround"
NEXTBOT:OnLeaveGround( Entity ent ) 
 Description
Called when the bots feet leave the ground - for whatever reason.

 Arguments

 Entity ent


The entity the bot jumped from.


"NEXTBOT/OnContact"
NEXTBOT:OnContact( Entity ent ) 
 Description
Called when the nextbot touches another entity.

 Arguments

 Entity ent


The entity the nextbot came in contact with.


"NEXTBOT/OnUnStuck"
NEXTBOT:OnUnStuck(  ) 
 Description
Called when the bot thinks it is un-stuck.


"NEXTBOT/OnIgnite"
NEXTBOT:OnIgnite(  ) 
 Description
Called when the bot is ignited.


"NEXTBOT/OnNavAreaChanged"
NEXTBOT:OnNavAreaChanged( CNavArea old, CNavArea new ) 
 Description
Called when the nextbot enters a new navigation area.

 Arguments

 CNavArea old


The navigation area the bot just left

 Arguments

 CNavArea new


The navigation area the bot just entered


"NEXTBOT/Think"
NEXTBOT:Think(  ) 
 Description
Called every tick on the server. Called every frame on the client.

 Returns

 boolean


Return true if you used Entity:NextThink to override the next execution time.


"PANEL/ApplySchemeSettings"
PANEL:ApplySchemeSettings(  ) 
 Description
Called whenever the panel should apply its scheme(style).


"PANEL/AnimationThink"
PANEL:AnimationThink(  ) 
 Description
Called every frame unless Panel:IsVisible is set to false. Similar to PANEL:Think, but can be disabled by Panel:SetAnimationEnabled as explained below.
If you are overriding this, you must call Panel:AnimationThinkInternal every frame, else animations will cease to work.
If you want to disable this hook with Panel:SetAnimationEnabled, you must call it after defining this hook. Once disabled, a custom hook will not be re-enabled by Panel:SetAnimationEnabled again - the hook will have to be re-defined.


"PANEL/GenerateExample"
PANEL:GenerateExample( string class, Panel dpropertysheet, number width, number height ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Called when the panel should generate example use case / example code to use for this panel. Used in the panel opened by derma_controls console command.

 Arguments

 string class


The classname of the panel to generate example for. This will be the class name of your panel.

 Arguments

 Panel dpropertysheet


A DPropertySheet to add your example to. See examples below.

 Arguments

 number width


Width of the property sheet?

 Arguments

 number height


Width of the property sheet?

 Examples
 Example
Example usage of this hook from DButtons code.

function PANEL:GenerateExample( ClassName, PropertySheet, Width, Height )

	local ctrl = vgui.Create( ClassName )
	ctrl:SetText( Example Button )
	ctrl:SetWide( 200 )

	PropertySheet:AddSheet( ClassName, ctrl, nil, true, true )

end

derma.DefineControl( DButton, A standard Button, PANEL, DLabel )
Output:

A tab named DButton will appear in derma_controls menu.


"PANEL/LoadCookies"
PANEL:LoadCookies(  ) 
 Description
Called after Panel:SetCookieName is called on this panel to apply the just loaded cookie values for this panel.

 Examples
 Example
function PANEL:LoadCookies()

	local value = self:GetCookieNumber( SavedCookieName, 0 )
	print( value )

	-- Do your stuff with the loaded value

end


"PANEL/ActionSignal"
PANEL:ActionSignal( string signalName, string signalValue ) 
 Description
Called whenever a panel receives a command signal from one of its children.
This hook is called when using Panel:Command, when clicking a Button with Panel:SetCommand set, and when clicking text within a RichText panel that is marked as click-able.

 Arguments

 string signalName


The name of the signal, usually the sender of the signal or the command name.

 Arguments

 string signalValue


The value of the signal, usually a command argument.


"PANEL/OnChildRemoved"
PANEL:OnChildRemoved( Panel child ) 
 Description
Called whenever a child of the panel is about to removed.

 Arguments

 Panel child


The child which is about to be removed.


"PANEL/DragHoverClick"
PANEL:DragHoverClick( number hoverTime ) 
 Description
Called when an object is dragged and hovered over this panel for 0.1 seconds.
This is used by DPropertySheet and DTree, for example to open a tab or expand a node when an object is hovered over it.

 Arguments

 number hoverTime


The time the object was hovered over this panel.


"PANEL/Init"
PANEL:Init(  ) 
 Description
Called when the panel is created. This is called for each base type that the panel has.

 Examples
 Example
Shows how this method is called recursively for each base type a panel has.

local BASE = {}

function BASE:Init()
	print( Base Init Called )
end


local PANEL = {}

function PANEL:Init()
	print( Panel Init Called )
end


vgui.Register( MyBase, BASE, DFrame )
vgui.Register( MyPanel, PANEL, MyBase )

local panel = vgui.Create( MyPanel )
Output:

Base Init Called
Panel Init Called


"NEXTBOT/Use"
NEXTBOT:Use( Entity activator, Entity caller, number useType, number value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Called when a player uses the entity.

 Arguments

 Entity activator


The initial cause for the use.

 Arguments

 Entity caller


The entity that directly triggered the use.

 Arguments

 number useType


The type of use, see USE_ Enums

 Arguments

 number value


Any passed value


"PANEL/OnChangeTargetURL"
PANEL:OnChangeTargetURL( string targetURL ) 
 Description
Called by HTML panels when the target URL of the frame has changed, this happens when you hover over a link.

 Arguments

 string targetURL


New target URL.


"PANEL/OnFocusChanged"
PANEL:OnFocusChanged( boolean gained ) 
 Description
Called whenever the panel gained or lost focus.



NOTE


Panel:HasFocus will only be updated on the next frame and will return the old value at the time this hook is run. Same goes for vgui.GetKeyboardFocus.


 Arguments

 boolean gained


Is the focus was gained ( true ) or lost ( false )


"PANEL/OnDeactivate"
PANEL:OnDeactivate(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Called when we are deactivated during level load. Used by the loading screen panel.


"PANEL/DroppedOn"
PANEL:DroppedOn( Panel pnl ) 
 Description
Called when this panel is dropped onto another panel.
Only works for panels derived from DDragBase.

 Arguments

 Panel pnl


The panel we are dropped onto


"PANEL/OnCursorEntered"
PANEL:OnCursorEntered(  ) 
 Description
Called whenever the cursor entered the panels bounds.


"PANEL/OnActivate"
PANEL:OnActivate(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Called when we are activated during level load. Used by the loading screen panel.


"PANEL/OnDocumentReady"
PANEL:OnDocumentReady( string url ) 
 Description
Called by HTML panels when the panels DOM has been set up. You can run JavaScript in here.

 Arguments

 string url


The URL of the current page.


"PANEL/OnDrop"
PANEL:OnDrop(  ) 
 Description
Were being dropped on something
We can create a new panel here and return it, so that instead of dropping us - it drops the new panel instead! We remain where we are!
Only works for panels derived from DDragBase.

 Returns

 Panel


The panel to drop instead of us. By default you should return self.


"PANEL/OnChangeTitle"
PANEL:OnChangeTitle( string newTitle ) 
 Description
Called by HTML panels when the title of the loaded page has been changed.

 Arguments

 string newTitle


The new title of the page.


"PANEL/OnCursorExited"
PANEL:OnCursorExited(  ) 
 Description
Called whenever the cursor left the panels bounds.


"PANEL/OnCursorMoved"
PANEL:OnCursorMoved( number cursorX, number cursorY ) 
 Description
Called whenever the cursor was moved with the panels bounds.

 Arguments

 number cursorX


The new x position of the cursor relative to the panels origin.

 Arguments

 number cursorY


The new y position of the cursor relative to the panels origin.


"PANEL/OnChildAdded"
PANEL:OnChildAdded( Panel child ) 
 Description
Called whenever a child was parented to the panel.



BUG


This is called before the panels metatable is set.



 Arguments

 Panel child


The child which was added.


"PANEL/OnKeyCodePressed"
PANEL:OnKeyCodePressed( number keyCode ) 
 Description
Called whenever a keyboard key was pressed while the panel is focused.



BUG


This is not run for ESC/cancelselect binding.



 Arguments

 number keyCode


They key code of the pressed key, see KEY_ Enums.


"PANEL/OnRemove"
PANEL:OnRemove(  ) 
 Description
Called when the panel is about to be removed.


"PANEL/OnMouseReleased"
PANEL:OnMouseReleased( number keyCode ) 
 Description
Called whenever a mouse key was released while the panel is focused.

 Arguments

 number keyCode


They key code of the key released, see MOUSE_ Enums.


"PANEL/OnMousePressed"
PANEL:OnMousePressed( number keyCode ) 
 Description
Called whenever a mouse key was pressed while the panel is focused.

 Arguments

 number keyCode


They key code of the key pressed, see MOUSE_ Enums.


"PANEL/OnChildViewCreated"
PANEL:OnChildViewCreated( string sourceURL, string targetURL, boolean isPopup ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Called by HTML panels when the page attempts to open a new child view (such as a popup or new tab).

 Arguments

 string sourceURL


The URL of the page requesting to create a child.

 Arguments

 string targetURL


The URL of the requested child.

 Arguments

 boolean isPopup


True if the requested view is a popup.


"PANEL/OnMouseWheeled"
PANEL:OnMouseWheeled( number scrollDelta ) 
 Description
Called whenever the mouse wheel was used.

 Arguments

 number scrollDelta


The scroll delta, indicating how much the user turned the mouse wheel.


"PANEL/OnStopDragging"
PANEL:OnStopDragging(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Called by Panel:DragMouseRelease when the panel object is released after being dragged.


"PANEL/OnKeyCodeReleased"
PANEL:OnKeyCodeReleased( number keyCode ) 
 Description
Called whenever a keyboard key was released while the panel is focused.



BUG


This is not run for TILDE/toggleconsole binding.



 Arguments

 number keyCode


They key code of the released key, see KEY_ Enums.


"PANEL/Paint"
PANEL:Paint( number width, number height ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Called whenever the panel should be drawn.
You can create panels with a customized appearance by overriding their Paint() function, which will prevent the default appearance from being drawn.



NOTE


Render operations from the surface library (and consequentially the draw library) are always offset by the global position of this panel, as seen in the example below




NOTE


This hook will not run if the panel is completely off the screen. The hook will still run however if any parts of the panel are still on screen.


 Arguments

 number width


The panels width.

 Arguments

 number height


The panels height.

 Returns

 boolean


Returning true prevents the background from being drawn.

 Examples
 Example
Creates a DPanel and overrides its Paint() function to draw a 100x100 pixel black rounded box in the center of the screen.

local panel = vgui.Create( DPanel )
panel:SetSize( 100, 100 )
panel:SetPos( ScrW() / 2 - 50, ScrH() / 2 - 50 )

function panel:Paint( w, h )
    draw.RoundedBox( 8, 0, 0, w, h, Color( 0, 0, 0 ) )
end


"PANEL/OnScreenSizeChanged"
PANEL:OnScreenSizeChanged( number oldWidth, number oldHeight ) 
 Description
Called when the players screen resolution of the game changes.
ScrW and ScrH will return the new values when this hook is called.


Next Update ChangeArguments only available in the next update.
 Arguments

 number oldWidth


The previous width of the games window

 Arguments

 number oldHeight


The previous height of the games window


"PANEL/OnSizeChanged"
PANEL:OnSizeChanged( number newWidth, number newHeight ) 
 Description
Called just after the panel size changes.
All size functions will return the new values when this hook is called.



WARNING


Changing the panel size in this hook will cause an infinite loop!




Next Update ChangeThis feature is only available in the next update.
 Arguments

 number newWidth


The new width of the panel

 Arguments

 number newHeight


The new height of the panel


"PANEL/PostAutoRefresh"
PANEL:PostAutoRefresh(  ) 
 Description
Only works on elements defined with derma.DefineControl and only if the panel has AllowAutoRefresh set to true.
Called after derma.DefineControl is called with panels class name.
See also PANEL:PreAutoRefresh


"PANEL/PaintOver"
PANEL:PaintOver( number width, number height ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Called whenever the panel and all its children were drawn, return true to override the default drawing.

 Arguments

 number width


The panels current width.

 Arguments

 number height


The panels current height.

 Returns

 boolean


Should we disable default PaintOver rendering? This is useful in case with Derma panels that use Derma hooks.


"PANEL/OnStartDragging"
PANEL:OnStartDragging(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Called by dragndrop.StartDragging when the panel starts being dragged.


"PANEL/Think"
PANEL:Think(  ) 
 Description
Called every frame while Panel:IsVisible is true.


"PANEL/PerformLayout"
PANEL:PerformLayout( number width, number height ) 
 Description
Called whenever the panels layout was invalidated. This means all child panels must be re-positioned to fit the possibly new size of this panel.



WARNING


Do NOT call this function directly. Use Panel:InvalidateLayout instead!


 Arguments

 number width


The panels current width.

 Arguments

 number height


The panels current height.


"PLAYER/Move"
PLAYER:Move( CMoveData mv ) 
 Description
Called from GM:Move.



WARNING


This hook will not work if the current gamemode overrides GM:Move and does not call this hook.




NOTE


This hook is run after the drive.Move has been called.


 Arguments

 CMoveData mv


Movement information

 Returns

 boolean


Return true to prevent default action


"PLAYER/Loadout"
PLAYER:Loadout(  ) 
 Description
Called on spawn to give the player their default loadout


"PLAYER/FinishMove"
PLAYER:FinishMove( CMoveData mv ) 
 Description
Called from GM:FinishMove.



WARNING


This hook will not work if the current gamemode overrides GM:FinishMove and does not call this hook.




NOTE


This hook is run after the drive.FinishMove has been called.


 Arguments

 CMoveData mv


 Returns

 boolean


Return true to prevent default action


"PLAYER/Init"
PLAYER:Init(  ) 
 Description
Called when the class object is created


"PLAYER/PreDrawViewModel"
PLAYER:PreDrawViewModel( Entity viewmodel, Entity weapon ) 
 Description
Called before the viewmodel is drawn

 Arguments

 Entity viewmodel


The viewmodel

 Arguments

 Entity weapon


The weapon


"PLAYER/SetModel"
PLAYER:SetModel(  ) 
 Description
Called when we need to set player model from the class.



NOTE


This will only be called if you have not overridden GM:PlayerSetModel or call this function from it or anywhere else using player_manager.RunClass


"PLAYER/GetHandsModel"
PLAYER:GetHandsModel(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Called on player spawn to determine which hand model to use

 Returns

 table


A table containing info about view model hands model to be set. See examples.

 Examples
 Example
Default action of player_default class

function PLAYER:GetHandsModel()

	-- return { model = models/weapons/c_arms_cstrike.mdl, skin = 1, body = 0100000 }


	local playermodel = player_manager.TranslateToPlayerModelName( self.Player:GetModel() )
	return player_manager.TranslatePlayerHands( playermodel )

end
Output:

View model hands model is chosen according to players player model.


"PLAYER/ViewModelChanged"
PLAYER:ViewModelChanged( Entity viewmodel, string old, string new ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Called when the player changes their weapon to another one causing their viewmodel model to change

 Arguments

 Entity viewmodel


The viewmodel that is changing

 Arguments

 string old


The old model

 Arguments

 string new


The new model


"PLAYER/SetupDataTables"
PLAYER:SetupDataTables(  ) 
 Description
Setup the network table accessors.



BUG


This is only called for the local player clientside.



 Examples
 Example
Example usage.

function PLAYER:SetupDataTables()
	self.Player:NetworkVar( Int, 0, Money )
end


"PANEL/PreAutoRefresh"
PANEL:PreAutoRefresh(  ) 
 Description
Only works on elements defined with derma.DefineControl and only if the panel has AllowAutoRefresh set to true.
Called when derma.DefineControl is called with this panels class name before applying changes to this panel.
See also PANEL:PostAutoRefresh


"PLAYER/PostDrawViewModel"
PLAYER:PostDrawViewModel( Entity viewmodel, Entity weapon ) 
 Description
Called after the viewmodel has been drawn

 Arguments

 Entity viewmodel


The viewmodel

 Arguments

 Entity weapon


The weapon


"PLAYER/Spawn"
PLAYER:Spawn(  ) 
 Description
Called when the player spawns


"PLAYER/StartMove"
PLAYER:StartMove( CMoveData mv, CUserCmd cmd ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Called from GM:CreateMove.



WARNING


This hook will not work if the current gamemode overrides GM:SetupMove and does not call this hook.




NOTE


This hook is run after the drive.StartMove has been called.


 Arguments

 CMoveData mv


 Arguments

 CUserCmd cmd


 Returns

 boolean


Return true to prevent default action


"SANDBOX/AddToolMenuTabs"
SANDBOX:AddToolMenuTabs(  ) 
 Description
This hook is used to add new tool tabs to spawnmenu.

 Examples
 Example
Add a new tab and a few categories into it.

hook.Add( AddToolMenuTabs, myHookClass, function()
	spawnmenu.AddToolTab( myTab, My Tab, icon16/shield.png ) -- Add a new tab

	spawnmenu.AddToolCategory( myTab, myCategory, My Category ) -- Add a category into that new tab

	spawnmenu.AddToolMenuOption( myTab, myCategory, myEntry, My Entry, , , function( panel )
		panel:AddControl( Header, { Text = Hello! } )
	end ) -- Add an entry to our new category
end )


"SANDBOX/AddGamemodeToolMenuTabs"
SANDBOX:AddGamemodeToolMenuTabs(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This hook is used to add default tool tabs to spawnmenu.
Do not override or hook this function, use SANDBOX:AddToolMenuTabs!


"SANDBOX/CanTool"
SANDBOX:CanTool( Player ply, table tr, string tool ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Called when a player attempts to fire their tool gun. Return true to specifically allow the attempt, false to block it.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Player ply


The player who attempted to use their toolgun.

 Arguments

 table tr


A trace from the players eye to where in the world their crosshair/cursor is pointing. See TraceResult structure

 Arguments

 string tool


The tool mode the player currently has selected.

 Returns

 boolean


Can use toolgun or not.

 Examples
 Example
Stops players from removing doors.

function GM:CanTool( ply, tr, tool )
   if ( tool == remover and IsValid( tr.Entity ) and tr.Entity:GetClass() == prop_door_rotating ) then
      return false
   end
end


"SANDBOX/CanProperty"
SANDBOX:CanProperty( Player ply, string property, Entity ent ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Controls if a property can be used or not.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Player ply


Player, that tried to use the property

 Arguments

 string property


Class of the property that is tried to use, for example - bonemanipulate

 Arguments

 Entity ent


The entity, on which property is tried to be used on

 Returns

 boolean


Return false to disallow using that property

 Examples
 Example
Stops non-admins from using the remover property.

hook.Add( CanProperty, block_remover_property, function( ply, property, ent )
	if ( !ply:IsAdmin() &amp;&amp; property == remover ) then return false end
end )


"SANDBOX/CanDrive"
SANDBOX:CanDrive( Player ply, Entity ent ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Called when a player attempts to drive a prop via Prop Drive



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Player ply


The player who attempted to use Prop Drive.

 Arguments

 Entity ent


The entity the player is attempting to drive

 Returns

 boolean


Return true to allow driving, false to disallow

 Examples
 Example
Stops nonadmins from using Prop Drive

function GM:CanDrive( ply, ent )
	if!ply:IsAdmin() then return false end
end


"SANDBOX/AddGamemodeToolMenuCategories"
SANDBOX:AddGamemodeToolMenuCategories(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This hook is used to add default categories to spawnmenu tool tabs.
Do not override or hook this function, use SANDBOX:AddToolMenuCategories!


"SANDBOX/AddToolMenuCategories"
SANDBOX:AddToolMenuCategories(  ) 
 Description
This hook is used to add new categories to spawnmenu tool tabs.

 Examples
 Example
Adds default categories to Utilities tab in spawnmenu.

local function CreateUtilitiesCategories()

        spawnmenu.AddToolCategory( Utilities, User, #spawnmenu.utilities.user )
        spawnmenu.AddToolCategory( Utilities, Admin, #spawnmenu.utilities.admin )

end        
hook.Add( AddToolMenuCategories, CreateUtilitiesCategories, CreateUtilitiesCategories )


"SANDBOX/PaintNotes"
SANDBOX:PaintNotes(  ) 
 Description
Called from GM:HUDPaint; does nothing by default.



NOTE


This cannot be used with hook.Add


"SANDBOX/ContextMenuOpen"
SANDBOX:ContextMenuOpen(  ) 
 Description
Called when the context menu is trying to be opened. Return false to disallow it.

 Returns

 boolean


Allow menu to open.


"SANDBOX/ContextMenuCreated"
SANDBOX:ContextMenuCreated( Panel g_ContextMenu ) 
 Description
Called when the context menu is created.

 Arguments

 Panel g_ContextMenu


The created context menu panel


"SANDBOX/ContentSidebarSelection"
SANDBOX:ContentSidebarSelection( Panel parent, Panel node ) 
 Description
Called when player selects an item on the spawnmenu sidebar at the left.

 Arguments

 Panel parent


The panel that holds spawnicons and the sidebar of spawnmenu

 Arguments

 Panel node


The item player selected


"SANDBOX/PlayerGiveSWEP"
SANDBOX:PlayerGiveSWEP( Player ply, string weapon, table swep ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Called when a player attempts to give themselves a weapon from the Q menu. ( Left mouse clicks on an icon )

 Arguments

 Player ply


The player who attempted to give themselves a weapon.

 Arguments

 string weapon


Class name of the weapon the player tried to give themselves.

 Arguments

 table swep


The swep table of this weapon, see SWEP structure

 Returns

 boolean


Can the SWEP be given to the player

 Examples
 Example
Stops non-admins from giving themselves weapons.

function GM:PlayerGiveSWEP( ply, class, swep )
 if ( not ply:IsAdmin() ) then
  return false
 end
end


"SANDBOX/PaintWorldTips"
SANDBOX:PaintWorldTips(  ) 
 Description
Called from GM:HUDPaint to draw world tips. By default, enabling cl_drawworldtooltips will stop world tips from being drawn here.
See AddWorldTip for more information.



NOTE


This cannot be used with hook.Add


"SANDBOX/PlayerSpawnedSWEP"
SANDBOX:PlayerSpawnedSWEP( Player ply, Entity ent ) 
 Description
Called after the player has spawned a scripted weapon from the spawnmenu with a middle mouse click.
For left mouse click spawns, see SANDBOX:PlayerGiveSWEP.

 Arguments

 Player ply


The player that spawned the SWEP

 Arguments

 Entity ent


The SWEP itself


"SANDBOX/PersistenceLoad"
SANDBOX:PersistenceLoad(  ) 
 Description
Called when persistent props are loaded.


"SANDBOX/PlayerSpawnedProp"
SANDBOX:PlayerSpawnedProp( Player ply, string model, Entity entity ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Called when a player has successfully spawned a prop from the Q menu.

 Arguments

 Player ply


The player who spawned a prop.

 Arguments

 string model


Path to the model of the prop the player is attempting to spawn.

 Arguments

 Entity entity


The entity that was spawned.

 Examples
 Example
Turns the spawned prop green.

function GM:PlayerSpawnedProp( ply, model, ent )
	ent:SetColor( Color( 0, 255, 0 ) )
end


"SANDBOX/PersistenceSave"
SANDBOX:PersistenceSave(  ) 
 Description
Called when persistent props are saved.


"SANDBOX/PlayerSpawnEffect"
SANDBOX:PlayerSpawnEffect( Player ply, string model ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Called to ask if player allowed to spawn a particular effect or not.

 Arguments

 Player ply


The player that wants to spawn an effect

 Arguments

 string model


The effect model that player wants to spawn

 Returns

 boolean


Return false to disallow spawning that effect


"SANDBOX/PlayerSpawnNPC"
SANDBOX:PlayerSpawnNPC( Player ply, string npc_type, string weapon ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Called to ask if player allowed to spawn a particular NPC or not.

 Arguments

 Player ply


The player that wants to spawn that NPC

 Arguments

 string npc_type


The npc type that player is trying to spawn

 Arguments

 string weapon


The weapon of that NPC

 Returns

 boolean


Return false to disallow spawning that NPC


"SANDBOX/PlayerSpawnObject"
SANDBOX:PlayerSpawnObject( Player ply, string model, number skin ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Called to ask whether player is allowed to spawn any objects.

 Arguments

 Player ply


The player in question

 Arguments

 string model


Modelname

 Arguments

 number skin


Skin number

 Returns

 boolean


Return false to disallow him spawning anything


"SANDBOX/PlayerSpawnedSENT"
SANDBOX:PlayerSpawnedSENT( Player ply, Entity ent ) 
 Description
Called after the player has spawned a scripted entity.

 Arguments

 Player ply


The player that spawned the SENT

 Arguments

 Entity ent


The spawned SENT


"SANDBOX/PlayerSpawnedRagdoll"
SANDBOX:PlayerSpawnedRagdoll( Player ply, string model, Entity ent ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Called after the player spawned a ragdoll.

 Arguments

 Player ply


The player that spawned the ragdoll

 Arguments

 string model


The ragdoll model that player wants to spawn

 Arguments

 Entity ent


The spawned ragdoll itself


"SANDBOX/PlayerSpawnProp"
SANDBOX:PlayerSpawnProp( Player ply, string model ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Called when a player attempts to spawn a prop from the Q menu.

 Arguments

 Player ply


The player who attempted to spawn a prop.

 Arguments

 string model


Path to the model of the prop the player is attempting to spawn.

 Returns

 boolean


Should the player be able to spawn the prop or not.

 Examples
 Example
Stops non-admins from spawning props.

function GM:PlayerSpawnProp( ply, model )
	if ( !ply:IsAdmin() ) then
		return false
	end
end


"SANDBOX/PlayerSpawnRagdoll"
SANDBOX:PlayerSpawnRagdoll( Player ply, string model ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Called when a player attempts to spawn a ragdoll from the Q menu.

 Arguments

 Player ply


The player who attempted to spawn a ragdoll.

 Arguments

 string model


Path to the model of the ragdoll the player is attempting to spawn.

 Returns

 boolean


Should the player be able to spawn the ragdoll or not.

 Examples
 Example
Stops non-admins from spawning ragdolls.

function GM:PlayerSpawnRagdoll( ply, model )
	if ( not ply:IsAdmin() ) then
		return false
	end
end


"SANDBOX/PlayerSpawnSENT"
SANDBOX:PlayerSpawnSENT( Player ply, string class ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Called when a player attempts to spawn an Entity from the Q menu.

 Arguments

 Player ply


The player who attempted to spawn the entity.

 Arguments

 string class


Class name of the entity the player tried to spawn.

 Returns

 boolean


can_spawn

 Examples
 Example
Stops non-admins from spawning entities.

function GM:PlayerSpawnSENT( ply, class )
	if ( not ply:IsAdmin() then
		return false
	end
end


"SANDBOX/PlayerSpawnSWEP"
SANDBOX:PlayerSpawnSWEP( Player ply, string weapon, table swep ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Called when a player attempts to spawn a weapon from the Q menu. ( Mouse wheel clicks on an icon )

 Arguments

 Player ply


The player who attempted to spawn a weapon.

 Arguments

 string weapon


Class name of the weapon the player tried to spawn.

 Arguments

 table swep


Information about the weapon the player is trying to spawn, see SWEP structure

 Returns

 boolean


Can the SWEP be spawned

 Examples
 Example
Stops non-admins from spawning weapons.

hook.Add( PlayerSpawnSWEP, SpawnBlock, function( ply, class, info )
	if ( not ply:IsAdmin() then
		return false
	end
end )


"SANDBOX/PlayerSpawnedEffect"
SANDBOX:PlayerSpawnedEffect( Player ply, string model, Entity ent ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Called after the player spawned an effect.

 Arguments

 Player ply


The player that spawned the effect

 Arguments

 string model


The model of spawned effect

 Arguments

 Entity ent


The spawned effect itself


"SANDBOX/PlayerSpawnVehicle"
SANDBOX:PlayerSpawnVehicle( Player ply, string model, string name, table table ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Called to ask if player allowed to spawn a particular vehicle or not.

 Arguments

 Player ply


The player that wants to spawn that vehicle

 Arguments

 string model


The vehicle model that player wants to spawn

 Arguments

 string name


Vehicle name

 Arguments

 table table


Table of that vehicle, containing info about it

 Returns

 boolean


Return false to disallow spawning that vehicle


"SANDBOX/PlayerSpawnedNPC"
SANDBOX:PlayerSpawnedNPC( Player ply, Entity ent ) 
 Description
Called after the player spawned an NPC.

 Arguments

 Player ply


The player that spawned the NPC

 Arguments

 Entity ent


The spawned NPC itself


"SANDBOX/PopulateSTOOLMenu"
SANDBOX:PopulateSTOOLMenu(  ) 
 Description
Called to populate the Scripted Tool menu.

This feature is deprecated.
You should avoid using it as it may be removed in a future version.

This hook is never called. Use SANDBOX:PopulateToolMenu, instead.


"SANDBOX/SpawnMenuOpen"
SANDBOX:SpawnMenuOpen(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Called when spawnmenu is trying to be opened.



NOTE


Hiding the spawnmenu will not stop people from being able to use the various console commands to spawn in items, etc. See GM:PlayerSpawn* hooks for blocking actual spawning.


 Returns

 boolean


Return false to dissallow opening the spawnmenu

 Examples
 Example
Only allow the people you want to open the spawn menu.

local allowed =
{
	[STEAM_0:0:00000000] = true,
	[STEAM_0:0:10000000] = true
}


hook.Add( SpawnMenuOpen, SpawnMenuWhitelist, function()
	if ( !allowed[ LocalPlayer():SteamID() ] ) then
		return false
	end
end )


"SANDBOX/PlayerSpawnedVehicle"
SANDBOX:PlayerSpawnedVehicle( Player ply, Entity ent ) 
 Description
Called after the player spawned a vehicle.

 Arguments

 Player ply


The player that spawned the vehicle

 Arguments

 Entity ent


The vehicle itself


"SANDBOX/SpawnMenuEnabled"
SANDBOX:SpawnMenuEnabled(  ) 
 Description
If false is returned then the spawn menu is never created. This saves load times if your mod doesnt actually use the spawn menu for any reason.



BUG


This isnt actually called.



 Returns

 boolean


Whether to create spawnmenu or not.


"SANDBOX/PopulateToolMenu"
SANDBOX:PopulateToolMenu(  ) 
 Description
Add the STOOLS to the tool menu. You want to call spawnmenu.AddToolMenuOption in this hook.


"SANDBOX/PreReloadToolsMenu"
SANDBOX:PreReloadToolsMenu(  ) 
 Description
Called right before the Lua Loaded tool menus are reloaded.



BUG


This isnt actually called.


"SANDBOX/PopulatePropMenu"
SANDBOX:PopulatePropMenu(  ) 
 Description
This hook makes the engine load the spawnlist text files.
It calls spawnmenu.PopulateFromEngineTextFiles by default.

 Examples
 Example
Source code for this hook.

function GM:PopulatePropMenu()

	-- This function makes the engine load the spawn menu text files.
	-- We call it here so that any gamemodes not using the default 
	-- spawn menu can totally not call it.
	spawnmenu.PopulateFromEngineTextFiles()

end


"TOOL/DrawHUD"
TOOL:DrawHUD(  ) 
 Description
Called when WEAPON:DrawHUD of the toolgun is called, only when the user has this tool selected.


"SANDBOX/PostReloadToolsMenu"
SANDBOX:PostReloadToolsMenu(  ) 
 Description
Called right after the Lua Loaded tool menus are reloaded. This is a good place to set up any ControlPanels.


"TOOL/DrawToolScreen"
TOOL:DrawToolScreen( number width, number height ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Called after the default tool screen has been drawn.



NOTE


If this method exists on the TOOL object table, the default scrolling text will not be drawn




BUG


PNG rendering is broken in this rendering context.



 Arguments

 number width


The width of the tools screen in pixels.

 Arguments

 number height


The height of the tools screen in pixels.

 Examples
 Example
White text that says Hello world! on a black background.

function TOOL:DrawToolScreen( width, height )
	-- Draw black background
	surface.SetDrawColor( Color( 20, 20, 20 ) )
	surface.DrawRect( 0, 0, width, height )
	
	-- Draw white text in middle
	draw.SimpleText( Hello world!, DermaLarge, width / 2, height / 2, Color( 200, 200, 200 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
end
Output:


"TOOL/Deploy"
TOOL:Deploy(  ) 
 Description
Called when WEAPON:Deploy of the toolgun is called.
This is also called when switching from another tool on the server.


"TOOL/LeftClick"
TOOL:LeftClick( table tr ) 
 Description
Called when the user left clicks with the tool



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 table tr


A trace from users eyes to wherever he aims at. See TraceResult structure

 Returns

 boolean


Return true to make the tool gun beam and play fire animations, false otherwise


"TOOL/Holster"
TOOL:Holster(  ) 
 Description
Called when WEAPON:Holster of the toolgun is called, as well as when switching between different toolguns.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Examples
 Example
Clears any objects set by Tool:SetObject.

function TOOL:Holster()

	self:ClearObjects()

end


"WEAPON/AcceptInput"
WEAPON:AcceptInput( string inputName, Entity activator, Entity called, string data ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example




 Description
Called when another entity fires an event to this entity.

 Arguments

 string inputName


The name of the input that was triggered.

 Arguments

 Entity activator


The initial cause for the input getting triggered.

 Arguments

 Entity called


The entity that directly trigger the input.

 Arguments

 string data


The data passed.

 Returns

 boolean


Should we suppress the default action for this input?

 Examples
 Example
A workaround for weapons created by maps not taking into account spawnflags.

function SWEP:AcceptInput( name, activator, caller, data )

	-- Check for input and spawnflag
	if ( name == ConstraintBroken &amp;&amp; self:HasSpawnFlags( 1 ) ) then

		-- Freeze the weapon
		local phys = self:GetPhysicsObject()
		if ( IsValid( phys ) ) then phys:EnableMotion( false ) end
	
		-- Remove the spawnflag so it doesnt freeze the weapon when it is dropped
		local newflags = bit.band( self:GetSpawnFlags(), bit.bnot( 1 ) )
		self:SetKeyValue( spawnflags, newflags )
	end
end


"WEAPON/Ammo1"
WEAPON:Ammo1(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns how much of primary ammo the player has.

 Returns

 number


The amount of primary ammo player has

 Examples
 Example
As defined in weapon_base

function SWEP:Ammo1()
	return self.Owner:GetAmmoCount( self.Weapon:GetPrimaryAmmoType() )
end


"TOOL/FreezeMovement"
TOOL:FreezeMovement(  ) 
 Description
Called when WEAPON:Think of the toolgun is called, only when the user has this tool selected.

 Returns

 boolean


Return true to freeze the player


"WEAPON/Ammo2"
WEAPON:Ammo2(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns how much of secondary ammo the player has.

 Returns

 number


The amount of secondary ammo player has

 Examples
 Example
As defined in weapon_base

function SWEP:Ammo2()
	return self.Owner:GetAmmoCount( self.Weapon:GetSecondaryAmmoType() )
end


"TOOL/Think"
TOOL:Think(  ) 
 Description
Called when WEAPON:Think of the toolgun is called. This only happens when the tool gun is currently equipped/selected by the player and the selected tool is this tool.


"TOOL/RightClick"
TOOL:RightClick( table tr ) 
 Description
Called when the user right clicks with the tool.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 table tr


A trace from users eyes to wherever he aims at. See TraceResult structure

 Returns

 boolean


Return true to make the tool gun beam and play fire animations, false otherwise


"WEAPON/CalcViewModelView"
WEAPON:CalcViewModelView( Entity vm, Vector oldPos, Angle oldAng, Vector pos, Angle ang ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Returns
8 Returns


 Description
Allows overriding the position and angle of the viewmodel. This hook only works if you havent overridden GM:CalcViewModelView.

 Arguments

 Entity vm


The viewmodel entity

 Arguments

 Vector oldPos


Original position (before viewmodel bobbing and swaying)

 Arguments

 Angle oldAng


Original angle (before viewmodel bobbing and swaying)

 Arguments

 Vector pos


Current position

 Arguments

 Angle ang


Current angle

 Returns

 Vector


New position

 Returns

 Angle


New angle


"WEAPON/CalcView"
WEAPON:CalcView( Player ply, Vector pos, Angle ang, number fov ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Returns
8 Returns


 Description
Allows you to adjust player view while this weapon in use.
This hook is called from the default implementation of GM:CalcView ([1]). Therefore, it will not be called if any other hook added to CalcView returns any value, or if the current gamemode overrides the default hook and does not call the SWEP function.



BUG


SWEPs that define this function will not work with the taunt camera.



 Arguments

 Player ply


The owner of weapon

 Arguments

 Vector pos


Current position of players view

 Arguments

 Angle ang


Current angles of players view

 Arguments

 number fov


Current FOV of players view

 Returns

 Vector


New position of players view

 Returns

 Angle


New angle of players view

 Returns

 number


New FOV of players view


"WEAPON/CustomAmmoDisplay"
WEAPON:CustomAmmoDisplay(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Allows you to use any numbers you want for the ammo display on the HUD.
Can be useful for weapons that dont use standard ammo.

 Returns

 table


The new ammo display settings. A table with 4 possible keys:

 boolean Draw - Whether to draw the ammo display or not
 number PrimaryClip - Amount of primary ammo in the clip
 number PrimaryAmmo - Amount of primary ammo in the reserves
 number SecondaryAmmo - Amount of secondary ammo. It is shown like alt-fire for SMG1 and AR2 are shown.

There is no SecondaryClip!

 Examples
 Example
How it would look with standard information

function SWEP:CustomAmmoDisplay()
	self.AmmoDisplay = self.AmmoDisplay or {} 
 
	self.AmmoDisplay.Draw = true //draw the display?
 
	if ( self.Primary.ClipSize &gt; 0 ) then
		self.AmmoDisplay.PrimaryClip = self:Clip1() //amount in clip
		self.AmmoDisplay.PrimaryAmmo = self:Ammo1() //amount in reserve
	end
	if ( self.Secondary.ClipSize &gt; 0 ) then
		self.AmmoDisplay.SecondaryAmmo = self:Ammo2() // amount of secondary ammo
	end
 
	return self.AmmoDisplay //return the table
end


"WEAPON/CanSecondaryAttack"
WEAPON:CanSecondaryAttack(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Helper function for checking for no ammo.

 Returns

 boolean


Can use secondary attack

 Examples
 Example
As defined in weapon_base

function SWEP:CanSecondaryAttack()

	if ( self.Weapon:Clip2() &lt;= 0 ) then
	
		self.Weapon:EmitSound( Weapon_Pistol.Empty )
		self.Weapon:SetNextSecondaryFire( CurTime() + 0.2 )
		return false
		
	end

	return true

end


"WEAPON/AdjustMouseSensitivity"
WEAPON:AdjustMouseSensitivity(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Allows you to adjust the mouse sensitivity. This hook only works if you havent overridden GM:AdjustMouseSensitivity.

 Returns

 number


Sensitivity scale

 Examples
 Example
Makes your sensitivity twice slower

function SWEP:AdjustMouseSensitivity()
	return 0.5
end


"WEAPON/DoDrawCrosshair"
WEAPON:DoDrawCrosshair( number x, number y ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Called when the crosshair is about to get drawn, and allows you to override it.



NOTE


This function will not be called if SWEP.DrawCrosshair set to false.




BUG


The arguments passed to this function are not affected by SWEP.AccurateCrosshair.



 Arguments

 number x


X coordinate of the crosshair.

 Arguments

 number y


Y coordinate of the crosshair.

 Returns

 boolean


Return true to override the default crosshair.

 Examples
 Example
Draws an outlined rectangle in place of the crosshair.

function SWEP:DoDrawCrosshair( x, y )
	surface.SetDrawColor( 0, 250, 255, 255 )
	surface.DrawOutlinedRect( x - 32, y - 32, 64, 64 )
	return true
end


"TOOL/Reload"
TOOL:Reload( table tr ) 
 Description
Called when the user presses the reload key with the tool out.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 table tr


A trace from users eyes to wherever he aims at. See TraceResult structure

 Returns

 boolean


Return true to make the tool gun beam and play fire animations, false otherwise


"WEAPON/DrawWeaponSelection"
WEAPON:DrawWeaponSelection( number x, number y, number width, number height, number alpha ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example




 Description
This hook draws the selection icon in the weapon selection menu.

 Arguments

 number x


X coordinate of the selection panel

 Arguments

 number y


Y coordinate of the selection panel

 Arguments

 number width


Width of the selection panel

 Arguments

 number height


Height of the selection panel

 Arguments

 number alpha


Alpha value of the selection panel

 Examples
 Example
As defined in weapon_base

function SWEP:DrawWeaponSelection( x, y, wide, tall, alpha )
	
	-- Set us up the texture
	surface.SetDrawColor( 255, 255, 255, alpha )
	surface.SetTexture( self.WepSelectIcon )
	
	-- Lets get a sin wave to make it bounce
	local fsin = 0
	
	if ( self.BounceWeaponIcon == true ) then
		fsin = math.sin( CurTime() * 10 ) * 5
	end
	
	-- Borders
	y = y + 10
	x = x + 10
	wide = wide - 20
	
	-- Draw that mother
	surface.DrawTexturedRect( x + ( fsin ), y - ( fsin ),  wide-fsin*2 , ( wide / 2 ) + ( fsin ) )
	
	-- Draw weapon info box
	self:PrintWeaponInfo( x + wide + 20, y + tall * 0.95, alpha )
	
end


"WEAPON/DrawWorldModel"
WEAPON:DrawWorldModel(  ) 
 Description
Called when we are about to draw the world model.

 Examples
 Example
The default action - render the world model.

function SWEP:DrawWorldModel()
	self:DrawModel()
end


"WEAPON/Equip"
WEAPON:Equip( Entity NewOwner ) 
 Description
Called when a player or NPC has picked the weapon up.

 Arguments

 Entity NewOwner


The one who picked the weapon up. Can be Player or NPC.


"WEAPON/DoImpactEffect"
WEAPON:DoImpactEffect( table tr, number damageType ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Called so the weapon can override the impact effects it makes.

 Arguments

 table tr


A TraceResult structure from players eyes to the impact point

 Arguments

 number damageType


The damage type of bullet

 Returns

 boolean


Return true to not do the default thing - which is to call UTIL_ImpactTrace in C++

 Examples
 Example
Makes the SWEP have the AR2 bullet impact effect.

function SWEP:DoImpactEffect( tr, nDamageType )

	if ( tr.HitSky ) then return end
	
	local effectdata = EffectData()
	effectdata:SetOrigin( tr.HitPos + tr.HitNormal )
	effectdata:SetNormal( tr.HitNormal )
	util.Effect( AR2Impact, effectdata )

end


"WEAPON/FreezeMovement"
WEAPON:FreezeMovement(  ) 
 Description
This hook allows you to freeze players screen.



NOTE


Player will still be able to move or shoot


 Returns

 boolean


Return true to freeze moving the view


"WEAPON/GetTracerOrigin"
WEAPON:GetTracerOrigin(  ) 
 Description
Allows you to override where the tracer effect comes from. ( Visual bullets )

 Returns

 Vector


The new position to start tracer effect from


"WEAPON/GetViewModelPosition"
WEAPON:GetViewModelPosition( Vector pos, Angle ang ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns


 Description
This hook allows you to adjust view model position and angles.

 Arguments

 Vector pos


Current position

 Arguments

 Angle ang


Current angle

 Returns

 Vector


New position

 Returns

 Angle


New angle


"WEAPON/DrawHUD"
WEAPON:DrawHUD(  ) 
 Description
This hook allows you to draw on screen while this weapon is in use.
If you want to draw a custom crosshair, consider using WEAPON:DoDrawCrosshair instead.

 Examples
 Example
Weapon:DrawHud() as defined in weapon_cs_base, with more notes

function SWEP:DrawHUD()

	-- No crosshair when ironsights is on
	if ( self.Weapon:GetNetworkedBool( Ironsights ) ) then return end

	local x, y -- local, always

	-- If were drawing the local player, draw the crosshair where theyre aiming
	-- instead of in the center of the screen.
	if ( self.Owner == LocalPlayer() &amp;&amp; self.Owner:ShouldDrawLocalPlayer() ) then
		local tr = util.GetPlayerTrace( self.Owner )
		tr.mask = ( CONTENTS_SOLID+CONTENTS_MOVEABLE+CONTENTS_MONSTER+CONTENTS_WINDOW+CONTENTS_DEBRIS+CONTENTS_GRATE+CONTENTS_AUX ) -- List the enums that should mask the crosshair on camrea/thridperson
		local trace = util.TraceLine( tr )
		
		local coords = trace.HitPos:ToScreen()
		x, y = coords.x, coords.y

	else
		x, y = ScrW() / 2.0, ScrH() / 2.0 -- Center of screen
	end
	
	local scale = 10 * self.Primary.Cone
	local LastShootTime = self.Weapon:GetNetworkedFloat( LastShootTime, 0 )
        -- Scale the size of the crosshair according to how long ago we fired our weapon
	scale = scale * ( 2 - math.Clamp( ( CurTime() - LastShootTime ) * 5, 0.0, 1.0 ) )
	--                    R   G    B  Alpha
	surface.SetDrawColor( 0, 255, 0, 255 ) -- Sets the color of the lines were drawing
	
-- Draw a crosshair
	local gap = 40 * scale
	local length = gap + 20 * scale
        --                 x1,        y1, x2,     y2
	surface.DrawLine( x - length, y, x - gap, y )	-- Left
	surface.DrawLine( x + length, y, x + gap, y )	-- Right
	surface.DrawLine( x, y - length, x, y - gap )	-- Top
	surface.DrawLine( x, y + length, x, y + gap )	-- Bottom

end
Output:

Draws 4 lines for crosshairs


"WEAPON/Deploy"
WEAPON:Deploy(  ) 
 Description
Called when player has just switched to this weapon.



NOTE


Due to this hook being predicted, it is not called clientside in singleplayer at all, and in multiplayer it will not be called clientside if the weapon is switched with Player:SelectWeapon or the use console command, however it will be called clientside with the default weapon selection menu and when using CUserCmd:SelectWeapon


 Returns

 boolean


Return true to allow switching away from this weapon using lastinv command


"WEAPON/DrawHUDBackground"
WEAPON:DrawHUDBackground(  ) 
 Description
This hook allows you to draw on screen while this weapon is in use. This hook is called before WEAPON:DrawHUD and is equivalent of GM:HUDPaintBackground.


"WEAPON/DrawWorldModelTranslucent"
WEAPON:DrawWorldModelTranslucent(  ) 
 Description
Called when we are about to draw the translucent world model.

 Examples
 Example
Do the default action - render it without any changes.

function SWEP:DrawWorldModelTranslucent()
	self:DrawModel()
end


"WEAPON/CanPrimaryAttack"
WEAPON:CanPrimaryAttack(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Helper function for checking for no ammo.

 Returns

 boolean


Can use primary attack

 Examples
 Example
As defined in weapon_base

function SWEP:CanPrimaryAttack()

	if ( self.Weapon:Clip1() &lt;= 0 ) then
	
		self:EmitSound( Weapon_Pistol.Empty )
		self:SetNextPrimaryFire( CurTime() + 0.2 )
		self:Reload()
		return false
		
	end

	return true

end


"WEAPON/GetCapabilities"
WEAPON:GetCapabilities(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
This hook is for NPCs, you return what they should try to do with it.

 Returns

 number


A number defining what NPC should do with the weapon. Use the CAP_ Enums.

 Examples
 Example
As defined in weapon_base

function SWEP:GetCapabilities()

	return bit.bor( CAP_WEAPON_RANGE_ATTACK1, CAP_INNATE_RANGE_ATTACK1 )

end


"WEAPON/FireAnimationEvent"
WEAPON:FireAnimationEvent( Vector pos, Angle ang, number event, string options ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example


8 Examples

8.1 Example




 Description
Called before firing animation events, such as muzzle flashes or shell ejections.
This will only be called serverside for 3000-range events, and clientside for 5000-range and other events.

 Arguments

 Vector pos


Position of the effect.

 Arguments

 Angle ang


Angle of the effect.

 Arguments

 number event



 Arguments

 string options


Name or options of the event.

 Returns

 boolean


Return true to disable the effect.

 Examples
 Example
Disables muzzle flashes. Taken from tool gun source code.

function SWEP:FireAnimationEvent( pos, ang, event, options )
	
	-- Disables animation based muzzle event
	if ( event == 21 ) then return true end	

	-- Disable thirdperson muzzle flash
	if ( event == 5003 ) then return true end

end


 Examples
 Example
Counter-Strike: Source like muzzle flashes.

function SWEP:FireAnimationEvent( pos, ang, event, options )

	if ( !self.CSMuzzleFlashes ) then return end

	-- CS Muzzle flashes
	if ( event == 5001 or event == 5011 or event == 5021 or event == 5031 ) then
	
		local data = EffectData()
		data:SetFlags( 0 )
		data:SetEntity( self.Owner:GetViewModel() )
		data:SetAttachment( math.floor( ( event - 4991 ) / 10 ) )
		data:SetScale( 1 ) -- Change me

		if ( self.CSMuzzleX ) then
			util.Effect( CS_MuzzleFlash_X, data )
		else
			util.Effect( CS_MuzzleFlash, data )
		end
	
		return true
	end

end


"WEAPON/EquipAmmo"
WEAPON:EquipAmmo( Player ply ) 
 Description
The player has picked up the weapon and has taken the ammo from it.
The weapon will be removed immidiately after this call.

 Arguments

 Player ply


The player who picked up the weapon


"WEAPON/HUDShouldDraw"
WEAPON:HUDShouldDraw( string element ) 
 Description
This hook determines which parts of the HUD to draw.

 Arguments

 string element


The HUD element in question

 Returns

 boolean


Return false to hide this HUD element


"WEAPON/Initialize"
WEAPON:Initialize(  ) 
Contents

1 Description
2 Examples

2.1 Example


3 Examples

3.1 Example




 Description
Called when the weapon entity is created.



BUG


This is sometimes not called clientside. You can work around this by setting a variable in Initialize and check if it exists in WEAPON:Think. See the example below.





BUG


This is not called serverside after a quicksave.



 Examples
 Example
Sets the weapon hold type to SWEP.HoldType.

function SWEP:Initialize()

	self:SetHoldType( self.HoldType )

end


 Examples
 Example
Fixes the function not being called clientside.

function SWEP:Initialize()
	self.m_bInitialized = true

	-- Other code
end

function SWEP:Think()
	if ( not self.m_bInitialized ) then
		self:Initialize()
	end

	-- Other code
end


"WEAPON/OnRestore"
WEAPON:OnRestore(  ) 
 Description
Called when the weapon entity is reloaded from a Source Engine save (not the Sandbox saves or dupes) or on a changelevel (for example Half-Life 2 campaign level transitions).
For the duplicator library callbacks, see ENTITY:OnDuplicated.
See also saverestore library for relevant functions.


"WEAPON/OnDrop"
WEAPON:OnDrop(  ) 
 Description
Called when weapon is dropped by Player:DropWeapon.
See also WEAPON:OwnerChanged.


"WEAPON/OnReloaded"
WEAPON:OnReloaded(  ) 
 Description
Called whenever the weapons Lua script is reloaded.


"WEAPON/KeyValue"
WEAPON:KeyValue( string key, string value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Called when the engine sets a value for this scripted weapon.
See GM:EntityKeyValue for a hook that works for all entities.
See ENTITY:KeyValue for an SENT hook that works for scripted entities.

 Arguments

 string key


The key that was affected.

 Arguments

 string value


The new value.

 Returns

 boolean


Return true to suppress this KeyValue or return false or nothing to apply this key value.


"WEAPON/OwnerChanged"
WEAPON:OwnerChanged(  ) 
 Description
Called when weapon is dropped or picked up by a new player.
See also WEAPON:OnDrop.


"WEAPON/OnRemove"
WEAPON:OnRemove(  ) 
 Description
Called when the swep is about to be removed.


"WEAPON/PreDrawViewModel"
WEAPON:PreDrawViewModel( Entity vm, Weapon weapon, Player ply ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Allows you to modify viewmodel while the weapon in use before it is drawn. This hook only works if you havent overridden GM:PreDrawViewModel.

 Arguments

 Entity vm


This is the view model entity before it is drawn.

 Arguments

 Weapon weapon


This is the weapon that is from the view model.

 Arguments

 Player ply


The the owner of the view model.


"WEAPON/PrintWeaponInfo"
WEAPON:PrintWeaponInfo( number x, number y, number alpha ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
A convenience function that draws the weapon info box, used in WEAPON:DrawWeaponSelection.

 Arguments

 number x


The x co-ordinate of box position

 Arguments

 number y


The y co-ordinate of box position

 Arguments

 number alpha


Alpha value for the box

 Examples
 Example
As defined in weapon_base

function SWEP:PrintWeaponInfo( x, y, alpha )

	if ( self.DrawWeaponInfoBox == false ) then return end

	if ( self.InfoMarkup == nil ) then
		local str
		local title_color = &lt;color=230,230,230,255&gt;
		local text_color = &lt;color=150,150,150,255&gt;
		
		str = &lt;font=HudSelectionText&gt;
		if ( self.Author!=  ) then str = str .. title_color .. Author:&lt;/color&gt;\t..text_color..self.Author..&lt;/color&gt;\n end
		if ( self.Contact!=  ) then str = str .. title_color .. Contact:&lt;/color&gt;\t..text_color..self.Contact..&lt;/color&gt;\n\n end
		if ( self.Purpose!=  ) then str = str .. title_color .. Purpose:&lt;/color&gt;\n..text_color..self.Purpose..&lt;/color&gt;\n\n end
		if ( self.Instructions!=  ) then str = str .. title_color .. Instructions:&lt;/color&gt;\n..text_color..self.Instructions..&lt;/color&gt;\n end
		str = str .. &lt;/font&gt;
		
		self.InfoMarkup = markup.Parse( str, 250 )
	end
	
	surface.SetDrawColor( 60, 60, 60, alpha )
	surface.SetTexture( self.SpeechBubbleLid )
	
	surface.DrawTexturedRect( x, y - 64 - 5, 128, 64 ) 
	draw.RoundedBox( 8, x - 5, y - 6, 260, self.InfoMarkup:GetHeight() + 18, Color( 60, 60, 60, alpha ) )
	
	self.InfoMarkup:Draw( x+5, y+5, nil, nil, alpha )
	
end


"WEAPON/Reload"
WEAPON:Reload(  ) 
 Description
Called when the reload key ( +reload ) is pressed.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


"WEAPON/SetWeaponHoldType"
WEAPON:SetWeaponHoldType( string name ) 
 Description
Sets the hold type of the weapon. This must be called on both the server and the client to work properly.
NOTE: You should avoid calling this function and call Weapon:SetHoldType now.

 Arguments

 string name


Name of the hold type. You can find all default hold types here


"WEAPON/PrimaryAttack"
WEAPON:PrimaryAttack(  ) 
 Description
Called when primary attack button ( +attack ) is pressed.
Since this is a predicted hook, as mentioned on the bottom of the page, it has some additional behaviour to it. This is the same with all predicted SWEP hooks.
When in singleplayer, this function is only called in the server realm. When in multiplayer, the hook will be called on both the server and the client in order to allow for prediction.
You can force the hook to always be called on client like this:

if ( game.SinglePlayer() ) then self:CallOnClient( PrimaryAttack ) end

Note that due to prediction, in multiplayer SWEP:PrimaryAttack is called multiple times per one shot with the gun. To work around that, use IsFirstTimePredicted.

 Examples
 Example
This is how it is defined in weapon_base

function SWEP:PrimaryAttack()

	-- Make sure we can shoot first
	if ( !self:CanPrimaryAttack() ) then return end

	-- Play shoot sound
	self.Weapon:EmitSound( Weapon_AR2.Single )
	
	-- Shoot 1 bullet, 150 damage, 0.01 aimcone
	self:ShootBullet( 150, 1, 0.01 )
	
	-- Remove 1 bullet from our clip
	self:TakePrimaryAmmo( 1 )
	
	-- Punch the players view
	self.Owner:ViewPunch( Angle( -1, 0, 0 ) )

end


"WEAPON/RenderScreen"
WEAPON:RenderScreen(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

This appears to be a left over from early GMod 12? days. Called every frame just before GM:RenderScene. Used by tool gun to render screens.


"WEAPON/Holster"
WEAPON:Holster( Entity weapon ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Called when weapon tries to holster.



BUG


This is called twice for every holster clientside, one in prediction and one not.





BUG


This function is called serverside only before WEAPON:OnRemove is called.





NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Arguments

 Entity weapon


The weapon we are trying switch to.

 Returns

 boolean


Return true to allow weapon to holster

 Examples
 Example
Returns the weapon switched to when when the weapon is being holstered.

function SWEP:Holster( wep )
	if ( not IsFirstTimePredicted() then return end
	LocalPlayer():ChatPrint( Switched to: ..( wep.PrintName or wep:GetClass() ) )
end
Output:

Switched to Toolgun
Switched to weapon_crowbar


"WEAPON/SetupDataTables"
WEAPON:SetupDataTables(  ) 
 Description
Called when the SWEP should set up its  Data Tables.

 Examples
 Example
Sets up networked variables, adds functions SetDamage, GetDamage, SetMuzzlePos and GetMuzzlePos.

function SWEP:SetupDataTables()
	self:NetworkVar( Float, 0, Damage )
	self:NetworkVar( Vector, 0, MuzzlePos )
end


"WEAPON/SetDeploySpeed"
WEAPON:SetDeploySpeed( number speed ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the weapon deploy speed. This value needs to match on client and server.

 Arguments

 number speed


The value to set deploy speed to. Negative will slow down playback.

 Examples
 Example
As defined in weapon_base

function SWEP:SetDeploySpeed( speed )
	self.m_WeaponDeploySpeed = tonumber( speed )
end


"WEAPON/PostDrawViewModel"
WEAPON:PostDrawViewModel( Entity vm, Weapon weapon, Player ply ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Called after the view model has been drawn while the weapon in use. This hook is called from the default implementation of GM:PostDrawViewModel, and as such, will not occur if it has been overridden.
WEAPON:ViewModelDrawn is an alternative hook which is always called before GM:PostDrawViewModel.

 Arguments

 Entity vm


This is the view model entity after it is drawn

 Arguments

 Weapon weapon


This is the weapon that is from the view model (same as self)

 Arguments

 Player ply


The owner of the view model


"WEAPON/ShootBullet"
WEAPON:ShootBullet( number damage, number num_bullets, number aimcone ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
A convenience function to shoot bullets.



BUG


This does not take SWEP.Primary/Secondary.Ammo into account.



 Arguments

 number damage


The damage of the bullet

 Arguments

 number num_bullets


Amount of bullets to shoot

 Arguments

 number aimcone


Spread of bullets

 Examples
 Example
As defined in weapon_base

function SWEP:ShootBullet( damage, num_bullets, aimcone )
	
	local bullet = {}

	bullet.Num 	= num_bullets
	bullet.Src 	= self.Owner:GetShootPos() -- Source
	bullet.Dir 	= self.Owner:GetAimVector() -- Dir of bullet
	bullet.Spread 	= Vector( aimcone, aimcone, 0 )	 -- Aim Cone
	bullet.Tracer	= 5 -- Show a tracer on every x bullets 
	bullet.Force	= 1 -- Amount of force to give to phys objects
	bullet.Damage	= damage
	bullet.AmmoType = Pistol
	
	self.Owner:FireBullets( bullet )
	
	self:ShootEffects()
	
end


"WEAPON/TranslateActivity"
WEAPON:TranslateActivity( number act ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Translate a players Activity into a weapons activity, depending on how you want the player to be holding the weapon.
For example, ACT_MP_RUN becomes ACT_HL2MP_RUN_PISTOL.

 Arguments

 number act


The activity to translate

 Returns

 number


The translated activity

 Examples
 Example
Default action

function SWEP:TranslateActivity( act )

	if ( self.Owner:IsNPC() ) then
		if ( self.ActivityTranslateAI[ act ] ) then
			return self.ActivityTranslateAI[ act ]
		end
		return -1
	end

	if ( self.ActivityTranslate[ act ]!= nil ) then
		return self.ActivityTranslate[ act ]
	end

	return -1

end


"WEAPON/TakePrimaryAmmo"
WEAPON:TakePrimaryAmmo( number amount ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
A convenience function to remove primary ammo from clip.

 Arguments

 number amount


Amount of primary ammo to remove

 Examples
 Example
As defined in weapon_base

function SWEP:TakePrimaryAmmo( num )
	
	-- Doesnt use clips
	if ( self.Weapon:Clip1() &lt;= 0 ) then 
	
		if ( self:Ammo1() &lt;= 0 ) then return end
		
		self.Owner:RemoveAmmo( num, self.Weapon:GetPrimaryAmmoType() )
	
	return end
	
	self.Weapon:SetClip1( self.Weapon:Clip1() - num )	
	
end


"WEAPON/ShootEffects"
WEAPON:ShootEffects(  ) 
 Description
A convenience function to create shoot effects.

 Examples
 Example
As defined in weapon_base

function SWEP:ShootEffects()

	self.Weapon:SendWeaponAnim( ACT_VM_PRIMARYATTACK )  -- View model animation
	self.Owner:MuzzleFlash() -- Crappy muzzle light
	self.Owner:SetAnimation( PLAYER_ATTACK1 ) -- 3rd Person Animation

end


"WEAPON/TakeSecondaryAmmo"
WEAPON:TakeSecondaryAmmo( number amount ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
A convenience function to remove secondary ammo from clip.

 Arguments

 number amount


How much of secondary ammo to remove

 Examples
 Example
As defined in weapon_base

function SWEP:TakeSecondaryAmmo( num )
	
	-- Doesnt use clips
	if ( self.Weapon:Clip2() &lt;= 0 ) then 
	
		if ( self:Ammo2() &lt;= 0 ) then return end
		
		self.Owner:RemoveAmmo( num, self.Weapon:GetSecondaryAmmoType() )
	
	return end
	
	self.Weapon:SetClip2( self.Weapon:Clip2() - num )	
	
end


"WEAPON/SecondaryAttack"
WEAPON:SecondaryAttack(  ) 
 Description
Called when secondary attack button ( +attack2 ) is pressed.
For issues with this hook being called rapidly on the client side, see the global function IsFirstTimePredicted.



NOTE


This hook is predicted. This means that in singleplayer, it will not be called in the Client realm.


 Examples
 Example
This is how it is defined in weapon_base

function SWEP:SecondaryAttack()

	-- Make sure we can shoot first
	if ( !self:CanSecondaryAttack() ) then return end

	-- Play shoot sound
	self.Weapon:EmitSound( Weapon_Shotgun.Single )
	
	-- Shoot 9 bullets, 150 damage, 0.75 aimcone
	self:ShootBullet( 150, 9, 0.2 )
	
	-- Remove 1 bullet from our clip
	self:TakeSecondaryAmmo( 1 )
	
	-- Punch the players view
	self.Owner:ViewPunch( Angle( -10, 0, 0 ) )

end


"WEAPON/Think"
WEAPON:Think(  ) 
 Description
Called when the swep thinks.
This hook wont be called during the deploy animation and when using Weapon:DefaultReload.



NOTE


Despite being a predicted hook, this hook is called clientside in single player, however it will not be recognized as a predicted hook to Player:GetCurrentCommand.




NOTE


This hook will be called before Player movement is processed on the client, and after on the server.




BUG


This will not be run during deploy animations after a serverside-only deploy. This usually happens after picking up and dropping an object with +use.


"WEAPON/TranslateFOV"
WEAPON:TranslateFOV( number fov ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Allows to change players field of view while player holds the weapon.



BUG


This doesnt affect the opening of func_areaportals - Player:GetFOV takes priority.



 Arguments

 number fov


The current/default FOV.

 Returns

 number


The target FOV.

 Examples
 Example
Reduces players FOV by 30.

function SWEP:TranslateFOV( fov )
	return fov - 30
end
Output:

Players view is zoomed in.


"WEAPON/ViewModelDrawn"
WEAPON:ViewModelDrawn( Entity ViewModel ) 
 Description
Called straight after the view model has been drawn. This is called before GM:PostDrawViewModel and WEAPON:PostDrawViewModel.

 Arguments

 Entity ViewModel


Players view model


"WEAPON/ShouldDropOnDie"
WEAPON:ShouldDropOnDie(  ) 
 Description
Should this weapon be dropped when its owner dies?
This only works if the player has Player:ShouldDropWeapon set to true.

 Returns

 boolean


Return true to drop the weapon, false otherwise. Default ( if you dont return anything ) is false.


"ai/GetTaskID"
ai.GetTaskID( string task ) 
 Description
Translates a task name to its corresponding ID.

 Arguments

 string task


The task name.

 Returns

 number


"Angle/RotateAroundAxis"
Angle:RotateAroundAxis( Vector axis, number rotation ) 
 Description
Rotates the angle around the specified axis by the specified degrees.

 Arguments

 Vector axis


The axis to rotate around.

 Arguments

 number rotation


The degrees to rotate around the specified axis.


"ai/GetScheduleID"
ai.GetScheduleID( string sched ) 
 Description
Translates a schedule name to its corresponding ID.

 Arguments

 string sched


Then schedule name. In most cases, this will be the same as the SCHED_ Enums name.

 Returns

 number


The schedule ID, see SCHED_ Enums. Returns -1 if the schedule name isnt valid.


"achievements/IncBaddies"
achievements.IncBaddies(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Adds one to the count of baddies killed. Once this count reaches 1000, the War Zone achievement is unlocked.


"Angle/IsZero"
Angle:IsZero(  ) 
 Description
Returns whether the pitch, yaw and roll are 0 or not.

 Returns

 boolean


Whether the pitch, yaw and roll are 0 or not.


"achievements/BalloonPopped"
achievements.BalloonPopped(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Adds one to the count of balloons burst. Once this count reaches 1000, the Popper achievement is unlocked.


"achievements/GetName"
achievements.GetName( number achievementID ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Retrieves name of given achievement

 Arguments

 number achievementID


The ID of achievement to retrieve name of. Note: IDs start from 0, not 1.

 Returns

 string


Name of an achievement

 Examples
 Example
Will print all achievement names into console

for i = 0, achievements.Count() - 1 do
	print( achievements.GetName( i ) )
end
Output:

Prints all achievement names into console


"Angle/Set"
Angle:Set( Angle originalAngle ) 
 Description
Copies pitch, yaw and roll from the second angle to the first.

 Arguments

 Angle originalAngle


The angle to copy the values from.


"achievements/IsAchieved"
achievements.IsAchieved( number AchievementID ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Used in GMod 12 in the achievements menu to show the user if they have unlocked certain achievements.

 Arguments

 number AchievementID


Internal Achievement ID number

 Returns

 boolean


Returns true if the given achievementID is achieved.

 Examples
 Example
Prints true if you got the achievement.

print( Did you get achievement number 7?,  .. achievements.IsAchieved( 7 ) )
Output:

boolean true (assuming you have unlocked achievement 7)


"achievements/IncBystander"
achievements.IncBystander(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Adds one to the count of innocent animals killed. Once this count reaches 1000, the Innocent Bystander achievement is unlocked.


"Angle/Add"
Angle:Add( Angle angle ) 
 Description
Adds the values of the argument angle to the orignal angle. This functions the same as angle1 + angle2 without creating a new angle object, skipping object construction and garbage collection.

 Arguments

 Angle angle


The angle to add.


"Angle/SnapTo"
Angle:SnapTo( string axis, number target ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Snaps the angle to nearest interval of degrees.



NOTE


This will modify the original angle too!


 Arguments

 string axis


The component/axis to snap. Can be either p/pitch, y/yaw or r/roll.

 Arguments

 number target


The target angle snap interval

 Returns

 Angle


The snapped angle.

 Examples
 Example
Example usage

print( Angle( 0, 92, 0 ):SnapTo( y, 90 ) )
print( Angle( 0, 115, 0 ):SnapTo( y, 45 ) )
print( Angle( 12, 98, 167 ):SnapTo( p, 30 ):SnapTo( y, 45 ):SnapTo( r, 45 ) )
Output:

Angle( 0, 90, 0 )
Angle( 0, 135, 0 )
Angle( 0, 90, -180 )


"Angle/Mul"
Angle:Mul( number scalar ) 
 Description
Multiplies a scalar to all the values of the orignal angle. This functions the same as num * angle without creating a new angle object, skipping object construction and garbage collection.

 Arguments

 number scalar


The number to multiply.


"achievements/Count"
achievements.Count(  ) 
 Description
Returns the amount of achievements in Garrys Mod.

 Returns

 number


The amount of achievements available.


"ai_task/New"
ai_task.New(  ) 
 Description
Create a new empty task. Used by Schedule:AddTask and Schedule:EngTask.

 Returns

 Task


The new task object.


"ai_schedule/New"
ai_schedule.New( string name ) 
 Description
Creates a schedule for scripted NPC.

 Arguments

 string name


Name of the schedule.

 Returns

 number


A table containing schedule information to be used with ENTITY:StartSchedule.


"achievements/IncGoodies"
achievements.IncGoodies(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Adds one to the count of friendly NPCs killed. Once this count reaches 1000, the Bad Friend achievement is unlocked.


"Angle/Div"
Angle:Div( number scalar ) 
 Description
Divides all values of the original angle by a scalar. This functions the same as angle1 / num without creating a new angle object, skipping object construction and garbage collection.

 Arguments

 number scalar


The number to divide by.


"achievements/SpawnMenuOpen"
achievements.SpawnMenuOpen(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Adds one to the count of how many times the spawnmenu has been opened. Once this count reaches 100,000, the Menu User achievement is unlocked.


"achievements/GetCount"
achievements.GetCount( number achievementID ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Retrieves progress of given achievement

 Arguments

 number achievementID


The ID of achievement to retrieve progress of. Note: IDs start from 0, not 1.

 Examples
 Example
Will print achievement progress for all of your achievements into console

for i = 0, achievements.Count() - 1 do
	print( achievements.GetCount( i ) )
end
Output:

Prints achievement progress for all of your achievements into console.
Note: Non-progress based achievements will have 0, even if they are completed


"achievements/SpawnedProp"
achievements.SpawnedProp(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Adds one to the count of props spawned. Once this count reaches 5000, the Creator achievement is unlocked.


"Angle/Right"
Angle:Right(  ) 
 Description
Returns a normal vector facing in the direction that points right relative to the angles direction.

 Returns

 Vector


The right direction of the angle


"achievements/SpawnedNPC"
achievements.SpawnedNPC(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Adds one to the count of NPCs spawned. Once this count reaches 1000, the Procreator achievement is unlocked.


"achievements/Remover"
achievements.Remover(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Adds one to the count of things removed. Once this count reaches 5000, the Destroyer achievement is unlocked.


"Angle/Normalize"
Angle:Normalize(  ) 
 Description
Normalizes the angles by applying a module with 360 to pitch, yaw and roll.

 Examples
 Example
Example usage of the function

local a = Angle( 0, 181, 1 )
a:Normalize()
print( a )
Output:

0.000 -179.000 1.000


"achievements/EatBall"
achievements.EatBall(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Adds one to the count of balls eaten. Once this count reaches 200, the Ball Eater achievement is unlocked.


"Angle/Forward"
Angle:Forward(  ) 
 Description
Returns a normal vector facing in the direction that the angle points.

 Returns

 Vector


The forward direction of the angle


"achievements/GetGoal"
achievements.GetGoal( number achievementID ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Retrieves progress goal of given achievement

 Arguments

 number achievementID


The ID of achievement to retrieve goal of. Note: IDs start from 0, not 1.

 Returns

 number


Progress goal of an achievement

 Examples
 Example
Will print achievement progress and goals for all of your achievements into console

for i = 0, achievements.Count() - 1 do
	print( achievements.GetCount( i ) ..  /  .. achievements.GetGoal( i ) )
end
Output:

Prints achievement progress and goals for all of your achievements into console.


"achievements/SpawnedRagdoll"
achievements.SpawnedRagdoll(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Adds one to the count of ragdolls spawned. Once this count reaches 2000, the Dollhouse achievement is unlocked.


"achievements/GetDesc"
achievements.GetDesc( number achievementID ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Retrieves description of given achievement

 Arguments

 number achievementID


The ID of achievement to retrieve description of. Note: IDs start from 0, not 1.

 Returns

 string


Description of an achievement

 Examples
 Example
Will print achievement descriptions for all of your achievements into console

for i = 0, achievements.Count() - 1 do
	print( achievements.GetDesc( i ) )
end
Output:

Prints achievement descriptions for all of your achievements into console.


"Angle/Zero"
Angle:Zero(  ) 
 Description
Sets pitch, yaw and roll to 0.
This function is faster than doing it manually.


"Angle/Sub"
Angle:Sub( Angle angle ) 
 Description
Subtracts the values of the argument angle to the orignal angle. This functions the same as angle1 - angle2 without creating a new angle object, skipping object construction and garbage collection.

 Arguments

 Angle angle


The angle to subtract.


"Angle/Up"
Angle:Up(  ) 
 Description
Returns a normal vector facing in the direction that points up relative to the angles direction.

 Returns

 Vector


The up direction of the angle.


"bf_read/ReadAngle"
bf_read:ReadAngle(  ) 
 Description
Reads an returns an angle object from the bitstream.

 Returns

 Angle


The read angle


"bf_read/ReadLong"
bf_read:ReadLong(  ) 
 Description
Reads a 4 byte long from the bitstream and returns it.

 Returns

 number


int


"bf_read/ReadShort"
bf_read:ReadShort(  ) 
 Description
Reads a 2 byte short from the bitstream and returns it.

 Returns

 number


short


"bf_read/ReadFloat"
bf_read:ReadFloat(  ) 
 Description
Reads a 4 byte float from the bitstream and returns it.

 Returns

 number


float


"bf_read/ReadEntity"
bf_read:ReadEntity(  ) 
 Description
Reads a short representing an entity index and returns the matching entity handle.

 Returns

 Entity


ent


"baseclass/Set"
baseclass.Set( string name, table tab ) 
 Description
Add a new base class that can be derived by others. This is done automatically for:

 widgets
 panels
 drive modes
 entities
 weapons
 gamemodes (with prefix gamemode_)

 Arguments

 string name


The name of this base class. Must be completely unique.

 Arguments

 table tab


The base class.


"bf_read/ReadVectorNormal"
bf_read:ReadVectorNormal(  ) 
 Description
Reads a special encoded vector normal from the bitstream and returns it, this function is not suitable to send vectors that represent a position.

 Returns

 Vector


normal


"bf_read/ReadString"
bf_read:ReadString(  ) 
 Description
Reads a null terminated string from the bitstream.

 Returns

 string


str


"bf_read/Reset"
bf_read:Reset(  ) 
 Description
Rewinds the bitstream so it can be read again.


"bit/band"
bit.band( number value, number otherValues=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Performs the bitwise and for all values specified.

 Arguments

 number value


The value to be manipulated.

 Arguments

 number otherValues=nil


Values bit to perform bitwise and with. Optional.

 Returns

 number


Result of bitwise and operation.

 Examples
 Example
a = 170    -- 10101010 in binary form
b = 146    -- 10010010 in binary form
print( bit.band( a, b ) )
Output:

130 (10000010 in binary form)


"bit/lshift"
bit.lshift( number value, number shiftCount ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns the left shifted value.

 Arguments

 number value


The value to be manipulated.

 Arguments

 number shiftCount


Amounts of bits to shift left by.

 Returns

 number


shiftedValue


"bf_read/ReadChar"
bf_read:ReadChar(  ) 
 Description
Reads a signed char and returns a number from -127 to 127 representing the ascii value of that char.

 Returns

 number


asciiVal


"bf_read/ReadVector"
bf_read:ReadVector(  ) 
 Description
Reads a special encoded vector from the bitstream and returns it, this function is not suitable to send normals.

 Returns

 Vector


vec


"bit/rshift"
bit.rshift( number value, number shiftCount ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns the right shifted value.

 Arguments

 number value


The value to be manipulated.

 Arguments

 number shiftCount


Amounts of bits to shift right by.

 Returns

 number


shiftedValue


"bit/tohex"
bit.tohex( number value, number digits=8 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns the hexadecimal representation of the number with the specified digits.

 Arguments

 number value


The value to be normalized.

 Arguments

 number digits=8


The number of digits. Optional

 Returns

 string


hexString


"cam/ApplyShake"
cam.ApplyShake( Vector pos, Angle angles, number factor ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Shakes the screen at a certain position.

 Arguments

 Vector pos


Origin of the shake.

 Arguments

 Angle angles


Angles of the shake.

 Arguments

 number factor


The shake factor.


"bit/rol"
bit.rol( number value, number shiftCount ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns the left rotated value.

 Arguments

 number value


The value to be manipulated.

 Arguments

 number shiftCount


Amounts of bits to rotate left by.

 Returns

 number


shiftedValue


"bit/ror"
bit.ror( number value, number shiftCount ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns the right rotated value.

 Arguments

 number value


The value to be manipulated.

 Arguments

 number shiftCount


Amounts of bits to rotate right by.

 Returns

 number


shiftedValue


"bf_read/ReadBool"
bf_read:ReadBool(  ) 
 Description
Reads 1 bit an returns a bool representing the bit.

 Returns

 boolean


bit


"bit/bswap"
bit.bswap( number value ) 
 Description
Swaps the byte order.

 Arguments

 number value


The value to be byte swapped.

 Returns

 number


swapped


"bit/tobit"
bit.tobit( number value ) 
 Description
Normalizes the specified value and clamps it in the range of a signed 32bit integer.

 Arguments

 number value


The value to be normalized.

 Returns

 number


swapped


"bit/bnot"
bit.bnot( number value ) 
 Description
Returns the bitwise not of the value.

 Arguments

 number value


The value to be inverted.

 Returns

 number


bitwiseNot


"bit/bxor"
bit.bxor( number value, number otherValues=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns the bitwise xor of all values specified.

 Arguments

 number value


The value to be manipulated.

 Arguments

 number otherValues=nil


Values bit xor with. Optional.

 Returns

 number


bitwiseXOr


"bit/bor"
bit.bor( number value1, vararg ... ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Returns the bitwise OR of all values specified.

 Arguments

 number value1


The first value.

 Arguments

 vararg ...


Extra values to be evaluated. (must all be numbers)

 Returns

 number


The bitwise OR result between all numbers.

 Examples
 Example
Performs the bitwise OR operation between three values

local a = math.BinToInt( 1000 )
local b = math.BinToInt( 0100 )
local c = math.BinToInt( 0001 )

local result = bit.bor( a, b, c )

print( math.IntToBin( result ) )
print( result )
Output:


1101

13
 Examples
 Example
If you were to add capabilities to an NPC.

NPC:CapabilitiesAdd( bit.bor( CAP_MOVE_GROUND, CAP_ANIMATEDFACE, CAP_TURN_HEAD ) )


"bit/arshift"
bit.arshift( number value, number shiftCount ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns the arithmetically shifted value.

 Arguments

 number value


The value to be manipulated.

 Arguments

 number shiftCount


Amounts of bits to shift.

 Returns

 number


shiftedValue


"baseclass/Get"
baseclass.Get( string name ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Gets the base class of an an object.
This is used not just by entities, but also by widgets, panels, drive modes, weapons and gamemodes (with gamemode_ prefix).
The keyword DEFINE_BASECLASS translates into a call to this function. In the engine, it is replaced with:

local BaseClass = baseclass.Get
 Arguments

 string name


The child class.

 Returns

 table


The base classs meta table.

 Examples
 Example
Inherits the weapon from weapon_csbasegun and calls its base functions

AddCSLuaFile()
DEFINE_BASECLASS( weapon_csbasegun ) //this is equivalent to local BaseClass = baseclass.Get( weapon_csbasegun )

//omitted generic swep definitions

function SWEP:Initialize()
	BaseClass.Initialize( self ) //calls SWEP:Initialize() from weapon_csbasegun
	self:SetHoldType( pistol )
end

function SWEP:Deploy()
	self:SetAccuracy( 0.9 )
	return BaseClass.Deploy( self ) //calls SWEP:Deploy() from weapon_csbasegun and returns its result
end

function SWEP:SetupDataTables()
	BaseClass.SetupDataTables( self ) //calls SWEP:SetupDataTables() from weapon_csbasegun and inits its dtvars
end


"cam/End"
cam.End(  ) 
 Description
Switches the renderer back to the previous drawing mode from a 3D context.
This function is an alias of cam.End3D.



BUG


This will crash the game if there is no context to end.


"cam/End3D"
cam.End3D(  ) 
 Description
Switches the renderer back to the previous drawing mode from a 3D context.



BUG


This will crash the game if there is no context to end.


"cam/IgnoreZ"
cam.IgnoreZ( boolean ignoreZ ) 
 Description
Tells the renderer to ignore the depth buffer and draw any upcoming operation ontop of everything that was drawn yet.

 Arguments

 boolean ignoreZ


Determines whenever to ignore the depth buffer or not.


"cam/Start"
cam.Start( table dataTbl ) 
 Description
Sets up a new rendering context. This is an extended version of cam.Start3D and cam.Start2D. Must be finished by cam.End3D or cam.End2D.



BUG


This will not update current view properties for 3D contexts.



 Arguments

 table dataTbl


Render context config. See RenderCamData structure


"cam/Start2D"
cam.Start2D(  ) 
 Description
Sets up a new 2D rendering context. Must be finished by cam.End2D.
This is almost always used with a render target from the render library. To set its position use render.SetViewPort with a target already stored.



NOTE


This will put an identity matrix at the top of the model matrix stack. If you are trying to use cam.PushModelMatrix, call it after this function and not before.






NOTE


This is a function that starts a 2D rendering context.This means that the only rendering functions will work after it are functions with a 2D rendering context.


 Examples
 Example
Sets the viewport then draws on the view with 2d methods

local oldW, oldH = ScrW(), ScrH()
render.SetViewPort( 0, 100, 50, 50 )
cam.Start2D()
	surface.SetDrawColor( 255, 255, 255 )
	surface.DrawLine( 10, 10, 100, 100 )
cam.End2D()
render.SetViewPort( 0, 0, oldW, oldH )


"cam/End2D"
cam.End2D(  ) 
 Description
Switches the renderer back to the previous drawing mode from a 2D context.



BUG


This will crash the game if there is no context to end.


"cam/StartOrthoView"
cam.StartOrthoView( number leftOffset, number topOffset, number rightOffset, number bottomOffset ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Sets up a new 3d context using orthographic projection.

 Arguments

 number leftOffset


The left plane offset.

 Arguments

 number topOffset


The top plane offset.

 Arguments

 number rightOffset


The right plane offset.

 Arguments

 number bottomOffset


The bottom plane offset.


"cam/EndOrthoView"
cam.EndOrthoView(  ) 
 Description
Switches the renderer back to the previous drawing mode from a 3D orthographic rendering context.


"cam/Start3D2D"
cam.Start3D2D( Vector pos, Angle angles, number scale ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Sets up a new 2D rendering context. Must be finished by cam.End3D2D.




NOTE


This is a function that starts a 2D rendering context.This means that the only rendering functions will work after it are functions with a 2D rendering context.




NOTE


This is a rendering function that requires a 3D rendering context.This means that it will only work in hooks with a 3D rendering context.


 Arguments

 Vector pos


Origin of the 3D2D context, ie. the top left corner, (0, 0).

 Arguments

 Angle angles


Angles of the 3D2D context.
+x in the 2d context corresponds to +x of the angle (its forward direction).
+y in the 2d context corresponds to -y of the angle (its right direction).

If (dx, dy) are your desired (+x, +y) unit vectors, the angle you want is dx:AngleEx(dx:Cross(-dy)).

 Arguments

 number scale


The scale of the render context.

If scale is 1 then 1 pixel in 2D context will equal to 1 unit in 3D context.

 Examples
 Example
hook.Add( PostDrawOpaqueRenderables, example, function()
	local trace = LocalPlayer():GetEyeTrace()
	local angle = trace.HitNormal:Angle()
		
	render.DrawLine( trace.HitPos, trace.HitPos + 8 * angle:Forward(), Color( 255, 0, 0 ), true )
	render.DrawLine( trace.HitPos, trace.HitPos + 8 * -angle:Right(), Color( 0, 255, 0 ), true )
	render.DrawLine( trace.HitPos, trace.HitPos + 8 * angle:Up(), Color( 0, 0, 255 ), true )
		
	cam.Start3D2D( trace.HitPos, angle, 1 )
		surface.SetDrawColor( 255, 165, 0, 255 )
		surface.DrawRect( 0, 0, 8, 8 )
		render.DrawLine( Vector( 0, 0, 0 ), Vector( 8, 8, 8 ), Color( 100, 149, 237, 255 ), true )
	cam.End3D2D()
end )
Output:


"CEffectData/GetAngles"
CEffectData:GetAngles(  ) 
 Description
Returns the angles of the effect.

 Returns

 Angle


The angles of the effect


"cam/PopModelMatrix"
cam.PopModelMatrix(  ) 
 Description
Pops the current active rendering matrix from the stack and reinstates the previous one.


"cam/Start3D"
cam.Start3D( Vector pos=EyePos(), Angle angles=EyeAngles(), number fov=nil, number x=0, number y=0, number w=ScrW(), number h=ScrH(), number zNear=nil, number zFar=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Examples

11.1 Example




 Description
Sets up a new 3D rendering context. Must be finished by cam.End3D.
For more advanced settings such as an orthographic view, use cam.Start instead.




NOTE


This is a function that starts a 3D rendering context.This means that the only rendering functions will work after it are functions with a 3D rendering context.




BUG


Negative x/y values wont work.





BUG


This will not update current view properties.



 Arguments

 Vector pos=EyePos()


Render cam position.

 Arguments

 Angle angles=EyeAngles()


Render cam angles.

 Arguments

 number fov=nil


Field of view.

 Arguments

 number x=0


X coordinate of where to start the new view port.

 Arguments

 number y=0


Y coordinate of where to start the new view port.

 Arguments

 number w=ScrW()


Width of the new viewport.

 Arguments

 number h=ScrH()


Height of the new viewport.

 Arguments

 number zNear=nil


Distance to near clipping plane.

 Arguments

 number zFar=nil


Distance to far clipping plane.

 Examples
 Example
Set up a 3D rendering environment in a 2D rendering hook to render models on HUD.

hook.Add( HUDPaint, 3d_camera_example, function()
	cam.Start3D()
		for id, ply in pairs( player.GetAll() ) do
			ply:DrawModel()
		end
	cam.End3D()
end )
Output:

All players can be seen through walls.


"CEffectData/GetColor"
CEffectData:GetColor(  ) 
 Description
Returns byte which represents the color of the effect.

 Returns

 number


The color of the effect


"cam/End3D2D"
cam.End3D2D(  ) 
 Description
Switches the renderer back to the previous drawing mode from a 3D2D context.



BUG


This will crash the game if there is no context to end.


"CEffectData/GetDamageType"
CEffectData:GetDamageType(  ) 
 Description
Returns the damage type of the effect

 Returns

 number


Damage type of the effect, see DMG_ Enums


"CEffectData/GetEntIndex"
CEffectData:GetEntIndex(  ) 
 Description
Returns the entity index of the entity set for the effect.

 Returns

 number


The entity index of the entity set for the effect.


"CEffectData/GetFlags"
CEffectData:GetFlags(  ) 
 Description
Returns the flags of the effect.

 Returns

 number


The flags of the effect.


"cam/PushModelMatrix"
cam.PushModelMatrix( VMatrix matrix ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Pushes the specified matrix onto the render matrix stack. Unlike opengl, this will replace the current model matrix.



BUG


This does not work with cam.Start3D2D in certain hooks.



 Arguments

 VMatrix matrix


The matrix to push.

 Examples
 Example
Rotates and scales text in the center of the screen.

hook.Add( HUDPaint, 2d rotation test, function()
	local w, h = ScrW(), ScrH()
	local t = RealTime()*50
	
	local mat = Matrix()

	mat:Translate( Vector( w/2, h/2 ) )
	mat:Rotate( Angle( 0,t,0 ) )
	mat:Scale( Vector( 1,1,1 ) * math.sin( t/100 ) *10 )
	mat:Translate( -Vector( w/2, h/2 ) )

	cam.PushModelMatrix( mat )
		surface.SetFont( DermaDefault )
		surface.SetTextColor( 255, 255, 255, 255 )
		surface.SetTextPos( w/2, h/2 )
		surface.DrawText( LOLLOLOLOL )
	cam.PopModelMatrix()	
end )


 Examples
 Example
Simple function to draw rotated text

function draw.TextRotated( text, x, y, color, font, ang )
	render.PushFilterMag( TEXFILTER.ANISOTROPIC )
	render.PushFilterMin( TEXFILTER.ANISOTROPIC )
	surface.SetFont( font )
	surface.SetTextColor( color )
	surface.SetTextPos( 0, 0 )
	local textWidth, textHeight = surface.GetTextSize( text )
	local rad = -math.rad( ang )
	x = x - ( math.cos( rad ) * textWidth / 2 + math.sin( rad ) * textHeight / 2 )
	y = y + ( math.sin( rad ) * textWidth / 2 + math.cos( rad ) * textHeight / 2 )
	local m = Matrix()
	m:SetAngles( Angle( 0, ang, 0 ) )
	m:SetTranslation( Vector( x, y, 0 ) )
	cam.PushModelMatrix( m )
		surface.DrawText( text )
	cam.PopModelMatrix()
	render.PopFilterMag()
	render.PopFilterMin()
end


"CEffectData/GetScale"
CEffectData:GetScale(  ) 
 Description
Returns the scale of the effect.

 Returns

 number


The scale of the effect


"CEffectData/GetSurfaceProp"
CEffectData:GetSurfaceProp(  ) 
 Description
Returns the surface property index of the effect.

 Returns

 number


The surface property index of the effect


"CEffectData/GetMagnitude"
CEffectData:GetMagnitude(  ) 
 Description
Returns the magnitude of the effect.

 Returns

 number


The magnitude of the effect.


"CEffectData/GetAttachment"
CEffectData:GetAttachment(  ) 
 Description
Returns the attachment ID for the effect.

 Returns

 number


The attachment ID of the effect.


"CEffectData/GetRadius"
CEffectData:GetRadius(  ) 
 Description
Returns the radius of the effect.

 Returns

 number


The radius of the effect.


"CEffectData/GetHitBox"
CEffectData:GetHitBox(  ) 
 Description
Returns the hit box ID of the effect.

 Returns

 number


The hit box ID of the effect.


"CEffectData/GetNormal"
CEffectData:GetNormal(  ) 
 Description
Returns the normalized direction vector of the effect.

 Returns

 Vector


The normalized direction vector of the effect.


"CEffectData/GetEntity"
CEffectData:GetEntity(  ) 
 Description
Returns the entity assigned to the effect.

 Returns

 Entity


The entity assigned to the effect


"CEffectData/GetStart"
CEffectData:GetStart(  ) 
 Description
Returns the start position of the effect.

 Returns

 Vector


The start position of the effect


"CEffectData/SetAttachment"
CEffectData:SetAttachment( number attachment ) 
 Description
Sets the attachment id of the effect to be created with this effect data.



NOTE


This is internally stored as an integer, but only the first 5 bits will be networked.


 Arguments

 number attachment


New attachment ID of the effect.


"CEffectData/GetMaterialIndex"
CEffectData:GetMaterialIndex(  ) 
 Description
Returns the material ID of the effect.

 Returns

 number


The material ID of the effect.


"CEffectData/GetOrigin"
CEffectData:GetOrigin(  ) 
 Description
Returns the origin position of the effect.

 Returns

 Vector


The origin position of the effect.


"CEffectData/SetAngles"
CEffectData:SetAngles( Angle ang ) 
 Description
Sets the angles of the effect.

 Arguments

 Angle ang


The new angles to be set.


"CEffectData/SetEntity"
CEffectData:SetEntity( Entity entity ) 
 Description
Sets the entity of the effect to be created with this effect data.

 Arguments

 Entity entity


Entity of the effect, mostly used for parenting.


"CEffectData/SetDamageType"
CEffectData:SetDamageType( number damageType ) 
 Description
Sets the damage type of the effect to be created with this effect data.

 Arguments

 number damageType


Damage type, see DMG_ Enums.


"CEffectData/SetFlags"
CEffectData:SetFlags( number flags ) 
 Description
Sets the flags of the effect.



NOTE


This is internally stored as an integer, but only the first 8 bits will be networked.


 Arguments

 number flags


The flags of the effect. Each effect has their own flags.


"CEffectData/SetColor"
CEffectData:SetColor( number color ) 
 Description
Sets the color of the effect.

 Arguments

 number color


Color represented by a byte.


"CEffectData/SetEntIndex"
CEffectData:SetEntIndex( number entIndex ) 
 Description
Sets the entity of the effect via its index.

 Arguments

 number entIndex


The entity index to be set.


"chat/AddText"
chat.AddText( vararg arguments ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Adds text to the local players chat box (which only they can read).

 Arguments

 vararg arguments


The arguments. Arguments can be:

 table - Color structure. Will set the color for all following strings until the next Color argument.
 string - Text to be added to the chat box.
 Player - Adds the name of the player in the players team color to the chat box.
 any - Any other type, such as Entity will be converted to string and added as text.


 Examples
 Example
Prints the players name and current weapon to their chat area.

local ply = LocalPlayer()
chat.AddText( Color( 100, 100, 255 ), ply, , you are holding , Color( 100, 255, 100 ), ply:GetActiveWeapon():GetClass() )
Output:


"CEffectData/SetStart"
CEffectData:SetStart( Vector start ) 
 Description
Sets the start of the effect to be created with this effect data.

 Arguments

 Vector start


Start of the effect.


"CEffectData/SetMaterialIndex"
CEffectData:SetMaterialIndex( number materialIndex ) 
 Description
Sets the material index of the effect.



NOTE


This is internally stored as an integer, but only the first 11 bits will be networked.


 Arguments

 number materialIndex


The material index of the effect.


"CEffectData/SetMagnitude"
CEffectData:SetMagnitude( number magnitude ) 
 Description
Sets the magnitude of the effect.

 Arguments

 number magnitude


The magnitude of the effect.


"CEffectData/SetOrigin"
CEffectData:SetOrigin( Vector origin ) 
 Description
Sets the origin of the effect to be created with this effect data.

 Arguments

 Vector origin


Origin of the effect.


"CEffectData/SetScale"
CEffectData:SetScale( number scale ) 
 Description
Sets the scale of the effect to be created with this effect data.

 Arguments

 number scale


Scale of the effect.


"chat/Close"
chat.Close(  ) 
 Description
Closes the chat window.


"CEffectData/SetRadius"
CEffectData:SetRadius( number radius ) 
 Description
Sets the radius of the effect to be created with this effect data.



NOTE


This is clamped internally from 0 to 1023.


 Arguments

 number radius


Radius of the effect.


"chat/GetChatBoxPos"
chat.GetChatBoxPos(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Examples

4.1 Example




 Description
Returns the chatbox position.

 Returns

 number


The X coordinate of the chatboxs position.

 Returns

 number


The Y coordinate of the chatboxs position.

 Examples
 Example
Prints the x and y coordinates of the chatbox.

print( chat.GetChatBoxPos() )


"CEffectData/SetHitBox"
CEffectData:SetHitBox( number hitBoxIndex ) 
 Description
Sets the hit box index of the effect.



NOTE


This is internally stored as an integer, but only the first 11 bits will be networked.


 Arguments

 number hitBoxIndex


The hit box index of the effect.


"CEffectData/SetNormal"
CEffectData:SetNormal( Vector normal ) 
 Description
Sets the normalized direction vector of the effect to be created with this effect data.

 Arguments

 Vector normal


The normalized direction vector of the effect.


"chat/Open"
chat.Open( number mode ) 
 Description
Opens the chat window.

 Arguments

 number mode


If equals 1, opens public chat, otherwise opens team chat


"cleanup/GetList"
cleanup.GetList(  ) 
 Description
Gets the cleanup list.


"chat/PlaySound"
chat.PlaySound(  ) 
 Description
Plays the chat tick sound.


 Examples
 Example
Plays an obnoxious tick sound.

chat.PlaySound()


"cleanup/ReplaceEntity"
cleanup.ReplaceEntity( Entity from, Entity to ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Replaces one entity in the cleanup module with another

 Arguments

 Entity from


Old entity

 Arguments

 Entity to


New entity

 Returns

 boolean


Whether any action was taken.


"chat/GetChatBoxSize"
chat.GetChatBoxSize(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Examples

4.1 Example




 Description
Returns the chatbox size.

 Returns

 number


The width of the chatbox.

 Returns

 number


The height of the chatbox.

 Examples
 Example
Prints the width and the height of the chatbox.

print( chat.GetChatBoxSize() )


"cleanup/Add"
cleanup.Add( Player pl, string type, Entity ent ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Adds an entity to a players cleanup list.

 Arguments

 Player pl


Whos cleanup list to add the entity to.

 Arguments

 string type


The type of cleanup.

 Arguments

 Entity ent


The entity to add to the players cleanup list.


"cleanup/CC_AdminCleanup"
cleanup.CC_AdminCleanup( Player pl, string command, table args ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Called by the gmod_admin_cleanup console command. Allows admins to clean up the server.
 Arguments

 Player pl


The player that called the console command.

 Arguments

 string command


The console command that called this function.

 Arguments

 table args


First and only arg is the cleanup type.


"CEffectData/SetSurfaceProp"
CEffectData:SetSurfaceProp( number surfaceProperties ) 
 Description
Sets the surface property index of the effect.

 Arguments

 number surfaceProperties


The surface property index of the effect.


"CLuaEmitter/Add"
CLuaEmitter:Add( string material, Vector position ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Creates a new CLuaParticle with the given material and position.

 Arguments

 string material


The particles material. Can also be an IMaterial.

 Arguments

 Vector position


The position to spawn the particle on.

 Returns

 CLuaParticle


The created particle, if any.


"cleanup/CC_Cleanup"
cleanup.CC_Cleanup( Player pl, string command, table args ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Called by the gmod_cleanup console command. Allows players to cleanup their own props.
 Arguments

 Player pl


The player that called the console command.

 Arguments

 string command


The console command that called this function.

 Arguments

 table args


First and only arg is the cleanup type.


"cleanup/GetTable"
cleanup.GetTable(  ) 
 Description
Gets the table of cleanup types.

 Returns

 table


cleanup_types


"CLuaEmitter/Draw"
CLuaEmitter:Draw(  ) 
 Description
Manually renders all particles the emitter has created.


"cleanup/UpdateUI"
cleanup.UpdateUI(  ) 
 Description
Repopulates the clients cleanup menu


"CLuaEmitter/GetPos"
CLuaEmitter:GetPos(  ) 
 Description
Returns the position of this emitter. This is set when creating the emitter with ParticleEmitter.

 Returns

 Vector


Position of this particle emitter.


"cleanup/Register"
cleanup.Register( string type ) 
 Description
Registers a new cleanup type.

 Arguments

 string type


Name of type.


"CLuaEmitter/GetNumActiveParticles"
CLuaEmitter:GetNumActiveParticles(  ) 
 Description
Returns the amount of active particles of this emitter.

 Returns

 number


The amount of active particles of this emitter


"CLuaEmitter/SetBBox"
CLuaEmitter:SetBBox( Vector mins, Vector maxs ) 
 Description
Sets the bounding box for this emitter.
Usually the bounding box is automatically determined by the particles, but this function overrides it.

 Arguments

 Vector mins


The minimum position of the box

 Arguments

 Vector maxs


The maximum position of the box


"CLuaEmitter/Is3D"
CLuaEmitter:Is3D(  ) 
 Description
Returns whether this emitter is 3D or not. This is set when creating the emitter with ParticleEmitter.

 Returns

 boolean


Whether this emitter is 3D or not.


"CLuaEmitter/IsValid"
CLuaEmitter:IsValid(  ) 
 Description
Returns whether this CLuaEmitter is valid or not.

 Returns

 boolean


Whether this CLuaEmitter is valid or not.


"CLuaEmitter/Finish"
CLuaEmitter:Finish(  ) 
 Description
Removes the emitter and all its particles.


"CLuaEmitter/SetPos"
CLuaEmitter:SetPos( Vector position ) 
 Description
Sets the position of the particle emitter.

 Arguments

 Vector position


New position.


"CLuaEmitter/SetParticleCullRadius"
CLuaEmitter:SetParticleCullRadius( number radius ) 
 Description
The function name has not much in common with its actual function, it applies a radius to every particles that affects the building of the bounding box, as it, usually is constructed by the particle that has the lowest x, y and z and the highest x, y and z, this function just adds/subtracts the radius and inflates the bounding box.

 Arguments

 number radius


Particle radius.


"CLuaEmitter/SetNearClip"
CLuaEmitter:SetNearClip( number distanceMin, number distanceMax ) 
 Description
This function sets the the distance between the render camera and the emitter at which the particles should start fading and at which distance fade ends ( alpha becomes 0 ).

 Arguments

 number distanceMin


Min distance where the alpha becomes 0.

 Arguments

 number distanceMax


Max distance where the alpha starts fading.


"CLuaLocomotion/ClearStuck"
CLuaLocomotion:ClearStuck(  ) 
 Description
Removes the stuck status from the bot


"CLuaLocomotion/FaceTowards"
CLuaLocomotion:FaceTowards( Vector goal ) 
 Description
Sets the direction we want to face

 Arguments

 Vector goal


The vector we want to face


"CLuaEmitter/SetNoDraw"
CLuaEmitter:SetNoDraw( boolean noDraw ) 
 Description
Prevents all particles of the emitter from automatically drawing.

 Arguments

 boolean noDraw


Whether we should draw the particles ( false ) or not ( true )


"CLuaLocomotion/GetDeathDropHeight"
CLuaLocomotion:GetDeathDropHeight(  ) 
 Description
Gets the height the bot is scared to fall from

 Returns

 number


Current death drop height


"CLuaLocomotion/Approach"
CLuaLocomotion:Approach( Vector goal, number goalweight ) 
 Description
Sets the location we want to get to

 Arguments

 Vector goal


The vector we want to get to

 Arguments

 number goalweight


If unsure then set this to 1


"CLuaLocomotion/GetMaxJumpHeight"
CLuaLocomotion:GetMaxJumpHeight(  ) 
 Description
Returns maximum jump height of this CLuaLocomotion.

 Returns

 number


The maximum jump height.


"CLuaLocomotion/GetDeceleration"
CLuaLocomotion:GetDeceleration(  ) 
 Description
Gets the deceleration speed

 Returns

 number


Current deceleration speed


"CLuaLocomotion/GetVelocity"
CLuaLocomotion:GetVelocity(  ) 
 Description
Returns the current movement velocity as a vector

 Returns

 Vector


Current velocity


"CLuaLocomotion/GetCurrentAcceleration"
CLuaLocomotion:GetCurrentAcceleration(  ) 
 Description
Returns the current acceleration as a vector

 Returns

 Vector


Current acceleration


"CLuaLocomotion/GetGroundMotionVector"
CLuaLocomotion:GetGroundMotionVector(  ) 
 Description
Return unit vector in XY plane describing our direction of motion - even if we are currently not moving

 Returns

 Vector


A vector representing the X and Y movement


"CLuaLocomotion/GetJumpHeight"
CLuaLocomotion:GetJumpHeight(  ) 
 Description
Gets the height of the bots jump

 Returns

 number


Current jump height


"CLuaLocomotion/GetAcceleration"
CLuaLocomotion:GetAcceleration(  ) 
 Description
Returns the acceleration speed

 Returns

 number


Current acceleration speed


"CLuaLocomotion/IsStuck"
CLuaLocomotion:IsStuck(  ) 
 Description
Returns true if were stuck

 Returns

 boolean


Whether were stuck or not


"CLuaLocomotion/GetStepHeight"
CLuaLocomotion:GetStepHeight(  ) 
 Description
Gets the max height the bot can step up

 Returns

 number


Current step height


"CLuaLocomotion/IsOnGround"
CLuaLocomotion:IsOnGround(  ) 
 Description
Returns whether the locomotion/nextbot is on ground or not.

 Returns

 boolean


Whether the locomotion/nextbot is on ground or not.


"CLuaLocomotion/GetMaxYawRate"
CLuaLocomotion:GetMaxYawRate(  ) 
 Description
Returns the max rate at which the NextBot can visually rotate.

 Returns

 number


Maximum yaw rate


"CLuaLocomotion/Jump"
CLuaLocomotion:Jump(  ) 
 Description
Makes the bot jump


"CLuaLocomotion/IsUsingLadder"
CLuaLocomotion:IsUsingLadder(  ) 
 Description
Returns whether or not the target in question is on a ladder or not.

 Returns

 boolean


If the target is on a ladder or not.


"CLuaLocomotion/IsAreaTraversable"
CLuaLocomotion:IsAreaTraversable( CNavArea area ) 
 Description
Returns whether this CLuaLocomotion can reach and/or traverse/move in given CNavArea.

 Arguments

 CNavArea area


The area to test

 Returns

 boolean


Whether this CLuaLocomotion can traverse given CNavArea.


"CLuaLocomotion/IsAttemptingToMove"
CLuaLocomotion:IsAttemptingToMove(  ) 
 Description
Returns true if were trying to move.

 Returns

 boolean


Whether were trying to move or not.


"CLuaLocomotion/IsClimbingOrJumping"
CLuaLocomotion:IsClimbingOrJumping(  ) 
 Description
Returns true of the locomotion engine is jumping or climbing

 Returns

 boolean


Whether were climbing or jumping or not


"CLuaLocomotion/SetDeceleration"
CLuaLocomotion:SetDeceleration( number deceleration ) 
 Description
Sets the deceleration speed.

 Arguments

 number deceleration


New deceleration speed (default is 400)


"CLuaLocomotion/SetAcceleration"
CLuaLocomotion:SetAcceleration( number speed ) 
 Description
Sets the acceleration speed

 Arguments

 number speed


Speed acceleration (default is 400)


"CLuaLocomotion/JumpAcrossGap"
CLuaLocomotion:JumpAcrossGap( Vector landingGoal, Vector landingForward ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 Vector landingGoal


 Arguments

 Vector landingForward


"CLuaParticle/GetAngles"
CLuaParticle:GetAngles(  ) 
 Description
Returns the current orientation of the particle.

 Returns

 Angle


The angles of the particle


"CLuaLocomotion/SetDesiredSpeed"
CLuaLocomotion:SetDesiredSpeed( number speed ) 
 Description
Sets movement speed.

 Arguments

 number speed


The new desired speed


"CLuaLocomotion/SetDeathDropHeight"
CLuaLocomotion:SetDeathDropHeight( number height ) 
 Description
Sets the height the bot is scared to fall from.

 Arguments

 number height


Height (default is 200)


"CLuaLocomotion/SetJumpHeight"
CLuaLocomotion:SetJumpHeight( number height ) 
 Description
Sets the height of the bots jump

 Arguments

 number height


Height (default is 58)


"CLuaLocomotion/SetStepHeight"
CLuaLocomotion:SetStepHeight( number height ) 
 Description
Sets the max height the bot can step up

 Arguments

 number height


Height (default is 18)


"CLuaLocomotion/SetMaxYawRate"
CLuaLocomotion:SetMaxYawRate( number yawRate ) 
 Description
Sets the max rate at which the NextBot can visually rotate. This will not affect moving or pathing.

 Arguments

 number yawRate


Desired new maximum yaw rate


"CLuaParticle/GetBounce"
CLuaParticle:GetBounce(  ) 
 Description
Returns the bounciness of the particle.

 Returns

 number


The bounciness of the particle
2 means it will gain 100% of its previous velocity,
1 means it will not lose velocity,
0.5 means it will lose half of its velocity with each bounce.


"CLuaParticle/GetColor"
CLuaParticle:GetColor(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Returns


 Description
Returns the color of the particle.

 Returns

 number


Red part of the color

 Returns

 number


Green part of the color

 Returns

 number


Blue part of the color


"CLuaParticle/GetAngleVelocity"
CLuaParticle:GetAngleVelocity(  ) 
 Description
Returns the angular velocity of the particle

 Returns

 Angle


The angular velocity of the particle


"CLuaLocomotion/SetVelocity"
CLuaLocomotion:SetVelocity( Vector velocity ) 
 Description
Sets the current movement velocity

 Arguments

 Vector velocity


"CLuaParticle/GetEndAlpha"
CLuaParticle:GetEndAlpha(  ) 
 Description
Returns the alpha value that the particle will reach on its death.

 Returns

 number


The alpha value the particle will fade to


"CLuaParticle/GetEndSize"
CLuaParticle:GetEndSize(  ) 
 Description
Returns the size that the particle will reach on its death.

 Returns

 number


The size the particle will reach


"CLuaParticle/GetRoll"
CLuaParticle:GetRoll(  ) 
 Description
Returns the current rotation of the particle in radians, this should only be used for 2D particles.

 Returns

 number


The current rotation of the particle in radians


"CLuaParticle/GetEndLength"
CLuaParticle:GetEndLength(  ) 
 Description
Returns the length that the particle will reach on its death.

 Returns

 number


The length the particle will reach


"CLuaParticle/GetAirResistance"
CLuaParticle:GetAirResistance(  ) 
 Description
Returns the air resistance of the particle.

 Returns

 number


The air resistance of the particle


"CLuaParticle/GetPos"
CLuaParticle:GetPos(  ) 
 Description
Returns the absolute position of the particle.

 Returns

 Vector


The absolute position of the particle.


"CLuaParticle/GetGravity"
CLuaParticle:GetGravity(  ) 
 Description
Returns the gravity of the particle.

 Returns

 Vector


The gravity of the particle.


"CLuaParticle/GetLifeTime"
CLuaParticle:GetLifeTime(  ) 
 Description
Returns the life time of the particle, how long the particle existed since its creation.
This value will always be between 0 and CLuaParticle:GetDieTime.
It changes automatically as time goes.
It can be manipulated using CLuaParticle:SetLifeTime.
If the life time of the particle will be more than CLuaParticle:GetDieTime, it will be removed.

 Returns

 number


How long the particle existed, in seconds.


"CLuaParticle/GetRollDelta"
CLuaParticle:GetRollDelta(  ) 
 Description
Returns the current rotation speed of the particle in radians, this should only be used for 2D particles.

 Returns

 number


The current rotation speed of the particle in radians


"CLuaParticle/GetDieTime"
CLuaParticle:GetDieTime(  ) 
 Description
Returns the amount of time in seconds after which the particle will be destroyed.

 Returns

 number


The amount of time in seconds after which the particle will be destroyed


"CLuaParticle/GetStartAlpha"
CLuaParticle:GetStartAlpha(  ) 
 Description
Returns the alpha value which the particle has when its created.

 Returns

 number


The alpha value which the particle has when its created.


"CLuaParticle/GetVelocity"
CLuaParticle:GetVelocity(  ) 
 Description
Returns the current velocity of the particle.

 Returns

 Vector


The current velocity of the particle.


"CLuaParticle/SetAngles"
CLuaParticle:SetAngles( Angle ang ) 
 Description
Sets the angles of the particle.

 Arguments

 Angle ang


New angle.


"CLuaParticle/SetCollide"
CLuaParticle:SetCollide( boolean shouldCollide ) 
 Description
Sets the whether the particle should collide with the world or not.

 Arguments

 boolean shouldCollide


Whether the particle should collide with the world or not


"CLuaParticle/SetAngleVelocity"
CLuaParticle:SetAngleVelocity( Angle angVel ) 
 Description
Sets the angular velocity of the the particle.

 Arguments

 Angle angVel


New angular velocity.


"CLuaParticle/GetStartSize"
CLuaParticle:GetStartSize(  ) 
 Description
Returns the size which the particle has when its created.

 Returns

 number


The size which the particle has when its created.


"CLuaParticle/SetBounce"
CLuaParticle:SetBounce( number bounce ) 
 Description
Sets the bounciness of the the particle.

 Arguments

 number bounce


New bounciness of the particle
2 means it will gain 100% of its previous velocity,
1 means it will not lose velocity,
0.5 means it will lose half of its velocity with each bounce.


"CLuaParticle/SetCollideCallback"
CLuaParticle:SetCollideCallback( function collideFunc ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the function that gets called whenever the particle collides with the world.

 Arguments

 function collideFunc


Collide callback, the arguments are:

CLuaParticle particle - The particle itselfVector hitPos - Position of the collisionVector hitNormal - Direction of the collision, perpendicular to the hit surface

 Examples
 Example
Creates an explosion every time an particle collides with something.

MyParticle:SetCollideCallback( function( part, hitpos, hitnormal ) --This is an in-line function
    local efdata = EffectData() --Grab base EffectData table
    efdata:SetOrigin( hitpos ) --Sets the origin of it to the hitpos of the particle
    util.Effect( Explosion, efdata ) --Create the effect
end )


"CLuaParticle/GetStartLength"
CLuaParticle:GetStartLength(  ) 
 Description
Returns the length which the particle has when its created.

 Returns

 number


The length which the particle has when its created.


"CLuaParticle/SetAirResistance"
CLuaParticle:SetAirResistance( number airResistance ) 
 Description
Sets the air resistance of the the particle.

 Arguments

 number airResistance


New air resistance.


"CLuaParticle/SetColor"
CLuaParticle:SetColor( number r, number g, number b ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Sets the color of the particle.

 Arguments

 number r


The red component.

 Arguments

 number g


The green component.

 Arguments

 number b


The blue component.


"CLuaParticle/SetDieTime"
CLuaParticle:SetDieTime( number dieTime ) 
 Description
Sets the time where the particle will be removed.

 Arguments

 number dieTime


The new die time.


"CLuaParticle/SetEndAlpha"
CLuaParticle:SetEndAlpha( number endAlpha ) 
 Description
Sets the alpha value of the particle that it will reach when it dies.

 Arguments

 number endAlpha


The new alpha value of the particle that it will reach when it dies.


"CLuaParticle/SetLifeTime"
CLuaParticle:SetLifeTime( number lifeTime ) 
 Description
Sets the life time of the particle, how long the particle existed since its creation.
This value should always be between 0 and CLuaParticle:GetDieTime.
It changes automatically as time goes.
If the life time of the particle will be more than CLuaParticle:GetDieTime, it will be removed.

 Arguments

 number lifeTime


The new life time of the particle.


"CLuaParticle/SetEndSize"
CLuaParticle:SetEndSize( number endSize ) 
 Description
Sets the size of the particle that it will reach when it dies.

 Arguments

 number endSize


The new size of the particle that it will reach when it dies.


"CLuaParticle/SetLighting"
CLuaParticle:SetLighting( boolean useLighting ) 
 Description
Sets whether the particle should be lighted.

 Arguments

 boolean useLighting


Whether the particle should be lighted.


"CLuaParticle/SetEndLength"
CLuaParticle:SetEndLength( number endLength ) 
 Description
Sets the length of the particle that it will reach when it dies.

 Arguments

 number endLength


The new length of the particle that it will reach when it dies.


"CLuaParticle/SetRollDelta"
CLuaParticle:SetRollDelta( number rollDelta ) 
 Description
Sets the rotation speed of the particle in radians. This should only be used for 2D particles.

 Arguments

 number rollDelta


The new rotation speed of the particle in radians.


"CLuaParticle/SetStartAlpha"
CLuaParticle:SetStartAlpha( number startAlpha ) 
 Description
Sets the initial alpha value of the particle.

 Arguments

 number startAlpha


Initial alpha.


"CLuaParticle/SetGravity"
CLuaParticle:SetGravity( Vector gravity ) 
 Description
Sets the directional gravity aka. acceleration of the particle.

 Arguments

 Vector gravity


The directional gravity.


"CLuaParticle/SetPos"
CLuaParticle:SetPos( Vector pos ) 
 Description
Sets the absolute position of the particle.

 Arguments

 Vector pos


The new particle position.


"CLuaParticle/SetNextThink"
CLuaParticle:SetNextThink( number nextThink ) 
 Description
Sets when the particles think function should be called next, this uses the synchronized server time returned by CurTime.

 Arguments

 number nextThink


Next think time.


"CLuaParticle/SetThinkFunction"
CLuaParticle:SetThinkFunction( function thinkFunc ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the think function of the particle.

 Arguments

 function thinkFunc


Think function. It has only one argument:

CLuaParticle particle - The particle the think hook is set on

 Examples
 Example
Example on how to use a think function, randomizes the colors of a particle

p:SetNextThink( 1e99 ) -- Makes sure the think hook is used on all particles of the particle emitter
p:SetThinkFunction( function( pa )
	pa:SetColor( math.random( 0, 255 ), math.random( 0, 255 ), math.random( 0, 255 ) ) -- Randomize it
	pa:SetNextThink( 1e99 ) -- Makes sure the think hook is actually ran.
end )


"CLuaParticle/SetRoll"
CLuaParticle:SetRoll( number roll ) 
 Description
Sets the roll of the particle in radians. This should only be used for 2D particles.

 Arguments

 number roll


The new rotation of the particle in radians.


"CLuaParticle/SetStartSize"
CLuaParticle:SetStartSize( number startSize ) 
 Description
Sets the initial size value of the particle.

 Arguments

 number startSize


Initial size.


"CLuaParticle/SetStartLength"
CLuaParticle:SetStartLength( number startLength ) 
 Description
Sets the initial length value of the particle.

 Arguments

 number startLength


Initial length.


"CLuaParticle/SetVelocity"
CLuaParticle:SetVelocity( Vector vel ) 
 Description
Sets the velocity of the particle.

 Arguments

 Vector vel


The new velocity of the particle.


"CLuaParticle/SetVelocityScale"
CLuaParticle:SetVelocityScale( boolean doScale=false ) 
 Description
Scales the velocity based on the particle speed.

 Arguments

 boolean doScale=false


Use velocity scaling.


"CMoveData/AddKey"
CMoveData:AddKey( number keys ) 
 Description
Adds keys to the move data, as if player pressed them.

 Arguments

 number keys


Keys to add, see IN_ Enums


"CMoveData/GetAbsMoveAngles"
CMoveData:GetAbsMoveAngles(  ) 
 Description
Gets the aim angle. Seems to be same as CMoveData:GetAngles.

 Returns

 Angle


Aiming angle


"CMoveData/GetAngles"
CMoveData:GetAngles(  ) 
 Description
Gets the aim angle. On client is the same as Entity:GetAngles.

 Returns

 Angle


Aiming angle


"CMoveData/GetConstraintRadius"
CMoveData:GetConstraintRadius(  ) 
 Description
Returns the radius that constrains the players movement.

 Returns

 number


The constraint radius


"CMoveData/GetImpulseCommand"
CMoveData:GetImpulseCommand(  ) 
 Description
Gets the number passed to impulse console command

 Returns

 number


The impulse


"CMoveData/GetForwardSpeed"
CMoveData:GetForwardSpeed(  ) 
 Description
Returns the players forward speed.

 Returns

 number


speed


"CMoveData/GetButtons"
CMoveData:GetButtons(  ) 
 Description
Gets which buttons are down

 Returns

 number


An integer representing which buttons are down, see IN_ Enums


"CMoveData/GetOrigin"
CMoveData:GetOrigin(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Gets the players position.

 Returns

 Vector


The players position.

 Examples
 Example
Prints the players position.

function GM:SetupMove( ply, movedata )
    print( movedata:GetOrigin() )
end


"CMoveData/GetOldAngles"
CMoveData:GetOldAngles(  ) 
 Description
Gets the aim angle. Only works clientside, server returns same as CMoveData:GetAngles.

 Returns

 Angle


The aim angle


"CMoveData/GetMaxClientSpeed"
CMoveData:GetMaxClientSpeed(  ) 
 Description
Returns the maximum client speed of the player

 Returns

 number


The maximum client speed


"CMoveData/KeyReleased"
CMoveData:KeyReleased( number key ) 
 Description
Returns whether the key was released

 Arguments

 number key


A key to test, see IN_ Enums

 Returns

 boolean


Was the key released or not.


"CMoveData/SetAngles"
CMoveData:SetAngles( Angle ang ) 
 Description
Sets angles.



BUG


This function does nothing.



 Arguments

 Angle ang


The angles.


"CMoveData/GetMoveAngles"
CMoveData:GetMoveAngles(  ) 
 Description
Returns the angle the player is moving at. For more info, see CMoveData:SetMoveAngles.

 Returns

 Angle


The move direction


"CMoveData/KeyPressed"
CMoveData:KeyPressed( number key ) 
 Description
Returns whether the key was pressed. If you want to check if the key is held down, try CMoveData:KeyDown

 Arguments

 number key


The key to test, see IN_ Enums

 Returns

 boolean


Was the key pressed or not.


"CMoveData/GetVelocity"
CMoveData:GetVelocity(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Gets the players velocity.



BUG


This will return Vector(0,0,0) sometimes when walking on props.



 Returns

 Vector


The players velocity

 Examples
 Example
Prints the players velocity.

function GM:Move( ply, movedata )
    print( movedata:GetVelocity() )
end


"CMoveData/SetAbsMoveAngles"
CMoveData:SetAbsMoveAngles( Angle ang ) 
 Description
Sets absolute move angles.(? ) Doesnt seem to do anything.

 Arguments

 Angle ang


New absolute move angles


"CMoveData/SetConstraintRadius"
CMoveData:SetConstraintRadius( number radius ) 
 Description
Sets the radius that constrains the players movement.
It is unknown what this function does as changing its values doesnt affect player movement.

 Arguments

 number radius


The new constraint radius


"CMoveData/GetSideSpeed"
CMoveData:GetSideSpeed(  ) 
 Description
Returns the strafe speed of the player.

 Returns

 number


speed


"CMoveData/GetMaxSpeed"
CMoveData:GetMaxSpeed(  ) 
 Description
Returns the maximum speed of the player.

 Returns

 number


The maximum speed


"CMoveData/GetUpSpeed"
CMoveData:GetUpSpeed(  ) 
 Description
Returns the vertical speed of the player. ( Z axis of CMoveData:GetVelocity )

 Returns

 number


Vertical speed


"CMoveData/KeyWasDown"
CMoveData:KeyWasDown( number key ) 
 Description
Returns whether the key was down or not.
Unlike CMoveData:KeyDown, it will return false if CMoveData:KeyPressed is true and it will return true if CMoveData:KeyReleased is true.

 Arguments

 number key


The key to test, seee IN_ Enums

 Returns

 boolean


Was the key down or not


"CMoveData/SetOldAngles"
CMoveData:SetOldAngles( Angle aimAng ) 
 Description
Sets old aim angles. (? ) Doesnt seem to be doing anything.

 Arguments

 Angle aimAng


The old angles


"CMoveData/SetMaxClientSpeed"
CMoveData:SetMaxClientSpeed( number maxSpeed ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Sets the maximum player speed. Player wont be able to run or sprint faster then this value.
This also automatically sets CMoveData:SetMaxSpeed when used in the GM:SetupMove hook. You must set it manually in the GM:Move hook.
This must be called on both client and server to avoid prediction errors.
This will not reduce speed in air.



NOTE


Setting this to 0 will not make the player stationary. It wont do anything.


 Arguments

 number maxSpeed


The new maximum speed

 Examples
 Example
Doesnt let the player to run or sprint faster than 100 units per second.

hook.Add( SetupMove,MySpeed, function( ply, mv )
    mv:SetMaxClientSpeed( 100 )
end )


 Examples
 Example
Doubles the players speed properly.

hook.Add( Move, testestst, function( ply, mv, usrcmd )
	local speed = mv:GetMaxSpeed() * 2
	mv:SetMaxSpeed( speed )
	mv:SetMaxClientSpeed( speed )
end )


"CMoveData/GetOldButtons"
CMoveData:GetOldButtons(  ) 
 Description
Get which buttons were down last frame

 Returns

 number


An integer representing which buttons were down, see IN_ Enums


"CMoveData/SetOrigin"
CMoveData:SetOrigin( Vector pos ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the players position.

 Arguments

 Vector pos


The position

 Examples
 Example
Make the player freeze at the origin of the map.

function GM:SetupMove( ply, movedata )
    movedata:SetOrigin( vector_origin )
end


"CMoveData/SetImpulseCommand"
CMoveData:SetImpulseCommand( number impulse ) 
 Description
Sets the impulse command. This isnt actually utilised in the engine anywhere.

 Arguments

 number impulse


The impulse to set


"CMoveData/SetButtons"
CMoveData:SetButtons( number buttons ) 
 Description
Sets the pressed buttons on the move data

 Arguments

 number buttons


A number representing which buttons are down, see IN_ Enums


"CMoveData/SetOldButtons"
CMoveData:SetOldButtons( number buttons ) 
 Description
Sets the old pressed buttons on the move data. These buttons are used to work out which buttons have been released, which have just been pressed and which are being held down.

 Arguments

 number buttons


A number representing which buttons were down, see IN_ Enums


"CMoveData/SetMaxSpeed"
CMoveData:SetMaxSpeed( number maxSpeed ) 
 Description
Sets the maximum speed of the player. This must match with CMoveData:SetMaxClientSpeed both, on server and client.
Doesnt seem to be doing anything on its own, use CMoveData:SetMaxClientSpeed instead.

 Arguments

 number maxSpeed


The new maximum speed


"CMoveData/SetForwardSpeed"
CMoveData:SetForwardSpeed( number speed ) 
 Description
Sets players forward speed.

 Arguments

 number speed


New forward speed


"CMoveData/SetSideSpeed"
CMoveData:SetSideSpeed( number speed ) 
 Description
Sets players strafe speed.

 Arguments

 number speed


Strafe speed


"CMoveData/KeyDown"
CMoveData:KeyDown( number key ) 
 Description
Returns whether the key is down or not

 Arguments

 number key


The key to test, see IN_ Enums

 Returns

 boolean


Is the key down or not


"CMoveData/SetMoveAngles"
CMoveData:SetMoveAngles( Angle dir ) 
 Description
Sets the serverside move angles, making the movement keys act as if player was facing that direction.



BUG


This does nothing clientside.



 Arguments

 Angle dir


The aim direction.


"CMoveData/SetUpSpeed"
CMoveData:SetUpSpeed( number speed ) 
 Description
Sets vertical speed of the player. ( Z axis of CMoveData:SetVelocity )

 Arguments

 number speed


Vertical speed to set


"CNavArea/ClearSearchLists"
CNavArea:ClearSearchLists(  ) 
 Description
Clears the open and closed lists for a new search.


"CMoveData/SetVelocity"
CMoveData:SetVelocity( Vector velocity ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the players velocity

 Arguments

 Vector velocity


The velocity to set

 Examples
 Example
Make the player shake to hell and back.

function GM:SetupMove( ply, movedata )
    movedata:SetVelocity( VectorRand() * 800 )
end


"CNavArea/ComputeDirection"
CNavArea:ComputeDirection( Vector pos ) 
 Description
Returns the NavDir_ Enums direction that the given vector faces on this CNavArea.

 Arguments

 Vector pos


The position to compute direction towards.

 Returns

 number


The direction the vector is in relation to this CNavArea. See NavDir_ Enums.


"CNavArea/AddToClosedList"
CNavArea:AddToClosedList(  ) 
 Description
Adds this CNavArea to the closed list, a list of areas that have been checked by A* pathfinding algorithm.


"CNavArea/AddToOpenList"
CNavArea:AddToOpenList(  ) 
 Description
Adds this CNavArea to the Open List.


"CNavArea/Contains"
CNavArea:Contains( Vector pos ) 
 Description
Returns true if this CNavArea contains the given vector.

 Arguments

 Vector pos


The position to test.

 Returns

 boolean


True if the vector was inside and false otherwise.


"CNavArea/ComputeAdjacentConnectionHeightChange"
CNavArea:ComputeAdjacentConnectionHeightChange( CNavArea navarea ) 
 Description
Returns the height difference between the edges of two connected navareas.

 Arguments

 CNavArea navarea


 Returns

 number


The height change


"CNavArea/GetExposedSpots"
CNavArea:GetExposedSpots(  ) 
 Description
Returns a table of very bad hiding spots in this area

 Returns

 table


A table of Vectors


"CNavArea/GetClosestPointOnArea"
CNavArea:GetClosestPointOnArea( Vector pos ) 
 Description
Returns the closest point of this Nav Area from the given position.

 Arguments

 Vector pos


The given position, can be outside of the Nav Area bounds.

 Returns

 Vector


The closest position on this Nav Area.


"CNavArea/DrawSpots"
CNavArea:DrawSpots(  ) 
 Description
Draws the hiding spots on debug overlay. This includes sniper/exposed spots too!


"CNavArea/GetCorner"
CNavArea:GetCorner( number cornerid ) 
 Description
Returns the vector position of the corner for the given CNavArea.

 Arguments

 number cornerid


The target corner to get the position of, takes NavCorner_ Enums.

 Returns

 Vector


The corner position.


"CNavArea/GetHidingSpots"
CNavArea:GetHidingSpots(  ) 
 Description
Returns a table of good hiding spots in this area

 Returns

 table


A table of Vectors


"CNavArea/Disconnect"
CNavArea:Disconnect( CNavArea area ) 
 Description
Disconnects this nav area from given area or ladder. (Only disconnects one way)

 Arguments

 CNavArea area


The CNavArea or CNavLadder this to disconnect from.


"CNavArea/GetID"
CNavArea:GetID(  ) 
 Description
Returns this CNavAreas unique ID.

 Returns

 number


The unique ID.


"CNavArea/GetLaddersAtSide"
CNavArea:GetLaddersAtSide( number navDir ) 
 Description
Returns all CNavLadders that have a ( one or two way ) connection from ( one and two way ) this CNavArea in given direction.
See CNavArea:GetLadders for a function that returns CNavLadder from/in all sides/directions.

 Arguments

 number navDir


The direction, in which to look for CNavLadders.
0 = Up ( LadderDirectionType::LADDER_UP )

1 = Down ( LadderDirectionType::LADDER_DOWN )

 Returns

 table


The CNavLadders that have a ( one or two way ) connection from this CNavArea in given direction.


"CNavArea/ConnectTo"
CNavArea:ConnectTo( CNavArea area ) 
 Description
Connects this CNavArea to another CNavArea or CNavLadder with a one way connection. ( From this area to the target )
See CNavLadder:ConnectTo for making the connection from ladder to area.

 Arguments

 CNavArea area


The CNavArea or CNavLadder this area leads to.


"CNavArea/ComputeGroundHeightChange"
CNavArea:ComputeGroundHeightChange( CNavArea navArea ) 
 Description
Returns the height difference on the Z axis of the two CNavAreas. This is calculated from the center most point on both CNavAreas.

 Arguments

 CNavArea navArea


The nav area to test against.

 Returns

 number


The ground height change.


"CNavArea/GetExtentInfo"
CNavArea:GetExtentInfo(  ) 
 Description
Returns size info about the nav area.

 Returns

 table


Returns a table containing the following keys:

 Vector hi
 Vector lo
 number SizeX
 number SizeY
 number SizeZ


"CNavArea/Draw"
CNavArea:Draw(  ) 
 Description
Draws this navarea on debug overlay.


"CNavArea/GetAdjacentCount"
CNavArea:GetAdjacentCount(  ) 
 Description
Returns the amount of CNavAreas that have a connection ( one and two way ) from this CNavArea.
See CNavArea:GetAdjacentCountAtSide for a function that only returns area count from one side/direction.

 Returns

 number


The amount of CNavAreas that have a connection ( one and two way ) from this CNavArea.


"CNavArea/GetAdjacentAreas"
CNavArea:GetAdjacentAreas(  ) 
 Description
Returns a table of all the CNavAreas that have a ( one and two way ) connection from this CNavArea.
If an area has a one-way incoming connection to this CNavArea, then it will not be returned from this function, use CNavArea:GetIncomingConnections to get all one-way incoming connections.
See CNavArea:GetAdjacentAreasAtSide for a function that only returns areas from one side/direction.

 Returns

 table


A table of all CNavArea that have a ( one and two way ) connection from this CNavArea. Returns an empty table if this area has no outgoing connections to any other areas.


"CNavArea/GetCenter"
CNavArea:GetCenter(  ) 
 Description
Returns the center most vector point for the given CNavArea.

 Returns

 Vector


The center vector.


"CNavArea/GetAttributes"
CNavArea:GetAttributes(  ) 
 Description
Returns the attribute mask for the given CNavArea.

 Returns

 boolean


Attribute mask for this CNavArea, see NAV_MESH_ Enums for the specific flags.




NOTE


A navmesh that was generated with nav_quicksave set to 1 will have all CNavAreas attribute masks set to 0


"CNavArea/GetIncomingConnections"
CNavArea:GetIncomingConnections(  ) 
 Description
Returns a table of all the CNavAreas that have a one-way connection to this CNavArea.
If a CNavArea has a two-way connection to or from this CNavArea then it will not be returned from this function, use CNavArea:GetAdjacentAreas to get outgoing ( one and two way ) connections.
See CNavArea:GetIncomingConnectionsAtSide for a function that returns one-way incoming connections from only one side/direction.

 Returns

 table


A table of all CNavAreas with one-way connection to this CNavArea.Returns an empty table if there are no one-way incoming connections to this CNavArea.


"CNavArea/GetCostSoFar"
CNavArea:GetCostSoFar(  ) 
 Description
Returns the cost from starting area this area when pathfinding. Set by CNavArea:SetCostSoFar.

 Returns

 number


The cost so far.


"CNavArea/GetLadders"
CNavArea:GetLadders(  ) 
 Description
Returns all CNavLadders that have a ( one or two way ) connection from this CNavArea.
See CNavArea:GetLaddersAtSide for a function that only returns CNavLadders in given direction.

 Returns

 table


The CNavLadders that have a ( one or two way ) connection from this CNavArea.


"CNavArea/GetAdjacentCountAtSide"
CNavArea:GetAdjacentCountAtSide( number navDir ) 
 Description
Returns the amount of CNavAreas that have a connection ( one or two way ) from this CNavArea in given direction.
See CNavArea:GetAdjacentCount for a function that returns CNavArea count from/in all sides/directions.

 Arguments

 number navDir


The direction, in which to look for CNavAreas, see NavDir_ Enums.

 Returns

 number


The amount of CNavAreas that have a connection ( one or two way ) from this CNavArea in given direction.


"CNavArea/GetRandomPoint"
CNavArea:GetRandomPoint(  ) 
 Description
Returns a random point on the nav area.

 Returns

 Vector


The random point on the nav area.


"CNavArea/GetPlace"
CNavArea:GetPlace(  ) 
 Description
Returns the Place of the nav area.

 Returns

 string


The place of the nav area, or no value if it doesnt have a place set.


"CNavArea/GetAdjacentAreasAtSide"
CNavArea:GetAdjacentAreasAtSide( number navDir ) 
 Description
Returns a table of all the CNavAreas that have a ( one and two way ) connection from this CNavArea in given direction.
If an area has a one-way incoming connection to this CNavArea, then it will not be returned from this function, use CNavArea:GetIncomingConnections to get all incoming connections.
See CNavArea:GetAdjacentAreas for a function that returns all areas from all sides/directions.

 Arguments

 number navDir


The direction, in which to look for CNavAreas, see NavDir_ Enums.

 Returns

 table


A table of all CNavArea that have a ( one and two way ) connection from this CNavArea in given direction.Returns an empty table if this area has no outgoing connections to any other areas in given direction.


"CNavArea/GetParent"
CNavArea:GetParent(  ) 
 Description
Returns the parent CNavArea

 Returns

 CNavArea


The parent CNavArea


"CNavArea/GetSizeX"
CNavArea:GetSizeX(  ) 
 Description
Returns the width this Nav Area.

 Returns

 number


"CNavArea/GetIncomingConnectionsAtSide"
CNavArea:GetIncomingConnectionsAtSide( number navDir ) 
 Description
Returns a table of all the CNavAreas that have a one-way connection to this CNavArea from given direction.
If a CNavArea has a two-way connection to or from this CNavArea then it will not be returned from this function, use CNavArea:GetAdjacentAreas to get outgoing ( one and two way ) connections.
See CNavArea:GetIncomingConnections for a function that returns one-way incoming connections from all sides/directions.

 Arguments

 number navDir


The direction, from which to look for CNavAreas, see NavDir_ Enums.

 Returns

 table


A table of all CNavAreas with one-way connection to this CNavArea from given direction.Returns an empty table if there are no one-way incoming connections to this CNavArea from given direction.


"CNavArea/GetParentHow"
CNavArea:GetParentHow(  ) 
 Description
Returns how this CNavArea is connected to its parent.

 Returns

 number


See NavTraverseType_ Enums


"CNavArea/GetTotalCost"
CNavArea:GetTotalCost(  ) 
 Description
Returns the total cost when passing from starting area to the goal area through this node. Set by CNavArea:SetTotalCost.

 Returns

 number


The total cost


"CNavArea/GetSizeY"
CNavArea:GetSizeY(  ) 
 Description
Returns the height of this Nav Area.

 Returns

 number


"CNavArea/GetZ"
CNavArea:GetZ( Vector pos ) 
 Description
Returns the elevation of this Nav Area at the given position.

 Arguments

 Vector pos


The position to get the elevation from, the z value from this position is ignored and only the X and Y values are used to this task.

 Returns

 number


The elevation.


"CNavArea/GetRandomAdjacentAreaAtSide"
CNavArea:GetRandomAdjacentAreaAtSide( number navDir ) 
 Description
Returns a random CNavArea that has an outgoing ( one or two way ) connection from this CNavArea in given direction.

 Arguments

 number navDir


The direction, in which to look for CNavAreas, see NavDir_ Enums.

 Returns

 CNavArea


The random CNavArea that has an outgoing ( one or two way ) connection from this CNavArea in given direction, if any.


"CNavArea/IsBlocked"
CNavArea:IsBlocked( number teamID, boolean ignoreNavBlockers=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 number teamID


 Arguments

 boolean ignoreNavBlockers=false


 Returns

 boolean


"CNavArea/IsConnected"
CNavArea:IsConnected( CNavArea navArea ) 
 Description
Returns whether this CNavArea has an outgoing ( one or two way ) connection to given CNavArea.
See CNavArea:IsConnectedAtSide for a function that only checks for outgoing connections in one direction.

 Arguments

 CNavArea navArea


The CNavArea to test against.

 Returns

 boolean


Whether this CNavArea has an outgoing ( one or two way ) connection to given CNavArea.


"CNavArea/IsOverlapping"
CNavArea:IsOverlapping( Vector pos, number tolerance=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns if this position overlaps the Nav Area within the given tolerance.

 Arguments

 Vector pos


The overlapping position to test.

 Arguments

 number tolerance=0


The tolerance of the overlapping, set to 0 for no tolerance.

 Returns

 boolean


Whether the given position overlaps the Nav Area or not.


"CNavArea/IsOpen"
CNavArea:IsOpen(  ) 
 Description
Returns whether this area is in the Open List.

 Returns

 boolean


Whether this area is in the Open List.


"CNavArea/IsUnderwater"
CNavArea:IsUnderwater(  ) 
 Description
Whether this Nav Area is placed underwater.

 Returns

 boolean


Whether were underwater or not.


"CNavArea/IsConnectedAtSide"
CNavArea:IsConnectedAtSide( CNavArea navArea, number navDirType ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns whether this CNavArea has an outgoing ( one or two way ) connection to given CNavArea in given direction.
See CNavArea:IsConnected for a function that checks all sides.

 Arguments

 CNavArea navArea


The CNavArea to test against.

 Arguments

 number navDirType


The direction, in which to look for the connection. See NavDir_ Enums

 Returns

 boolean


Whether this CNavArea has an outgoing ( one or two way ) connection to given CNavArea in given direction.


"CNavArea/IsClosed"
CNavArea:IsClosed(  ) 
 Description
Returns whether this node is in the Closed List.

 Returns

 boolean


Whether this node is in the Closed List.


"CNavArea/IsFlat"
CNavArea:IsFlat(  ) 
 Description
Returns whether this Nav Area is flat within the tolerance of the nav_coplanar_slope_limit_displacement and nav_coplanar_slope_limit convars.

 Returns

 boolean


Whether this CNavArea is mostly flat.


"CNavArea/IsVisible"
CNavArea:IsVisible( Vector pos ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns


 Description
Returns whether we can be seen from the given position.

 Arguments

 Vector pos


The position to check.

 Returns

 boolean


Whether we can be seen or not.

 Returns

 Vector


If we can be seen, this is returned with either the center or one of the corners of the Nav Area.


"CNavArea/HasAttributes"
CNavArea:HasAttributes( number attribs ) 
 Description
Returns true if the given CNavArea has this attribute flag set.

 Arguments

 number attribs


Attribute mask to check for, see NAV_MESH_ Enums

 Returns

 boolean


True if the CNavArea matches the given mask. False otherwise.


"CNavArea/RemoveFromClosedList"
CNavArea:RemoveFromClosedList(  ) 
 Description
Removes this node from the Closed List.


"CNavArea/IsRoughlySquare"
CNavArea:IsRoughlySquare(  ) 
 Description
Returns if were shaped like a square.

 Returns

 boolean


If were a square or not.


"CNavArea/PopOpenList"
CNavArea:PopOpenList(  ) 
 Description
Removes a CNavArea from the Open List with the lowest cost to traverse to from the starting node, and returns it.

 Returns

 CNavArea


The CNavArea from the Open List with the lowest cost to traverse to from the starting node.


"CNavArea/PlaceOnGround"
CNavArea:PlaceOnGround( number corner ) 
 Description
Drops a corner or all corners of a CNavArea to the ground below it.

 Arguments

 number corner


The corner(s) to drop, uses NavCorner_ Enums


"CNavArea/IsOpenListEmpty"
CNavArea:IsOpenListEmpty(  ) 
 Description
Returns whether the Open List is empty or not.

 Returns

 boolean


Whether the Open List is empty or not.


"CNavArea/IsCoplanar"
CNavArea:IsCoplanar( CNavArea navArea ) 
 Description
Returns whether this Nav Area is in the same plane as the given one.

 Arguments

 CNavArea navArea


The Nav Area to test.

 Returns

 boolean


Whether were coplanar or not.


"CNavArea/IsValid"
CNavArea:IsValid(  ) 
 Description
Returns whether this CNavArea is valid or not.

 Returns

 boolean


Whether this CNavArea is valid or not.


"CNavArea/IsOverlappingArea"
CNavArea:IsOverlappingArea( CNavArea navArea ) 
 Description
Returns true if this CNavArea is overlapping the given CNavArea.

 Arguments

 CNavArea navArea


The CNavArea to test against.

 Returns

 boolean


True if the given CNavArea overlaps this CNavArea at any point.


"CNavArea/SetCostSoFar"
CNavArea:SetCostSoFar( number cost ) 
 Description
Sets the cost from starting area this area when pathfinding.

 Arguments

 number cost


The cost so far


"CNavArea/Remove"
CNavArea:Remove(  ) 
 Description
Removes the given nav area.


"CNavArea/SetCorner"
CNavArea:SetCorner( number corner, Vector position ) 
 Description
Sets the position of a corner of a nav area.

 Arguments

 number corner


The corner to set, uses NavCorner_ Enums

 Arguments

 Vector position


The new position to set.


"CNavArea/SetParent"
CNavArea:SetParent( CNavArea parent ) 
 Description
Sets the new parent of this CNavArea.

 Arguments

 CNavArea parent


The new parent to set


"CNavArea/SetTotalCost"
CNavArea:SetTotalCost( number cost ) 
 Description
Sets the total cost when passing from starting area to the goal area through this node.

 Arguments

 number cost


The total cost of the path to set.

Must be above or equal 0.


"CNavLadder/Disconnect"
CNavLadder:Disconnect( CNavArea area ) 
 Description
Disconnects this ladder from given area in a single direction.

 Arguments

 CNavArea area


The CNavArea this to disconnect from.


"CNavArea/SetPlace"
CNavArea:SetPlace( string place ) 
 Description
Sets the Place of the nav area.
There is a limit of 256 Places per nav file.

 Arguments

 string place


Set to  to remove place from the nav area.

 Returns

 boolean


Returns true of operation succeeded, false otherwise.


"CNavArea/UpdateOnOpenList"
CNavArea:UpdateOnOpenList(  ) 
 Description
Moves this open list to appropriate position based on its CNavArea:GetTotalCost compared to the total cost of other areas in the open list.


"CNavLadder/ConnectTo"
CNavLadder:ConnectTo( CNavArea area ) 
 Description
Connects this ladder to a CNavArea with a one way connection. ( From this ladder to the target area ).
See CNavArea:ConnectTo for making the connection from area to ladder.

 Arguments

 CNavArea area


The area this ladder leads to.


"CNavArea/SetAttributes"
CNavArea:SetAttributes( number attribs ) 
 Description
Sets the attributes for given CNavArea.

 Arguments

 number attribs


The attribute bitflag. See NAV_MESH_ Enums


"CNavLadder/GetBottom"
CNavLadder:GetBottom(  ) 
 Description
Returns the bottom most position of the ladder.

 Returns

 Vector


The bottom most position of the ladder.


"CNavLadder/GetLength"
CNavLadder:GetLength(  ) 
 Description
Returns the length of the ladder.

 Returns

 number


The length of the ladder.


"CNavLadder/GetTopBehindArea"
CNavLadder:GetTopBehindArea(  ) 
 Description
Returns the top behind CNavArea of the CNavLadder.

 Returns

 CNavArea


The top behind CNavArea of the CNavLadder.


"CNavLadder/GetBottomArea"
CNavLadder:GetBottomArea(  ) 
 Description
Returns the bottom area of the CNavLadder.

 Returns

 CNavArea


"CNavLadder/GetTopRightArea"
CNavLadder:GetTopRightArea(  ) 
 Description
Returns the top right CNavArea of the CNavLadder.

 Returns

 CNavArea


The top right CNavArea of the CNavLadder.


"CNavLadder/GetTop"
CNavLadder:GetTop(  ) 
 Description
Returns the topmost position of the ladder.

 Returns

 Vector


The topmost position of the ladder.


"CNavLadder/GetPosAtHeight"
CNavLadder:GetPosAtHeight( number height ) 
 Description
Returns the world position based on given height relative to the ladder.

 Arguments

 number height


The Z position in world space coordinates.

 Returns

 Vector


The closest point on the ladder to that height.


"CNavLadder/SetTopForwardArea"
CNavLadder:SetTopForwardArea( CNavArea area ) 
 Description
Sets the top forward area of the CNavLadder.

 Arguments

 CNavArea area


"CNavLadder/GetNormal"
CNavLadder:GetNormal(  ) 
 Description
Returns the direction of this CNavLadder. ( The direction in which players back will be facing if they are looking directly at the ladder )

 Returns

 Vector


The direction of this CNavLadder.


"CNavLadder/Remove"
CNavLadder:Remove(  ) 
 Description
Removes the given nav ladder.


"CNavLadder/GetID"
CNavLadder:GetID(  ) 
 Description
Returns this CNavLadders unique ID.

 Returns

 number


The unique ID.


"CNavLadder/IsConnectedAtSide"
CNavLadder:IsConnectedAtSide( CNavArea navArea, number navDirType ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns whether this CNavLadder has an outgoing ( one or two way ) connection to given CNavArea in given direction.

 Arguments

 CNavArea navArea


The CNavArea to test against.

 Arguments

 number navDirType


The direction, in which to look for the connection. See NavDir_ Enums

 Returns

 boolean


Whether this CNavLadder has an outgoing ( one or two way ) connection to given CNavArea in given direction.


"CNavLadder/GetTopForwardArea"
CNavLadder:GetTopForwardArea(  ) 
 Description
Returns the top forward CNavArea of the CNavLadder.

 Returns

 CNavArea


The top forward CNavArea of the CNavLadder.


"CNavLadder/GetTopLeftArea"
CNavLadder:GetTopLeftArea(  ) 
 Description
Returns the top left CNavArea of the CNavLadder.

 Returns

 CNavArea


The top left CNavArea of the CNavLadder.


"CNavLadder/GetWidth"
CNavLadder:GetWidth(  ) 
 Description
Returns the width of the ladder in Hammer Units.

 Returns

 number


The width of the ladder in Hammer Units.


"CNavLadder/SetTopLeftArea"
CNavLadder:SetTopLeftArea( CNavArea area ) 
 Description
Sets the top left area of the CNavLadder.

 Arguments

 CNavArea area


"CNavLadder/SetBottomArea"
CNavLadder:SetBottomArea( CNavArea area ) 
 Description
Sets the bottom area of the CNavLadder.

 Arguments

 CNavArea area


"CNewParticleEffect/GetHighestControlPoint"
CNewParticleEffect:GetHighestControlPoint(  ) 
 Description
Returns the highest control point number for given particle system.

 Returns

 boolean


The highest control point number for given particle system, 0 to 63.


"CNavLadder/SetTopBehindArea"
CNavLadder:SetTopBehindArea( CNavArea area ) 
 Description
Sets the top behind area of the CNavLadder.

 Arguments

 CNavArea area


"CNavLadder/IsValid"
CNavLadder:IsValid(  ) 
 Description
Returns whether this CNavLadder is valid or not.

 Returns

 boolean


Whether this CNavLadder is valid or not.


"CNewParticleEffect/AddControlPoint"
CNewParticleEffect:AddControlPoint( number cpID, Entity ent, number partAttachment, number entAttachment=0, Vector offset=Vector( 0, 0, 0 ) ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Adds a control point to the particle system.



NOTE


This function will not work if the CNewParticleEffect:GetOwner entity is not valid


 Arguments

 number cpID


The control point ID, 0 to 63.

 Arguments

 Entity ent


The entity to attach the control point to.

 Arguments

 number partAttachment


See PATTACH_ Enums.

 Arguments

 number entAttachment=0


The attachment ID on the entity to attach the particle system to

 Arguments

 Vector offset=Vector( 0, 0, 0 )


The offset from the Entity:GetPos of the entity we are attaching this CP to.


"CNewParticleEffect/GetEffectName"
CNewParticleEffect:GetEffectName(  ) 
 Description
Returns the name of the particle effect this system is set to emit.

 Returns

 string


The name of the particle effect.


"CNewParticleEffect/Restart"
CNewParticleEffect:Restart(  ) 
 Description
Forces the particle system to restart emitting particles.


"CNavLadder/SetTopRightArea"
CNavLadder:SetTopRightArea( CNavArea area ) 
 Description
Sets the top right area of the CNavLadder.

 Arguments

 CNavArea area


"CNewParticleEffect/GetOwner"
CNewParticleEffect:GetOwner(  ) 
 Description
Returns the owner of the particle system, the entity the particle system is attached to.

 Returns

 Entity


The owner of the particle system.


"CNewParticleEffect/Render"
CNewParticleEffect:Render(  ) 
 Description
Forces the particle system to render using current rendering context.
Can be used to render the particle system in vgui panels, etc.
Used in conjunction with CNewParticleEffect:SetShouldDraw.


"CNewParticleEffect/GetAutoUpdateBBox"
CNewParticleEffect:GetAutoUpdateBBox(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 boolean


"CNewParticleEffect/IsViewModelEffect"
CNewParticleEffect:IsViewModelEffect(  ) 
 Description
Returns whether the particle system is intended to be used on a view model?

 Returns

 boolean


"CNewParticleEffect/SetControlPointEntity"
CNewParticleEffect:SetControlPointEntity( number child, Entity parent ) 
 Description
Essentially makes child control point follow the parent entity.

 Arguments

 number child


The child control point ID, 0 to 63.

 Arguments

 Entity parent


The parent entity to follow.


"CNewParticleEffect/IsFinished"
CNewParticleEffect:IsFinished(  ) 
 Description
Returns whether the particle system has finished emitting particles or not.

 Returns

 boolean


Whether the particle system has finished emitting particles or not.


"CNewParticleEffect/SetControlPointForwardVector"
CNewParticleEffect:SetControlPointForwardVector( number cpID, Vector forward ) 
 Description
Sets the forward direction for given control point.

 Arguments

 number cpID


The control point ID, 0 to 63.

 Arguments

 Vector forward


The forward direction for given control point


"CNewParticleEffect/SetControlPointOrientation"
CNewParticleEffect:SetControlPointOrientation( number cpID, Vector forward, Vector right, Vector up ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Sets the orientation for given control point.

 Arguments

 number cpID


The control point ID, 0 to 63.

 Arguments

 Vector forward


The forward direction for given control point

 Arguments

 Vector right


The right direction for given control point

 Arguments

 Vector up


The up direction for given control point


"CNewParticleEffect/SetControlPointParent"
CNewParticleEffect:SetControlPointParent( number child, number parent ) 
 Description
Essentially makes child control point follow the parent control point.

 Arguments

 number child


The child control point ID, 0 to 63.

 Arguments

 number parent


The parent control point ID, 0 to 63.


"CNewParticleEffect/SetControlPointRightVector"
CNewParticleEffect:SetControlPointRightVector( number cpID, Vector right ) 
 Description
Sets the right direction for given control point.

 Arguments

 number cpID


The control point ID, 0 to 63.

 Arguments

 Vector right


The right direction for given control point.


"CNewParticleEffect/IsValid"
CNewParticleEffect:IsValid(  ) 
 Description
Returns whether the particle system is valid or not.

 Returns

 boolean


Whether the particle system is valid or not.


"CNewParticleEffect/SetControlPoint"
CNewParticleEffect:SetControlPoint( number cpID, Vector value ) 
 Description
Sets a value for given control point.

 Arguments

 number cpID


The control point ID, 0 to 63.

 Arguments

 Vector value


The value to set for given control point.


"concommand/GetTable"
concommand.GetTable(  ) 
 Description
Returns the tables of all console command callbacks, and autocomplete functions, that were added to the game with concommand.Add.

 Returns

 table


Table of command callback functions.

 Returns

 table


Table of command autocomplete functions.


"CNewParticleEffect/SetControlPointUpVector"
CNewParticleEffect:SetControlPointUpVector( number cpID, Vector upward ) 
 Description
Sets the upward direction for given control point.

 Arguments

 number cpID


The control point ID, 0 to 63.

 Arguments

 Vector upward


The upward direction for given control point


"concommand/Add"
concommand.Add( string name, function callback, function autoComplete=nil, string helpText=nil, number flags=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example


8 Examples

8.1 Example




 Description
Creates a console command that runs a function in lua with optional autocompletion function and help text.



BUG


This will fail if the concommand was previously removed with concommand.Remove in a different realm (creating a command on the client that was removed from the server and vice-versa).



 Arguments

 string name


The command name to be used in console.

This cannot be a name of existing console command or console variable. It will silently fail if it is.

 Arguments

 function callback


The function to run when the concommand is executed. Arguments passed are:

 Player ply - The player the ran the concommand. NULL entity if command was entered with the dedicated server console.
 string cmd - The concommand string (if one callback is used for several concommands).
 table args - A table of all string arguments.
 string argStr - The arguments as a string.


 Arguments

 function autoComplete=nil


The function to call which should return a table of options for autocompletion. (Autocompletion Tutorial)
This only properly works on the client since it is not networked. Arguments passed are:

 string cmd - The concommand this autocompletion is for.
 string args - The arguments typed so far.


 Arguments

 string helpText=nil


The text to display should a user run help cmdName.

 Arguments

 number flags=0


Concommand modifier flags. See FCVAR_ Enums.

 Examples
 Example
Adds a concommand killyourself which will kill the user.

concommand.Add( killyourself,function( ply, cmd, args )
    ply:Kill()
    print( You killed yourself! )
end )


 Examples
 Example
A concommand that prints the SteamID and nickname of every player on the server.

concommand.Add( retrieveplayers, function()  
	for _, ply in ipairs( player.GetAll() ) do
		print( ply:Nick() .. ,  .. ply:SteamID() .. \n )
	end
end )


"concommand/AutoComplete"
concommand.AutoComplete( string command, string arguments ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Used by the engine to call the autocomplete function for a console command, and retrieve returned options.
 Arguments

 string command


Name of command

 Arguments

 string arguments


Arguments given to the command

 Returns

 table


Possibilities for auto-completion. This is the return value of the auto-complete callback.


"concommand/Remove"
concommand.Remove( string name ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Removes a console command.



BUG


This will not always remove the command from auto-complete.





BUG


concommand.Add will fail if the concommand was previously removed with this function in a different realm (creating a command on the client that was removed from the server and vice-versa).



 Arguments

 string name


The name of the command to be removed.

 Examples
 Example
Removes the built-in concommand gmod_camera which would normally quickly select the camera swep

concommand.Remove( gmod_camera )


"CNewParticleEffect/StopEmission"
CNewParticleEffect:StopEmission( boolean infiniteOnly=false, boolean removeAllParticles=false, boolean wakeOnStop=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Stops the particle emission.

 Arguments

 boolean infiniteOnly=false


 Arguments

 boolean removeAllParticles=false


 Arguments

 boolean wakeOnStop=false


"CNewParticleEffect/SetShouldDraw"
CNewParticleEffect:SetShouldDraw( boolean should ) 
 Description
Forces the particle system to stop automatically rendering.
Used in conjunction with CNewParticleEffect:Render.

 Arguments

 boolean should


Whether to automatically draw the particle effect or not.


"CNewParticleEffect/StartEmission"
CNewParticleEffect:StartEmission( boolean infiniteOnly=false ) 
 Description
Starts the particle emission.

 Arguments

 boolean infiniteOnly=false


"CNewParticleEffect/SetSortOrigin"
CNewParticleEffect:SetSortOrigin( Vector origin ) 
 Description
Sets the sort origin for given particle system. This is used as a helper to determine which particles are in front of which.

 Arguments

 Vector origin


The new sort origin.


"constraint/AddConstraintTable"
constraint.AddConstraintTable( Entity ent1, Entity constrt, Entity ent2=nil, Entity ent3=nil, Entity ent4=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Stores information about constraints in an entitys table.

 Arguments

 Entity ent1


The entity to store the information on.

 Arguments

 Entity constrt


The constraint to store in the entitys table.

 Arguments

 Entity ent2=nil


Optional. If different from ent1, the info will also be stored in the table for this entity.

 Arguments

 Entity ent3=nil


Optional. Same as ent2.

 Arguments

 Entity ent4=nil


Optional. Same as ent2.


"constraint/AdvBallsocket"
constraint.AdvBallsocket( Entity Ent1, Entity Ent2, number Bone1, number Bone2, Vector LPos1, Vector LPos2, number forcelimit, number torquelimit, number xmin, number ymin, number zmin, number xmax, number ymax, number zmax, number xfric, number yfric, number zfric, number onlyrotation, number nocollide ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Arguments
12 Arguments
13 Arguments
14 Arguments
15 Arguments
16 Arguments
17 Arguments
18 Arguments
19 Arguments
20 Arguments
21 Returns


 Description
Creates an advanced ballsocket (ragdoll) constraint.
Uses a https://developer.valvesoftware.com/wiki/Phys_ragdollconstraint

 Arguments

 Entity Ent1


First entity.

 Arguments

 Entity Ent2


Second entity.

 Arguments

 number Bone1


Bone of first entity (0 for non-ragdolls)

 Arguments

 number Bone2


Bone of second entity (0 for non-ragdolls)

 Arguments

 Vector LPos1


Position on the first entity, in its local space coordinates.

 Arguments

 Vector LPos2


Position on the second entity, in its local space coordinates.

 Arguments

 number forcelimit


Amount of force until it breaks (0 = unbreakable)

 Arguments

 number torquelimit


Amount of torque (rotation speed) until it breaks (0 = unbreakable)

 Arguments

 number xmin


Minimum angle in rotations around the X axis local to the constraint.

 Arguments

 number ymin


Minimum angle in rotations around the Y axis local to the constraint.

 Arguments

 number zmin


Minimum angle in rotations around the Z axis local to the constraint.

 Arguments

 number xmax


Maximum angle in rotations around the X axis local to the constraint.

 Arguments

 number ymax


Maximum angle in rotations around the Y axis local to the constraint.

 Arguments

 number zmax


Maximum angle in rotations around the Z axis local to the constraint.

 Arguments

 number xfric


Rotational friction in the X axis local to the constraint.

 Arguments

 number yfric


Rotational friction in the Y axis local to the constraint.

 Arguments

 number zfric


Rotational friction in the Z axis local to the constraint.

 Arguments

 number onlyrotation


Only limit rotation, free movement.

 Arguments

 number nocollide


Whether the entities should be no-collided.

 Returns

 Entity


A phys_ragdollconstraint entity. Will return false if the constraint could not be created.


"CNewParticleEffect/StopEmissionAndDestroyImmediately"
CNewParticleEffect:StopEmissionAndDestroyImmediately(  ) 
 Description
Stops particle emission and destroys all particles instantly. Also detaches the particle effect from the entity it was attached to.



NOTE


This function will work identically to CNewParticleEffect:StopEmission( false, true ) if CNewParticleEffect:GetOwner entity is not valid.


Consider using CNewParticleEffect:StopEmission( false, true ) instead, which has same effect, but doesnt require owner entity, and doest detach the particle system from its entity.


"CNewParticleEffect/SetIsViewModelEffect"
CNewParticleEffect:SetIsViewModelEffect( boolean isViewModel ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 boolean isViewModel


"constraint/Axis"
constraint.Axis( Entity Ent1, Entity Ent2, number Bone1, number Bone2, Vector LPos1, Vector LPos2, number forcelimit, number torquelimit, number friction, number nocollide, Vector LocalAxis, boolean DontAddTable ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Arguments
12 Arguments
13 Arguments
14 Returns


 Description
Creates an axis constraint.

 Arguments

 Entity Ent1


First entity.

 Arguments

 Entity Ent2


Second entity.

 Arguments

 number Bone1


Bone of first entity (0 for non-ragdolls)

 Arguments

 number Bone2


Bone of second entity (0 for non-ragdolls)

 Arguments

 Vector LPos1


Position on the first entity, in its local space coordinates.

 Arguments

 Vector LPos2


Position on the second entity, in its local space coordinates.

 Arguments

 number forcelimit


Amount of force until it breaks (0 = unbreakable)

 Arguments

 number torquelimit


Amount of torque (rotational force) until it breaks (0 = unbreakable)

 Arguments

 number friction


Constraint friction.

 Arguments

 number nocollide


Whether the entities should be no-collided.

 Arguments

 Vector LocalAxis


If you include the LocalAxis then LPos2 will not be used in the final constraint. However, LPos2 is still a required argument.

 Arguments

 boolean DontAddTable


Whether or not to add the constraint info on the entity table. See constraint.AddConstraintTable.

 Returns

 Entity


Constraint. Will return false if the constraint could not be created.


"constraint/Elastic"
constraint.Elastic( Entity Ent1, Entity Ent2, number Bone1, number Bone2, Vector LPos1, Vector LPos2, number constant, number damping, number rdamping, string material, number width, boolean stretchonly ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Arguments
12 Arguments
13 Arguments
14 Returns
15 Returns


 Description
Creates an elastic constraint.

 Arguments

 Entity Ent1


First entity.

 Arguments

 Entity Ent2


Second entity

 Arguments

 number Bone1


Bone of first entity (0 for non-ragdolls)

 Arguments

 number Bone2


Bone of second entity (0 for non-ragdolls)

 Arguments

 Vector LPos1


Position of first end of the rope. Local to Ent1.

 Arguments

 Vector LPos2


Position of second end of the rope. Local to Ent2.

 Arguments

 number constant


 Arguments

 number damping


 Arguments

 number rdamping


 Arguments

 string material


The material of the rope.

 Arguments

 number width


Width of rope.

 Arguments

 boolean stretchonly


 Returns

 Entity


Constraint. Will return false if the constraint could not be created.

 Returns

 Entity


rope. Will return nil if the constraint could not be created.


"constraint/AddConstraintTableNoDelete"
constraint.AddConstraintTableNoDelete( Entity ent1, Entity constrt, Entity ent2=nil, Entity ent3=nil, Entity ent4=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Stores info about the constraints on the entitys table. The only difference between this and constraint.AddConstraintTable is that the constraint does not get deleted when the entity is removed.

 Arguments

 Entity ent1


The entity to store the information on.

 Arguments

 Entity constrt


The constraint to store in the entitys table.

 Arguments

 Entity ent2=nil


Optional. If different from ent1, the info will also be stored in the table for this entity.

 Arguments

 Entity ent3=nil


Optional. Same as ent2.

 Arguments

 Entity ent4=nil


Optional. Same as ent2.


"constraint/Ballsocket"
constraint.Ballsocket( Entity Ent1, Entity Ent2, number Bone1, number Bone2, Vector LocalPos, number forcelimit, number torquelimit, number nocollide ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Returns


 Description
Creates a ballsocket joint.

 Arguments

 Entity Ent1


First entity

 Arguments

 Entity Ent2


Second entity

 Arguments

 number Bone1


Bone of first entity (0 for non-ragdolls)

 Arguments

 number Bone2


Bone of second entity (0 for non-ragdolls)

 Arguments

 Vector LocalPos


Centerposition of the joint, relative to the second entity.

 Arguments

 number forcelimit


Amount of force until it breaks (0 = unbreakable)

 Arguments

 number torquelimit


Amount of torque (rotation speed) until it breaks (0 = unbreakable)

 Arguments

 number nocollide


Whether the entities should be nocollided

 Returns

 Entity


Constraint. Will return false if the constraint could not be created.


"concommand/Run"
concommand.Run( Player ply, string cmd, any args, string argumentString ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.

You might be looking for RunConsoleCommand or Player:ConCommand. Used by the engine to run a console commands callback function, that was added with concommand.Add. An error is sent to the players chat if no callback is found.
 Arguments

 Player ply


Player to run concommand on

 Arguments

 string cmd


Command name

 Arguments

 any args


Command arguments.

Can be table or string

 Arguments

 string argumentString


string of all arguments sent to the command

 Returns

 boolean


true if the console command with the given name exists, and false if it doesnt.


"constraint/FindConstraints"
constraint.FindConstraints( Entity ent, string type ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns a table of all constraints of a specific type directly connected to the entity

 Arguments

 Entity ent


The entity to check

 Arguments

 string type


The type of constraint (eg. Weld, Elastic, NoCollide)

 Returns

 table


All the constraints of this entity.


"constraint/CreateKeyframeRope"
constraint.CreateKeyframeRope( Vector pos, number width, string material, Entity Constraint, Entity Ent1, Vector LPos1, number Bone1, Entity Ent2, Vector LPos2, number Bone2, table kv ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Arguments
12 Arguments
13 Returns


 Description
Creates a rope without any constraint

 Arguments

 Vector pos


 Arguments

 number width


 Arguments

 string material


 Arguments

 Entity Constraint


 Arguments

 Entity Ent1


 Arguments

 Vector LPos1


 Arguments

 number Bone1


 Arguments

 Entity Ent2


 Arguments

 Vector LPos2


 Arguments

 number Bone2


 Arguments

 table kv


 Returns

 Entity


rope


"constraint/GetTable"
constraint.GetTable( Entity ent ) 
 Description
Returns a table of all constraints directly connected to the entity

 Arguments

 Entity ent


The entity to check

 Returns

 table


A list of all constraints connected to the entity.


"constraint/CanConstrain"
constraint.CanConstrain( Entity ent, number bone ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Basic checks to make sure that the specified entity and bone are valid. Returns false if we should not be constraining the entity.

 Arguments

 Entity ent


The entity to check

 Arguments

 number bone


The bone of the entity to check (use 0 for mono boned ents)

 Returns

 boolean


shouldConstrain

 Examples
 Example
From modules/constraint.lua

function Weld( Ent1, Ent2, Bone1, Bone2, forcelimit, nocollide, deleteonbreak )
 if ( !CanConstrain( Ent1, Bone1 ) ) then return false end
 if ( !CanConstrain( Ent2, Bone2 ) ) then return false end


"constraint/FindConstraint"
constraint.FindConstraint( Entity ent, string type ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns the first constraint of a specific type directly connected to the entity found

 Arguments

 Entity ent


The entity to check

 Arguments

 string type


The type of constraint (eg. Weld, Elastic, NoCollide)

 Returns

 table


The constraint table, set with constraint.AddConstraintTable


"constraint/ForgetConstraints"
constraint.ForgetConstraints( Entity ent ) 
 Description
Make this entity forget any constraints it knows about. Note that this will not actually remove the constraints.

 Arguments

 Entity ent


The entity that will forget its constraints.


"constraint/CreateStaticAnchorPoint"
constraint.CreateStaticAnchorPoint( Vector pos ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns
5 Returns
6 Returns


 Description
Creates an invisible, non-moveable anchor point in the world to which things can be attached.

 Arguments

 Vector pos


The position to spawn the anchor at

 Returns

 Entity


anchor

 Returns

 PhysObj


physicsObject,

 Returns

 number


bone

 Returns

 Vector


LPos


"constraint/Find"
constraint.Find( Entity ent1, Entity ent2, string type, number bone1, number bone2 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Returns


 Description
Returns the constraint of a specified type between two entities, if it exists

 Arguments

 Entity ent1


The first entity to check

 Arguments

 Entity ent2


The second entity to check

 Arguments

 string type


The constraint type to look for (eg. Weld, Elastic, NoCollide)

 Arguments

 number bone1


The bone number for the first entity (0 for monoboned entities)

 Arguments

 number bone2


The bone number for the second entity

 Returns

 Entity


constraint


"constraint/FindConstraintEntity"
constraint.FindConstraintEntity( Entity ent, string type ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns the other entity involved in the first constraint of a specific type directly connected to the entity

 Arguments

 Entity ent


The entity to check

 Arguments

 string type


The type of constraint (eg. Weld, Elastic, NoCollide)

 Returns

 Entity


The other entity.


"constraint/RemoveConstraints"
constraint.RemoveConstraints( Entity ent, string type ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns
6 Examples

6.1 Example




 Description
Attempts to remove all constraints of a specified type associated with an entity

 Arguments

 Entity ent


The entity to check

 Arguments

 string type


The constraint type to remove (eg. Weld, Elastic, NoCollide)

 Returns

 boolean


Whether we removed any constraints or not

 Returns

 number


The amount of constraints removed

 Examples
 Example
From stools/axis.lua

function TOOL:Reload( trace )
 if ( !trace.Entity:IsValid() or trace.Entity:IsPlayer() ) then return false end
 local bool = constraint.RemoveConstraints( trace.Entity, Axis )
 return bool
end


"constraint/HasConstraints"
constraint.HasConstraints( Entity ent ) 
 Description
Returns true if the entity has constraints attached to it

 Arguments

 Entity ent


The entity to check

 Returns

 boolean


Whether the entity has any constraints or not.


"constraint/GetAllConstrainedEntities"
constraint.GetAllConstrainedEntities( Entity ent, table ResultTable=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns a table of all entities recursively constrained to an entitiy.

 Arguments

 Entity ent


The entity to check

 Arguments

 table ResultTable=nil


Table used to return result. Optional.

 Returns

 table


A table containing all of the constrained entities. This includes all entities constrained to entities constrained to the supplied entity, etc.

 Examples
 Example
Adapted from stools/remover.lua

-- Remove this entity and everything constrained
function TOOL:RightClick( trace )
	if ( !IsValid( trace.Entity ) or trace.Entity:IsPlayer() ) then return false end
	-- Loop through all the entities in the system
	for _, Entity in pairs( constraint.GetAllConstrainedEntities( trace.Entity ) ) do
		DoRemoveEntity( Entity )
	end
	return true
end


"constraint/Pulley"
constraint.Pulley( Entity Ent1, Entity Ent4, number Bone1, number Bone4, Vector LPos1, Vector LPos4, Vector WPos2, Vector WPos3, number forcelimit, boolean rigid, number width, string material ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Arguments
12 Arguments
13 Arguments
14 Returns


 Description
Creates a pulley constraint.

 Arguments

 Entity Ent1


 Arguments

 Entity Ent4


 Arguments

 number Bone1


 Arguments

 number Bone4


 Arguments

 Vector LPos1


 Arguments

 Vector LPos4


 Arguments

 Vector WPos2


 Arguments

 Vector WPos3


 Arguments

 number forcelimit


Amount of force until it breaks (0 = unbreakable)

 Arguments

 boolean rigid


Whether the constraint is rigid.

 Arguments

 number width


Width of the rope.

 Arguments

 string material


Material of the rope.

 Returns

 Entity


Constraint. Will return false if the constraint could not be created.


"constraint/Rope"
constraint.Rope( Entity Ent1, Entity Ent2, number Bone1, number Bone2, Vector LPos1, Vector LPos2, number length, number addlength, number forcelimit, number width, string material, boolean rigid ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Arguments
12 Arguments
13 Arguments
14 Returns
15 Returns


 Description
Creates a rope constraint - with rope!

 Arguments

 Entity Ent1


First entity

 Arguments

 Entity Ent2


Second entity

 Arguments

 number Bone1


Bone of first entity (0 for non-ragdolls)

 Arguments

 number Bone2


Bone of second entity (0 for non-ragdolls)

 Arguments

 Vector LPos1


Position of first end of the rope. Local to Ent1.

 Arguments

 Vector LPos2


Position of second end of the rope. Local to Ent2.

 Arguments

 number length


Length of the rope.

 Arguments

 number addlength


Amount to add to the length of the rope. Works as it does in the Rope tool.

 Arguments

 number forcelimit


Amount of force until it breaks (0 = unbreakable).

 Arguments

 number width


Width of the rope.

 Arguments

 string material


Material of the rope.

 Arguments

 boolean rigid


Whether the constraint is rigid.

 Returns

 Entity


Constraint. Will be a keyframe_rope if you roping to the same bone on the same entity. Will return false if the constraint could not be created.

 Returns

 Entity


rope. Will return nil if Constraint is a keyframe_rope or if the constraint could not be created.


"constraint/NoCollide"
constraint.NoCollide( Entity Ent1, Entity Ent2, number Bone1, number Bone2 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Creates an no-collide constraint. Disables collision between two entities.

 Arguments

 Entity Ent1


First entity.

 Arguments

 Entity Ent2


Second entity.

 Arguments

 number Bone1


Bone of first entity (0 for non-ragdolls).

 Arguments

 number Bone2


Bone of second entity (0 for non-ragdolls).

 Returns

 Entity


Constraint. Will return false if the constraint could not be created.


"constraint/Motor"
constraint.Motor( Entity Ent1, Entity Ent2, number Bone1, number Bone2, Vector LPos1, Vector LPos2, number friction, number torque, number forcetime, number nocollide, number toggle, Player pl, number forcelimit, number numpadkey_fwd, number numpadkey_bwd, number direction, Vector LocalAxis ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Arguments
12 Arguments
13 Arguments
14 Arguments
15 Arguments
16 Arguments
17 Arguments
18 Arguments
19 Returns
20 Returns


 Description
Creates a motor constraint.

 Arguments

 Entity Ent1


First entity.

 Arguments

 Entity Ent2


Second entity.

 Arguments

 number Bone1


Bone of first entity (0 for non-ragdolls)

 Arguments

 number Bone2


Bone of second entity (0 for non-ragdolls)

 Arguments

 Vector LPos1


 Arguments

 Vector LPos2


 Arguments

 number friction


 Arguments

 number torque


 Arguments

 number forcetime


 Arguments

 number nocollide


Whether the entities should be no-collided.

 Arguments

 number toggle


Whether the constraint is on toggle.

 Arguments

 Player pl


The player that will be used to call numpad.OnDown and numpad.OnUp.

 Arguments

 number forcelimit


Amount of force until it breaks (0 = unbreakable)

 Arguments

 number numpadkey_fwd


The key binding for forward, corresponding to an KEY_ Enums

 Arguments

 number numpadkey_bwd


The key binding for backwards, corresponding to an KEY_ Enums

 Arguments

 number direction


 Arguments

 Vector LocalAxis


 Returns

 Entity


Constraint. Will return false if the constraint could not be created.

 Returns

 Entity


axis. Will return nil if the constraint could not be created.


"constraint/Muscle"
constraint.Muscle( Player pl, Entity Ent1, Entity Ent2, number Bone1, number Bone2, Vector LPos1, Vector LPos2, number Length1, number Length2, number width, number key, number fixed, number period, number amplitude, boolean starton, string material ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Arguments
12 Arguments
13 Arguments
14 Arguments
15 Arguments
16 Arguments
17 Arguments
18 Returns
19 Returns
20 Returns
21 Returns


 Description
Creates a muscle constraint.

 Arguments

 Player pl


The player that will be used to call numpad.OnDown.

 Arguments

 Entity Ent1


First entity.

 Arguments

 Entity Ent2


Second entity.

 Arguments

 number Bone1


Bone of first entity (0 for non-ragdolls)

 Arguments

 number Bone2


Bone of second entity (0 for non-ragdolls)

 Arguments

 Vector LPos1


 Arguments

 Vector LPos2


 Arguments

 number Length1


 Arguments

 number Length2


 Arguments

 number width


Width of the rope.

 Arguments

 number key


The key binding, corresponding to an KEY_ Enums

 Arguments

 number fixed


Whether the constraint is fixed.

 Arguments

 number period


 Arguments

 number amplitude


 Arguments

 boolean starton


 Arguments

 string material


Material of the rope.

 Returns

 Entity


Constraint. Will return false if the constraint could not be created.

 Returns

 Entity


rope. Will return nil if the constraint could not be created.

 Returns

 Entity


controller. Will return nil if the constraint could not be created.

 Returns

 Entity


slider. Will return nil if the fixed argument is not 1 or if the constraint could not be created.


"constraint/Winch"
constraint.Winch( Player pl, Entity Ent1, Entity Ent2, number Bone1, number Bone2, Vector LPos1, Vector LPos2, number width, number fwd_bind, number bwd_bind, number fwd_speed, number bwd_speed, string material, boolean toggle ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Arguments
12 Arguments
13 Arguments
14 Arguments
15 Arguments
16 Returns
17 Returns
18 Returns


 Description
Creates a Winch constraint.

 Arguments

 Player pl


The player that will be used to call numpad.OnDown and numpad.OnUp.

 Arguments

 Entity Ent1


First entity.

 Arguments

 Entity Ent2


Second entity.

 Arguments

 number Bone1


Bone of first entity (0 for non-ragdolls),

 Arguments

 number Bone2


Bone of second entity (0 for non-ragdolls).

 Arguments

 Vector LPos1


 Arguments

 Vector LPos2


 Arguments

 number width


The width of the rope.

 Arguments

 number fwd_bind


The key binding for forward, corresponding to an KEY_ Enums

 Arguments

 number bwd_bind


The key binding for backwards, corresponding to an KEY_ Enums

 Arguments

 number fwd_speed


Forward speed.

 Arguments

 number bwd_speed


Backwards speed.

 Arguments

 string material


The material of the rope.

 Arguments

 boolean toggle


Whether the winch should be on toggle.

 Returns

 Entity


Constraint. Can return nil. Will return false if the constraint could not be created.

 Returns

 Entity


rope. Will return nil if the constraint could not be created.

 Returns

 Entity


controller. Can return nil.


"controlpanel/Clear"
controlpanel.Clear(  ) 
 Description
Clears ALL the control panels ( for tools )


"construct/SetPhysProp"
construct.SetPhysProp( Player ply, Entity ent, number physObjID, PhysObj physObj, table data ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Sets props physical properties.

 Arguments

 Player ply


The player. This variable is not used and can be left out.

 Arguments

 Entity ent


The entity to apply properties to

 Arguments

 number physObjID


You can use this or the argument below. This will be used in case you dont provide argument below.

 Arguments

 PhysObj physObj


The physics object to apply the properties to

 Arguments

 table data


The table containing properties to apply. See PhysProperties structure


"constraint/Weld"
constraint.Weld( Entity ent1, Entity ent2, number bone1, number bone2, number forcelimit, boolean nocollide, boolean deleteent1onbreak ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Returns
10 Examples

10.1 Example




 Description
Creates a weld constraint

 Arguments

 Entity ent1


The first entity

 Arguments

 Entity ent2


The second entity

 Arguments

 number bone1


The bonenumber of the first entity (0 for monoboned entities) 


PhysObj number for ragdolls, see: Entity:TranslateBoneToPhysBone.

 Arguments

 number bone2


The bonenumber of the second entity

 Arguments

 number forcelimit


The amount of force appliable to the constraint before it will break (0 is never)

 Arguments

 boolean nocollide


Should ent1 be nocollided to ent2 via this constraint

 Arguments

 boolean deleteent1onbreak


If true, when ent2 is removed, ent1 will also be removed

 Returns

 Entity


constraint

 Examples
 Example
Adapted from stools/thruster.lua

function TOOL:LeftClick( trace )
 /* Boilerplate stool code to extract ClientConVars to variables */
 local thruster = MakeThruster( ply, model, Ang, trace.HitPos, key, key_bk, force, toggle, effect, damageable, soundname )
 local weld = constraint.Weld( thruster, trace.Entity, 0, trace.PhysicsBone, 0, collision == 0, true )
 -- If you remove the entity thrusters are welded to, the thruster is removed as well
end


"construct/Magnet"
construct.Magnet( Player ply, Vector pos, Angle ang, string model, string material, number key, number maxObjects, number strength, number nopull=0, number allowrot=0, number startOn=0, number toggle, Vector vel=Vector( 0, 0, 0 ), Angle aVel=Angle( 0, 0, 0 ), boolean frozen=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Arguments
12 Arguments
13 Arguments
14 Arguments
15 Arguments
16 Arguments
17 Returns


 Description
Creates a magnet.

 Arguments

 Player ply


Player that will have the numpad control over the magnet

 Arguments

 Vector pos


The position of the magnet

 Arguments

 Angle ang


The angles of the magnet

 Arguments

 string model


The model of the maget

 Arguments

 string material


Material of the magnet ( texture )

 Arguments

 number key


The key to toggle the magnet, see KEY_ Enums

 Arguments

 number maxObjects


Maximum amount of objects the magnet can hold

 Arguments

 number strength


Strength of the magnet

 Arguments

 number nopull=0


If &gt; 0, disallows the magnet to pull objects towards it

 Arguments

 number allowrot=0


If &gt; 0, allows rotation of the objects attached

 Arguments

 number startOn=0


If &gt; 0, enabled from spawn

 Arguments

 number toggle


If!= 0, pressing the key toggles the magnet, otherwise youll have to hold the key to keep it enabled

 Arguments

 Vector vel=Vector( 0, 0, 0 )


Velocity to set on spawn

 Arguments

 Angle aVel=Angle( 0, 0, 0 )


Angular velocity to set on spawn

 Arguments

 boolean frozen=false


Freeze the magnet on start

 Returns

 Entity


The magnet


"constraint/Keepupright"
constraint.Keepupright( Entity ent, Angle ang, number bone, number angularLimit ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example




 Description
Creates a keep upright constraint.



NOTE


This function only works on prop_physics or prop_ragdoll.


 Arguments

 Entity ent


The entity to keep upright

 Arguments

 Angle ang


The angle defined as upright

 Arguments

 number bone


The bone of the entity to constrain (0 for boneless)

 Arguments

 number angularLimit


Basically, the strength of the constraint

 Returns

 Entity


The created constraint, if any or false if the constraint failed to set

 Examples
 Example
From properties/keep_upright.lua (the right click menu)

constraint.Keepupright( ent, Phys:GetAngles(), 0, 999999 )


"constraint/Hydraulic"
constraint.Hydraulic( Player pl, Entity Ent1, Entity Ent2, number Bone1, number Bone2, Vector LPos1, Vector LPos2, number Length1, number Length2, number width, number key, number fixed, number speed, string material ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Arguments
12 Arguments
13 Arguments
14 Arguments
15 Arguments
16 Returns
17 Returns
18 Returns
19 Returns


 Description
Creates a Hydraulic constraint.

 Arguments

 Player pl


The player that will be used to call numpad.OnDown.

 Arguments

 Entity Ent1


First entity.

 Arguments

 Entity Ent2


Second entity.

 Arguments

 number Bone1


Bone of first entity (0 for non-ragdolls),

 Arguments

 number Bone2


Bone of second entity (0 for non-ragdolls).

 Arguments

 Vector LPos1


 Arguments

 Vector LPos2


 Arguments

 number Length1


 Arguments

 number Length2


 Arguments

 number width


The width of the rope.

 Arguments

 number key


The key binding, corresponding to an KEY_ Enums

 Arguments

 number fixed


Whether the hydraulic is fixed.

 Arguments

 number speed


 Arguments

 string material


The material of the rope.

 Returns

 Entity


Constraint. Will return false if the constraint could not be created.

 Returns

 Entity


rope. Will return nil if the constraint could not be created.

 Returns

 Entity


controller. Can return nil depending on how the constraint was created. Will return nil if the constraint could not be created.

 Returns

 Entity


slider. Can return nil depending on how the constraint was created. Will return nil if the constraint could not be created.


"constraint/Slider"
constraint.Slider( Entity Ent1, Entity Ent2, number Bone1, number Bone2, Vector LPos1, Vector LPos2, number width, string material ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Returns
11 Returns


 Description
Creates a slider constraint.

 Arguments

 Entity Ent1


First entity.

 Arguments

 Entity Ent2


Second entity.

 Arguments

 number Bone1


Bone of first entity (0 for non-ragdolls),

 Arguments

 number Bone2


Bone of second entity (0 for non-ragdolls).

 Arguments

 Vector LPos1


 Arguments

 Vector LPos2


 Arguments

 number width


The width of the rope.

 Arguments

 string material


The material of the rope.

 Returns

 Entity


Constraint. Will return false if the constraint could not be created.

 Returns

 Entity


rope. Will return nil if the constraint could not be created.


"constraint/RemoveAll"
constraint.RemoveAll( Entity ent ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns
5 Examples

5.1 Example




 Description
Attempts to remove all constraints associated with an entity

 Arguments

 Entity ent


The entity to remove constraints from

 Returns

 boolean


Whether any constraints were removed

 Returns

 number


Number of constraints removed

 Examples
 Example
From stools/remover.lua

-- Reload removes all constraints on the targetted entity
function TOOL:Reload( trace )
	if ( !IsValid( trace.Entity ) or trace.Entity:IsPlayer() ) then return false end
	return constraint.RemoveAll( trace.Entity )
end


"ConVar/GetFloat"
ConVar:GetFloat(  ) 
 Description
Attempts to convert the ConVar value to a float

 Returns

 number


The float value of the console variable.

If the value cannot be converted to a float, it will return 0.


"ConVar/GetBool"
ConVar:GetBool(  ) 
 Description
Tries to convert the current string value of a ConVar to a boolean.

 Returns

 boolean


The boolean value of the console variable. If the variable is numeric and not 0, the result will be true. Otherwise the result will be false.


"ConVar/GetHelpText"
ConVar:GetHelpText(  ) 
 Description
Returns the help text assigned to that convar.

 Returns

 string


The help text


"ConVar/GetDefault"
ConVar:GetDefault(  ) 
 Description
Returns the default value of the ConVar

 Returns

 string


The default value of the console variable.


"ConVar/SetInt"
ConVar:SetInt( number value ) 
 Description
Sets a ConVars value to the input number after converting it to an integer. This can only be ran on ConVars created from within Lua.

 Arguments

 number value


Value to set the ConVar to.


"controlpanel/Get"
controlpanel.Get( string name ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns (or creates if not exists) a controlpanel.

 Arguments

 string name


The name of the panel.

 Returns

 Panel


ControlPanel

 Examples
 Example
Get the Contextmenus panel for the weld tool.

local ControlPanel = controlpanel.Get( Weld )


"ConVar/GetName"
ConVar:GetName(  ) 
 Description
Returns the name of the ConVar.

 Returns

 string


The name of the console variable.


"ConVar/GetString"
ConVar:GetString(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the current ConVar value as a string.

 Returns

 string


The current console variable value as a string.

 Examples
 Example
Will check if the gamemode is sandbox

if ( GetConVar( gamemode ):GetString() == sandbox ) then
    print( Gamemode is sandbox )
end
Output:

Gamemode is sandbox


"ConVar/SetString"
ConVar:SetString( string value ) 
 Description
Sets a ConVars value to the input string. This can only be ran on ConVars created from within Lua.

 Arguments

 string value


Value to set the ConVar to.


"ConVar/SetBool"
ConVar:SetBool( boolean value ) 
 Description
Sets a ConVars value to 1 or 0 based on the input boolean. This can only be ran on ConVars created from within Lua.

 Arguments

 boolean value


Value to set the ConVar to.


"ConVar/GetInt"
ConVar:GetInt(  ) 
 Description
Attempts to convert the ConVar value to a integer.

 Returns

 number


The integer value of the console variable.
If it fails to convert to an integer, it will return 0.

All float/decimal values will be rounded down. ( With math.floor )


"cookie/Delete"
cookie.Delete( string name ) 
 Description
Deletes a cookie on the client.

 Arguments

 string name


The name of the cookie that you want to delete.


"cookie/GetString"
cookie.GetString( string name, any default=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Gets the value of a cookie on the client as a string.

 Arguments

 string name


The name of the cookie that you want to get.

 Arguments

 any default=nil


Value to return if the cookie does not exist.

 Returns

 string


The cookie value


"coroutine/status"
coroutine.status( thread coroutine ) 
 Description
Returns the status of the coroutine passed to it, the possible statuses are suspended, running, and dead.

 Arguments

 thread coroutine


Coroutine to check the status of.

 Returns

 string


status


"coroutine/wrap"
coroutine.wrap( function coroutine ) 
 Description
Returns a function which calling is equivalent with calling coroutine.resume with the coroutine and all extra parameters.

 Arguments

 function coroutine


Coroutine to resume.

 Returns

 function


func


"ConVar/SetFloat"
ConVar:SetFloat( number value ) 
 Description
Sets a ConVars value to to the input number. This can only be ran on ConVars created from within Lua.

 Arguments

 number value


Value to set the ConVar to.


"coroutine/create"
coroutine.create( function func ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Creates a coroutine of the given function.

 Arguments

 function func


The function for the coroutine to use

 Returns

 thread


coroutine

 Examples
 Example
Display the location of each player in an endless loop, but only one player per frame.

do
	local function displayer()
		local players
		while true do -- endless loop: you must guarantee that coroutine.yield() is always called!
			players = player.GetAll()
			if ( not next( players ) then -- empty table
				coroutine.yield() -- guarantee a pause in coroutine even with an empty table
			else
				for _, ply in pairs( players ) do
					coroutine.yield() -- We yield here so what you may do next will start immediatly when this for loop finishes.
					if ( IsValid( ply ) then -- The player ply may be disconnected now!
						print( ply:Nick(), is located at, ply:GetPos() )
					end
				end
				
			end
		end
	end
	
	local co
	hook.Add( Think, DisplayPlayersLocation, function()
		if ( not co or not coroutine.resume( co ) then
			co = coroutine.create( displayer )
			coroutine.resume( co )
		end
	end )
end
Output:

Custom Nickname	is located at	10.102 59.04 -100.96
SuperBoss	is located at	55.85 1209.11 -100.96
Custom Nickname	is located at	11.126 51.92 -100.96
...


"CRecipientFilter/AddPAS"
CRecipientFilter:AddPAS( Vector pos ) 
 Description
Adds all players that are in the same PAS as this position.

 Arguments

 Vector pos


PAS position that players may be able to see.


"CRecipientFilter/AddRecipientsByTeam"
CRecipientFilter:AddRecipientsByTeam( number teamid ) 
 Description
Adds all players that are on the given team to the filter.

 Arguments

 number teamid


Team index to add players from.


"coroutine/running"
coroutine.running(  ) 
 Description
Returns the active coroutine or nil if we are not within a coroutine.

 Returns

 thread


coroutine


"coroutine/yield"
coroutine.yield( vararg returnValue ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Pauses the active coroutine and passes all additional variables to the call of coroutine.resume that resumed the coroutine last time, and returns all additional variables that were passed to the previous call of resume.

 Arguments

 vararg returnValue


Arguments to be returned by the last call of coroutine.resume

 Returns

 vararg


Arguments that were set previously by coroutine.resume

 Examples
 Example
Demonstrates the use of using varargs as a return value.

local co = coroutine.create( function()
	coroutine.yield( Hello world! )
end )
print( coroutine.resume( co ) )
Output:

true, Hello world!


"CRecipientFilter/AddPlayer"
CRecipientFilter:AddPlayer( Player Player ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Adds a player to the recipient filter

 Arguments

 Player Player


Player to add to the recipient filter.

 Examples
 Example
Adds the first player object to the recipient filter, then sends him a message.

function SendMessage()
 local filter = RecipientFilter()
 filter:AddPlayer( Entity( 1 ) )
 umsg.Start( message,filter )
 umsg.End()
end
Output:

Sends a usermessage to the first player object, if it exists.


"CRecipientFilter/AddAllPlayers"
CRecipientFilter:AddAllPlayers(  ) 
 Description
Adds all players to the recipient filter.

 Examples
 Example
Adds all players to a recipient filter, then uses the recipient filter in a usermessage.

function SendMessage()
	local filter = RecipientFilter()
	filter:AddAllPlayers()
	umsg.Start( message,filter )
	umsg.End()
end
Output:

Sends a usermessage to every player.


"cookie/Set"
cookie.Set( string key, string value ) 
 Description
Sets the value of a cookie, which is saved automatically by the sql library.
These are stored in the *.db files - cl.db for clients, mn.db for menu state and sv.db for servers.

 Arguments

 string key


The name of the cookie that you want to set.

 Arguments

 string value


Value to store in the cookie.


"coroutine/resume"
coroutine.resume( thread coroutine, vararg args ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns


 Description
Resumes the given coroutine and passes the given vararg to either the function arguments or the coroutine.yield that is inside that function and returns whatever yield is called with the next time or by the final return in the function.

 Arguments

 thread coroutine


Coroutine to resume.

 Arguments

 vararg args


Arguments to be returned by coroutine.yield.

 Returns

 boolean


If the executed thread code had no errors occur within it.

 Returns

 vararg


If an error occured, this will be a string containing the error message. Otherwise, this will be arguments that were yielded.


"CRecipientFilter/GetPlayers"
CRecipientFilter:GetPlayers(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns a table of all valid players currently in the recipient filter.

 Returns

 table


A table of all valid players currently in the recipient filter.

 Examples
 Example
Example usage of the function

local rf = RecipientFilter()
rf:AddAllPlayers()
print( rf:GetCount() )
PrintTable( rf:GetPlayers() )
Output:

2
1	=	Player [1][Player #1]
2	=	Player [2][Player #2]


"CRecipientFilter/AddPVS"
CRecipientFilter:AddPVS( Vector Position ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Adds all players that are in the same PVS as this position.

 Arguments

 Vector Position


PVS position.

 Examples
 Example
Adds players that are visible from the origin of the map to a recipient filter, then sends them a message.

function SendMessage()
	local filter = RecipientFilter()
	filter:AddPVS( Vector( 0, 0, 0 ) )
	umsg.Start( message, filter )
	umsg.End()
end
Output:

Sends a usermessage to every player visible from 0,0,0


"cookie/GetNumber"
cookie.GetNumber( string name, any default=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Gets the value of a cookie on the client as a number.

 Arguments

 string name


The name of the cookie that you want to get.

 Arguments

 any default=nil


Value to return if the cookie does not exist.

 Returns

 number


The cookie value


"coroutine/wait"
coroutine.wait( number duration ) 
 Description
Yields the coroutine for the given duration before continuing.
This only works inside a coroutine.
This function uses CurTime instead of RealTime.

 Arguments

 number duration


The number of seconds to wait


"CRecipientFilter/GetCount"
CRecipientFilter:GetCount(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the number of valid players in the recipient filter.

 Returns

 number


Number of valid players in the recipient filter.

 Examples
 Example
Example usage of the function

local rf = RecipientFilter()
rf:AddAllPlayers()
print( rf:GetCount() )
PrintTable( rf:GetPlayers() )
Output:

2
1	=	Player [1][Player #1]
2	=	Player [2][Player #2]


"CRecipientFilter/RemoveAllPlayers"
CRecipientFilter:RemoveAllPlayers(  ) 
 Description
Removes all players from the recipient filter.

 Examples
 Example
Adds all players that can see the origin of the map, removes all players, then adds the first player object to the recipient filter, and sends them a message.

function SendMessage()
 local filter = RecipientFilter()
 filter:AddPVS( Vector( 0,0,0 ) )
 filter:RemoveAllPlayers()
 filter:AddPlayer( Entity( 1 ) )
 umsg.Start( message,filter )
 umsg.End()
end
Output:

Sends a usermessage to the first player object, if it exists.


"CRecipientFilter/RemoveRecipientsByTeam"
CRecipientFilter:RemoveRecipientsByTeam( number teamid ) 
 Description
Removes all players that are on the given team from the filter.

 Arguments

 number teamid


Team index to remove players from.


"CSoundPatch/ChangeVolume"
CSoundPatch:ChangeVolume( number volume, number deltaTime=0 ) 
 Description
Adjusts the volume of the sound played.
Appears to only work while the sound is being played.

 Arguments

 number volume


The volume ranges from 0 to 1.

 Arguments

 number deltaTime=0


Time to fade the volume from previous to new value from.


"CSoundPatch/ChangePitch"
CSoundPatch:ChangePitch( number pitch, number deltaTime=0 ) 
 Description
Adjust the pitch, alias the speed at which the sound is being played.
This invokes the GM:EntityEmitSound.

 Arguments

 number pitch


The pitch can range from 0-255.

 Arguments

 number deltaTime=0


The time to fade from previous to the new pitch.


"CRecipientFilter/RemovePlayer"
CRecipientFilter:RemovePlayer( Player Player ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Removes the player from the recipient filter.

 Arguments

 Player Player


The player that should be in the recipient filter if you call this function.

 Examples
 Example
Adds all players to the recipient filter, then removes the first player and sends a message to the rest.

util.AddNetworkString( message )
function SendMessage()
	local filter = RecipientFilter()
	filter:AddAllPlayers()
	filter:RemovePlayer( Entity( 1 ) )
	net.Start( message )
	net.Send( filter )
end
Output:

Sends a net message to every player except the first.


"CRecipientFilter/RemovePAS"
CRecipientFilter:RemovePAS( Vector position ) 
 Description
Removes all players from the filter that are in Potentially Audible Set for given position.

 Arguments

 Vector position


The position to test


"CSEnt/Remove"
CSEnt:Remove(  ) 
 Description
Removes the clientside entity


"CRecipientFilter/RemovePVS"
CRecipientFilter:RemovePVS( Vector pos ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Removes all players that can see this PVS from the recipient filter.

 Arguments

 Vector pos


Position that players may be able to see.

 Examples
 Example
Adds the first player object to the recipient filter, then sends him a message.

function SendMessage()
	local filter = RecipientFilter()
	filter:AddPVS( Vector( 0,0,0 ) )
	filter:RemovePVS( Vector( 0,10,0 ) )
	umsg.Start( message, filter )
	umsg.End()
end
Output:

Adds all players that can see the maps origin to the recipient filter, then removes all players who can see 10 units to the left of the origin, and sends the rest a message.


"CRecipientFilter/RemoveRecipientsNotOnTeam"
CRecipientFilter:RemoveRecipientsNotOnTeam( number teamid ) 
 Description
Removes all players that are not on the given team from the filter.

 Arguments

 number teamid


Team index.


"CSoundPatch/GetVolume"
CSoundPatch:GetVolume(  ) 
 Description
Returns the current volume.

 Returns

 number


The current volume, ranging from 0 to 1.


"CSoundPatch/FadeOut"
CSoundPatch:FadeOut( number seconds ) 
 Description
Fades out the volume of the sound from the current volume to 0 in the given amount of seconds.

 Arguments

 number seconds


Fade time.


"CSoundPatch/GetDSP"
CSoundPatch:GetDSP(  ) 
 Description
Returns the DSP ( Digital Signal Processor ) effect for the sound.

 Returns

 number


"CSoundPatch/GetPitch"
CSoundPatch:GetPitch(  ) 
 Description
Returns the current pitch.

 Returns

 number


The current pitch, can range from 0-255.


"CSoundPatch/GetSoundLevel"
CSoundPatch:GetSoundLevel(  ) 
 Description
Returns the current sound level.

 Returns

 number


The current sound level, see SNDLVL_ Enums.


"CSoundPatch/SetDSP"
CSoundPatch:SetDSP( number dsp ) 
 Description
Sets the DSP ( Digital Signal Processor ) effect for the sound. Similar to Player:SetDSP

 Arguments

 number dsp


"CSoundPatch/PlayEx"
CSoundPatch:PlayEx( number volume, number pitch ) 
 Description
Same as CSoundPatch:Play but with 2 extra arguments allowing to set volume and pitch directly.

 Arguments

 number volume


The volume ranges from 0 to 1.

 Arguments

 number pitch


The pitch can range from 0-255.


"CSoundPatch/IsPlaying"
CSoundPatch:IsPlaying(  ) 
 Description
Returns whenever the sound is being played.

 Returns

 boolean


Is playing or not


"CSoundPatch/SetSoundLevel"
CSoundPatch:SetSoundLevel( number level ) 
 Description
Sets the sound level in decibel.

 Arguments

 number level


The sound level in decibel. See SNDLVL_ Enums


"CSoundPatch/Stop"
CSoundPatch:Stop(  ) 
 Description
Stops the sound from being played.



BUG


This will not work if the entity attached to this sound patch (specified by CreateSound) is invalid.


"CTakeDamageInfo/GetDamageCustom"
CTakeDamageInfo:GetDamageCustom(  ) 
 Description
Gets the custom damage type. This is used by Day of Defeat: Source and Team Fortress 2 for extended damage info, but isnt used in Garrys Mod by default.

 Returns

 number


The custom damage type


"CTakeDamageInfo/GetAttacker"
CTakeDamageInfo:GetAttacker(  ) 
 Description
Returns the attacker ( character who originated the attack ), for example a player or an NPC that shot the weapon.

 Returns

 Entity


The attacker


"CTakeDamageInfo/GetBaseDamage"
CTakeDamageInfo:GetBaseDamage(  ) 
 Description
Returns the initial unmodified by skill level ( game.GetSkillLevel ) damage.

 Returns

 number


baseDamage


"CSoundPatch/Play"
CSoundPatch:Play(  ) 
 Description
Starts to play the sound.

 Examples
 Example
Example usage

local mysound = CreateSound( test.wav )
mysound:Play()


"CTakeDamageInfo/GetDamageBonus"
CTakeDamageInfo:GetDamageBonus(  ) 
 Description
Gets the current bonus damage.

 Returns

 number


Bonus damage


"CTakeDamageInfo/AddDamage"
CTakeDamageInfo:AddDamage( number damageIncrease ) 
 Description
Increases the damage by damageIncrease.

 Arguments

 number damageIncrease


The damage to add.


"CTakeDamageInfo/GetDamage"
CTakeDamageInfo:GetDamage(  ) 
 Description
Returns the total damage.

 Returns

 number


damage


"CTakeDamageInfo/GetDamageForce"
CTakeDamageInfo:GetDamageForce(  ) 
 Description
Returns a vector representing the damage force.

 Returns

 Vector


The damage force


"CTakeDamageInfo/GetInflictor"
CTakeDamageInfo:GetInflictor(  ) 
 Description
Returns the inflictor of the damage. This is not necessarily a weapon.
For hitscan weapons this is the weapon.
For projectile weapons this is the projectile.

For a more reliable method of getting the weapon that damaged an entity, use GetAttacker with GetActiveWeapon.

 Returns

 Entity


The inflictor


"CTakeDamageInfo/GetAmmoType"
CTakeDamageInfo:GetAmmoType(  ) 
 Description
Returns the ammo type used by the weapon that inflicted the damage.

 Returns

 number


Ammo type ID


"CTakeDamageInfo/GetDamagePosition"
CTakeDamageInfo:GetDamagePosition(  ) 
 Description
Returns the position where the damage was or is going to be applied to.

 Returns

 Vector


The damage position


"CTakeDamageInfo/GetReportedPosition"
CTakeDamageInfo:GetReportedPosition(  ) 
 Description
Returns the initial, unmodified position where the damage occured.

 Returns

 Vector


position


"CTakeDamageInfo/GetMaxDamage"
CTakeDamageInfo:GetMaxDamage(  ) 
 Description
Returns the maximum damage.

 Returns

 number


maxDmg


"CTakeDamageInfo/IsFallDamage"
CTakeDamageInfo:IsFallDamage(  ) 
 Description
Returns whenever the damageinfo contains fall damage.

 Returns

 boolean


isFallDmg


"CTakeDamageInfo/IsExplosionDamage"
CTakeDamageInfo:IsExplosionDamage(  ) 
 Description
Returns whenever the damageinfo contains explosion damage.

 Returns

 boolean


isExplDamage


"CTakeDamageInfo/GetDamageType"
CTakeDamageInfo:GetDamageType(  ) 
 Description
Returns a bitflag which indicates the damage type(s) of the damage.
Consider using CTakeDamageInfo:IsDamageType instead. Value returned by this function can contain multiple damage types.

 Returns

 number


Damage type(s), a combination of DMG_ Enums


"CTakeDamageInfo/IsDamageType"
CTakeDamageInfo:IsDamageType( number dmgType ) 
 Description
Returns whenever the damageinfo contains the damage type specified.

 Arguments

 number dmgType


Damage type to test. See DMG_ Enums.

 Returns

 boolean


Whether this damage contains specified damage type or not


"CTakeDamageInfo/SetAmmoType"
CTakeDamageInfo:SetAmmoType( number ammoType ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Changes the ammo type used by the weapon that inflicted the damage.

 Arguments

 number ammoType


Ammo type ID

 Examples
 Example
Creates a new DamageInfo object and sets the ammo that caused the damage to AR2 ammo

local dmginfo = DamageInfo()

dmginfo:SetAmmoType( game.GetAmmoID( AR2 ) )


"CTakeDamageInfo/SetAttacker"
CTakeDamageInfo:SetAttacker( Entity ent ) 
 Description
Sets the attacker ( character who originated the attack ) of the damage, for example a player or an NPC.

 Arguments

 Entity ent


The entity to be set as the attacker.


"CTakeDamageInfo/IsBulletDamage"
CTakeDamageInfo:IsBulletDamage(  ) 
 Description
Returns true if the damage was caused by a bullet.

 Returns

 boolean


isBulletDmg


"CTakeDamageInfo/ScaleDamage"
CTakeDamageInfo:ScaleDamage( number scale ) 
 Description
Scales the damage by the given value.

 Arguments

 number scale


Value to scale the damage with.


"CTakeDamageInfo/SetDamageCustom"
CTakeDamageInfo:SetDamageCustom( number DamageType ) 
 Description
Sets the custom damage type. This is used by Day of Defeat: Source and Team Fortress 2 for extended damage info, but isnt used in Garrys Mod by default.

 Arguments

 number DamageType


Any integer - can be based on your own custom enums.


"CTakeDamageInfo/SetDamage"
CTakeDamageInfo:SetDamage( number damage ) 
 Description
Sets the amount of damage.

 Arguments

 number damage


The value to set the absolute damage to.


"CTakeDamageInfo/SetDamageBonus"
CTakeDamageInfo:SetDamageBonus( number damage ) 
 Description
Sets the bonus damage. Bonus damage isnt automatically applied, so this will have no outer effect by default.

 Arguments

 number damage


The extra damage to be added.


"CTakeDamageInfo/SetDamagePosition"
CTakeDamageInfo:SetDamagePosition( Vector pos ) 
 Description
Sets the position of where the damage gets applied to.

 Arguments

 Vector pos


The position where the damage will be applied.


"CTakeDamageInfo/SetDamageType"
CTakeDamageInfo:SetDamageType( number type ) 
 Description
Sets the damage type.

 Arguments

 number type


The damage type, see DMG_ Enums.


"CTakeDamageInfo/SetDamageForce"
CTakeDamageInfo:SetDamageForce( Vector force ) 
 Description
Sets the directional force of the damage.

 Arguments

 Vector force


The vector to set the force to.


"CTakeDamageInfo/SetMaxDamage"
CTakeDamageInfo:SetMaxDamage( number maxDamage ) 
 Description
Sets the maximum damage the object can cause.

 Arguments

 number maxDamage


Maximum damage value.


"CTakeDamageInfo/SetReportedPosition"
CTakeDamageInfo:SetReportedPosition( Vector pos ) 
 Description
Sets the origin of the damage.

 Arguments

 Vector pos


The location of where the damage is originating


"CUserCmd/ClearMovement"
CUserCmd:ClearMovement(  ) 
 Description
Clears the movement from the command.
See also CUserCmd:SetForwardMove, CUserCmd:SetSideMove and CUserCmd:SetUpMove.


"CUserCmd/GetButtons"
CUserCmd:GetButtons(  ) 
 Description
Returns a bitflag indicating which buttons are pressed.

 Returns

 number


Pressed buttons, see IN_ Enums


"CTakeDamageInfo/SubtractDamage"
CTakeDamageInfo:SubtractDamage( number damage ) 
 Description
Subtracts the specified amount from the damage.

 Arguments

 number damage


Value to subtract.


"CTakeDamageInfo/SetInflictor"
CTakeDamageInfo:SetInflictor( Entity inflictor ) 
 Description
Sets the inflictor of the damage for example a weapon.
For hitscan/bullet weapons this should the weapon.
For projectile ( rockets, etc ) weapons this should be the projectile.

 Arguments

 Entity inflictor


The new inflictor.


"CUserCmd/GetImpulse"
CUserCmd:GetImpulse(  ) 
 Description
Gets the current impulse from the client, usually 0.

 Returns

 number


The impulse


"CUserCmd/GetForwardMove"
CUserCmd:GetForwardMove(  ) 
 Description
The speed the client wishes to move forward with, negative if the clients wants to move backwards.

 Returns

 number


The desired speed


"CUserCmd/CommandNumber"
CUserCmd:CommandNumber(  ) 
 Description
Returns an increasing number representing the index of the user cmd. The value returned is occasionally 0 inside GM:CreateMove, so its advised to check for a non-zero value if you wish to get the correct number.

 Returns

 number


The command number


"CUserCmd/GetMouseX"
CUserCmd:GetMouseX(  ) 
 Description
Returns the delta of the angular horizontal mouse movement of the player.

 Returns

 number


xDelta


"CUserCmd/GetSideMove"
CUserCmd:GetSideMove(  ) 
 Description
The speed the client wishes to move sideways with, positive if it wants to move right, negative if it wants to move left.

 Returns

 number


requestSpeed


"CUserCmd/ClearButtons"
CUserCmd:ClearButtons(  ) 
 Description
Removes all keys from the command.



NOTE


If you are looking to affect player movement, you may need to use CUserCmd:ClearMovement instead of clearing the buttons.


"CUserCmd/GetMouseY"
CUserCmd:GetMouseY(  ) 
 Description
Returns the delta of the angular vertical mouse movement of the player.

 Returns

 number


yDelta


"CUserCmd/GetViewAngles"
CUserCmd:GetViewAngles(  ) 
 Description
Gets the direction the player is looking in.

 Returns

 Angle


requestDir


"CUserCmd/GetMouseWheel"
CUserCmd:GetMouseWheel(  ) 
 Description
Returns the scroll delta as whole number.

 Returns

 number


Scroll delta


"CUserCmd/IsForced"
CUserCmd:IsForced(  ) 
 Description
When players are not sending usercommands to the server (often due to lag), their last usercommand will be executed multiple times as a backup. This function returns true if that is happening.
This will never return true clientside.

 Returns

 boolean


isForced


"CUserCmd/GetUpMove"
CUserCmd:GetUpMove(  ) 
 Description
The speed the client wishes to move up with, negative if the clients wants to move down.

 Returns

 number


requestSpeed


"CUserCmd/KeyDown"
CUserCmd:KeyDown( number key ) 
 Description
Returns true if the specified button(s) is pressed.

 Arguments

 number key


Bitflag representing which button to check, see IN_ Enums.

 Returns

 boolean


Is key down or not


"CUserCmd/SetImpulse"
CUserCmd:SetImpulse( number speed ) 
 Description
Sets the impulse command to be sent to the server.
For example, 101 is an impulse that will give the player all Half-Life 2 weapons with sv_cheats set to 1. Impulse 100 will toggle their flashlight.

 Arguments

 number speed


The impulse to send.


"CUserCmd/RemoveKey"
CUserCmd:RemoveKey( number button ) 
 Description
Removed a key bit from the current key bitflag.

 Arguments

 number button


Bitflag to be removed from the key bitflag, see IN_ Enums.


"CUserCmd/SetButtons"
CUserCmd:SetButtons( number buttons ) 
 Description
Sets the buttons as a bitflag. See also CUserCmd:GetButtons.



NOTE


If you are looking to affect player movement, you may need to use CUserCmd:SetForwardMove instead of setting the keys.


 Arguments

 number buttons


Bitflag representing which buttons are down, see IN_ Enums.


"CUserCmd/SetMouseX"
CUserCmd:SetMouseX( number speed ) 
 Description
Sets the delta of the angular horizontal mouse movement of the player.
See also CUserCmd:SetMouseY.

 Arguments

 number speed


Angular horizontal move delta.


"CUserCmd/SetMouseY"
CUserCmd:SetMouseY( number speed ) 
 Description
Sets the delta of the angular vertical mouse movement of the player.
See also CUserCmd:SetMouseX.

 Arguments

 number speed


Angular vertical move delta.


"CUserCmd/SetSideMove"
CUserCmd:SetSideMove( number speed ) 
 Description
Sets speed the client wishes to move sidewards with, positive to move right, negative to move left.
See also CUserCmd:SetForwardMove and CUserCmd:SetUpMove.

 Arguments

 number speed


The new speed to request.


"CUserCmd/SetMouseWheel"
CUserCmd:SetMouseWheel( number speed ) 
 Description
Sets the scroll delta.

 Arguments

 number speed


The scroll delta.


"cvars/AddChangeCallback"
cvars.AddChangeCallback( string name, function callback, string identifier=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Adds a callback to be called when the named convar changes.



BUG


This does not callback convars in the menu state.





BUG


This does not callback convars on the client with FCVAR_GAMEDLL and convars on the server without FCVAR_GAMEDLL.



 Arguments

 string name


The name of the convar to add the change callback to.

 Arguments

 function callback


The function to be called when the convar changes. The arguments passed are:

 string convar - The name of the convar.
 string oldValue - The old value of the convar.
 string newValue - The new value of the convar.


 Arguments

 string identifier=nil


If set, you will be able to remove the callback using cvars.RemoveChangeCallback.

 Examples
 Example
Called when convar changes.

cvars.AddChangeCallback( convar name, function( convar_name, value_old, value_new )
    print( convar_name, value_old, value_new )
end )
Output:

convar name 2 5


"CUserCmd/TickCount"
CUserCmd:TickCount(  ) 
 Description
Returns tick count since joining the server.



NOTE


This will always return 0 for bots.




NOTE


Returns 0 clientside during prediction calls. If you are trying to use CUserCmd:Set*() on the client in a movement or command hook, keep doing so till TickCount returns a non-zero number to maintain prediction.


 Returns

 number


The amount of ticks passed since joining the server.


"CUserCmd/SetForwardMove"
CUserCmd:SetForwardMove( number speed ) 
 Description
Sets speed the client wishes to move forward with, negative if the clients wants to move backwards.
See also CUserCmd:ClearMovement, CUserCmd:SetSideMove and CUserCmd:SetUpMove.

 Arguments

 number speed


The new speed to request. The client will not be able to move faster than their set walk/sprint speed.


"cvars/Number"
cvars.Number( string cvar, any default=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Retrieves console variable as a number.

 Arguments

 string cvar


Name of console variable

 Arguments

 any default=nil


The value to return if the console variable does not exist

 Returns

 number


Retrieved value


"cvars/GetConVarCallbacks"
cvars.GetConVarCallbacks( string name, boolean createIfNotFound=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns a table of the given ConVars callbacks.

 Arguments

 string name


The name of the ConVar.

 Arguments

 boolean createIfNotFound=false


Whether or not to create the internal callback table for given ConVar if there isnt one yet.

This argument is internal and should not be used.

 Returns

 table


A table of the convars callbacks, or nil if the convar doesnt exist.


"debug/debug"
debug.debug(  ) 
 Description
Enters an interactive mode with the user, running each string that the user enters. Using simple commands and other debug facilities, the user can inspect global and local variables, change their values, evaluate expressions, and so on. A line containing only the word cont finishes this function, so that the caller continues its execution.

 Commands for debug.debug are not lexically nested within any function, and so have no direct access to local variables.
 This only works on the source dedicated server.
 To exit this interactive mode, you can press Ctrl + Z then Enter OR type the word cont on a single line and press enter.


"CUserCmd/SetUpMove"
CUserCmd:SetUpMove( number speed ) 
 Description
Sets speed the client wishes to move upwards with, negative to move down.
See also CUserCmd:SetSideMove and CUserCmd:SetForwardMove.

 Arguments

 number speed


The new speed to request.


"cvars/Bool"
cvars.Bool( string cvar, boolean default=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Retrieves console variable as a boolean.

 Arguments

 string cvar


Name of console variable

 Arguments

 boolean default=false


The value to return if the console variable does not exist

 Returns

 boolean


Retrieved value


"cvars/String"
cvars.String( string cvar, any default=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Retrieves console variable as a string.

 Arguments

 string cvar


Name of console variable

 Arguments

 any default=nil


The value to return if the console variable does not exist

 Returns

 string


Retrieved value


"CUserCmd/SelectWeapon"
CUserCmd:SelectWeapon( Weapon weapon ) 
 Description
Forces the associated player to select a weapon. This is used internally in the default HL2 weapon selection HUD.
This may not work immediately if the current command is in prediction. Use input.SelectWeapon to switch the weapon from the client when the next available command can do so.



NOTE


This is the ideal function to use to create a custom weapon selection HUD, as it allows prediction to run properly for WEAPON:Deploy and GM:PlayerSwitchWeapon


 Arguments

 Weapon weapon


The weapon entity to select.


"cvars/OnConVarChanged"
cvars.OnConVarChanged( string name, string oldVal, string newVal ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.

You are probably looking for cvars.AddChangeCallback.
Called by the engine when a convar value changes.

 Arguments

 string name


Convar name

 Arguments

 string oldVal


The old value of the convar

 Arguments

 string newVal


The new value of the convar


"debug/getinfo"
debug.getinfo( function funcOrStackLevel, string fields=flnSu ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns debug information about a function.

 Arguments

 function funcOrStackLevel


Takes either a function or a number representing the stack level as an argument. Stack level 0 always corresponds to the debug.getinfo call, 1 would be the function calling debug.getinfo, and so on.

Returns useful information about that function in a table.

 Arguments

 string fields=flnSu


A string whose characters specify the information to be retrieved.

 f - Populates the func field.
 l - Populates the currentline field.
 L - Populates the activelines field.
 n - Populates the name and namewhat fields - only works if stack level is passed rather than function pointer.
 S - Populates the location fields (lastlinedefined, linedefined, short_src, source and what).
 u - Populates the argument and upvalue fields (isvararg, nparams, nups)


 Returns

 table


A table as a DebugInfo structure containing information about the function you passed. Can return nil if the stack level didnt point to a valid stack frame.

 Examples
 Example
Lets find out information about net.Receive, such as which file its defined in, the line it starts and the line it ends, and if its defined in Lua, or C plus additional information.

PrintTable( debug.getinfo( net.Receive ) )
Output:

[linedefined] 		= 7
[currentline] 		= -1
[func] 			= function: 0x1a8fae90
[isvararg] 		= false
[namewhat] 		=
[lastlinedefined] 	= 11
[source] 		= @lua/includes/modules/net.lua
[nups] 			= 0
[what] 			= Lua
[nparams] 		= 2
[short_src] 		= lua/includes/modules/net.lua


"debug/getlocal"
debug.getlocal( thread thread=Current thread, number level, number index ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Returns
7 Examples

7.1 Example


8 Examples

8.1 Example




 Description
Gets the name and value of a local variable indexed from the level

 Arguments

 thread thread=Current thread


The thread

 Arguments

 number level


The level above the thread.
0 = the function that was called (most always this function)s arguments
1 = the thread that had called this function.
2 = the thread that had called the function that started the thread that called this function.

A function defined in Lua can also be passed as the level. The index will specify the parameters name to be returned (a parameter will have a value of nil).

 Arguments

 number index


The variables index you want to get.
1 = the first local defined in the thread
2 = the second local defined in the thread

etc...

 Returns

 string


The name of the variable
Sometimes this will be (*temporary) if the local variable had no name.



NOTE


Variables with names starting with ( are internal variables.



 Returns

 any


The value of the local variable.

 Examples
 Example
Gets all the local variables of the current thread and stores them in a table.

local name, value;
local NIL = {} -- to represent nil variables
local locals = {}

local i = 1
while( true ) do
    name, value = debug.getlocal( 1, i )
    if ( name == nil ) then break end
    locals[ name ] = value == nil and NIL or value
	i = i + 1
end

for k,v in pairs( locals ) do 
	print( k, v )
end
Output:

locals	table: 0x274a8dc0
value	table: 0x274a8d98
NIL	table: 0x274a8d98
name	table: 0x274a8d98
i	5

 Examples
 Example
Prints the parameter names for hook.Add

local print = print
local getlocal = debug.getlocal

local function PrintFunctionParameters( func )
	local k = 2
	local param = getlocal( func, 1 )
	while param ~= nil do
		print( param )
		param = getlocal( func, k )
		k = k + 1
	end
end

PrintFunctionParameters( hook.Add )
Output:

event_name
name
func


"debug/gethook"
debug.gethook( thread thread=nil ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns
5 Returns


 Description
Returns the current hook settings of the passed thread. The thread argument can be omitted. This is unrelated to gamemode hooks. More information on hooks can be found at http://www.lua.org/pil/23.2.html

 Arguments

 thread thread=nil


Which thread to retrieve its hook from

 Returns

 function


Hook function

 Returns

 string


Hook mask

 Returns

 number


Hook count


"CUserCmd/SetViewAngles"
CUserCmd:SetViewAngles( Angle viewAngle ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the direction the client wants to move in.



NOTE


The pitch (vertical) angle should be clamped to +/- 89 to prevent the players view from glitching.


 Arguments

 Angle viewAngle


New view angles.

 Examples
 Example
Locks the players view to only vertical movement.

hook.Add( InputMouseApply, LockToPitchOnly, function( ccmd, x, y, angle )
	-- By leaving angle.roll and angle.yaw alone, we effectively lock them
	angle.pitch = math.Clamp( angle.pitch + y / 50, -89, 89 )
	ccmd:SetViewAngles( angle )
	return true
end )


"debug/getmetatable"
debug.getmetatable( any object ) 
 Description
Returns the metatable of an object. This function ignores the metatables __metatable field.

 Arguments

 any object


The object to retrieve the metatable from.

 Returns

 table


The metatable of the given object.


"cvars/RemoveChangeCallback"
cvars.RemoveChangeCallback( string name, string indentifier ) 
 Description
Removes a callback for a convar using the the callbacks identifier. The identifier should be the third argument specified for cvars.AddChangeCallback.

 Arguments

 string name


The name of the convar to remove the callback from.

 Arguments

 string indentifier


The callbacks identifier.


"debug/getfenv"
debug.getfenv( table object ) 
 Description
Returns the environment of the passed object. This can be set with debug.setfenv

 Arguments

 table object


Object to get environment of

 Returns

 table


Environment


"debug/getupvalue"
debug.getupvalue( function func, number index ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns
6 Examples

6.1 Example




 Description
Used for getting variable values in an index from the passed function. This does nothing for C functions.

 Arguments

 function func


Function to get the upvalue indexed from.

 Arguments

 number index


The index in the upvalue array. The max number of entries can be found in debug.getinfos nups key.

 Returns

 string


Name of the upvalue. Will be nil if the index was out of range (&lt; 1 or &gt; debug.getinfo.nups), or the function was defined in C.

 Returns

 any


Value of the upvalue.

 Examples
 Example
Prints the upvalues of some local functions.

local foo = 5
local bar = hello
local test = { table, true, variable }


local function DoSomethingWithFoo()
	-- This code wont be run but the function
	-- has to reference the variable for
	-- it to be counted as an upvalue
	foo = foo + 1
end

local function DoSomethingWithFooAndBar()
	foo = foo / 2
	bar = bar ..  world
end

local function DoSomethingWithBarAndTest()
	test[1] = bar .. reader!
end


-- level = stack level to get local variables of
-- returns a table with [[:Category:string|string]] keys representing the variable name
local function GetUpvalues( func )
	local info = debug.getinfo( func, uS )
	local variables = {}


	-- Upvalues cant be retrieved from C functions
	if ( info!= nil &amp;&amp; info.what == Lua ) then
		local upvalues = info.nups

		for i = 1, upvalues do
			local key, value = debug.getupvalue( func, i )
			variables[ key ] = value
		end
	end

	return variables
end

print( DoSomethingWithFoo: )
PrintTable( GetUpvalues( DoSomethingWithFoo ) )

print( \nDoSomethingWithFooAndBar: )
PrintTable( GetUpvalues( DoSomethingWithFooAndBar ) )

print( \nDoSomethingWithBarAndTest: )
PrintTable( GetUpvalues( DoSomethingWithBarAndTest ) )
Output:

DoSomethingWithFoo:
foo	=	5

DoSomethingWithFooAndBar:
bar	=	hello
foo	=	5

DoSomethingWithBarAndTest:
bar	=	hello
test:
		1	=	table
		2	=	true
		3	=	variable


"debug/sethook"
debug.sethook( thread thread, function hook, string mask, number count ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Sets the given function as a Lua hook. This is completely different to gamemode hooks. The thread argument can be completely omitted and calling this function with no arguments will remove the current hook. This is used by default for infinite loop detection. More information on hooks can be found at http://www.lua.org/pil/23.2.html
Hooks are not always ran when code that has been compiled by LuaJITs JIT compiler is being executed. This means that relying on them for infinite loop protection is unwise.

 Arguments

 thread thread


Thread to set the hook on. This argument can be omited

 Arguments

 function hook


Function for the hook to call

 Arguments

 string mask


The hooks mask

 Arguments

 number count


How often to call the hook (in instructions). 0 for every instruction


"debug/getregistry"
debug.getregistry(  ) 
 Description
Returns the internal Lua registry table.
The Lua registry is used by the engine and binary modules to create references to Lua values. Avoid creating entries into the registry with a number as the key, as they are reserved for the reference system.



WARNING


Improper editing of the registry can result in unintended side effects, including crashing of the game.


 Returns

 table


The Lua registry


"debug/setfenv"
debug.setfenv( table object, table env ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Sets the environment of the passed object.

 Arguments

 table object


Object to set environment of

 Arguments

 table env


Environment to set

 Returns

 table


The object


"debug/setlocal"
debug.setlocal( thread thread=Current Thread, number level, number index, any value=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example




 Description
This page has been nominated for deletion.Reason for deletion: This function was removed due to security concerns.
Sets a local variables value.

 Arguments

 thread thread=Current Thread


The thread

 Arguments

 number level


The level above the thread.
0 is the function that was called (most always this function)s arguments
1 is the thread that had called this function.

2 is the thread that had called the function that started the thread that called this function.

 Arguments

 number index


The variables index you want to get.
1 = the first local defined in the thread

2 = the second local defined in the thread

 Arguments

 any value=nil


The value to set the local to

 Returns

 string


The name of the local variable if the local at the index exists, otherwise nil is returned.

 Examples
 Example
Prints the local variables, sets them, then prints the variables again.

local var1 = Luke, I am not your father.
local var2 = PMFPMF

( function()
	print( Getting the locals now! )
	PrintTable( {debug.getlocal( 2, 1 )} )
	PrintTable( {debug.getlocal( 2, 2 )} )

	print( \nSetting the locals now! )
	print( debug.setlocal( 2, 1, Im actually your mother. ) )
	print( debug.setlocal( 2, 2, Chemo-chi ) )
	print( debug.setlocal( 2, 3, nil should be returned here! ) )

	print( \nHere are the locals after being set! )
	PrintTable( {debug.getlocal( 2, 1 )} )
	PrintTable( {debug.getlocal( 2, 2 )} )
end )()
Output:

Getting the locals now!
1	=	var1
2	=	Luke, I am not your father.
1	=	var2
2	=	PMFPMF

Setting the locals now!
var1
var2
nil

Here are the locals after being set!
1	=	var1
2	=	Im actually your mother.
1	=	var2
2	=	Chemo-chi


"debug/setupvalue"
debug.setupvalue( function func, number index, any val=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
This page has been nominated for deletion.Reason for deletion: This function was removed due to security concerns.
Sets the variable indexed from func

 Arguments

 function func


The function to index the upvalue from

 Arguments

 number index


The index from func

 Arguments

 any val=nil


The value to set the upvalue to.

 Returns

 string


Returns nil if there is no upvalue with the given index, otherwise it returns the upvalues name.

 Examples
 Example
An example demonstrating a function overwrite.

local function my_isfunction( f )
	return type( f ) == function or f == coolguy	
end

print( debug.setupvalue( hook.Add, 1, my_isfunction ) )


"debug/setmetatable"
debug.setmetatable( any object, table metatable ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Sets the objects metatable. Unlike setmetatable, this function works regardless of whether the first object passed is a valid table or not; this function even works on primitive datatypes such as numbers, functions, and even nil.

 Arguments

 any object


Object to set the metatable for.

 Arguments

 table metatable


The metatable to set for the object.

If this argument is nil, then the objects metatable is removed.

 Returns

 boolean


true if the objects metatable was set successfully.


"debug/upvaluejoin"
debug.upvaluejoin( function f1, number n1, function f2, number n2 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
This page has been nominated for deletion.Reason for deletion: This function was removed due to security concerns.
Make the n1-th upvalue of the Lua closure f1 refer to the n2-th upvalue of the Lua closure f2.

 Arguments

 function f1


 Arguments

 number n1


 Arguments

 function f2


 Arguments

 number n2


"debug/upvalueid"
debug.upvalueid( function func, number index ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
This page has been nominated for deletion.Reason for deletion: This function was removed due to security concerns.
Returns an unique identifier for the upvalue indexed from func

 Arguments

 function func


The function to index the upvalue from

 Arguments

 number index


The index from func

 Returns

 number


A unique identifier

 Examples
 Example
Small example showing the type of the returned data.

print( type( debug.upvalueid( hook.Add, 1 ) ) )
Output:

userdata


"debugoverlay/Axis"
debugoverlay.Axis( Vector origin, Angle ang, number size, number lifetime=1, boolean ignoreZ=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Displays an axis indicator at the specified position.



NOTE


This function will silently fail if the developer ConVar is set to 0


 Arguments

 Vector origin


Position origin

 Arguments

 Angle ang


Angle of the axis

 Arguments

 number size


Size of the axis

 Arguments

 number lifetime=1


Number of seconds to appear

 Arguments

 boolean ignoreZ=false


If true, will draw on top of everything; ignoring the Z buffer


"debugoverlay/Cross"
debugoverlay.Cross( Vector position, number size, number lifetime=1, table color=Color( 255, 255, 255 ), boolean ignoreZ=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Creates a coloured cross at the specified position for the specified time.



NOTE


This function will silently fail if the developer ConVar is set to 0.


 Arguments

 Vector position


Position origin

 Arguments

 number size


Size of the cross

 Arguments

 number lifetime=1


Number of seconds the cross to appear

 Arguments

 table color=Color( 255, 255, 255 )


The color of the cross. Uses the Color structure

 Arguments

 boolean ignoreZ=false


If true, will draw on top of everything; ignoring the Z buffer


"debugoverlay/EntityTextAtPosition"
debugoverlay.EntityTextAtPosition( Vector pos, number line, string text, number lifetime=1, table color=Color( 255, 255, 255 ) ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Displays 2D text at the specified coordinates.



NOTE


This function will silently fail if the developer ConVar is set to 0.


 Arguments

 Vector pos


The position in 3D to display the text.

 Arguments

 number line


Line of text, will offset text on the to display the new line unobstructed

 Arguments

 string text


The text to display

 Arguments

 number lifetime=1


Number of seconds to appear

 Arguments

 table color=Color( 255, 255, 255 )


The color of the box. Uses the Color structure


"debugoverlay/Line"
debugoverlay.Line( Vector pos1, Vector pos2, number lifetime=1, table color=Color( 255, 255, 255 ), boolean ignoreZ=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Displays a coloured line at the specified position.



NOTE


This function will silently fail if the developer ConVar is set to 0.


 Arguments

 Vector pos1


First position of the line

 Arguments

 Vector pos2


Second position of the line

 Arguments

 number lifetime=1


Number of seconds to appear

 Arguments

 table color=Color( 255, 255, 255 )


The color of the line. Uses the Color structure

 Arguments

 boolean ignoreZ=false


If true, will draw on top of everything; ignoring the Z buffer


"debugoverlay/Grid"
debugoverlay.Grid( Vector position ) 
 Description
Draws a 3D grid of limited size in given position.



NOTE


This function will silently fail if the developer ConVar is set to 0.


 Arguments

 Vector position


"debug/Trace"
debug.Trace(  ) 
 Description
Prints out the lua function call stack to the console.

 Examples
 Example
Prints the current call stack.

debug.Trace()
Output:

Trace: 
 1: Line 32 Trace lua/includes/extensions/debug.lua
 2: Line 1 ( null ) LuaCmd


"debug/traceback"
debug.traceback( thread thread=current thread, string message=nil, number level=1 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Returns a full execution stack trace.

 Arguments

 thread thread=current thread


Thread (ie. error object from xpcall error handler) to build traceback for.

 Arguments

 string message=nil


Appended at the beginning of the traceback.

 Arguments

 number level=1


Which level to start the traceback.

 Returns

 string


A dump of the execution stack.

 Examples
 Example
Prints the traceback into console.

print( debug.traceback() )
Output:

&gt; print(debug.traceback())...
stack traceback:

lua_run:1: in main chunk
 Examples
 Example
Defines two functions that are later visible in the traceback. Enter lua_run TracebackTest() into the development console to achieve exact results.

function TracebackTest()
     AnotherTracebackFunction()
end

function AnotherTracebackFunction()
     print( debug.traceback() )
end
Output:

stack traceback:
       lua_run:1: in function AnotherTracebackFunction
       lua_run:1: in function TracebackTest

lua_run:1: in main chunk


"debugoverlay/Triangle"
debugoverlay.Triangle( Vector pos1, Vector pos2, Vector pos3, number lifetime=1, table color=Color( 255, 255, 255 ), boolean ignoreZ=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments


 Description
Displays a colored triangle at the specified coordinates.



NOTE


This function will silently fail if the developer ConVar is set to 0.


 Arguments

 Vector pos1


First point of the triangle

 Arguments

 Vector pos2


Second point of the triangle

 Arguments

 Vector pos3


Third point of the triangle

 Arguments

 number lifetime=1


Number of seconds to appear

 Arguments

 table color=Color( 255, 255, 255 )


The color of the box. Uses the Color structure

 Arguments

 boolean ignoreZ=false


If true, will draw on top of everything; ignoring the Z buffer


"debugoverlay/Box"
debugoverlay.Box( Vector origin, Vector mins, Vector maxs, number lifetime=1, table color=Color( 255, 255, 255 ) ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Displays a solid coloured box at the specified position.



NOTE


This function will silently fail if the developer ConVar is set to 0.


 Arguments

 Vector origin


Position origin

 Arguments

 Vector mins


Minimum bounds of the box

 Arguments

 Vector maxs


Maximum bounds of the box

 Arguments

 number lifetime=1


Number of seconds to appear

 Arguments

 table color=Color( 255, 255, 255 )


The color of the box. Uses the Color structure


"derma/DefineSkin"
derma.DefineSkin( string name, string descriptions, table skin ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Defines a new skin so that it is usable by Derma. The default skin can be found in garrysmod/lua/skins/default.lua

 Arguments

 string name


Name of the skin

 Arguments

 string descriptions


Description of the skin

 Arguments

 table skin


Table containing skin data


"derma/Color"
derma.Color( string name, Panel pnl, table default ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Gets the color from a Derma skin of a panel and returns default color if not found

 Arguments

 string name


 Arguments

 Panel pnl


 Arguments

 table default


The default color in case of failure.


"derma/SkinTexture"
derma.SkinTexture( string name, Panel pnl, any fallback=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Returns a function to draw a specified texture of panels skin.

 Arguments

 string name


The identifier of the texture

 Arguments

 Panel pnl


Panel to get the skin of.

 Arguments

 any fallback=nil


What to return if we failed to retrieve the texture

 Returns

 function


A function that is created with the GWEN library to draw a texture.


"debugoverlay/BoxAngles"
debugoverlay.BoxAngles( Vector pos, Vector mins, Vector maxs, Angle ang, number lifetime=1, table color=Color( 255, 255, 255 ) ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments


 Description
Displays a solid colored rotated box at the specified position.



NOTE


This function will silently fail if the developer ConVar is set to 0.


 Arguments

 Vector pos


World position

 Arguments

 Vector mins


The mins of the box (lowest corner)

 Arguments

 Vector maxs


The maxs of the box (highest corner)

 Arguments

 Angle ang


The angle to draw the box at

 Arguments

 number lifetime=1


Amount of seconds to show the box

 Arguments

 table color=Color( 255, 255, 255 )


The color of the box. Uses the Color structure


"debugoverlay/Text"
debugoverlay.Text( Vector origin, string text, number lifetime=1, boolean viewCheck=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Displays text at the specified position.



NOTE


This function will silently fail if the developer ConVar is set to 0.


 Arguments

 Vector origin


Position origin

 Arguments

 string text


String message to display

 Arguments

 number lifetime=1


Number of seconds to appear

 Arguments

 boolean viewCheck=false


Clip text that is obscured


"debugoverlay/Sphere"
debugoverlay.Sphere( Vector origin, number size, number lifetime=1, table color=Color( 255, 255, 255 ), boolean ignoreZ=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Displays a coloured sphere at the specified position.



NOTE


This function will silently fail if the developer ConVar is set to 0.


 Arguments

 Vector origin


Position origin

 Arguments

 number size


Size of the sphere

 Arguments

 number lifetime=1


Number of seconds to appear

 Arguments

 table color=Color( 255, 255, 255 )


The color of the sphere. Uses the Color structure

 Arguments

 boolean ignoreZ=false


If true, will draw on top of everything; ignoring the Z buffer


"derma/GetDefaultSkin"
derma.GetDefaultSkin(  ) 
 Description
Returns the default skin table, which can be changed with the hook GM/ForceDermaSkin

 Returns

 table


Skin table


"debugoverlay/ScreenText"
debugoverlay.ScreenText( number x, number y, string text, number lifetime=1, table color=Color( 255, 255, 255 ) ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Displays text triangle at the specified coordinates.



NOTE


This function will silently fail if the developer ConVar is set to 0.


 Arguments

 number x


The position of the text, from 0 ( left ) to 1 ( right ).

 Arguments

 number y


The position of the text, from 0 ( top ) to 1 ( bottom ).

 Arguments

 string text


The text to display

 Arguments

 number lifetime=1


Number of seconds to appear

 Arguments

 table color=Color( 255, 255, 255 )


The color of the box. Uses the Color structure


"derma/GetSkinTable"
derma.GetSkinTable(  ) 
 Description
Returns a copy of the table containing every Derma skin

 Returns

 table


Table of every Derma skin


"derma/RefreshSkins"
derma.RefreshSkins(  ) 
 Description
Clears all cached panels so that they reassess which skin they should be using.


"derma/GetControlList"
derma.GetControlList(  ) 
 Description
Returns the derma.Controls table, a list of all derma controls registered with derma.DefineControl.

 Returns

 table


A listing of all available derma-based controls. See derma.Controls for structure and contents.


"derma/GetNamedSkin"
derma.GetNamedSkin( string name ) 
 Description
Returns the skin table of the skin with the supplied name

 Arguments

 string name


Name of skin

 Returns

 table


Skin table


"derma/DefineControl"
derma.DefineControl( string name, string description, table tab, string base ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example




 Description
Defines a new Derma control with an optional base.
This calls vgui.Register internally, but also does the following:

 Adds the control to derma.GetControlList
 Adds a key Derma - This is returned by derma.GetControlList
 Makes a global table with the name of the control (This is technically deprecated and should not be relied upon)
 If reloading (i.e. called this function with name of an existing panel), updates all existing instances of panels with this name. (Updates functions, calls PANEL:PreAutoRefresh and PANEL:PostAutoRefresh, etc.)

 Arguments

 string name


Name of the newly created control

 Arguments

 string description


Description of the control

 Arguments

 table tab


Table containing control methods and properties

 Arguments

 string base


Derma control to base the new control off of

 Returns

 table


A table containing the new controls methods and properties

 Examples
 Example
Defines a new control based off of DTextEntry that prints to the console whenever it is changed

local PANEL = {}


function PANEL:OnChange()
    print( self:GetValue() )
end

derma.DefineControl( MyTextEntry, Printing text entry control, PANEL, DTextEntry )


"derma/SkinChangeIndex"
derma.SkinChangeIndex(  ) 
 Description
Returns how many times derma.RefreshSkins has been called.

 Returns

 number


Amount of times derma.RefreshSkins has been called.


"derma/SkinHook"
derma.SkinHook( string type, string name, Panel panel, number w, number h ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Returns


 Description
Calls the specified hook for the given panel

 Arguments

 string type


The type of hook to run

 Arguments

 string name


The name of the hook to run

 Arguments

 Panel panel


The panel to call the hook for

 Arguments

 number w


The width of the panel

 Arguments

 number h


The height of the panel

 Returns

 any


The returned variable from the skin hook


"dragndrop/GetDroppable"
dragndrop.GetDroppable( string name=nil ) 
 Description
Returns a table of currently dragged panels.

 Arguments

 string name=nil


If set, the function will return only the panels with this Panel:Droppable name.

 Returns

 table


A table of all panels that are being currently dragged, if any.


"dragndrop/Clear"
dragndrop.Clear(  ) 
 Description
Clears all the internal dragndrop variables.


"debugoverlay/SweptBox"
debugoverlay.SweptBox( Vector vStart, Vector vEnd, Vector vMins, Vector vMaxs, Angle ang, number lifetime=1, table color=Color( 255, 255, 255 ) ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments


 Description
Displays swept box, two boxes connected with lines by their verices.



NOTE


This function will silently fail if the developer ConVar is set to 0.


 Arguments

 Vector vStart


The start position of the box.

 Arguments

 Vector vEnd


The end position of the box.

 Arguments

 Vector vMins


The minimum edge of the box.

 Arguments

 Vector vMaxs


The maximum edge of the box.

 Arguments

 Angle ang


 Arguments

 number lifetime=1


Number of seconds to appear

 Arguments

 table color=Color( 255, 255, 255 )


The color of the box. Uses the Color structure


"dragndrop/IsDragging"
dragndrop.IsDragging(  ) 
 Description
Returns whether the user is dragging something with the dragndrop system.

 Returns

 boolean


True if the user is dragging something with the dragndrop system.


"dragndrop/StartDragging"
dragndrop.StartDragging(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Starts the dragndrop.


"dragndrop/Drop"
dragndrop.Drop(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Handles the drop action of dragndrop library.


"dragndrop/Think"
dragndrop.Think(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Handles all the dragndrop processes. Calls dragndrop.UpdateReceiver and dragndrop.HoverThink.


"draw/DrawText"
draw.DrawText( string text, string font=DermaDefault, number x=0, number y=0, table color=Color( 255, 255, 255, 255 ), number xAlign=TEXT_ALIGN_LEFT ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Examples

8.1 Example




 Description
Simple draw text at position, but this will expand newlines and tabs.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


See also MarkupObject for limited width and markup support.

 Arguments

 string text


Text to be drawn.

 Arguments

 string font=DermaDefault


Name of font to draw the text in. See surface.CreateFont to create your own, or Default Fonts for a list of default fonts.

 Arguments

 number x=0


The X Coordinate.

 Arguments

 number y=0


The Y Coordinate.

 Arguments

 table color=Color( 255, 255, 255, 255 )


Color to draw the text in. Uses the Color structure.

 Arguments

 number xAlign=TEXT_ALIGN_LEFT


Where to align the text horizontally. Uses the TEXT_ALIGN_ Enums.

 Examples
 Example
Makes a message saying Hello there! pop up in the center of your screen.

hook.Add( HUDPaint, HelloThere, function() 
	draw.DrawText( Hello there!, TargetID, ScrW() * 0.5, ScrH() * 0.25, Color( 255,255,255,255 ), TEXT_ALIGN_CENTER )
end )
Output:

Hello there!


"dragndrop/CallReceiverFunction"
dragndrop.CallReceiverFunction( boolean bDoDrop, number command, number mx, number my ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Calls the receiver function of hovered panel.

 Arguments

 boolean bDoDrop


true if the mouse was released, false if we right clicked.

 Arguments

 number command


The command value. This should be the ID of the clicked dropdown menu ( if right clicked, or nil )

 Arguments

 number mx


The local to the panel mouse cursor X position when the click happened.

 Arguments

 number my


The local to the panel mouse cursor Y position when the click happened.


"dragndrop/HandleDroppedInGame"
dragndrop.HandleDroppedInGame(  ) 
 Description
If returns true, calls dragndrop.StopDragging in dragndrop.Drop. Seems to be broken and does nothing. Is it for override?


"dragndrop/HoverThink"
dragndrop.HoverThink(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Handles the hover think. Called from dragndrop.Think.


"dragndrop/StopDragging"
dragndrop.StopDragging(  ) 
 Description
Stops the dragndrop and calls dragndrop.Clear.


"draw/NoTexture"
draw.NoTexture(  ) 
 Description
Sets drawing texture to a default white texture (vgui/white) via surface.SetMaterial. Useful for resetting the drawing texture.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


"draw/SimpleText"
draw.SimpleText( string text, string font=DermaDefault, number x=0, number y=0, table color=Color( 255, 255, 255, 255 ), number xAlign=TEXT_ALIGN_LEFT, number yAlign=TEXT_ALIGN_TOP ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Returns
10 Returns


 Description
Draws text on the screen.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 string text


The text to be drawn.

 Arguments

 string font=DermaDefault


The font. See surface.CreateFont to create your own, or see Default Fonts for a list of default fonts.

 Arguments

 number x=0


The X Coordinate.

 Arguments

 number y=0


The Y Coordinate.

 Arguments

 table color=Color( 255, 255, 255, 255 )


The color of the text. Uses the Color structure.

 Arguments

 number xAlign=TEXT_ALIGN_LEFT


The alignment of the X coordinate using TEXT_ALIGN_ Enums.

 Arguments

 number yAlign=TEXT_ALIGN_TOP


The alignment of the Y coordinate using TEXT_ALIGN_ Enums.

 Returns

 number


The width of the text. Same value as if you were calling surface.GetTextSize.

 Returns

 number


The height of the text. Same value as if you were calling surface.GetTextSize.


"draw/GetFontHeight"
draw.GetFontHeight( string font ) 
 Description
Returns the height of the specified font in pixels.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 string font


Name of the font to get the height of.

 Returns

 number


fontHeight


"draw/SimpleTextOutlined"
draw.SimpleTextOutlined( string Text, string font=DermaDefault, number x=0, number y=0, table color=Color( 255, 255, 255, 255 ), number xAlign=TEXT_ALIGN_LEFT, number yAlign=TEXT_ALIGN_TOP, number outlinewidth, table outlinecolor=Color( 255, 255, 255, 255 ) ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Returns
12 Returns


 Description
Creates a simple line of text that is outlined.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 string Text


The text to draw.

 Arguments

 string font=DermaDefault


The font name to draw with. See surface.CreateFont to create your own, or here for a list of default fonts.

 Arguments

 number x=0


The X Coordinate.

 Arguments

 number y=0


The Y Coordinate.

 Arguments

 table color=Color( 255, 255, 255, 255 )


The color of the text. Uses the Color structure.

 Arguments

 number xAlign=TEXT_ALIGN_LEFT


The alignment of the X Coordinate using TEXT_ALIGN_ Enums.

 Arguments

 number yAlign=TEXT_ALIGN_TOP


The alignment of the Y Coordinate using TEXT_ALIGN_ Enums.

 Arguments

 number outlinewidth


Width of the outline.

 Arguments

 table outlinecolor=Color( 255, 255, 255, 255 )


Color of the outline. Uses the Color structure.

 Returns

 number


The width of the text. Same value as if you were calling surface.GetTextSize.

 Returns

 number


The height of the text. Same value as if you were calling surface.GetTextSize.


"draw/RoundedBoxEx"
draw.RoundedBoxEx( number cornerRadius, number x, number y, number width, number height, table color, boolean roundTopLeft=false, boolean roundTopRight=false, boolean roundBottomLeft=false, boolean roundBottomRight=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Arguments


 Description
Draws a rounded rectangle. This function also lets you specify which corners are drawn rounded.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 number cornerRadius


Radius of the rounded corners, works best with a power of 2 number.

 Arguments

 number x


The x coordinate of the top left of the rectangle.

 Arguments

 number y


The y coordinate of the top left of the rectangle.

 Arguments

 number width


The width of the rectangle.

 Arguments

 number height


The height of the rectangle.

 Arguments

 table color


The color to fill the rectangle with. Uses the Color structure.

 Arguments

 boolean roundTopLeft=false


Whether the top left corner should be rounded.

 Arguments

 boolean roundTopRight=false


Whether the top right corner should be rounded.

 Arguments

 boolean roundBottomLeft=false


Whether the bottom left corner should be rounded.

 Arguments

 boolean roundBottomRight=false


Whether the bottom right corner should be rounded.


"draw/RoundedBox"
draw.RoundedBox( number cornerRadius, number x, number y, number width, number height, table color ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments


 Description
Draws a rounded rectangle.



NOTE


If you intend to draw a non-rounded rectangle, then its more efficient to use surface.DrawRect.




NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 number cornerRadius


Radius of the rounded corners, works best with a multiple of 2.

 Arguments

 number x


The x coordinate of the top left of the rectangle.

 Arguments

 number y


The y coordinate of the top left of the rectangle.

 Arguments

 number width


The width of the rectangle.

 Arguments

 number height


The height of the rectangle.

 Arguments

 table color


The color to fill the rectangle with. Uses the Color structure.


"draw/TextShadow"
draw.TextShadow( table textdata, number distance, number alpha=200 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Works like draw.Text, but draws the text as a shadow.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 table textdata


The text properties. See TextData structure

 Arguments

 number distance


How far away the shadow appears.

 Arguments

 number alpha=200


How visible the shadow is (0-255).


"draw/Text"
draw.Text( table textdata ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns
5 Examples

5.1 Example




 Description
Works like draw.SimpleText but uses a table structure instead.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 table textdata


The text properties. See the TextData structure

 Returns

 number


Width of drawn text

 Returns

 number


Height of drawn text

 Examples
 Example
Example usage

hook.Add( HUDPaint, drawTextExample, function()
	draw.Text( {
		text = test,
		pos = { 50, 50 }

	} )
end )


"dragndrop/UpdateReceiver"
dragndrop.UpdateReceiver(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Updates the receiver to drop the panels onto. Called from dragndrop.Think.


"drive/CreateMove"
drive.CreateMove( CUserCmd cmd ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Clientside, the client creates the cmd (usercommand) from their input device (mouse, keyboard) and then its sent to the server. Restrict view angles here.

 Arguments

 CUserCmd cmd


The user command

 Returns

 boolean


true if succeeded


"draw/WordBox"
draw.WordBox( number bordersize, number x, number y, string text, string font, table boxcolor, table textcolor ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Returns
10 Returns


 Description
Draws a rounded box with text in it.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 number bordersize


Size of border, should be multiple of 2. Ideally this will be 8 or 16.

 Arguments

 number x


The X Coordinate.

 Arguments

 number y


The Y Coordinate.

 Arguments

 string text


Text to draw.

 Arguments

 string font


Font to draw in. See surface.CreateFont to create your own, or here for a list of default fonts.

 Arguments

 table boxcolor


The box color. Uses the Color structure.

 Arguments

 table textcolor


The text color. Uses the Color structure.

 Returns

 number


The width of the word box.

 Returns

 number


The height of the word box.


"drive/FinishMove"
drive.FinishMove( Player ply, CMoveData mv ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
The move is finished. Copy mv back into the target.

 Arguments

 Player ply


The player

 Arguments

 CMoveData mv


The move data

 Returns

 boolean


true if succeeded


"drive/DestroyMethod"
drive.DestroyMethod( Player ply ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Destroys players current driving method.

 Arguments

 Player ply


The player to affect


"drive/End"
drive.End( Player ply, Entity ent ) 
 Description
Player has stopped driving the entity.

 Arguments

 Player ply


The player

 Arguments

 Entity ent


The entity


"drive/GetMethod"
drive.GetMethod( Player ply ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Returns ( or creates if inexistent ) a driving method.

 Arguments

 Player ply


The player

 Returns

 table


A method object.


"drive/PlayerStopDriving"
drive.PlayerStopDriving( Player ply ) 
 Description
Stops the player from driving anything. ( For example a prop in sandbox )

 Arguments

 Player ply


The player to affect


"drive/PlayerStartDriving"
drive.PlayerStartDriving( Player ply, Entity ent, string mode ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Starts driving for the player.

 Arguments

 Player ply


The player to affect

 Arguments

 Entity ent


The entity to drive

 Arguments

 string mode


The driving mode


"drive/CalcView"
drive.CalcView( Player ply, table view ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Optionally alter the view.

 Arguments

 Player ply


The player

 Arguments

 table view


The view, see ViewData structure

 Returns

 boolean


true if succeeded


"drive/Start"
drive.Start( Player ply, Entity ent ) 
 Description
Called when the player first starts driving this entity

 Arguments

 Player ply


The player

 Arguments

 Entity ent


The entity


"drive/Move"
drive.Move( Player ply, CMoveData mv ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
The move is executed here.

 Arguments

 Player ply


The player

 Arguments

 CMoveData mv


The move data

 Returns

 boolean


true if succeeded


"duplicator/Allow"
duplicator.Allow( string classname ) 
 Description
Allow this entity to be duplicated

 Arguments

 string classname


An entitys classname


"draw/TexturedQuad"
draw.TexturedQuad( table texturedata ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Draws a texture with a table structure.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 table texturedata


The texture properties. See TextureData structure

 Examples
 Example
Example usage

local TexturedQuadStructure =
{
	texture = surface.GetTextureID( phoenix_storms/amraam ),
	color   = Color( 255, 0, 255, 255 ),
	x 	= 0,
	y 	= 0,
	w 	= 512,
	h 	= 512
}

draw.TexturedQuad( TexturedQuadStructure )
Output:

Renders the texture.


"duplicator/ApplyEntityModifiers"
duplicator.ApplyEntityModifiers( Player ply, Entity ent ) 
 Description
Calls every function registered with duplicator.RegisterEntityModifier on the entity.

 Arguments

 Player ply


The player whose entity this is

 Arguments

 Entity ent


The entity in question


"drive/StartMove"
drive.StartMove( Player ply, CMoveData mv, CUserCmd cmd ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
The user command is received by the server and then converted into a move. This is also run clientside when in multiplayer, for prediction to work.

 Arguments

 Player ply


The player

 Arguments

 CMoveData mv


The move data

 Arguments

 CUserCmd cmd


The user command

 Returns

 boolean


true if succeeded


"drive/Register"
drive.Register( string name, table data, string base ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Registers a new entity drive.

 Arguments

 string name


The name of the drive.

 Arguments

 table data


The data required to create the drive. This includes the functions used by the drive.

 Arguments

 string base


The base of the drive.

 Examples
 Example
Adds a noclip drive type.

drive.Register( drive_noclip, 
{
	--
	-- Called before each move. You should use your entity and cmd to 
	-- fill mv with information you need for your move.
	--
	StartMove =  function( self, mv, cmd )

		--
		-- Update move position and velocity from our entity
		--
		mv:SetOrigin( self.Entity:GetNetworkOrigin() )
		mv:SetVelocity( self.Entity:GetAbsVelocity() )

	end,

	--
	-- Runs the actual move. On the client when theres 
	-- prediction errors this can be run multiple times.
	-- You should try to only change mv.
	--
	Move = function( self, mv )

		--
		-- Set up a speed, go faster if ( shift is held down
		--
		local speed = 0.0005 * FrameTime()
		if ( mv:KeyDown( IN_SPEED ) ) then speed = 0.005 * FrameTime() end

		--
		-- Get information from the movedata
		--
		local ang = mv:GetMoveAngles()
		local pos = mv:GetOrigin()
		local vel = mv:GetVelocity()

		--
		-- Add velocities. This can seem complicated. On the first line
		-- were basically saying get the forward vector, ) then multiply it
		-- by our forward speed ( which will be &gt; 0 if ( were holding W, &lt; 0 if ( were
		-- holding S and 0 if ( were holding neither ) - and add that to velocity.
		-- We do that for right and up too, which gives us our free movement.
		--
		vel = vel + ang:Forward() * mv:GetForwardSpeed() * speed
		vel = vel + ang:Right() * mv:GetSideSpeed() * speed
		vel = vel + ang:Up() * mv:GetUpSpeed() * speed

		--
		-- We dont want our velocity to get out of hand so we apply
		-- a little bit of air resistance. If no keys are down we apply
		-- more resistance so we slow down more.
		--
		if ( math.abs( mv:GetForwardSpeed() ) + math.abs( mv:GetSideSpeed() ) + math.abs( mv:GetUpSpeed() ) &lt; 0.1 ) then
			vel = vel * 0.90
		else
			vel = vel * 0.99
		end

		--
		-- Add the velocity to the position ( this is the movement )
		--
		pos = pos + vel

		--
		-- We dont set the newly calculated values on the entity itself
		-- we instead store them in the movedata. These get applied in FinishMove.
		--
		mv:SetVelocity( vel )
		mv:SetOrigin( pos )

	end,

	--
	-- The move is finished. Use mv to set the new positions
	-- on your entities/players.
	--
	FinishMove =  function( self, mv )

		--
		-- Update our entity!
		--
		self.Entity:SetNetworkOrigin( mv:GetOrigin() )
		self.Entity:SetAbsVelocity( mv:GetVelocity() )
		self.Entity:SetAngles( mv:GetMoveAngles() )

		--
		-- If we have a physics object update that too. But only on the server.
		--
		if ( SERVER &amp;&amp; IsValid( self.Entity:GetPhysicsObject() ) ) then

			self.Entity:GetPhysicsObject():EnableMotion( true )
			self.Entity:GetPhysicsObject():SetPos( mv:GetOrigin() );
			self.Entity:GetPhysicsObject():Wake()
			self.Entity:GetPhysicsObject():EnableMotion( false )

		end

	end,

	--
	-- Calculates the view when driving the entity
	--
	CalcView =  function( self, view )

		--
		-- Use the utility method on drive_base.lua to give us a 3rd person view
		--
		local idealdist = math.max( 10, self.Entity:BoundingRadius() ) * 4

		self:CalcView_ThirdPerson( view, idealdist, 2, { self.Entity } )

	end,

}, drive_base );


"duplicator/ApplyBoneModifiers"
duplicator.ApplyBoneModifiers( Player ply, Entity ent ) 
 Description
Calls every function registered with duplicator.RegisterBoneModifier on each bone the ent has.

 Arguments

 Player ply


The player whose entity this is

 Arguments

 Entity ent


The entity in question


"duplicator/ClearEntityModifier"
duplicator.ClearEntityModifier( Entity ent, any key ) 
 Description
Clears/removes the chosen entity modifier from the entity.

 Arguments

 Entity ent


The entity the modification is stored on

 Arguments

 any key


The key of the stored entity modifier


"duplicator/CopyEnts"
duplicator.CopyEnts( table ents ) 
 Description
Copies the passed table of entities to save for later.

 Arguments

 table ents


A table of entities to save/copy.

 Returns

 table


A table containing duplication info which includes the following members:

 table Entities
 table Constraints
 Vector Mins
 Vector Maxs


"duplicator/CopyEntTable"
duplicator.CopyEntTable( Entity ent ) 
 Description
Returns a table with some entity data that can be used to create a new entity with duplicator.CreateEntityFromTable

 Arguments

 Entity ent


The entity table to save

 Returns

 table


See EntityCopyData structure


"duplicator/DoBoneManipulator"
duplicator.DoBoneManipulator( Entity ent, table bones ) 
 Description
Restores the bones data.
Loops through Bones and calls Entity:ManipulateBoneScale, Entity:ManipulateBoneAngles and Entity:ManipulateBonePosition on ent with the table keys and the subtable values s, a and p respectively.

 Arguments

 Entity ent


The entity to be bone manipulated

 Arguments

 table bones


Table with a BoneManipulationData structure for every bone (that has manipulations applied) using the bone ID as the table index.


"duplicator/CreateEntityFromTable"
duplicator.CreateEntityFromTable( Player ply, table entTable ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Create an entity from a table. 
This creates an entity using the data in EntTable.
If an entity factory has been registered for the entitys Class, it will be called. 
Otherwise, duplicator.GenericDuplicatorFunction will be called instead.

 Arguments

 Player ply


The player who wants to create something

 Arguments

 table entTable


The duplication data to build the entity with. See EntityCopyData structure

 Returns

 Entity


The newly created entity


"duplicator/CreateConstraintFromTable"
duplicator.CreateConstraintFromTable( table constraint, table entityList ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Creates a constraint from a saved/copied constraint table.
 Arguments

 table constraint


Saved/copied constraint table

 Arguments

 table entityList


The list of entities that are to be constrained

 Returns

 Entity


The newly created constraint entity


"duplicator/DoGenericPhysics"
duplicator.DoGenericPhysics( Entity ent, Player ply=nil, table data ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Applies bone data, generically.
If data contains a PhysicsObjects table, it moves, re-angles and if relevent freezes all specified bones, first converting from local coordinates to world coordinates.

 Arguments

 Entity ent


The entity to be applied upon

 Arguments

 Player ply=nil


The player who owns the entity. Unused in function as of early 2013

 Arguments

 table data


The data to be applied onto the entity


"duplicator/Copy"
duplicator.Copy( Entity ent, table tableToAdd={} ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Copies the entity, and all of its constraints and entities, then returns them in a table.

 Arguments

 Entity ent


The entity to duplicate. The function will automatically copy all constrained entities.

 Arguments

 table tableToAdd={}


A preexisting table to add entities and constraints in from.

Uses the same table format as the table returned from this function.

 Returns

 table


A table containing duplication info which includes the following members:

 table Entities
 table Constraints
 Vector Mins
 Vector Maxs

The values of Mins &amp; Maxs from the table are returned from duplicator.WorkoutSize


"duplicator/GenericDuplicatorFunction"
duplicator.GenericDuplicatorFunction( Player ply, table data ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Generic function for duplicating stuff 
This is called when duplicator.CreateEntityFromTable cant find an entity factory to build with. It calls duplicator.DoGeneric and duplicator.DoGenericPhysics to apply standard duplicator stored things such as the model and position.

 Arguments

 Player ply


The player who wants to create something

 Arguments

 table data


The duplication data to build the entity with

 Returns

 Entity


The newly created entity


"duplicator/GetAllConstrainedEntitiesAndConstraints"
duplicator.GetAllConstrainedEntitiesAndConstraints( Entity ent, table entStorageTable, table constraintStorageTable ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Returns


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Fills entStorageTable with all of the entities in a group connected with constraints. Fills constraintStorageTable with all of the constrains constraining the group.
 Arguments

 Entity ent


The entity to start from

 Arguments

 table entStorageTable


The table the entities will be inserted into

 Arguments

 table constraintStorageTable


The table the constraints will be inserted into

 Returns

 table


entStorageTable

 Returns

 table


constraintStorageTable


"duplicator/DoFlex"
duplicator.DoFlex( Entity ent, table flex, number scale=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Restores the flex data using Entity:SetFlexWeight and Entity:SetFlexScale

 Arguments

 Entity ent


The entity to restore the flexes on

 Arguments

 table flex


The flexes to restore

 Arguments

 number scale=nil


The flex scale to apply. (Flex scale is unchanged if omitted)


"duplicator/FindEntityClass"
duplicator.FindEntityClass( string name ) 
 Description
Returns the entity class factory registered with duplicator.RegisterEntityClass.

 Arguments

 string name


The name of the entity class factory

 Returns

 table


Is compromised of the following members:

 function Func - The function that creates the entity
 table Args - Arguments to pass to the function


"duplicator/RegisterBoneModifier"
duplicator.RegisterBoneModifier( any key, function boneModifier ) 
 Description
Registers a function to be called on each of an entitys bones when duplicator.ApplyBoneModifiers is called.



NOTE


This function is available to call on the client, but registered functions arent used anywhere!


 Arguments

 any key


The type of the key doesnt appear to matter, but it is preferable to use a string.

 Arguments

 function boneModifier


Function called on each bone that an ent has. Called during duplicator.ApplyBoneModifiers.
Function parameters are:

 Player ply
 Entity ent
 number boneID
 PhysObj bone
 table data



The data table that is passed to boneModifier is set with duplicator.StoreBoneModifier


"duplicator/Paste"
duplicator.Paste( Player Player, table EntityList, table ConstraintList ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Returns
7 Examples

7.1 Example




 Description
Given entity list and constraint list, create all entities and return their tables
Calls duplicator.CreateEntityFromTable on each sub-table of EntityList. If an entity is actually created, it calls ENTITY:OnDuplicated with the entitys duplicator data, then duplicator.ApplyEntityModifiers, duplicator.ApplyBoneModifiers and finally ENTITY:PostEntityPaste is called.
The constraints are then created with duplicator.CreateConstraintFromTable.

 Arguments

 Player Player


The player who wants to create something

 Arguments

 table EntityList


A table of duplicator data to create the entities from

 Arguments

 table ConstraintList


A table of duplicator data to create the constraints from

 Returns

 table


List of created entities

 Returns

 table


List of created constraints

 Examples
 Example
Code used for a TOOL to copy duplication data on right click and paste it with its original info on left click.

function TOOL:LeftClick( trace )
	if ( SERVER ) then
		duplicator.Paste( self:GetOwner(),Dupe.Entities,Dupe.Constraints )
		print( PASTED )
	end
	return true
end
 
function TOOL:RightClick( trace )
	if ( SERVER and IsValid( trace.Entity ) ) then
		Dupe = duplicator.Copy( trace.Entity )
		print( COPIED )
	end
	return true
end


"duplicator/RegisterConstraint"
duplicator.RegisterConstraint( string name, function callback, any ... ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Register a function used for creating a duplicated constraint.

 Arguments

 string name


The unique name of new constraint

 Arguments

 function callback


Function to be called when this constraint is created

 Arguments

 any ...


Arguments passed to the callback function

 Examples
 Example
This is from lua/includes/modules/constraint.lua, it registers the Weld Constraint.

duplicator.RegisterConstraint( Weld, Weld, Ent1, Ent2, Bone1, Bone2, forcelimit, nocollide, deleteonbreak )


"duplicator/DoGeneric"
duplicator.DoGeneric( Entity ent, table data ) 
 Description
Applies generic every-day entity stuff for ent from table data.
Depending on the values of Model, Angle, Pos, Skin, Flex, Bonemanip, ModelScale, ColGroup, Name, and BodyG (table of multiple values) in the data table, this calls Entity:SetModel, Entity:SetAngles, Entity:SetPos, Entity:SetSkin, duplicator.DoFlex, duplicator.DoBoneManipulator, Entity:SetModelScale, Entity:SetCollisionGroup, Entity:SetName, Entity:SetBodygroup on ent.
If ent has a RestoreNetworkVars function, it is called with data.DT.

 Arguments

 Entity ent


The entity to be applied upon

 Arguments

 table data


The data to be applied onto the entity


"duplicator/SetLocalPos"
duplicator.SetLocalPos( Vector v ) 
 Description
When a copy is copied it will be translated according to these.
If you set them - make sure to set them back to 0 0 0!

 Arguments

 Vector v


The position to offset all pastes from


"duplicator/RegisterEntityModifier"
duplicator.RegisterEntityModifier( string name, function func ) 
 Description
This allows you to register tweaks to entities. For instance, if you were making an unbreakable addon, you would use this to enable saving the unbreakable state of entities between duplications.
This function registers a piece of generic code that is run on all entities with this modifier. In order to have it actually run, use duplicator.StoreEntityModifier.
This function does nothing when run clientside.

 Arguments

 string name


An identifier for your modification. This is not limited, so be verbose. Persons Unbreakable mod is far less likely to cause conflicts than unbreakable

 Arguments

 function func


The function to be called for your modification. It should have the arguments (Player, Entity, Data), where data is what you pass to duplicator.StoreEntityModifier.


"duplicator/IsAllowed"
duplicator.IsAllowed( string classname ) 
 Description
Returns whether the entity can be duplicated or not

 Arguments

 string classname


An entitys classname

 Returns

 boolean


Returns true if the entity can be duplicated (nil otherwise)


"effects/Create"
effects.Create( string name ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.

You are looking for util.Effect.Returns the table of the effect specified.
 Arguments

 string name


Effect name.

 Returns

 table


Effect table.


"duplicator/RemoveMapCreatedEntities"
duplicator.RemoveMapCreatedEntities(  ) 
 Description
Help to remove certain map created entities before creating the saved entities
This is obviously so we dont get duplicate props everywhere.
It should be called before calling Paste.


"engine/ActiveGamemode"
engine.ActiveGamemode(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the name of the currently running gamemode.



BUG


This will return the incorrect gamemode name on the client if used too early.



 Returns

 string


The active gamemodes name. This is the name of the gamemodes folder.

 Examples
 Example
Prints out the name of the active gamemode.

print( engine.ActiveGamemode() )
Output:

sandbox


"duplicator/SetLocalAng"
duplicator.SetLocalAng( Angle v ) 
 Description
When a copy is copied it will be translated according to these.
If you set them - make sure to set them back to 0 0 0!

 Arguments

 Angle v


The angle to offset all pastes from


"duplicator/StoreBoneModifier"
duplicator.StoreBoneModifier( Entity ent, number boneID, any key, table data ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Stores bone mod data for a registered bone modification function

 Arguments

 Entity ent


The entity to add bone mod data to

 Arguments

 number boneID


The bone ID.

See Entity:GetPhysicsObjectNum

 Arguments

 any key


The key for the bone modification

 Arguments

 table data


The bone modification data that is passed to the bone modification function


"duplicator/WorkoutSize"
duplicator.WorkoutSize( table Ents ) 
 Description
Work out the AABB size

 Arguments

 table Ents


A table of entity duplication datums.


"engine/GetDemoPlaybackTick"
engine.GetDemoPlaybackTick(  ) 
 Description
Current tick of currently loaded demo.
If not playing a demo, it will return amount of ticks since last demo playback.

 Returns

 number


The amount of ticks of currently loaded demo.


"effects/Register"
effects.Register( table effect_table, string name ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Registers a new effect.
 Arguments

 table effect_table


Effect table.

 Arguments

 string name


Effect name.


"duplicator/RegisterEntityClass"
duplicator.RegisterEntityClass( string name, function function, vararg args ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
This allows you to specify a specific function to be run when your SENT is pasted with the duplicator, instead of relying on the generic automatic functions.



NOTE


Automatically calls duplicator.Allow for the entity class.


 Arguments

 string name


The ClassName of the entity you wish to register a factory for

 Arguments

 function function


The factory function you want to have called. It should have the arguments (Player, ...) where ... is whatever arguments you request to be passed.

 Arguments

 vararg args


Strings of the names of arguments you want passed to function the from the EntityCopyData structure. As a special case, Data will pass the whole structure.

 Examples
 Example
Prints the datatable and then lets the duplicator do its job

duplicator.RegisterEntityClass( prop_physics, function( ply, data )
	PrintTable( data )
	duplicator.GenericDuplicatorFunction( ply, data )
end, Data )
Output:

Skin = 0
Mins = -14.357550 -14.390250 -25.934851
Flex:
	ColGroup = 0
Pos = -292.415070 -157.575043 -12262.056641
PhysicsObjects:
	0:
		Frozen = false
		Pos = 13.750092 0.490356 -4.675781
		Angle = 0.057 87.808 -0.031
Class = prop_physics
FlexScale = 1
Maxs = 14.438149 14.405550 25.995348
Model = models/props_borealis/bluebarrel001.mdl
Angle = 0.057 134.318 -0.031


"duplicator/StoreEntityModifier"
duplicator.StoreEntityModifier( Entity entity, string name, table data ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Stores an entity modifier into an entity for saving

 Arguments

 Entity entity


The entity to store modifier in

 Arguments

 string name


Unique modifier name as defined in duplicator.RegisterEntityModifier

 Arguments

 table data


Modifier data


"engine/GetDemoPlaybackTotalTicks"
engine.GetDemoPlaybackTotalTicks(  ) 
 Description
Returns total amount of ticks of currently loaded demo.
If not playing a demo, returns 0 or the value of last played demo.

 Returns

 number


Total amount of ticks of currently loaded demo.


"engine/GetAddons"
engine.GetAddons(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns a list of addons the player have subscribed to on the workshop.

 Returns

 table


A table with 6 keys (downloaded, models, title, file, mounted, wsid)

 Examples
 Example
Will return a list of all the workshop addons you have downloaded / are downloading.

PrintTable( engine.GetAddons() )
Output:

1:
		downloaded	=	true 
		models		=	0 
		title		=	Title of Addon 
		file		=	addons/title_of_addon_123456789.gma 
		mounted		=	true
		wsid		=	123456789


"engine/GetDemoPlaybackTimeScale"
engine.GetDemoPlaybackTimeScale(  ) 
 Description
Returns time scale of demo playback.
If not during demo playback, returns 1.

 Returns

 number


The time scale of demo playback, value of demo_timescale console variable.


"engine/GetDemoPlaybackStartTick"
engine.GetDemoPlaybackStartTick(  ) 
 Description
When starting playing a demo, engine.GetDemoPlaybackTick will be reset and its old value will be added to this functions return value.

 Returns

 number


"engine/GetGamemodes"
engine.GetGamemodes(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns a table containing info for all installed gamemodes

 Returns

 table


gamemodes

 Examples
 Example
Prints out a list of gamemodes and various info

PrintTable( engine.GetGamemodes() )
Output:

1:
 title = Base
 workshopid = 
 menusystem = false
 maps = 
 name = base
2:
 title = Sandbox
 workshopid = 
 menusystem = true
 maps = ^gm_| ^gmod_
 name = sandbox


"engine/CloseServer"
engine.CloseServer(  ) 
 Description
Closes the server and completely exits.
This is only functional when running in server test mode (launch option -systemtest). Server test mode is used internally at Facepunch as part of the build process to make sure that the dedicated servers arent crashing on startup.


"engine/GetGames"
engine.GetGames(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns an array of tables corresponding to all games from which Garrys Mod supports mounting content.
The mounted and installed values currently do not work correctly serverside on dedicated servers. Some games will always report true while others will always report false.

 Returns

 table


A table of tables containing all mountable games

 Examples
 Example
Prints out a list of games, their Steam AppIds, titles and status (owned, installed, mounted).

PrintTable( engine.GetGames() )
Output:

1:
 depot = 220
 title = Half-Life 2
 owned = true
 folder = hl2
 mounted = true
 installed = true
2:
 depot = 240
 title = Counter-Strike
 owned = false
 folder = cstrike
 mounted = false
 installed = false
3:
 depot = 300
 title = Day of Defeat
 owned = false
 folder = dod
 mounted = false
 installed = false
4:
 depot = 440
 title = Team Fortress 2
 owned = true
 folder = tf
 mounted = true
 installed = true


"engine/OpenDupe"
engine.OpenDupe( string dupeName ) 
 Description
Loads a duplication from the local filesystem.

 Arguments

 string dupeName


Name of the file. e.g, engine.OpenDupe(dupes/8b809dd7a1a9a375e75be01cdc12e61f.dupe)

 Returns

 string


Compressed dupeData. Use util.JSONToTable to make it into a format useable by the duplicator tool.


"engine/TickCount"
engine.TickCount(  ) 
 Description
Returns the number of ticks since the game server started.

 Returns

 number


Number of ticks since the game server started.


"engine/GetUserContent"
engine.GetUserContent(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Used internally for in-game menus, may be merged in the future into engine.GetAddons.
Returns the UGC (demos, saves and dupes) the player have subscribed to on the workshop.

 Returns

 table


Returns a table with 6 keys (title, type, tags, wsid, timeadded)


"engine/IsRecordingDemo"
engine.IsRecordingDemo(  ) 
 Description
Returns true if the game is currently recording a demo file (.dem) using gm_demo

 Returns

 boolean


Whether the game is currently recording a demo or not.


"engine/IsPlayingDemo"
engine.IsPlayingDemo(  ) 
 Description
Returns true if were currently playing a demo.
You will notice that theres no server-side version of this. Thats because there is no server when playing a demo. Demos are both recorded and played back purely clientside.

 Returns

 boolean


Whether the game is currently playing a demo or not.


"engine/SetMounted"
engine.SetMounted( string depotID, boolean doMount ) 
 Description
Sets the mounting options for mountable content.

 Arguments

 string depotID


The depot id of the game to mount.

 Arguments

 boolean doMount


The mount state, true to mount, false to unmount


"engine/WriteSave"
engine.WriteSave( string saveData, string name, number time, string map ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Stores savedata into the game (can be loaded using the LoadGame menu)

 Arguments

 string saveData


Data generated by gmsave.SaveMap

 Arguments

 string name


Name the save will have.

 Arguments

 number time


When the save was saved during the game (Put CurTime here)

 Arguments

 string map


The map the save is used for.


"engine/WriteDupe"
engine.WriteDupe( string dupe, string jpeg ) 
 Description
Saves a duplication as a file.

 Arguments

 string dupe


Dupe table, encoded by util.TableToJSON and compressed by util.Compress

 Arguments

 string jpeg


The dupe icon, created by render.Capture


"Entity/Activate"
Entity:Activate(  ) 
 Description
Activates the entity. This needs to be used on some entities (like constraints) after being spawned.



NOTE






BUG


This crashes the game with scaled vehicles.



 Examples
 Example
Spawns a sent_ball on the player.

function ENT:SpawnMe( ply )
	local SpawningPos = ply:GetPos()
	local ent = ents.Create( sent_ball )
	ent:SetPos( SpawningPos ) 
	ent:Spawn()
	ent:Activate()
end


"engine/LightStyle"
engine.LightStyle( number lightstyle, string pattern ) 
 Description
This is a direct binding to the function &#x201C;engine-&gt;LightStyle&#x201D;. This function allows you to change the default light style of the map - so you can make lighting lighter or darker. You&#x2019;ll need to call render.RedownloadAllLightmaps clientside to refresh the lightmaps to this new color.



BUG


Calling this function with arguments 0 and a will cause dynamic lights such as those produced by the Light tool to stop working.



 Arguments

 number lightstyle


The lightstyle to edit. 0 to 63. If you want to edit map lighting, you want to set this to 0.

 Arguments

 string pattern


The pattern to change the lightstyle to. a is the darkest, z is the brightest. You can use stuff like abcxyz to make flashing patterns. The normal brightness for a map is m. Values over z are allowed, ~ for instance.


"Entity/AddEffects"
Entity:AddEffects( number effect ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Applies an engine effect to an entity.

 Arguments

 number effect


The effect to apply, see EF_ Enums.

 Examples
 Example
Adds a blinking effect to an entity.

Entity:AddEffects( EF_ITEM_BLINK )


"Entity/AddFlags"
Entity:AddFlags( number flag ) 
 Description
Adds flags to the entity.

 Arguments

 number flag


Flag to add, see FL_ Enums


"engine/TickInterval"
engine.TickInterval(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the number of seconds between each gametick.

 Returns

 number


Number of seconds between each gametick.

 Examples
 Example
print( 1 / engine.TickInterval() )
Output:

66.666668156783 (servertick is 66)


"Entity/AddEFlags"
Entity:AddEFlags( number flag ) 
 Description
Adds engine flags.

 Arguments

 number flag


Engine flag to add, see EFL_ Enums


"Entity/AddCallback"
Entity:AddCallback( string hook, function func ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Add a callback function to a specific event. This is used instead of hooks to avoid calling empty functions unnecessarily.
This also allows you to use certain hooks in engine entities (non-scripted entities).



WARNING


This method does not check if the function has already been added to this object before, so if you add the same callback twice, it will be run twice! Make sure to add your callback only once.


 Arguments

 string hook


The hook name to hook onto. See Entity Callbacks

 Arguments

 function func


The function to call

 Returns

 number


The callback ID that was just added, which can later be used in Entity:RemoveCallback.

Returns nothing if the passed callback function was invalid or when asking for a non-existent hook.

 Examples
 Example
function myfunc( entity, newangle )
	-- Do stuff
end

myentity:AddCallback( OnAngleChange, myfunc )
Output:

Function is called every time the entity angle changes


"engine/ServerFrameTime"
engine.ServerFrameTime(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Examples

4.1 Example




 Description
Returns an estimate of the servers performance. Equivalent to calling FrameTime from the server, according to source code.

 Returns

 number


Frame time

 Returns

 number


Server Framerate Std Deviation

 Examples
 Example
Get the servers tickrate. Can be used to indicate lag

print( Server Tick: ..( 1/engine.ServerFrameTime() ) )
Output:

Server Tick: 66.666668156783


"Entity/AddSolidFlags"
Entity:AddSolidFlags( number flags ) 
 Description
Adds solid flag(s) to the entity.

 Arguments

 number flags


The flag(s) to apply, see FSOLID_ Enums.


"engine/VideoSettings"
engine.VideoSettings(  ) 
 Description
Returns video recording settings set by video.Record. Used by Demo-To-Video feature.

 Returns

 table


The video recording settings, see VideoData structure.


"Entity/AddGestureSequence"
Entity:AddGestureSequence( number sequence, boolean autokill=true ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Adds a gesture animation to the entity and plays it.
See Entity:AddGesture for a function that takes ACT_ Enums.
See also Entity:AddLayeredSequence.



NOTE


This function only works on BaseAnimatingOverlay entites!


 Arguments

 number sequence


The sequence ID to play as the gesture. See Entity:LookupSequence.

 Arguments

 boolean autokill=true


 Returns

 number


Layer ID of the started gesture, used to manipulate the played gesture by other functions.


"Entity/AddGesture"
Entity:AddGesture( number activity, boolean autokill=true ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Adds a gesture animation to the entity and plays it.
See Entity:AddGestureSequence and Entity:AddLayeredSequence for functions that takes sequences instead of ACT_ Enums.



NOTE


This function only works on BaseAnimatingOverlay entites!


 Arguments

 number activity


The activity to play as the gesture. See ACT_ Enums.

 Arguments

 boolean autokill=true


 Returns

 number


Layer ID of the started gesture, used to manipulate the played gesture by other functions.


"Entity/AddLayeredSequence"
Entity:AddLayeredSequence( number sequence, number priority ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Adds a gesture animation to the entity and plays it.
See Entity:AddGestureSequence for a function that doesnt take priority.
See Entity:AddGesture for a function that takes ACT_ Enums.



NOTE


This function only works on BaseAnimatingOverlay entites!


 Arguments

 number sequence


The sequence ID to play as the gesture. See Entity:LookupSequence.

 Arguments

 number priority


 Returns

 number


Layer ID of created layer


"Entity/AlignAngles"
Entity:AlignAngles( Angle from, Angle to ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns an angle based on the ones inputted that you can use to align an object.



NOTE


This function doesnt change the angle of the entity on its own (see example).


 Arguments

 Angle from


The angle you want to align from

 Arguments

 Angle to


The angle you want to align to

 Returns

 Angle


The resulting aligned angle

 Examples
 Example
This example will make ent1 face up from ent2.

ent1:SetAngles( ent1:AlignAngles( ent1:GetForward():Angle(), ent2:GetUp():Angle() ) )
Output:

Sets ent1s angle to one where ent1 faces up from ent2.


"Entity/AddToMotionController"
Entity:AddToMotionController( PhysObj physObj ) 
 Description
Adds a PhysObject to the entitys motion controller so that ENTITY:PhysicsSimulate will be called for given PhysObject as well.
You must first create a motion controller with Entity:StartMotionController.
You can remove added PhysObjects by using Entity:RemoveFromMotionController.



NOTE


Only works on a scripted Entity of anim type


 Arguments

 PhysObj physObj


The PhysObj to add to the motion controller.


"Entity/BeingLookedAtByLocalPlayer"
Entity:BeingLookedAtByLocalPlayer(  ) 
 Description
Returns true if the entity is being looked at by the local player and is within 256 units of distance.



NOTE


This function is only available in entities that are based off of sandboxs base_gmodentity




NOTE


This function uses Distance instead of DistToSqr so it may not be suitable in situations where its called often


 Returns

 boolean


Is the entity being looked at by the local player and within 256 units.


"Entity/BecomeRagdollOnClient"
Entity:BecomeRagdollOnClient(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Spawns a clientside ragdoll for the entity, positioning it in place of the original entity, and makes the entity invisible. It doesnt preserve flex values (face posing) as CSRagdolls dont support flex.
It does not work on players. Use Player:CreateRagdoll instead.
The original entity is not removed, and neither are any ragdolls previously generated with this function.
To make the entity re-appear, run Entity:SetNoDraw( false )

 Returns

 CSEnt


The created ragdoll.

 Examples
 Example
Spawns a ragdoll for all NPCs.

for k,npc in pairs( ents.FindByClass( npc_* ) ) do
    npc.RagDoll = npc:BecomeRagdollOnClient()
end


"Entity/BoneHasFlag"
Entity:BoneHasFlag( number boneID, number flag ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns whether the entitys bone has the flag or not.

 Arguments

 number boneID


Bone ID to test flag of.

 Arguments

 number flag


The flag to test, see BONE_ Enums

 Returns

 boolean


Whether the bone has that flag or not


"Entity/BoneLength"
Entity:BoneLength( number boneID ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
This function takes the boneID and returns the length of it in an unrounded decimal

 Arguments

 number boneID


The ID of the bone you want the length of. You may want to get the length of the next bone ( boneID + 1 ) for decent results

 Returns

 number


The length of the bone

 Examples
 Example
Returns first bones length of first player on the server

print( player.GetByID( 1 ):BoneLength( 1 ) )
Output:

Returns 0


"Entity/Blocked"
Entity:Blocked( Entity entity ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Dispatches blocked events to this entitys blocked handler. This function is only useful when interacting with entities like func_movelinear.
 Arguments

 Entity entity


The entity that is blocking us


"Entity/CollisionRulesChanged"
Entity:CollisionRulesChanged(  ) 
 Description
Declares that the collision rules of the entity have changed, and subsequent calls for GM:ShouldCollide with this entity may return a different value than they did previously.



WARNING


This function must not be called inside of GM:ShouldCollide. Instead, it must be called in advance when the condition is known to change.




WARNING


Failure to use this function correctly will result in a crash of the physics engine.


"Entity/ClearPoseParameters"
Entity:ClearPoseParameters(  ) 
 Description
Resets all pose parameters such as aim_yaw, aim_pitch and rotation.


"Entity/BodyTarget"
Entity:BodyTarget( Vector origin, boolean noisy=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns a centered vector of this entity, NPCs use this internally to aim at their targets.



NOTE


This only works on players and NPCs.


 Arguments

 Vector origin


The vector of where the the attack comes from.

 Arguments

 boolean noisy=false


Decides if it should return the centered vector with a random offset to it.

 Returns

 Vector


The centered vector.


"Entity/BoundingRadius"
Entity:BoundingRadius(  ) 
 Description
Returns the distance between the center of the bounding box and the furthest bounding box corner.

 Returns

 number


The radius of the bounding box.


"Entity/CreatedByMap"
Entity:CreatedByMap(  ) 
 Description
Returns whether the entity was created by map or not.

 Returns

 boolean


Is created by map?


"Entity/CreateShadow"
Entity:CreateShadow(  ) 
 Description
Draws the shadow of an entity.

 Examples
 Example
function ENT:Draw()
 self:DrawModel()
 self:CreateShadow()
end
Output:

Draws the shadow of an entity


"Entity/CreateParticleEffect"
Entity:CreateParticleEffect( string particle, number attachment, table options=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Creates a clientside particle system attached to the entity. See also CreateParticleSystem



NOTE


The particle effect must be precached with PrecacheParticleSystem and the file its from must be added via game.AddParticles before it can be used!


 Arguments

 string particle


The particle name to create

 Arguments

 number attachment


Attachment ID to attach the particle to

 Arguments

 table options=nil


A table of tables ( IDs 1 to 64 ) having the following structure:

 number attachtype - The particle attach type. See PATTACH_ Enums. Default: PATTACH_ABSORIGIN
 Entity entity - The parent entity? Default: NULL
 Vector position - The offset position for given control point. Default: nil

This only affects the control points of the particle effects and will do nothing if the effect doesnt use control points.

 Returns

 CNewParticleEffect


The created particle system.


"Entity/CallOnRemove"
Entity:CallOnRemove( string identifier, function removeFunc, vararg argn... ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Causes a specified function to be run if the entity is removed by any means. This can later be undone by Entity:RemoveCallOnRemove if you need it to not run.



BUG


Using players with this function will provide a gimped entity to the callback.



 Arguments

 string identifier


Identifier of the function within CallOnRemove

 Arguments

 function removeFunc


Function to be called on remove

 Arguments

 vararg argn...


Optional arguments to pass to removeFunc. Do note that the first argument passed to the function will always be the entity being removed, and the arguments passed on here start after that.

 Examples
 Example
Stops an engine sound when the entity is removed

Entity:CallOnRemove( StopEngineSound,function( ent ) ent:StopSound( enginenoise.wav ) end )


"Entity/DontDeleteOnRemove"
Entity:DontDeleteOnRemove( Entity entityToUnremove ) 
 Description
This removes the argument entity from an ents list of entities to delete on remove

 Arguments

 Entity entityToUnremove


The entity to be removed from the list of entities to delete


"Entity/DispatchTraceAttack"
Entity:DispatchTraceAttack( CTakeDamageInfo damageInfo, table traceRes, Vector dir=traceRes.HitNormal ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Performs a trace attack.

 Arguments

 CTakeDamageInfo damageInfo


The damage to apply.

 Arguments

 table traceRes


Trace result to use to deal damage. See TraceResult structure

 Arguments

 Vector dir=traceRes.HitNormal


Direction of the attack.


"Entity/DisableMatrix"
Entity:DisableMatrix( string matrixType ) 
 Description
Disables an active matrix.

 Arguments

 string matrixType


The name of the matrix type to disable.

The only known matrix type is RenderMultiply.


"Entity/DeleteOnRemove"
Entity:DeleteOnRemove( Entity entityToRemove ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Whenever the entity is removed, entityToRemove will be removed also.

 Arguments

 Entity entityToRemove


The entity to be removed

 Examples
 Example
Creates a second chair in spawned jeeps that is removed when the jeep is removed

hook.Add( PlayerSpawnedVehicle, VehicleUpgrade, function( ply,vehicle )
	if ( vehicle:GetClass() == prop_vehicle_jeep ) then
		local seat = ents.Create( prop_vehicle_prisoner_pod )
		seat:SetModel( models/nova/jeep_seat.mdl )
		seat:SetPos( vehicle:LocalToWorld( Vector( 21,-32,18 ) ) )
		seat:SetAngles( vehicle:LocalToWorldAngles( Angle( 0,-3.5,0 ) ) )
		seat:Spawn()
		seat:SetKeyValue( limitview, 0 )
		table.Merge( seat, { HandleAnimation = function( _,ply ) return ply:SelectWeightedSequence( ACT_HL2MP_SIT ) end } )
		gamemode.Call( PlayerSpawnedVehicle, ply, seat )
		vehicle.PassengerSeat = seat
		vehicle:DeleteOnRemove( seat ) //&lt;--
		constraint.Weld( seat, vehicle )
	end
end )


"Entity/DTVar"
Entity:DTVar( string Type, number ID, string Name ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Sets up a self.dt.NAME alias for a Data Table variable.



WARNING


You should use Entity:NetworkVar instead


 Arguments

 string Type


The type of the DTVar being set up. It can be one of the following: Int, Float, Vector, Angle, Bool, Entity or String

 Arguments

 number ID


The ID of the DTVar. Can be between 0 and 3

 Arguments

 string Name


Name by which you will refer to DTVar. It must be a valid variable name. (No spaces!)

 Examples
 Example
Sets up two float networked variables, TargetZ and Speed

function ENT:SetupDataTables()

	self:DTVar( Float, 0, TargetZ )
	self:DTVar( Float, 1, Speed )

end


"Entity/DrawShadow"
Entity:DrawShadow( boolean shouldDraw ) 
 Description
Sets whether an entitys shadow should be drawn.

 Arguments

 boolean shouldDraw


True to enable, false to disable shadow drawing.


"Entity/DropToFloor"
Entity:DropToFloor(  ) 
Contents

1 Description
2 Examples

2.1 Example


3 Examples

3.1 Example




 Description
Move an entity down until it collides with something.



WARNING


The entity needs to already have something below it within 256 units.


 Examples
 Example
Move all props on the server down until they collide with something

for _, ent in pairs( ents.FindByClass( prop_physics ) ) do
	ent:DropToFloor()
end


 Examples
 Example
Drops players to the ground when they spawn

hook.Add( PlayerSpawn, DropGround, function( ply )
	ply:DropToFloor()
end )


"Entity/EmitSound"
Entity:EmitSound( string soundName, number soundLevel=75, number pitchPercent=100, number volume=1, number channel=CHAN_AUTO, CHAN_WEAPON for weapons ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example




 Description
Plays a sound on an entity. If run clientside, the sound will only be heard locally.
If used on a player or NPC character with the mouth rigged, the character will lip-sync. This does not work with all sound files.
It is recommended to use sound scripts ( see sound.Add ) over direct file paths. This will allow you to use Entity:StopSound to stop the played sound scripts.



NOTE


When using this function with weapons, use the Weapon itself as the entity, not its owner!




BUG


This does not respond to SuppressHostEvents.



 Arguments

 string soundName


The name of the sound to be played.



WARNING


The string will cannot have whitespace at the start or end. You can remove this with string.Trim.



 Arguments

 number soundLevel=75



 Arguments

 number pitchPercent=100


The pitch applied to the sound. The acceptable range is from 0 to 255. 100 means the pitch is not changed.

 Arguments

 number volume=1


The volume, from 0 to 1.

 Arguments

 number channel=CHAN_AUTO, CHAN_WEAPON for weapons



 Examples
 Example
Plays sound from the first player on the server.

Entity( 1 ):EmitSound( path/to/sound.wav, 75, 100, 1, CHAN_AUTO ) -- Same as below
Entity( 1 ):EmitSound( path/to/sound.wav ) -- You can remove the arguments that have default values.


"Entity/EntIndex"
Entity:EntIndex(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Gets the unique entity index of an entity.



NOTE


Entity indices are marked as unused after deletion, and can be reused by newly-created entities


 Returns

 number


The index of the entity.

-1 for clientside-only or serverside-only entities.

 Examples
 Example
Demonstrates the use of this function.

print( player.GetAll()[1]:EntIndex() )
Output:

1


"Entity/DestroyShadow"
Entity:DestroyShadow(  ) 
 Description
Removes the shadow for the entity.
The shadow will be recreated as soon as the entity wakes.
Doesnt affect shadows from flashlight/lamps/env_projectedtexture.


"Entity/EnableMatrix"
Entity:EnableMatrix( string matrixType, VMatrix matrix ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Can be used to apply a custom VMatrix to the entity, mostly used for scaling the model by a Vector.
To disable it, use Entity:DisableMatrix.
If your old scales are wrong due to a recent update, use Entity:SetLegacyTransform as a quick fix.



NOTE


The matrix can also be modified to apply a custom rotation and offset via the VMatrix:SetAngles and VMatrix:SetTranslation functions.




BUG


This does not scale procedural bones.



 Arguments

 string matrixType


The name of the matrix type.

The only implemented matrix type is RenderMultiply.

 Arguments

 VMatrix matrix


The matrix to apply before drawing the entity.

 Examples
 Example
To scale a props height by 4x

local scale = Vector( 1,1,4 )

local mat = Matrix()
mat:Scale( scale )
prop:EnableMatrix( RenderMultiply, mat )


"Entity/DrawModel"
Entity:DrawModel(  ) 
 Description
Draws the entity or model.
If called inside ENTITY:Draw or ENTITY:DrawTranslucent, it only draws the entitys model itself.
If called outside of those hooks, it will call both of said hooks depending on Entity:GetRenderGroup, drawing the entire entity again.



NOTE


When drawing an entity more than once per frame in different positions, you should call Entity:SetupBones before each draw; Otherwise, the entity will retain its first drawn position.




NOTE


This is a rendering function that requires a 3D rendering context.This means that it will only work in hooks with a 3D rendering context.




BUG


Calling this on entities with EF_BONEMERGE and EF_NODRAW applied causes a crash.





BUG


Using this with a map model (game.GetWorld():GetModel()) crashes the game.



 Examples
 Example
Manually draws a single ClientsideModel on the specified bone, on the given offset for every player affected by this hook.
This is useful in case you want to reuse a single model without having to create one for each player.

local modelexample = ClientsideModel( models/thrusters/jetpack.mdl )
modelexample:SetNoDraw( true )

local offsetvec = Vector( 3, -5.6, 0 )
local offsetang = Angle( 180, 90, -90 )

hook.Add( PostPlayerDraw , manual_model_draw_example , function( ply )
	local boneid = ply:LookupBone( ValveBiped.Bip01_Spine2 )
	
	if ( not boneid ) then
		return
	end
	
	local matrix = ply:GetBoneMatrix( boneid )
	
	if ( not matrix ) then 
		return 
	end
	
	local newpos, newang = LocalToWorld( offsetvec, offsetang, matrix:GetTranslation(), matrix:GetAngles() )
	
	modelexample:SetPos( newpos )
	modelexample:SetAngles( newang )
	modelexample:SetupBones()
	modelexample:DrawModel()
	
end )
Output:


"Entity/EnableConstraints"
Entity:EnableConstraints( boolean toggleConstraints ) 
 Description
Toggles the constraints of this ragdoll entity on and off.


Next Update ChangeDisabling constraints will delete the constraint entities.
 Arguments

 boolean toggleConstraints


Set to true to enable the constraints and false to disable them.


"Entity/EyeAngles"
Entity:EyeAngles(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the direction a player/npc/ragdoll is looking as a world-oriented angle.



BUG


This can return an incorrect value in pods.





BUG


This can return an incorrect value in jeeps when used with Player:EnterVehicle.



 Returns

 Angle


eyeAng

 Examples
 Example
Print the local players angles

print( LocalPlayer():EyeAngles() )
Output:

When looking straight down, it might return Angle(89,-175.38,0)


"Entity/EyePos"
Entity:EyePos(  ) 
 Description
Returns the position of an Player/NPCs view, or two vectors for ragdolls (one for each eye)

 Returns

 Vector


View position of the entity.

This will be be position of the first eye for ragdoll.

 Returns

 Vector


For a ragdoll, this is the position of the second eye.


"Entity/FindTransitionSequence"
Entity:FindTransitionSequence( number currentSequence, number goalSequence ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns a transition from the given start and end sequence.
This function was only used by HL1 entities and NPCs, before the advent of sequence blending and gestures.

 Arguments

 number currentSequence


The currently playing sequence

 Arguments

 number goalSequence


The goal sequence.

 Returns

 number


The transition sequence, -1 if not available.


"Entity/Extinguish"
Entity:Extinguish(  ) 
 Description
Extinguishes the entity if it is on fire.
Has no effect if called inside EntityTakeDamage (and the attacker is the flame thats hurting the entity)

 Examples
 Example
Demonstrates the use of this function.

player.GetAll()[1]:Extinguish()
Output:

Extinguishes the first player if he is on fire.


"Entity/Fire"
Entity:Fire( string input, string param=, number delay=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description

 Arguments

 string input


The name of the input to fire

 Arguments

 string param=


The value to give to the input, can also be a number.

 Arguments

 number delay=0


Delay in seconds before firing

 Examples
 Example
If you are looking at a door, this will lock it

// Entity( 1 ) is considered a player in this example
local tr = Entity( 1 ):GetEyeTrace()
local ent = tr.Entity
if ( IsValid( ent ) then
	ent:Fire( Lock )
end


"Entity/FrameAdvance"
Entity:FrameAdvance( number delta ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Advances the cycle of an animated entity by the given delta. Since cycle is a value between 0 and 1, delta should be as well.
Animations that loop will automatically reset the cycle so you dont have to - ones that do not will stop animating once you reach the end of their sequence.

 Arguments

 number delta


Amount to advance frame by.

 Examples
 Example
From DModelPanel

function PANEL:RunAnimation()
	self.Entity:FrameAdvance( ( RealTime()-self.LastPaint ) * self.m_fAnimSpeed )	
end
Output:

Animates the entity


"Entity/FireBullets"
Entity:FireBullets( table bulletInfo, boolean suppressHostEvents=false ) 
 Description
Fires a bullet.
When used in a  WEAPON hook such as WEAPON:Think or WEAPON:PrimaryAttack, it will use Player:LagCompensation internally.



NOTE


Lag compensation will not work if this function is called in a timer, regardless if the timer was made in a WEAPON hook.


 Arguments

 table bulletInfo


The bullet data to be used. See the Bullet structure.

 Arguments

 boolean suppressHostEvents=false


Has the effect of encasing the FireBullets call in SuppressHostEvents, only works in multiplayer.


"Entity/FollowBone"
Entity:FollowBone( Entity parent=NULL, number boneid ) 
 Description
Makes an entity follow another entitys bone.
Internally this function calls Entity:SetParent( parent, boneid ) and Entity:AddEffects( EF_FOLLOWBONE ).



NOTE


If the entity vibrates, you probably need to run Entity:SetPredictable( false ) clientside.




WARNING


This function will not work if the target bones parent bone is invalid or if the bone is not used by VERTEX LOD0


 Arguments

 Entity parent=NULL


The entity to follow the bone of. If unset, removes the FollowBone effect.

 Arguments

 number boneid


The bone to follow


"Entity/EnableCustomCollisions"
Entity:EnableCustomCollisions( boolean useCustom ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Flags an entity as using custom lua defined collisions. Fixes entities having spongy player collisions or not hitting traces, such as after Entity:PhysicsFromMesh

 Arguments

 boolean useCustom


True to flag this entity

 Examples
 Example
Creates a mesh table, and assigns it as the entitys collisions

function ENT:ProceduralPlatform()
	local VERTICES = {},
	for x = 1, 32, 1, do
		for y = 1, 32, do
			table.insert( VERTICES, { pos = ( self:GetPos() + Vector( 0, 0, 1 ) ) } );
			table.insert( VERTICES, { pos = ( self:GetPos() + Vector( 0, y, 1 ) ) } );
			table.insert( VERTICES, { pos = ( self:GetPos() + Vector( x, y, 1 ) ) } );

			table.insert( VERTICES, { pos = ( self:GetPos() + Vector( 0, 0, 1 ) ) } );
			table.insert( VERTICES, { pos = ( self:GetPos() + Vector( x, y, 1 ) ) } );
			table.insert( VERTICES, { pos = ( self:GetPos() + Vector( x, 0, 1 ) ) } );
		end
	end
	self:PhysicsFromMesh( VERTICES );
	self:GetPhysicsObject():EnableMotion( false );
	self:EnableCustomCollisions( true );
end


"Entity/GetAbsVelocity"
Entity:GetAbsVelocity(  ) 
 Description
Returns the entitys velocity.



NOTE


Actually binds to CBaseEntity::GetLocalVelocity() which retrieves the velocity of the entity due to its movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision.


 Returns

 Vector


The velocity of the entity.


"Entity/GetAngles"
Entity:GetAngles(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Gets the angles of given entity.



BUG


This returns incorrect results for the local player clientside.





BUG







BUG





 Returns

 Angle


The angles of the entity.

 Examples
 Example
Prints the 1st players angles.

print( player.GetByID( 1 ):GetAngles() )
Output:

Something like 0.000 34.529 0.000 in console.


"Entity/ForcePlayerDrop"
Entity:ForcePlayerDrop(  ) 
 Description
Forces the Entity to be dropped, when it is being held by a players gravitygun or physgun.


"Entity/FindBodygroupByName"
Entity:FindBodygroupByName( string name ) 
 Description
Searches for bodygroup with given name.

 Arguments

 string name


The bodygroup name to search for.

 Returns

 number


Bodygroup ID, -1 if not found


"Entity/GetAnimTime"
Entity:GetAnimTime(  ) 
 Description
Returns the last time the entity had an animation update. Returns 0 if the entity doesnt animate.

 Returns

 number


The last time the entity had an animation update.


"Entity/GetAttachments"
Entity:GetAttachments(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns a table containing all attachments of the given entitys model.
Returns an empty table or nil in case its model has no attachments.



BUG


This can have inconsistent results in single-player.



 Returns

 table


Attachment data. See AttachmentData structure.

 Examples
 Example
All the attachments present on the Kliener player model

PrintTable( LocalPlayer():GetAttachments() )
Output:


1:
id	=	1
name	=	eyes
2:
id	=	2
name	=	lefteye
3:
id	=	3
name	=	righteye
4:
id	=	4
name	=	nose
5:
id	=	5
name	=	mouth
6:
id	=	6
name	=	tie
7:
id	=	7
name	=	pen
8:
id	=	8
name	=	chest
9:
id	=	9
name	=	hips
10:
id	=	10
name	=	lefthand
11:
id	=	11
name	=	righthand
12:
id	=	12
name	=	forward
13:
id	=	13
name	=	anim_attachment_RH
14:
id	=	14
name	=	anim_attachment_LH
15:
id	=	15
name	=	anim_attachment_head


"Entity/GetAttachment"
Entity:GetAttachment( number attachmentId ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Gets the orientation and position of the attachment by its ID, returns nothing if the attachment does not exist.



NOTE


The update rate of this function is limited by the setting of ENT.AutomaticFrameAdvance for Scripted Entities!




BUG


This will return improper values for viewmodels if used in GM:CalcView.



 Arguments

 number attachmentId


The internal ID of the attachment.

 Returns

 table


The angle and position of the attachment. See the AngPos structure. Most notably, the table contains the keys Ang and Pos.

 Examples
 Example
Grabs the muzzle position of a players view model

local vm = ply:GetViewModel()
local obj = vm:LookupAttachment( muzzle )
local muzzlepos = vm:GetAttachment( obj )


"Entity/GetBloodColor"
Entity:GetBloodColor(  ) 
 Description
Returns the blood color of this entity. This can be set with Entity:SetBloodColor.

 Returns

 number


Color from BLOOD_COLOR_ Enums


"Entity/GetBaseVelocity"
Entity:GetBaseVelocity(  ) 
 Description
Returns the entitys base velocity which is their velocity due to forces applied by other entities. This includes entity-on-entity collision or riding a treadmill.

 Returns

 Vector


The base velocity of the entity.


"Entity/GetBodygroupCount"
Entity:GetBodygroupCount( number bodygroup ) 
 Description
Returns the count of possible values for this bodygroup.
This is not the maximum value, since the bodygroups start with 0, not 1.

 Arguments

 number bodygroup


The ID of bodygroup to retrieve count of.

 Returns

 number


Count of values of passed bodygroup.


"Entity/GetBodygroup"
Entity:GetBodygroup( number id ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Gets the exact value for specific bodygroup of given entity.

 Arguments

 number id


The id of bodygroup to get value of. Starts from 0.

 Returns

 number


Current bodygroup. Starts from 0.

 Examples
 Example
Gets the value of bodygroup 2 of entity player 1 is aiming at.

print( Entity( 1 ):GetEyeTrace().Entity:GetBodygroup( 2 ) )
Output:

1 in console, if player 1 is aiming at airboat.


"Entity/GetAnimInfo"
Entity:GetAnimInfo( number animIndex ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns a table containing the number of frames, flags, name, and FPS of an entitys animation ID.



NOTE


Animation ID is not the same as sequence ID.




WARNING


Using an animation ID that is too far out of a models range of animations can crash the client/server. When there are no animations left in the model the default animation info (animIndex = 0) is returned.


 Arguments

 number animIndex


The animation ID to look up

 Returns

 table


Information about the animation

 Examples
 Example
A function that finds an entity sequences corresponding animation and returns the animation info.

function GetAnimInfoSequence( ent, seq )

	if( !IsValid( ent ) ) then return nil end

	local seqname = ent:GetSequenceName( seq )
	
	if( seqname == Unknown ) then return nil end

	local info = nil
	local done = ent:GetAnimInfo( 0 ).label	-- this is how we know when to stop
	local i = 1

	-- We dont want to increment too high or we will run into errors or possibly crashes
	while( i &lt; 1600 ) do    -- arbitrary failsafe
	
		info = ent:GetAnimInfo( i )
		
		if( string.find( info.label, @..seqname ) or string.find( info.label, a_..seqname ) ) then
			return info
		end
		
		-- the first animation info is repeated when there are no animations left in the model
		if( info.label == done ) then break end
		
		i = i + 1
		
	end

	return nil

end


"Entity/GetBodygroupName"
Entity:GetBodygroupName( number id ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Gets the name of specific bodygroup for given entity.

 Arguments

 number id


The id of bodygroup to get the name of.

 Returns

 string


The name of the bodygroup

 Examples
 Example
Demonstrates the use of this function.

print( player.GetByID( 1 ):GetEyeTrace().Entity:GetBodygroupName( 1 ) )
Output:

Weapon in console, if player 1 is aiming at airboat.


"Entity/GetBoneName"
Entity:GetBoneName( number index ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Returns name of given bone id.

 Arguments

 number index


ID of bone to lookup name of

 Returns

 string


The name of given bone

 nil in case we failed or entity doesnt have a model
 __INVALIDBONE__ in case the name cannot be read or the index is out of range.


 Examples
 Example
Will print name of bone name with id 0 for first player.

print( Entity( 1 ):GetBoneName( 0 ) )
Output:

ValveBiped.Bip01_Pelvis
 Examples
 Example
Prints all the bones of an entity.

function PrintBones( ent )
    for i=0, ent:GetBoneCount()-1 do
        print( i,ent:GetBoneName( i ) )
    end
end
Output:

0	ValveBiped.Bip01_Pelvis
1	ValveBiped.Bip01_Spine
2	ValveBiped.Bip01_Spine1
3	ValveBiped.Bip01_Spine2
4	ValveBiped.Bip01_Spine4
5	ValveBiped.Bip01_Neck1
6	ValveBiped.Bip01_Head1
7	ValveBiped.forward
8	ValveBiped.Bip01_R_Clavicle
9	ValveBiped.Bip01_R_UpperArm
10	ValveBiped.Bip01_R_Forearm
11	ValveBiped.Bip01_R_Hand
12	ValveBiped.Anim_Attachment_RH
13	ValveBiped.Bip01_L_Clavicle
14	ValveBiped.Bip01_L_UpperArm
15	ValveBiped.Bip01_L_Forearm
16	ValveBiped.Bip01_L_Hand
17	ValveBiped.Anim_Attachment_LH
18	ValveBiped.Bip01_R_Thigh
19	ValveBiped.Bip01_R_Calf
20	ValveBiped.Bip01_R_Foot
21	ValveBiped.Bip01_R_Toe0
22	ValveBiped.Bip01_L_Thigh
23	ValveBiped.Bip01_L_Calf
24	ValveBiped.Bip01_L_Foot
25	ValveBiped.Bip01_L_Toe0
26	ValveBiped.Bip01_L_Finger4
27	ValveBiped.Bip01_L_Finger41
28	ValveBiped.Bip01_L_Finger42
29	ValveBiped.Bip01_L_Finger3
30	ValveBiped.Bip01_L_Finger31
31	ValveBiped.Bip01_L_Finger32
32	ValveBiped.Bip01_L_Finger2
33	ValveBiped.Bip01_L_Finger21
34	ValveBiped.Bip01_L_Finger22
35	ValveBiped.Bip01_L_Finger1
36	ValveBiped.Bip01_L_Finger11
37	ValveBiped.Bip01_L_Finger12
38	ValveBiped.Bip01_L_Finger0
39	ValveBiped.Bip01_L_Finger01
40	ValveBiped.Bip01_L_Finger02
41	ValveBiped.Bip01_R_Finger4
42	ValveBiped.Bip01_R_Finger41
43	ValveBiped.Bip01_R_Finger42
44	ValveBiped.Bip01_R_Finger3
45	ValveBiped.Bip01_R_Finger31
46	ValveBiped.Bip01_R_Finger32
47	ValveBiped.Bip01_R_Finger2
48	ValveBiped.Bip01_R_Finger21
49	ValveBiped.Bip01_R_Finger22
50	ValveBiped.Bip01_R_Finger1
51	ValveBiped.Bip01_R_Finger11
52	ValveBiped.Bip01_R_Finger12
53	ValveBiped.Bip01_R_Finger0
54	ValveBiped.Bip01_R_Finger01
55	ValveBiped.Bip01_R_Finger02
56	ValveBiped.Bip01_L_Elbow
57	ValveBiped.Bip01_L_Ulna
58	ValveBiped.Bip01_R_Ulna
59	ValveBiped.Bip01_R_Shoulder
60	ValveBiped.Bip01_L_Shoulder
61	ValveBiped.Bip01_R_Trapezius
62	ValveBiped.Bip01_R_Wrist
63	ValveBiped.Bip01_R_Bicep
64	ValveBiped.Bip01_L_Bicep
65	ValveBiped.Bip01_L_Trapezius
66	ValveBiped.Bip01_L_Wrist
67	ValveBiped.Bip01_R_Elbow


"Entity/GetBodyGroups"
Entity:GetBodyGroups(  ) 
 Description
Returns a list of all attachments of the entity.

 Returns

 table


Bodygroups as a table of BodyGroupData structures if the entity can have bodygroups.


"Entity/GetBoneController"
Entity:GetBoneController( number boneID ) 
 Description
Returns the value of the bone controller with the specified ID.



NOTE


This is the precursor of pose parameters, and only works for Half Life 1: Source models supporting it.


 Arguments

 number boneID


ID of the bone controller. Goes from 0 to 3.

 Returns

 number


The value set on the bone controller.


"Entity/GetBoneMatrix"
Entity:GetBoneMatrix( number boneID ) 
 Description
Returns the matrix (position / rotation transform) of a given bone entity.



BUG


This can return the servers matrix during server lag.





BUG


This can return garbage serverside or a 0,0,0 fourth column (represents position) for v49 models.



 Arguments

 number boneID


The bone to retrieve matrix of.

 Bones clientside and serverside will differ


 Returns

 VMatrix


The matrix

 Some entities dont update animation every frame such as prop_physics and wont have accurate bone matrix.


"Entity/GetBoneCount"
Entity:GetBoneCount(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the amount of bones in the entity.

 Returns

 number


The amount of bones in given entity; -1 on failure.

 Examples
 Example
Prints amount of bones in player 1

print( Entity( 1 ):GetBoneCount() )
Output:

The amount of bones in player 1, which normally would be 68.


"Entity/GetBoneParent"
Entity:GetBoneParent( number bone ) 
 Description
Returns parent bone of given bone.

 Arguments

 number bone


The bode ID of the bone to get parent of

 Returns

 number


Parent bone ID or -1 if we failed for some reason.


"Entity/GetBonePosition"
Entity:GetBonePosition( number boneIndex ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns


 Description
Returns the position and angle of the given attachment, relative to the world.



BUG


This can return the servers position during server lag.





BUG


This can return garbage serverside or Vector(0,0,0) for v49 models.



 Arguments

 number boneIndex


The bone index of the bone to get the position of. See Entity:LookupBone.

 Returns

 Vector


The bones position relative to the world.

 Returns

 Angle


The bones angle relative to the world.


"Entity/GetChildBones"
Entity:GetChildBones( number boneid ) 
 Description
Returns ids of child bones of given bone.

 Arguments

 number boneid


Bone id to lookup children of

 Returns

 table


A table of bone ids


"Entity/GetClass"
Entity:GetClass(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the classname of a entity. This is often the name of the Lua file or folder containing the files for the entity

 Returns

 string


The entitys classname

 Examples
 Example
Prints the classname of the weapon that the player is holding.

print( LocalPlayer():GetActiveWeapon():GetClass() )
Output:

Prints the classname of the weapon that the player is holding. (ie weapon_crowbar)


"Entity/GetCallbacks"
Entity:GetCallbacks( string hook ) 
 Description
Returns the specified hook callbacks for this entity added with Entity:AddCallback
The callbacks can then be removed with Entity:RemoveCallback.

 Arguments

 string hook


The hook to retrieve the callbacks from, see Entity Callbacks for the possible hooks.

 Returns

 table


A table containing the callbackid and function of all the callbacks for the specified hook


"Entity/GetBrushPlane"
Entity:GetBrushPlane( number id ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns
5 Returns


 Description
Returns info about given plane of non-nodraw brush model surfaces of the entitys model. Works on worldspawn as well.

 Arguments

 number id


The index of the plane to get info of. Starts from 0.

 Returns

 Vector


The origin of the plane.

This will be either the first vertexs position (if available) or the planes normal multiplied by the planes distance.

 Returns

 Vector


The normal of the plane.

 Returns

 number


The distance of the plane.

The distance is the dot product of the planes normal and the point it was initialized with.


"Entity/GetBrushPlaneCount"
Entity:GetBrushPlaneCount(  ) 
 Description
Returns the amount of planes of non-nodraw brush model surfaces of the entitys model.

 Returns

 number


The amount of brush model planes of the entitys model.


"Entity/GetColor"
Entity:GetColor(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the color the entity is set to.



BUG


The returned color will not have the color metatable.



 Returns

 table


The color of the entity as a Color structure.

 Examples
 Example
for key, ply in pairs( player.GetAll() ) do -- Loop through all players on the server
 local col = ply:GetColor(); -- Gets the players color and assigns it to local variable col
 
 print( Printing  .. ply:Nick() .. s color! ); -- Say we are printing the players names color
 PrintTable( col ); -- Pass col into PrintTable to print to contents of col
end
Output:

Loop through all players, and print their color.


"Entity/GetCollisionGroup"
Entity:GetCollisionGroup(  ) 
 Description
Returns the entitys collision group

 Returns

 number


The collision group. See COLLISION_GROUP_ Enums


"Entity/GetCollisionBounds"
Entity:GetCollisionBounds(  ) 
 Description
Returns an entitys collision bounding box. In most cases, this will return the same bounding box as Entity:GetModelBounds unless the entity does not have a physics mesh or it has a PhysObj different from the default.



BUG


This can be out-of-sync between the client and server for weapons.



 Returns

 Vector


The minimum vector of the collision bounds

 Returns

 Vector


The maximum vector of the collision bounds


"Entity/GetChildren"
Entity:GetChildren(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Gets the children of the entity - that is, every entity whose move parent is this entity.



NOTE


This function returns Entity:SetMoveParent children, NOT Entity:SetParent!Entity:SetParent however also calls Entity:SetMoveParent.This means that some entities in the returned list might have a NULL Entity:GetParent.This also means that using this function on players will return their weapons on the client but not the server.


 Returns

 table


A list of movement children entities

 Examples
 Example
Example usage and output

-- ent is a prop_effect entity
PrintTable( ent:GetChildren() )
Output:

1	=	Entity [184][prop_dynamic]


"Entity/GetCreationID"
Entity:GetCreationID(  ) 
 Description
Returns entitys creation ID. Unlike Entity:EntIndex or Entity:MapCreationID, it will always increase and old values wont be reused.

 Returns

 number


The creation ID


"Entity/GetCreationTime"
Entity:GetCreationTime(  ) 
 Description
Returns the time the entity was created on, relative to CurTime.

 Returns

 number


The time the entity was created on.


"Entity/GetCreator"
Entity:GetCreator(  ) 
 Description
Gets the creator of the SENT.

 Returns

 Player


The creator, NULL for no creator.


"Entity/GetCustomCollisionCheck"
Entity:GetCustomCollisionCheck(  ) 
 Description
Returns whether this entity uses custom collision check set by Entity:SetCustomCollisionCheck.

 Returns

 boolean


Whether this entity uses custom collision check or not


"Entity/GetConstrainedPhysObjects"
Entity:GetConstrainedPhysObjects(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Examples

4.1 Example




 Description
Returns the two entities physobjects involved in a constraint ent, or no value if the entity is not a constraint.

 Returns

 PhysObj


phys1

 Returns

 PhysObj


phys2

 Examples
 Example
From gmsave/constraints.lua

function gmsave.ConstraintSave( ent )
 local t = {}

 t.EntOne, t.EntTwo = ent:GetConstrainedEntities()
 local PhysA, PhysB = ent:GetConstrainedPhysObjects()
 
 t.BoneOne = GetPhysicsObjectNum( t.EntOne, PhysA )
 t.BoneTwo = GetPhysicsObjectNum( t.EntTwo, PhysB )
 t.EntOne = gmsave.EntityEncode( t.EntOne )
 t.EntTwo = gmsave.EntityEncode( t.EntTwo )
 return t
end


"Entity/GetConstrainedEntities"
Entity:GetConstrainedEntities(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Examples

4.1 Example




 Description
Returns the two entities involved in a constraint ent, or nil if the entity is not a constraint.

 Returns

 Entity


ent1

 Returns

 Entity


ent2

 Examples
 Example
From gmsave/constraints.lua

function gmsave.ConstraintSave( ent )
	local t = {}

	t.EntOne, t.EntTwo = ent:GetConstrainedEntities()
	local PhysA, PhysB = ent:GetConstrainedPhysObjects()

	t.BoneOne = GetPhysicsObjectNum( t.EntOne, PhysA )
	t.BoneTwo = GetPhysicsObjectNum( t.EntTwo, PhysB )
	t.EntOne = gmsave.EntityEncode( t.EntOne )
	t.EntTwo = gmsave.EntityEncode( t.EntTwo )
	return t

end


"Entity/GetEFlags"
Entity:GetEFlags(  ) 
 Description
Returns a bit flag of all engine flags of the entity.

 Returns

 number


Engine flags, see EFL_ Enums


"Entity/GetElasticity"
Entity:GetElasticity(  ) 
 Description
Returns the elasticity of this entity, used by some flying entities such as the Helicopter NPC to determine how much it should bounce around when colliding.

 Returns

 number


elasticity


"Entity/GetDTVector"
Entity:GetDTVector( number key ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
Get a vector stored in the datatable of the entity.

 Arguments

 number key


Goes from 0 to 63.

Specifies what key to grab from datatable.

 Returns

 Vector


Requested vector.


"Entity/GetDTAngle"
Entity:GetDTAngle( number key ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
Get an angle stored in the datatable of the entity.

 Arguments

 number key


Goes from 0 to 63.

Specifies what key to grab from datatable.

 Returns

 Angle


Requested angle.


"Entity/GetFlexBounds"
Entity:GetFlexBounds( number flex ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns


 Description
Returns acceptable value range for the flex.

 Arguments

 number flex


The ID of the flex to look up bounds of

 Returns

 number


The minimum value for this flex

 Returns

 number


The maximum value for this flex


"Entity/GetEffects"
Entity:GetEffects(  ) 
 Description
Returns a bit flag of all engine effect flags of the entity.

 Returns

 number


Engine effect flags, see EF_ Enums


"Entity/GetFlexIDByName"
Entity:GetFlexIDByName( string name ) 
 Description
Returns the ID of the flex based on given name.

 Arguments

 string name


The name of the flex to get the ID of. Case sensitive.

 Returns

 number


The ID of flex

 nil if no flex with given name was found


"Entity/GetDTBool"
Entity:GetDTBool( number key ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
Get a boolean stored in the datatable of the entity.

 Arguments

 number key


Goes from 0 to 63.

Specifies what key to grab from datatable.

 Returns

 boolean


Requested boolean.


"Entity/GetDTString"
Entity:GetDTString( number key ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
Get a string stored in the datatable of the entity.

 Arguments

 number key


Goes from 0 to 3.

Specifies what key to grab from datatable.

 Returns

 string


Requested string.


"Entity/GetCycle"
Entity:GetCycle(  ) 
 Description
Returns the frame of the currently played sequence. This will be a number between 0 and 1 as a representation of sequence progress.

 Returns

 number


The frame of the currently played sequence


"Entity/GetDTEntity"
Entity:GetDTEntity( number key ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
Returns an entity stored in the datatable of the entity.

 Arguments

 number key


Goes from 0 to 63.

Specifies what key to grab from datatable.

 Returns

 Entity


Requested entity.


"Entity/GetDTFloat"
Entity:GetDTFloat( number key ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
Get a float stored in the datatable of the entity.

 Arguments

 number key


Goes from 0 to 63.

Specifies what key to grab from datatable.

 Returns

 number


Requested float.


"Entity/GetFlexName"
Entity:GetFlexName( number id ) 
 Description
Returns flex name.

 Arguments

 number id


The flex id to look up name of

 Returns

 string


The flex name


"Entity/GetFlags"
Entity:GetFlags(  ) 
 Description
Returns all flags of given entity.

 Returns

 number


Flags of given entity as a bitflag, see FL_ Enums


"Entity/GetForward"
Entity:GetForward(  ) 
 Description
Returns the forward vector of the entity, as a normalized direction vector

 Returns

 Vector


forwardDir


"Entity/GetFlexScale"
Entity:GetFlexScale(  ) 
 Description
Returns the flex scale of the entity.

 Returns

 number


The flex scale


"Entity/GetFlexNum"
Entity:GetFlexNum(  ) 
 Description
Returns the number of flexes this entity has.

 Returns

 number


The number of flexes.


"Entity/GetFlexWeight"
Entity:GetFlexWeight( number flex ) 
 Description
Returns current weight ( value ) of the flex.

 Arguments

 number flex


The ID of the flex to get weight of

 Returns

 number


The current weight of the flex


"Entity/GetGravity"
Entity:GetGravity(  ) 
 Description
Gets the gravity multiplier of the entity.

 Returns

 number


gravityMultiplier


"Entity/GetFriction"
Entity:GetFriction(  ) 
 Description
Returns how much friction an entity has. Entities default to 1 (100%) and can be higher or even negative.

 Returns

 number


friction


"Entity/GetDTInt"
Entity:GetDTInt( number key ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
Get an integer stored in the datatable of the entity.

 Arguments

 number key


Goes from 0 to 63.

Specifies what key to grab from datatable.

 Returns

 number


32-bit signed integer


"Entity/GetHitBoxBounds"
Entity:GetHitBoxBounds( number hitbox, number group ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns
6 Examples

6.1 Example




 Description
Gets the bounds (min and max corners) of a hit box.

 Arguments

 number hitbox


The number of the hit box.

 Arguments

 number group


The group of the hit box. This should be 0 in most cases.

 Returns

 Vector


Hit box mins. Will be nil if the hit box index was out of range.

 Returns

 Vector


Hit box maxs. Will be nil if the hit box index was out of range.

 Examples
 Example
Displays the mins and maxs for the clients first hitbox in the first group, which is generally the head.

local mins, maxs = LocalPlayer():GetHitBoxBounds( 0, 0 )
print( mins, maxs )
Output:

-1.250000 -6.500000 -3.190000	8.250000 3.500000 3.310000


"Entity/GetHitBoxGroupCount"
Entity:GetHitBoxGroupCount(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the number of hit box groups that an entity has.

 Returns

 number


number of hit box groups

 Examples
 Example
Prints how many hit box groups the client has

local numHitBoxGroups = LocalPlayer():GetHitBoxGroupCount()
print( numHitBoxGroups )


"Entity/GetGroundSpeedVelocity"
Entity:GetGroundSpeedVelocity(  ) 
 Description
Returns the entitys ground speed velocity, which is based on the entitys walk/run speed and/or the ground speed of their sequence ( Entity:GetSequenceGroundSpeed ). Will return an empty Vector if the entity isnt moving on the ground.

 Returns

 Vector


The ground speed velocity.


"Entity/GetGroundEntity"
Entity:GetGroundEntity(  ) 
 Description
Returns the object the entity is standing on.

 Returns

 Entity


The ground entity.


"Entity/GetHitBoxCount"
Entity:GetHitBoxCount( number group ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Gets how many hit boxes are in a given hit box group

 Arguments

 number group


The number of the hit box group

 Returns

 number


The number of hit boxes.

 Examples
 Example
Will print out how many hit boxes the client has in each of their hit box groups

local numHitBoxGroups = LocalPlayer():GetHitBoxGroupCount()

for i=0, numHitBoxGroups - 1 do
  local numHitBoxes = LocalPlayer():GetHitBoxCount( i )
  print( Hit box group  .. i ..  has  .. numHitBoxes ..  hit boxes! )
end
Output:

Hit box group 0 has 17 hit boxes!


"Entity/GetHitboxSet"
Entity:GetHitboxSet(  ) 
 Description
Returns entitys current hit box set

 Returns

 number


The current hit box set id, or no value if the entity doesnt have hit boxes

 Returns

 string


The current hit box set name, or no value if the entity doesnt have hit boxes


"Entity/GetHitboxBone"
Entity:GetHitboxBone(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use Entity:GetHitBoxBone instead.


"Entity/GetKeyValues"
Entity:GetKeyValues(  ) 
 Description
Returns a table containing all key values the entity has.



NOTE


This only includes engine defined key values. targetname is not an actual key value in-engine, use Entity:GetName for that instead. For custom key values, use GM:EntityKeyValue or ENTITY:KeyValue to capture and store them.


 Returns

 table


A table of key values.


"Entity/GetLayerCycle"
Entity:GetLayerCycle( number layerID ) 
 Description
Returns the animation cycle/frame for given layer.



NOTE


This function only works on BaseAnimatingOverlay entites!


 Arguments

 number layerID


The Layer ID

 Returns

 number


The animation cycle/frame for given layer.


"Entity/GetLayerWeight"
Entity:GetLayerWeight( number layerID ) 
 Description
Returns the current weight of the layer. See Entity:SetLayerWeight for more information.



NOTE


This function only works on BaseAnimatingOverlay entites!


 Arguments

 number layerID


The Layer ID

 Returns

 number


The current weight of the layer


"Entity/GetLocalAngles"
Entity:GetLocalAngles(  ) 
 Description
Returns the rotation of the entity relative to its parent entity.

 Returns

 Angle


Relative angle


"Entity/GetManipulateBoneScale"
Entity:GetManipulateBoneScale( number boneID ) 
 Description
Gets the entitys scale manipulation of the given bone. Normal scale is Vector( 1, 1, 1 )

 Arguments

 number boneID


The bones ID

 Returns

 Vector


The entitys scale manipulation of the given bone


"Entity/GetLocalPos"
Entity:GetLocalPos(  ) 
 Description
Returns entitys position relative to its parent.

 Returns

 Vector


Relative position


"Entity/GetHitboxSetCount"
Entity:GetHitboxSetCount(  ) 
 Description
Returns the amount of hitbox sets in the entity.

 Returns

 number


The amount of hitbox sets in the entity.


"Entity/GetMaterials"
Entity:GetMaterials(  ) 
 Description
Returns all materials of the entitys model.
This function is unaffected by Entity:SetSubMaterial as it returns the original materials.



BUG


The servers values take priority on the client.





BUG


The table returned by this function will not contain materials if they are missing from the disk/repository. This means that if you are attempting to find the ID of a material to replace with Entity:SetSubMaterial and there are missing materials on the model, all subsequent materials will be offset in the table, meaning that the ID you are trying to get will be incorrect.


 Returns

 table


A table containing full paths to the materials of the model.



BUG


This table is limited to 127 materials, even if the entity has more.


"Entity/GetMaterial"
Entity:GetMaterial(  ) 
 Description
Returns the material override for this entity.
Returns an empty string if no material override exists. Use Entity:GetMaterials to list its default materials.



BUG


The servers value takes priority on the client.



 Returns

 string


material


"Entity/GetModel"
Entity:GetModel(  ) 
 Description
Gets the model of given entity.



NOTE


This does not necessarily return the models path, as is the case for brush and virtual models.


 Returns

 string


The entitys model. Will be a filesystem path for most models.


"Entity/GetManipulateBoneJiggle"
Entity:GetManipulateBoneJiggle( number boneID ) 
 Description
Validation required.
This page contains possibly incorrect or incomplete information. Further testing is required.
Returns the jiggle amount of the entitys bone. Seems to be broken.

 Arguments

 number boneID


The bone ID

 Returns

 number


Returns a value ranging from 0 to 255 depending on the value set with Entity:ManipulateBoneJiggle.


"Entity/GetLocalAngularVelocity"
Entity:GetLocalAngularVelocity(  ) 
 Description
Returns the non-VPhysics angular velocity of the entity relative to its parent entity.

 Returns

 Angle


The velocity


"Entity/GetLayerDuration"
Entity:GetLayerDuration( number layerID ) 
 Description
Returns the duration of given layer.



NOTE


This function only works on BaseAnimatingOverlay entites!


 Arguments

 number layerID


The Layer ID

 Returns

 number


The duration of the layer


"Entity/GetMaterialType"
Entity:GetMaterialType(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the surface material of this entity.

 Returns

 number


Surface material. See MAT_ Enums

 Examples
 Example
Prints the MAT_ enum name for every prop on the map.

local function BackwardsEnums( enumname ) -- Helper function to build our table of values.
	local backenums = {}


	for k, v in pairs( _G ) do
		if ( type( k ) == string and string.find( k, ^..enumname ) then
			backenums[ v ] = k
		end
	end

	return backenums
end

local MAT = BackwardsEnums( MAT_ )

local validclasses = { prop_physics = true, prop_physics_multiplayer = true, prop_dynamic = true }

for k, v in pairs( ents.GetAll() ) do
	if ( validclasses[ v:GetClass() ] ) then
		print( v:GetModel(), MAT[ v:GetMaterialType() ] or UNKNOWN )
	end
end
Output:

models/props_interiors/furniture_couch01a.mdl	MAT_DIRT
models/props/cs_office/offinspd.mdl	MAT_GLASS
models/props/cs_office/offinspf.mdl	MAT_GLASS
models/props_wasteland/controlroom_desk001b.mdl	MAT_METAL
models/props_junk/wood_crate002a.mdl	MAT_WOOD
models/props_junk/wood_crate002a.mdl	MAT_WOOD
models/props_junk/wood_crate001a_damaged.mdl	MAT_WOOD
models/props_wasteland/controlroom_desk001a.mdl	MAT_METAL
models/props_wasteland/controlroom_chair001a.mdl	MAT_METAL
models/props_c17/tools_wrench01a.mdl	MAT_METAL
models/props/cs_office/radio.mdl	MAT_COMPUTER
models/props_junk/pushcart01a.mdl	MAT_METAL
models/props_wasteland/kitchen_shelf001a.mdl	MAT_METAL
models/props_wasteland/cafeteria_table001a.mdl	MAT_WOOD
models/props_c17/furniturecouch001a.mdl	MAT_DIRT
models/props_c17/furnituretable003a.mdl	MAT_WOOD
models/combine_gate_vehicle.mdl	UNKNOWN
models/props_junk/sawblade001a.mdl	MAT_METAL
models/props/cs_office/offinspf.mdl	MAT_GLASS
models/props_junk/wood_crate001a.mdl	MAT_WOOD
...


"Entity/GetModelBounds"
Entity:GetModelBounds(  ) 
 Description
Returns the entitys model bounds. This is different than the collision bounds/hull. This is not scaled with Entity:SetModelScale, and will return the models original, unmodified mins and maxs.

 Returns

 Vector


The minimum vector of the bounds

 Returns

 Vector


The maximum vector of the bounds


"Entity/GetModelPhysBoneCount"
Entity:GetModelPhysBoneCount(  ) 
 Description
Gets the physics bone count of the entitys model. This is only applicable to ragdoll models and only to anim type Scripted Entities.

 Returns

 number


How many physics bones exist on the model.


"Entity/GetInternalVariable"
Entity:GetInternalVariable( string VariableName ) 
 Description
An interface for accessing internal key values on entities.
This function returns variables created with DEFINE_KEYFIELD in C++ entities.
See Entity:GetSaveTable for a more detailed explanation.



BUG


This is missing prediction fields and most of the datatable clientside.



 Arguments

 string VariableName


Name of variable corresponding to an entity save value.

 Returns

 any


The internal variable value


"Entity/GetManipulateBoneAngles"
Entity:GetManipulateBoneAngles( number boneID ) 
 Description
Gets the entitys angle manipulation of the given bone. This is relative to the default angle, so the angle is zero when unmodified.

 Arguments

 number boneID


The bones ID

 Returns

 Angle


The entitys angle manipulation of the given bone.


"Entity/GetManipulateBonePosition"
Entity:GetManipulateBonePosition( number boneId ) 
 Description
Gets the entitys position manipulation of the given bone. This is relative to the default position, so it is zero when unmodified.

 Arguments

 number boneId


The bones ID

 Returns

 Vector


The entitys position manipulation of the given bone.


"Entity/GetModelRadius"
Entity:GetModelRadius(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Gets the models radius.

 Returns

 number


The radius of the model

 Examples
 Example
Example usage of the function, tested on player.

print( Entity( 1 ):GetModelRadius() )
Output:

72


"Entity/GetMaxHealth"
Entity:GetMaxHealth(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the max health that the entity was given. It can be set via Entity:SetMaxHealth.

 Returns

 number


Max health.

 Examples
 Example
Prints the maximum health set for player 1.

print( Entity( 1 ):GetMaxHealth() )
Output:

By default, 100.


"Entity/GetMoveCollide"
Entity:GetMoveCollide(  ) 
 Description
Returns the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide?

 Returns

 number


The move collide type, see MOVECOLLIDE_ Enums


"Entity/GetMomentaryRotButtonPos"
Entity:GetMomentaryRotButtonPos( Angle turnAngle ) 
 Description
Returns the amount a momentary_rot_button entity is turned based on the given angle. 0 meaning completely turned closed, 1 meaning completely turned open.

 Arguments

 Angle turnAngle


The angle of rotation to compare - usually should be Entity:GetAngles.

 Returns

 number


The amount the momentary_rot_button is turned, ranging from 0 to 1, or nil if the entity is not a momentary_rot_button.


"Entity/GetMoveParent"
Entity:GetMoveParent(  ) 
 Description
Returns the movement parent of this entity.
See Entity:SetMoveParent for more info.

 Returns

 Entity


The movement parent of this entity.


"Entity/GetMoveType"
Entity:GetMoveType(  ) 
 Description
Returns the entitys movetype

 Returns

 number


Move type. See MOVETYPE_ Enums


"Entity/GetName"
Entity:GetName(  ) 
 Description
Returns the mapping name of this entity.

 Returns

 string


The name of the Entity


"Entity/GetNetworkedAngle"
Entity:GetNetworkedAngle( string key, Angle fallback=Angle( 0, 0, 0 ) ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use Entity:GetNWAngle instead.
Retrieves a networked angle value at specified index on the entity that is set by Entity:SetNetworkedAngle.

 Arguments

 string key


The key that is associated with the value

 Arguments

 Angle fallback=Angle( 0, 0, 0 )


The value to return if we failed to retrieve the value. ( If it isnt set )

 Returns

 Angle


The retrieved value


"Entity/GetModelRenderBounds"
Entity:GetModelRenderBounds(  ) 
 Description
Validation required.
This page contains possibly incorrect or incomplete information. Further testing is required.
Returns the entitys model render bounds. By default this will return the same bounds as Entity:GetModelBounds.

 Returns

 Vector


The minimum vector of the bounds

 Returns

 Vector


The maximum vector of the bounds


"Entity/GetNetworkedBool"
Entity:GetNetworkedBool( string key, boolean fallback=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use Entity:GetNWBool instead.
Retrieves a networked boolean value at specified index on the entity that is set by Entity:SetNetworkedBool.

 Arguments

 string key


The key that is associated with the value

 Arguments

 boolean fallback=false


The value to return if we failed to retrieve the value. ( If it isnt set )

 Returns

 boolean


The retrieved value


"Entity/GetNetworkedEntity"
Entity:GetNetworkedEntity( string key, Entity fallback=NULL ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use Entity:GetNWEntity instead.
Retrieves a networked float value at specified index on the entity that is set by Entity:SetNetworkedEntity.

 Arguments

 string key


The key that is associated with the value

 Arguments

 Entity fallback=NULL


The value to return if we failed to retrieve the value. ( If it isnt set )

 Returns

 Entity


The retrieved value


"Entity/GetNetworkedInt"
Entity:GetNetworkedInt( string key, number fallback=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use Entity:GetNWInt instead.
Retrieves a networked integer value at specified index on the entity that is set by Entity:SetNetworkedInt.

 Arguments

 string key


The key that is associated with the value

 Arguments

 number fallback=0


The value to return if we failed to retrieve the value. ( If it isnt set )

 Returns

 number


The retrieved value


"Entity/GetNetworkAngles"
Entity:GetNetworkAngles(  ) 
 Description
Gets networked angles for entity.

 Returns

 Angle


angle


"Entity/GetModelScale"
Entity:GetModelScale(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Gets the selected entitys model scale.

 Returns

 number


Scale of that entitys model.

 Examples
 Example
This example shows how one can get the model scale of their self.

lua_run_cl print( LocalPlayer():GetModelScale() )
Output:

1


"Entity/GetNetworkedString"
Entity:GetNetworkedString( string key, string fallback= ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use Entity:GetNWString instead.
Retrieves a networked string value at specified index on the entity that is set by Entity:SetNetworkedString.

 Arguments

 string key


The key that is associated with the value

 Arguments

 string fallback=


The value to return if we failed to retrieve the value. ( If it isnt set )

 Returns

 string


The retrieved value


"Entity/GetNoDraw"
Entity:GetNoDraw(  ) 
 Description
Returns if the entitys rendering and transmitting has been disabled.



NOTE


This is equivalent to calling Entity:IsEffectActive( EF_NODRAW )


 Returns

 boolean


Whether the entitys rendering and transmitting has been disabled.


"Entity/GetNetworkedVector"
Entity:GetNetworkedVector( string key, Vector fallback=Vector( 0, 0, 0 ) ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use Entity:GetNWVector instead.
Retrieves a networked vector value at specified index on the entity that is set by Entity:SetNetworkedVector.

 Arguments

 string key


The key that is associated with the value

 Arguments

 Vector fallback=Vector( 0, 0, 0 )


The value to return if we failed to retrieve the value. ( If it isnt set )

 Returns

 Vector


The retrieved value


"Entity/GetNetworkedFloat"
Entity:GetNetworkedFloat( string key, number fallback=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use Entity:GetNWFloat instead.
Retrieves a networked float value at specified index on the entity that is set by Entity:SetNetworkedFloat.
Seems to be the same as Entity:GetNetworkedInt.

 Arguments

 string key


The key that is associated with the value

 Arguments

 number fallback=0


The value to return if we failed to retrieve the value. ( If it isnt set )

 Returns

 number


The retrieved value


"Entity/GetNetworkedVarProxy"
Entity:GetNetworkedVarProxy( string name ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should be using Entity:GetNWVarProxy instead.
Returns callback function for given NWVar of this entity.



NOTE


Currently this function only works for the NW2Var system (accessed by adding a 2 in between Networked and Var for most NetworkedVar functions), which will replace the original one at some point in the future


 Arguments

 string name


The name of the NWVar to get callback of.

 Returns

 function


The callback of given NWVar, if any.

 Examples
 Example
Prints callback function of a NWVar called Key of Player 1.

print( Entity( 1 ):GetNetworkedVarProxy( Key ) )
Entity( 1 ):SetNetworkedVarProxy( Key, print )
print( Entity( 1 ):GetNetworkedVarProxy( Key ) )
Output:

nil
function: builtin#25


"Entity/GetNetworkOrigin"
Entity:GetNetworkOrigin(  ) 
 Description
Gets networked origin for entity.

 Returns

 Vector


origin


"Entity/GetNumBodyGroups"
Entity:GetNumBodyGroups(  ) 
 Description
Returns the body group count of the entity.

 Returns

 number


Amount of bodygroups the entitys model has


"Entity/GetNWBool"
Entity:GetNWBool( string key, any fallback=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Retrieves a networked boolean value at specified index on the entity that is set by Entity:SetNWBool.

 Arguments

 string key


The key that is associated with the value

 Arguments

 any fallback=false


The value to return if we failed to retrieve the value. (If it isnt set)

 Returns

 boolean


The retrieved value


"Entity/GetNWInt"
Entity:GetNWInt( string key, any fallback=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Retrieves a networked integer (whole number) value that was previously set by Entity:SetNWInt.



BUG


This function will not round decimal values as it actually networks a float internally.



 Arguments

 string key


The key that is associated with the value

 Arguments

 any fallback=0


The value to return if we failed to retrieve the value (If it isnt set).

 Returns

 number


The stored integer, or the fallback if it doesnt exist.


"Entity/GetNWAngle"
Entity:GetNWAngle( string key, any fallback=Angle( 0, 0, 0 ) ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Retrieves a networked angle value at specified index on the entity that is set by Entity:SetNWAngle.

 Arguments

 string key


The key that is associated with the value

 Arguments

 any fallback=Angle( 0, 0, 0 )


The value to return if we failed to retrieve the value. (If it isnt set)

 Returns

 Angle


The retrieved value


"Entity/GetNWEntity"
Entity:GetNWEntity( string key, any fallback=NULL ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Retrieves a networked entity value at specified index on the entity that is set by Entity:SetNWEntity.

 Arguments

 string key


The key that is associated with the value

 Arguments

 any fallback=NULL


The value to return if we failed to retrieve the value. (If it isnt set)

 Returns

 Entity


The retrieved value


"Entity/GetNWFloat"
Entity:GetNWFloat( string key, any fallback=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Retrieves a networked float value at specified index on the entity that is set by Entity:SetNWFloat.

 Arguments

 string key


The key that is associated with the value

 Arguments

 any fallback=0


The value to return if we failed to retrieve the value. (If it isnt set)

 Returns

 number


The retrieved value


"Entity/GetNWVarProxy"
Entity:GetNWVarProxy( any key ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns callback function for given NWVar of this entity.



NOTE


Currently this function only works for the NW2Var system (accessed by adding a 2 in between NW and Var for most NWVar functions), which will replace the original one at some point in the future


 Arguments

 any key


The key of the NWVar to get callback of.

 Returns

 function


The callback of given NWVar, or nil if not found.

 Examples
 Example
Prints callback function of a NWVar called Key of Player 1.

print( Entity( 1 ):GetNWVarProxy( Key ) )
Entity( 1 ):SetNWVarProxy( Key, print )
print( Entity( 1 ):GetNWVarProxy( Key ) )
Output:

nil
function: builtin#25


"Entity/GetNumPoseParameters"
Entity:GetNumPoseParameters(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the number of pose parameters this entity has.

 Returns

 number


Amount of pose parameters the entity has

 Examples
 Example
Prints all the entities poses.
The entity used to generate the output is a model of the combine helicopter.

for i=0, ent:GetNumPoseParameters() - 1 do
	local min, max = ent:GetPoseParameterRange( i )
	print( ent:GetPoseParameterName( i ) ..   .. min ..  /  .. max )
end
Output:

weapon_pitch -90 / 20
weapon_yaw -40 / 40
rudder -45 / 45


"Entity/GetNetworkedVarTable"
Entity:GetNetworkedVarTable(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should be using Entity:GetNWVarTable instead.
Returns all the networked variables in an entity.


Next Update ChangeThis feature is currently unavailable. It will be released in a future update.
 Returns

 table


Key-Value table of all networked variables.

 Examples
 Example
Prints all NWVars that exist for Player 1.

PrintTable( Entity( 1 ):GetNWVarTable() )
Output:

UserGroup	=	owner


"Entity/GetParentAttachment"
Entity:GetParentAttachment(  ) 
 Description
Returns the attachment index of the entitys parent. Returns 0 if the entity is not parented to a specific attachment or if it isnt parented at all.
This is set by second argument of Entity:SetParent or the SetParentAttachment input.

 Returns

 number


The parented attachment index


"Entity/GetParentPhysNum"
Entity:GetParentPhysNum(  ) 
 Description
If the entity is parented to an entity that has a model with multiple physics objects (like a ragdoll), this is used to retrieve what physics object number the entity is parented to on its parent.

 Returns

 number


The physics object id, or nil if the entity has no parent


"Entity/GetParent"
Entity:GetParent(  ) 
 Description
Returns the parent entity of this entity.

 Returns

 Entity


parentEntity


"Entity/GetNWVarTable"
Entity:GetNWVarTable(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns all the networked variables in an entity.


Next Update ChangeThis feature is currently unavailable. It will be released in a future update.
 Returns

 table


Key-Value table of all networked variables.

 Examples
 Example
Prints all NWVars that exist for Player 1.

PrintTable( Entity( 1 ):GetNWVarTable() )
Output:

UserGroup	=	owner


"Entity/GetNWString"
Entity:GetNWString( string key, any fallback= ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Retrieves a networked string value at specified index on the entity that is set by Entity:SetNWString.

 Arguments

 string key


The key that is associated with the value

 Arguments

 any fallback=


The value to return if we failed to retrieve the value. (If it isnt set)

 Returns

 string


The retrieved value

 Examples
 Example
Prints the players rank

print( Entity( 1 ):GetNWString( usergroup ) )
Output:

superadmin in single-player


"Entity/GetOwner"
Entity:GetOwner(  ) 
 Description
Returns the owner entity of this entity. See Entity:SetOwner for more info.

 Returns

 Entity


The owner entity of this entity.


"Entity/GetPersistent"
Entity:GetPersistent(  ) 
 Description
Returns whether the entity is persistent or not.
See Entity:SetPersistent for more information on persistence.

 Returns

 boolean


True if the entity is set to be persistent.


"Entity/GetPhysicsObjectNum"
Entity:GetPhysicsObjectNum( number physNum ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Returns a specific physics object from an entity with multiple PhysObjects (like ragdolls)
See also Entity:TranslateBoneToPhysBone.

 Arguments

 number physNum


The number corresponding to the PhysObj to grab. Starts at 0.

 Returns

 PhysObj


The physics object

 Examples
 Example
When run, if the player is dead it will throw their ragdoll up in the air by their head.

if ( !LocalPlayer():Alive() &amp;&amp; LocalPlayer():GetRagdollEntity() ) then
	local ent = LocalPlayer():GetRagdollEntity()
	local head = ent:GetPhysicsObjectNum( 10 ) // 10 is usually the bone number of the head.
	head:ApplyForceCenter( Vector( 0, 0, 6000 ) )
end


 Examples
 Example
Example function that applies force to all physics objects of given entity.

function ApplySomeForce( ent )
	for i = 0, ent:GetPhysicsObjectCount() - 1 do
		local phys = ent:GetPhysicsObjectNum( i )
		phys:ApplyForceCenter( Vector( 0, 0, 10000 ) )
	end
end


"Entity/GetNWVector"
Entity:GetNWVector( string key, any fallback=Vector( 0, 0, 0 ) ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Retrieves a networked vector value at specified index on the entity that is set by Entity:SetNWVector.

 Arguments

 string key


The key that is associated with the value

 Arguments

 any fallback=Vector( 0, 0, 0 )


The value to return if we failed to retrieve the value. (If it isnt set)

 Returns

 Vector


The retrieved value


"Entity/GetPos"
Entity:GetPos(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Gets the position of entity in world.

 Returns

 Vector


The position of the entity.

 Examples
 Example
Utility command that would give you the position of the entity you are looking at.

concommand.Add( entity_pos, function( ply )
	local tr = ply:GetEyeTrace()
	if ( IsValid( tr.Entity ) ) then
		print( Entity position:, tr.Entity:GetPos() )
	else
		print( Crosshair position:, tr.HitPos )
	end
end )


"Entity/GetPoseParameterRange"
Entity:GetPoseParameterRange( number id ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns


 Description
Returns pose parameter range

 Arguments

 number id


Pose parameter ID to look up

 Returns

 number


The minimum value

 Returns

 number


The maximum value


"Entity/GetPhysicsObject"
Entity:GetPhysicsObject(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the entitys physics object, if the entity has physics.

 Returns

 PhysObj


The entitys physics object.

 Examples
 Example
Gets the mass of an entity.

local phys = ent:GetPhysicsObject()
if ( IsValid( phys ) ) then -- Always check with IsValid! The ent might not have physics!
	return phys:GetMass()
else
	return 0
end


"Entity/GetPoseParameter"
Entity:GetPoseParameter( string name ) 
 Description
Returns the pose parameter value

 Arguments

 string name


Pose parameter name to look up

 Returns

 number


Value of given pose parameter.



WARNING


This value will be from 0 - 1 on the client and from minimum range to maximum range on the server! Youll have to remap this value clientside to Entity:GetPoseParameterRanges returns if you want get the actual pose parameter value. See Entity:SetPoseParameters example.


"Entity/GetPlaybackRate"
Entity:GetPlaybackRate(  ) 
 Description
Returns the playback rate of the main sequence on this entity, with 1.0 being the default speed.

 Returns

 number


The playback rate.


"Entity/GetPoseParameterName"
Entity:GetPoseParameterName( number id ) 
 Description
Returns name of given pose parameter

 Arguments

 number id


Id of the pose paremeter

 Returns

 string


Name of given pose parameter


"Entity/GetPhysicsObjectCount"
Entity:GetPhysicsObjectCount(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the number of physics objects an entity has (usually 1 for non-ragdolls)

 Returns

 number


numObjects

 Examples
 Example
Finds all the Physics Objects in a ragdoll and applies an upward force

for i=0, ragdoll:GetPhysicsObjectCount() - 1 do -- ragdoll being a ragdoll entity
 
	local phys = ragdoll:GetPhysicsObjectNum( i )
	phys:ApplyForceCenter( Vector( 0, 0, 10000 ) )

end


"Entity/GetPredictable"
Entity:GetPredictable(  ) 
 Description
Returns whether this entity is predictable or not.
See Entity:SetPredictable for more information

 Returns

 boolean


Whether this entity is predictable or not.


"Entity/GetPhysicsAttacker"
Entity:GetPhysicsAttacker( number timeLimit ) 
 Description
Returns player who is claiming kills of physics damage the entity deals.

 Arguments

 number timeLimit


The time to check if the entity was still a proper physics attacker.



NOTE


Some entities such as the Combine Ball disregard the time limit and always return the physics attacker.



 Returns

 Player


The player. If entity that was set is not a player, it will return NULL entity.


"Entity/GetRagdollOwner"
Entity:GetRagdollOwner(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the entity which the ragdoll came from. The opposite of Player:GetRagdollEntity.

 Returns

 Entity


The entity who owns the ragdoll.

 Examples
 Example
Loop through all player ragdolls and print their owners.

for e, ent in pairs( ents.GetAll() ) do
	if( ent:GetRagdollOwner() ) then
		print( ent:GetRagdollOwner() )
	end
end
Output:

While a player is dead and their ragdoll is spawned this returns: Player [1][PlayerName]


"Entity/GetRenderBounds"
Entity:GetRenderBounds(  ) 
 Description
Returns render bounds of the entity. Can be overridden by Entity:SetRenderBounds.
If the render bounds are not inside players view, the entity will not be drawn!

 Returns

 Vector


The minimum vector of the bounds

 Returns

 Vector


The maximum vector of the bounds.


"Entity/GetRenderAngles"
Entity:GetRenderAngles(  ) 
 Description
Returns the entitys render angles, set by Entity:SetRenderAngles in a drawing hook.

 Returns

 Angle


The entitys render angles


"Entity/GetRenderGroup"
Entity:GetRenderGroup(  ) 
 Description
Returns the render group of the entity.

 Returns

 number


The render group. See RENDERGROUP_ Enums


"Entity/GetRenderFX"
Entity:GetRenderFX(  ) 
 Description
Returns current render FX of the entity.

 Returns

 number


The current render FX of the entity. See kRenderFx_ Enums


"Entity/GetRenderMode"
Entity:GetRenderMode(  ) 
 Description
Returns the render mode of the entity.

 Returns

 number


The render Mode. See RENDERMODE_ Enums


"Entity/GetRenderOrigin"
Entity:GetRenderOrigin(  ) 
 Description
Returns the entitys render origin, set by Entity:SetRenderOrigin in a drawing hook.

 Returns

 Vector


The entitys render origin


"Entity/GetRight"
Entity:GetRight(  ) 
 Description
Returns the rightward vector of the entity, as a normalized direction vector

 Returns

 Vector


rightDir


"Entity/GetRotatedAABB"
Entity:GetRotatedAABB( Vector min, Vector max ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns
6 Examples

6.1 Example




 Description
Returns the min and max of the entitys axis-aligned bounding box.

 Arguments

 Vector min


Minimum extent of the bounding box.

 Arguments

 Vector max


Maximum extent of the bounding box.

 Returns

 Vector


Minimum extent of the AABB

 Returns

 Vector


Maximum extent of the AABB

 Examples
 Example
The entitys AABB center (regardless of model origin) is stored in pos.

local a, b = ent:GetRotatedAABB( v:OBBMins(), v:OBBMaxs() )
local pos = ( ent:GetPos() + ( a + b ) / 2 )
Output:

pos has the coordinates of the AABB center.


"Entity/GetSequenceCount"
Entity:GetSequenceCount(  ) 
 Description
Returns the amount of sequences ( animations ) the entitys model has.

 Returns

 number


The amount of sequences ( animations ) the entitys model has.


"Entity/GetSequenceActivity"
Entity:GetSequenceActivity( number seq ) 
 Description
Return activity id out of sequence id. Opposite of Entity:SelectWeightedSequence.

 Arguments

 number seq


The sequence ID

 Returns

 number


The activity ID, ie ACT_ Enums


"Entity/GetSequenceList"
Entity:GetSequenceList(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns a list of all sequences ( animations ) the model has.

 Returns

 table


The list of all sequences ( animations ) the model has. The indices start with 0!

 Examples
 Example
Example showing table structure. Prints a list of player model sequences.

PrintTable( Entity( 1 ):GetSequenceList() )
Output:

0	=	ragdoll
1	=	reference
2	=	idle_all_01
3	=	idle_all_02
4	=	idle_all_angry
5	=	idle_all_scared
6	=	idle_all_cower
7	=	cidle_all
8	=	swim_idle_all
9	=	sit
10	=	menu_walk
11	=	menu_combine
12	=	menu_gman
13	=	walk_all
-- The rest of the sequences


"Entity/GetSequenceMovement"
Entity:GetSequenceMovement( number sequenceId, number startCycle, number endCyclnde ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Returns
7 Returns


 Description
Returns the delta movement and angles of a sequence of the entitys model.

 Arguments

 number sequenceId


The sequence index. See Entity:GetSequenceName.

 Arguments

 number startCycle


The sequence start cycle. 0 is the start of the animation, 1 is the end.

 Arguments

 number endCyclnde


The sequence end cycle. 0 is the start of the animation, 1 is the end. Values like 2, etc are allowed.

 Returns

 boolean


Whether the operation was successful

 Returns

 Vector


The delta vector of the animation, how much the models origin point moved.

 Returns

 Angle


The delta angle of the animation.


"Entity/GetSequenceActivityName"
Entity:GetSequenceActivityName( number sequenceId ) 
 Description
Returns the activity name for the given sequence id.

 Arguments

 number sequenceId


The sequence id.

 Returns

 string


The ACT_ Enums as a string, returns Not Found! with an invalid sequence and No model! when no model is set.


"Entity/GetSequenceGroundSpeed"
Entity:GetSequenceGroundSpeed( number sequenceId ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the ground speed of the entitys sequence.

 Arguments

 number sequenceId


The sequence ID.

 Returns

 number


The ground speed of this sequence.

 Examples
 Example
Move the NextBot based on the ground speed of its walking animation (within its coroutine).



NOTE


In most cases its better to use NextBot:BodyMoveXY instead.


local sequence = self:LookupSequence( walk_all )

if ( sequence ) then
	self:StartActivity( ACT_WALK )
	self:SetSequence( sequence )
	self.loco:SetDesiredSpeed( self:GetSequenceGroundSpeed( sequence ) )
end


"Entity/GetSequenceMoveDist"
Entity:GetSequenceMoveDist( number sequenceId ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns an entitys sequence move distance (the change in position over the course of the entire sequence).

 Arguments

 number sequenceId


The sequence index.

 Returns

 number


The move distance of the sequence.

 Examples
 Example
Experiment which demonstrates that dividing the sequence move distance by Entity:SequenceDuration results in a value extremely close to Entity:GetSequenceGroundSpeed.

local ply, seq, move_dist, seq_dur, ground_speed = nil, nil, nil, nil, nil

function GM:Think()

	-- Player 1
	ply = Entity( 1 )
	
	-- Current sequence
	seq = ply:GetSequence()
	
	-- The move distance
	move_dist = ply:GetSequenceMoveDist( seq )
	
	if( move_dist == 0 ) then return end	-- If it doesnt move, dont bother
	
	-- The sequence duration
	seq_dur = ply:SequenceDuration( seq )
	
	-- Actual sequence ground speed
	ground_speed = ply:GetSequenceGroundSpeed( seq )
	
	-- Compare the calculated value to the actual value
	print( tostring( ground_speed-( move_dist/seq_dur ) ) )

end
Output:

A sample of some of the calculated vs. actual value differences during a sprint forward followed by an abrupt stop.
-3.3345255872064e-006
3.3614563506035e-006
0
1.557984873557e-006


"Entity/GetSequenceInfo"
Entity:GetSequenceInfo( number sequenceId ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns a table of information about an entitys sequence.

 Arguments

 number sequenceId


The sequence id of the entity.

 Returns

 table


Table of information about the entitys sequence.

 Examples
 Example
Draw each players current sequence bounding box with sequence name, activity number, and activity name above their head.

function GM:PostPlayerDraw( ply )

	seqinfo = ply:GetSequenceInfo( ply:GetSequence() )
	seqinfo.player = ply
	
	render.DrawWireframeBox( ply:GetPos(), ply:GetAngles(), seqinfo.bbmin, seqinfo.bbmax, color_white, true )
	
end

function GM:HUDPaint()

	local seqinfo, textpos = nil, nil

	for p, ply in pairs( player.GetAll() ) do
	
		seqinfo = ply:GetSequenceInfo( ply:GetSequence() )
		textpos = ( ply:GetPos() + Vector( 0, 0, seqinfo.bbmax.z + 10 ) ):ToScreen()
	
		if ( textpos.visible ) then
			draw.SimpleText( seqinfo.label, GModNotify, textpos.x, textpos.y, color_white, TEXT_ALIGN_CENTER )
			draw.SimpleText( seqinfo.activity..: ..seqinfo.activityname, GModNotify, textpos.x, textpos.y+20, color_white, TEXT_ALIGN_CENTER )
		end
	
	end

end
Output:


"Entity/GetSequence"
Entity:GetSequence(  ) 
 Description
Return the index of the model sequence that is currently active for the entity.

 Returns

 number


The index of the model sequence.


"Entity/GetSolidFlags"
Entity:GetSolidFlags(  ) 
 Description
Returns solid flag(s) of an entity.

 Returns

 number


The flag(s) of the entity, see FSOLID_ Enums.


"Entity/GetSequenceName"
Entity:GetSequenceName( number index ) 
 Description
Return the name of the sequence for the index provided.
Refer to Entity:GetSequence to find the current active sequence on this entity.

 Arguments

 number index


The index of the sequence to look up.

 Returns

 string


Name of the sequence.


"Entity/GetShouldPlayPickupSound"
Entity:GetShouldPlayPickupSound(  ) 
 Description
Checks if the entity plays a sound when picked up by a player.



BUG


This will return nil if Entity:SetShouldPlayPickupSound has not been called.



 Returns

 boolean


True if it plays the pickup sound, false otherwise.


"Entity/GetShouldServerRagdoll"
Entity:GetShouldServerRagdoll(  ) 
 Description
Returns if entity should create a server ragdoll on death or a client one.

 Returns

 boolean


Returns true if ragdoll will be created on server, false if on client


"Entity/GetSpawnFlags"
Entity:GetSpawnFlags(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the bitwise spawn flags used by the entity.

 Returns

 number


The spawn flags of the entity

 Examples
 Example
An alternative to Entity:HasSpawnFlags

local sf = ent:GetSpawnFlags()

if( bit.band( sf, SF_PHYSPROP_PREVENT_PICKUP ) &gt; 0 ) then
	print( This prop cannot be picked up. )
end


"Entity/GetSpawnEffect"
Entity:GetSpawnEffect(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns if we should show a spawn effect on this entity.

 Returns

 boolean


The flag to allow or disallow the spawn effect.

 Examples
 Example
Taken from sandboxs cl_init.lua

function GM:NetworkEntityCreated( ent )

	--
	-- If the entity wants to use a spawn effect
	-- ) then create a propspawn effect if ( the entity was
	-- created within the last second ( this function gets called
	-- on every entity when joining a server )
	--

	if ( ent:GetSpawnEffect() &amp;&amp; ent:GetCreationTime() &gt; ( CurTime() - 1.0 ) ) then
	
		local ed = EffectData()
			ed:SetEntity( ent )
		util.Effect( propspawn, ed, true, true )

	end

end
Output:

Checks if the entity has the spawnEffect flag set to true and checks if it was created in the last second, and then shows the propspawn effect.


"Entity/GetTable"
Entity:GetTable(  ) 
 Description
Returns the table that contains all values saved within the entity.

 Returns

 table


entTable


"Entity/GetTouchTrace"
Entity:GetTouchTrace(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the last trace used in the collision callbacks such as ENTITY:StartTouch, ENTITY:Touch and ENTITY:EndTouch.



NOTE


This returns the last collision trace used, regardless of the entity that caused it. As such, its only reliable when used in the hooks mentioned above


 Returns

 table


The TraceResult structure

 Examples
 Example
Dispatches an explosion at the point of impact with another entity.

function ENT:Touch( otherEntity )
	local tr = self:GetTouchTrace()
	local hitPos = tr.HitPos

	local effectdata = EffectData()
	effectdata:SetOrigin( hitPos )
	util.Effect( Explosion, effectdata )

end


"Entity/GetSequenceMoveYaw"
Entity:GetSequenceMoveYaw( number seq ) 
 Description
Returns the change in heading direction in between the start and the end of the sequence.

 Arguments

 number seq


The sequence index. See Entity:LookupSequence.

 Returns

 number


The yaw delta. Returns 99999 for no movement.


"Entity/GetSolid"
Entity:GetSolid(  ) 
 Description
Returns solid type of an entity.

 Returns

 number


The solid type. See the SOLID_ Enums.


"Entity/GetSubModels"
Entity:GetSubModels(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns a list of models included into the entitys model in the .qc file.

 Returns

 table


The list of models included into the entitys model in the .qc file.

 Examples
 Example
Example structure of the table. Prints into console sub models of a player model.

PrintTable( Entity( 1 ):GetSubModels() )
Output:

1:
		name	=	models/m_anm.mdl
		id	=	0


"Entity/GetSkin"
Entity:GetSkin(  ) 
 Description
Returns the skin index of the current skin.

 Returns

 number


skinIndex


"Entity/GetSaveTable"
Entity:GetSaveTable(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example


4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Returns a table of save values for an entity.
These tables are not the same between the client and the server, and different entities may have different fields.
You can get the list different fields an entity has by looking at its source code ( the 2013 SDK can be found online, https://github.com/ValveSoftware/source-sdk-2013 ). Accessible fields are defined by each DEFINE_FIELD and DEFINE_KEYFIELD inside the DATADESC block.
Take the headcrab, for example:

BEGIN_DATADESC( CBaseHeadcrab )
	// m_nGibCount - dont save
	DEFINE_FIELD( m_bHidden, FIELD_BOOLEAN ),
	DEFINE_FIELD( m_flTimeDrown, FIELD_TIME ),
	DEFINE_FIELD( m_bCommittedToJump, FIELD_BOOLEAN ),
	DEFINE_FIELD( m_vecCommittedJumpPos, FIELD_POSITION_VECTOR ),
	DEFINE_FIELD( m_flNextNPCThink, FIELD_TIME ),
	DEFINE_FIELD( m_flIgnoreWorldCollisionTime, FIELD_TIME ),
	
	DEFINE_KEYFIELD( m_bStartBurrowed, FIELD_BOOLEAN, startburrowed ),
	DEFINE_FIELD( m_bBurrowed, FIELD_BOOLEAN ),
	DEFINE_FIELD( m_flBurrowTime, FIELD_TIME ),
	DEFINE_FIELD( m_nContext, FIELD_INTEGER ),
	DEFINE_FIELD( m_bCrawlFromCanister, FIELD_BOOLEAN ),
	DEFINE_FIELD( m_bMidJump, FIELD_BOOLEAN ),
	DEFINE_FIELD( m_nJumpFromCanisterDir, FIELD_INTEGER ),
	DEFINE_FIELD( m_bHangingFromCeiling, FIELD_BOOLEAN ),
	DEFINE_FIELD( m_flIlluminatedTime, FIELD_TIME ),
		
	DEFINE_INPUTFUNC( FIELD_VOID, Burrow, InputBurrow ),
	DEFINE_INPUTFUNC( FIELD_VOID, BurrowImmediate, InputBurrowImmediate ),
	DEFINE_INPUTFUNC( FIELD_VOID, Unburrow, InputUnburrow ),
	DEFINE_INPUTFUNC( FIELD_VOID, StartHangingFromCeiling, InputStartHangingFromCeiling ),
	DEFINE_INPUTFUNC( FIELD_VOID, DropFromCeiling, InputDropFromCeiling ),
	
	// Function Pointers
	DEFINE_THINKFUNC( EliminateRollAndPitch ),
	DEFINE_THINKFUNC( ThrowThink ),
	DEFINE_ENTITYFUNC( LeapTouch ),
END_DATADESC()

For each DEFINE_FIELD, the save table will have a key with name of first argument.
For each DEFINE_KEYFIELD, the save table will have a key with name of the third argument.
See Entity:GetInternalVariable for only retrieving one key of the save table.



BUG


This is missing prediction fields and most of the datatable clientside.



 Returns

 table


A table containing all save values in key/value format.

The value may be a sequential table (starting with 1) if the field in question is an array in engine.

 Examples
 Example
Get how long it has been since the player was damaged

local meta = FindMetaTable( Player )

function meta:GetLastDamageTime()
	return self:GetSaveTable().m_flLastDamageTime
end

print( Entity( 1 ):GetLastDamageTime() )
Output:

-31.965000152588
 Examples
 Example
Determine if a door is locked (only works on server side otherwise returns nil)

function IsDoorLocked( ent )
	return ent:GetSaveTable().m_bLocked
end
Output:

returns true if the door is locked
 Examples
 Example
Function DoorIsOpen( door ) that returns whether a door is open or not, for different door classes

local TestingFunctions =
{
	[func_door] = function( self )
		return ( self:GetSaveTable().m_toggle_state == 0 )
	end,
	[func_door_rotating] = function( self )
		return ( self:GetSaveTable().m_toggle_state == 0 )
	end,
	[prop_door_rotating] = function( self )
		return ( self:GetSaveTable().m_eDoorState ~= 0 )
	end,
}

function DoorIsOpen( door )
	local func = TestingFunctions[door:GetClass()]
	if ( func ) then
		return func( door )
	end
end


"Entity/GetUnFreezable"
Entity:GetUnFreezable(  ) 
 Description
Returns if the entity is unfreezable, meaning it cant be frozen with the physgun. By default props are freezable, so this function will typically return false.



BUG


This will return nil if Entity:SetUnFreezable has not been called.



 Returns

 boolean


True if the entity is unfreezable, false otherwise.


"Entity/GetTransmitWithParent"
Entity:GetTransmitWithParent(  ) 
 Description
Returns true if the TransmitWithParent flag is set or not.

 Returns

 boolean


Is the TransmitWithParent flag is set or not


"Entity/GetVelocity"
Entity:GetVelocity(  ) 
 Description
Returns the entitys velocity.



NOTE


Actually binds to CBaseEntity::GetAbsVelocity() on the server and C_BaseEntity::EstimateAbsVelocity() on the client. This returns the total velocity of the entity and is equal to local velocity + base velocity.




BUG


This can become out-of-sync on the client if the server has been up for a long time.



 Returns

 Vector


The velocity of the entity.


"Entity/GetUp"
Entity:GetUp(  ) 
 Description
Returns the upward vector of the entity, as a normalized direction vector

 Returns

 Vector


upDir


"Entity/GetSubMaterial"
Entity:GetSubMaterial( number index ) 
 Description
Returns the material override for the given index.
Returns  if no material override exists. Use Entity:GetMaterials to list its default materials.



BUG


The servers value takes priority on the client.



 Arguments

 number index


The index of the sub material. Acceptable values are from 0 to 31.

 Returns

 string


The material that overrides this index, if any.


"Entity/GibBreakServer"
Entity:GibBreakServer( Vector force ) 
 Description
Causes the entity to break into its current models gibs, if it has any.
You must call Entity:PrecacheGibs on the entity before using this function, or it will not create any gibs.
The gibs will be spawned on the server and be synchronized with all clients.
Note, that this function will not remove or hide the entity it is called on.



WARNING


Large numbers of serverside gibs will cause lag.
You can avoid this cost by spawning the gibs on the client using Entity:GibBreakClient




NOTE


Despite existing on client, it doesnt actually do anything on client.


 Arguments

 Vector force


The force to apply to the created gibs


"Entity/GetWorkshopID"
Entity:GetWorkshopID(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.Returns ID of workshop addon that the entity is from.


WARNING


The function currently does nothing and always returns nil


 Returns

 number


The workshop ID


"Entity/HasFlexManipulatior"
Entity:HasFlexManipulatior(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns whether or not the the entity has had flex manipulations performed with Entity:SetFlexWeight or Entity:SetFlexScale.

 Returns

 boolean


True if the entity has flex manipulations, false otherwise.

 Examples
 Example
Defines server-side function which manipulates all of an entitys flexes and prints true if the entity has flex manipulations.

function FlexExample( ent )

	if( !IsValid( ent ) ) then return end
	
	-- Loop through all flexes
	for i = 0, ent:GetFlexNum()-1 do
	
		-- Set each flex to number ranging from 0.0 to 2.0
		ent:SetFlexWeight( i, math.random()*2 )
		
	end
	
	-- Print whether or not we have flex manipulations
	print( ent:HasFlexManipulatior() )

end
Output:

true


"Entity/GetVar"
Entity:GetVar( any key, any default=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Retrieves a value from entitys Entity:GetTable. Set by Entity:SetVar.

 Arguments

 any key


Key of the value to retrieve

 Arguments

 any default=nil


A default value to fallback to if we couldnt retrieve the value from entity

 Returns

 any


Retrieved value

 Examples
 Example
The 2 lines of code are functionally identical.

print( Entity( 1 ):GetVar( Test ) )

print( Entity( 1 ).Test )


"Entity/Ignite"
Entity:Ignite( number length, number radius=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets the entity on fire.

 Arguments

 number length


How long to keep the entity ignited. Not supplying this argument will not ignite the entity at all.

 Arguments

 number radius=0


The radius of the ignition, will ignite everything around the entity that is in this radius.

 Examples
 Example
Ignite all props on the map for 30 seconds.

for k, v in pairs( ents.FindByClass( prop_physics ) ) do
   v:Ignite( 30 )
end


"Entity/GibBreakClient"
Entity:GibBreakClient( Vector force ) 
 Description
Causes the entity to break into its current models gibs, if it has any.
You must call Entity:PrecacheGibs on the entity before using this function, or it will not create any gibs.
If called on server, the gibs will be spawned on the currently connected clients and will not be synchronized. Otherwise the gibs will be spawned only for the client the function is called on.
Note, that this function will not remove or hide the entity it is called on.
For more expensive version of this function see Entity:GibBreakServer.

 Arguments

 Vector force


The force to apply to the created gibs


"Entity/HasSpawnFlags"
Entity:HasSpawnFlags( number spawnFlags ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns whether this entity has the specified spawnflags bits set.

 Arguments

 number spawnFlags


The spawnflag bits to check, see SF_ Enums.

 Returns

 boolean


Whether the entity has that spawnflag set or not.

 Examples
 Example
As seen in sandboxs PhysgunPickup hook.

function GM:PhysgunPickup( ply, ent )

	-- Dont move physboxes if ( the mapper logic says no
	if ( ent:GetClass() == func_physbox &amp;&amp; ent:HasSpawnFlags( SF_PHYSBOX_MOTIONDISABLED ) ) then return false end

	return true
	
end


"Entity/Health"
Entity:Health(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the health of the entity.

 Returns

 number


health

 Examples
 Example
Prints if the entitys health is at full or more.

print( Entity( 1 ):Health() &gt;= Entity( 1 ):GetMaxHealth() )
Output:

true entitys health is greater than or equal to their max health, or false otherwise.


"Entity/HeadTarget"
Entity:HeadTarget( Vector origin ) 
 Description
Returns the position of the head of this entity, NPCs use this internally to aim at their targets.



NOTE


This only works on players and NPCs.


 Arguments

 Vector origin


The vector of where the attack comes from.

 Returns

 Vector


The head position.


"Entity/InitializeAsClientEntity"
Entity:InitializeAsClientEntity(  ) 
 Description
Initializes this entity as being clientside only.
Only works on entities fully created clientside, and as such it has currently no use due to the lack of clientside ents.Create.
This function is automatically called by ents.CreateClientProp and ClientsideModel, ClientsideModel and ClientsideScene.



BUG


Calling this on a clientside entity will crash the game.


"Entity/Input"
Entity:Input( string input, Entity activator, Entity inflictor, any param=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Fires input to the entity with the ability to make another entity responsible. Similar to Entity:Fire

 Arguments

 string input


The name of the input to fire

 Arguments

 Entity activator


The entity that is directly responsible

 Arguments

 Entity inflictor


The entity that is indirectly responsible (often a player)

 Arguments

 any param=nil


The value to give to the input. Can be a String, Float or Integer


"Entity/HasBoneManipulations"
Entity:HasBoneManipulations(  ) 
 Description
Returns whether or not the bone manipulation functions have ever been called on given entity.
Related functions are Entity:ManipulateBonePosition, Entity:ManipulateBoneAngles, Entity:ManipulateBoneJiggle, and Entity:ManipulateBoneScale.



BUG


This will return true if the entitys bones have ever been manipulated. Resetting the position/angles/jiggle/scaling to 0,0,0 will not affect this function.



 Returns

 boolean


True if the entity has been bone manipulated, false otherwise.


"Entity/GetWorldTransformMatrix"
Entity:GetWorldTransformMatrix(  ) 
 Description



BUG


This returns incorrect results for the angular component (columns 1-3) for the local player clientside.





BUG







BUG





 Returns

 VMatrix


The position and angle matrix.


"Entity/IsLineOfSightClear"
Entity:IsLineOfSightClear( Vector target ) 
 Description
Returns true if the target is in line of sight. This will only work on CBaseCombatCharacter entities.

 Arguments

 Vector target


The target to test. You can also supply an Entity instead of a Vector

 Returns

 boolean


Returns true if the line of sight is clear


"Entity/IsEffectActive"
Entity:IsEffectActive( number effect ) 
 Description
Returns whether an entity has engine effect applied or not.

 Arguments

 number effect


The effect to check for, see EF_ Enums.

 Returns

 boolean


whether an entity has the engine effect applied or not.


"Entity/InstallDataTable"
Entity:InstallDataTable(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Sets up Data Tables from entity to use with Entity:NetworkVar.


"Entity/IsEFlagSet"
Entity:IsEFlagSet( number flag ) 
 Description
Checks if given flag is set or not.

 Arguments

 number flag


The engine flag to test, see EFL_ Enums

 Returns

 boolean


Is set or not


"Entity/IsConstrained"
Entity:IsConstrained(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns true if the entity has constraints attached to it

 Returns

 boolean


Whether the entity is constrained or not.

 Examples
 Example
From entities/prop_effect.lua

function ENT:PhysicsUpdate( physobj )

	if ( CLIENT ) then return end

	-- Dont do anything if ( the player isnt holding us
	if ( !self:IsPlayerHolding() &amp;&amp;!self:IsConstrained() ) then
		physobj:SetVelocity( Vector( 0,0,0 ) )
		physobj:Sleep() 
	end
end


"Entity/IsLagCompensated"
Entity:IsLagCompensated(  ) 
 Description
Returns whether the entity is lag compensated or not.

 Returns

 boolean


Whether the entity is lag compensated or not.


"Entity/IsConstraint"
Entity:IsConstraint(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns if entity is constraint or not

 Returns

 boolean


Is the entity a constraint or not

 Examples
 Example
Returns true if player 1 is aiming at constraint.

print( player.GetByID( 1 ):GetEyeTrace().Entity:IsConstraint() )
Output:

false


"Entity/InvalidateBoneCache"
Entity:InvalidateBoneCache(  ) 
 Description
Resets the entitys bone cache values in order to prepare for a model change.
This should be called after calling Entity:SetPoseParameter.


"Entity/IsFlagSet"
Entity:IsFlagSet( number flag ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Checks if given flag(s) is set or not.

 Arguments

 number flag


The engine flag(s) to test, see FL_ Enums

 Returns

 boolean


Is set or not

 Examples
 Example
Checks if the player is on the ground.

print( Entity( 1 ):IsFlagSet( FL_ONGROUND ) )
Output:

true


"Entity/IsInWorld"
Entity:IsInWorld(  ) 
 Description
Returns whether the entity is inside a wall or outside of the map.



NOTE


Internally this function uses util.IsInWorld, that means that this function only checks Entity:GetPos of the entity. If an entity is only partially inside a wall, or has a weird GetPos offset, this function may not give reliable output.


 Returns

 boolean


Is the entity in world


"Entity/IsNPC"
Entity:IsNPC(  ) 
 Description
Checks if the entity is an NPC or not.

 Returns

 boolean


Whether the entity is an NPC.


"Entity/IsPlayer"
Entity:IsPlayer(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Checks if the entity is a player or not.

 Returns

 boolean


Whether the entity is a player.

 Examples
 Example
Checks if two entities are players.

print( player.GetByID( 1 ):IsPlayer() )
print( ents.FindByClass( prop_physics )[ 1 ]:IsPlayer() )
Output:

true
false


"Entity/IsDormant"
Entity:IsDormant(  ) 
 Description
Returns whether the entity is dormant or not. Client/server entities become dormant when they leave the PVS on the server. Client side entities can decide for themselves whether to become dormant. This mainly applies to PVS.

 Returns

 boolean


Whether the entity is dormant or not.


"Entity/IsPlayerHolding"
Entity:IsPlayerHolding(  ) 
 Description
Returns true if the entity is being held by a player. Either by physics gun, gravity gun or use-key (+use).



BUG


If multiple players are holding an object and one drops it, this will return false for the player still holding the object.



 Returns

 boolean


IsBeingHeld


"Entity/IsOnFire"
Entity:IsOnFire(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns whether the entity is on fire.

 Returns

 boolean


Whether the entity is on fire or not.

 Examples
 Example
Demonstrates the use of this function.

print( Entity( 1 ):IsOnFire() )
Output:

Outputs true to the console if the player 1 is on fire.


"Entity/IsOnGround"
Entity:IsOnGround(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns whether the entity is on ground or not.
Internally, this checks if FL_ONGROUND is set on the entity.
This function is an alias of Entity:OnGround.

 Returns

 boolean


Whether the entity is on ground or not.

 Examples
 Example
Demonstrates the use of this function.

print( Entity( 1 ):IsOnGround() )
print( IsValid( Entity( 1 ):GetGroundEntity() ) ) -- This should give the exact output as the first line
Output:

Outputs true to the console if the player 1 is on ground.


"Entity/IsRagdoll"
Entity:IsRagdoll(  ) 
 Description
Checks if the entity is a ragdoll.

 Returns

 boolean


Is ragdoll or not


"Entity/IsSolid"
Entity:IsSolid(  ) 
 Description
Returns if the entity is solid or not.
Very useful for determining if the entity is a trigger or not.

 Returns

 boolean


Whether the entity is solid or not.


"Entity/IsPlayingGesture"
Entity:IsPlayingGesture( number activity ) 
 Description
Returns whether theres a gesture is given activity being played.



NOTE


This function only works on BaseAnimatingOverlay entites!


 Arguments

 number activity


The activity to test. See ACT_ Enums.

 Returns

 boolean


Whether theres a gesture is given activity being played.


"Entity/IsScripted"
Entity:IsScripted(  ) 
 Description
Checks if the entity is a SENT or a built-in entity.

 Returns

 boolean


Returns true if entity is scripted ( SENT ), false if not ( A built-in engine entity )


"Entity/LocalToWorldAngles"
Entity:LocalToWorldAngles( Angle ang ) 
 Description
Converts a local angle (local to the entity) to a world angle.

 Arguments

 Angle ang


The local angle

 Returns

 Angle


The world angle


"Entity/LocalToWorld"
Entity:LocalToWorld( Vector lpos ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Converts a vector local to an entity into a worldspace vector

 Arguments

 Vector lpos


The local vector

 Returns

 Vector


The translated to world coordinates vector

 Examples
 Example
Produces a worldvector 100 units in front of the center of the entity, taking into account the entitys angle

return ent:LocalToWorld( Vector( 100,0,0 ) )


"Entity/IsValidLayer"
Entity:IsValidLayer( number layerID ) 
 Description
Returns whether the given layer ID is valid and exists on this entity.



NOTE


This function only works on BaseAnimatingOverlay entites!


 Arguments

 number layerID


The Layer ID

 Returns

 boolean


Whether the given layer ID is valid and exists on this entity.


"Entity/IsValid"
Entity:IsValid(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Returns whether the entity is a valid entity or not.
An entity is valid if:

 It is not a NULL entity
 It is not the worldspawn entity (game.GetWorld)

Instead of calling this method directly, its a good idea to call the global IsValid instead.It will check whether the given variable contains an object (an Entity) or nothing at all for you. See examples.

 Returns

 boolean


true if the entity is valid, false otherwise

 Examples
 Example
Shows how to use the global IsValid function instead of using this method directly.

if ( entity &amp;&amp; entity:IsValid() ) then
	-- Do stuff
end

-- The above can be replaced with the following for the same effect ( and cleaner code )

if ( IsValid( entity ) ) then
	-- Do stuff
end


 Examples
 Example
print( LocalPlayer():IsValid() )
Output:

Outputs true to the console if the player is in-game.


"Entity/IsWidget"
Entity:IsWidget(  ) 
 Description
Returns whether the entity is a widget or not.
This is used by the Edit Bones context menu property.

 Returns

 boolean


Whether the entity is a widget or not.


"Entity/IsWeapon"
Entity:IsWeapon(  ) 
 Description
Checks if the entity is a weapon or not.

 Returns

 boolean


Whether the entity is a weapon


"Entity/LookupBone"
Entity:LookupBone( string boneName ) 
 Description
Gets the bone index of the given bone name, returns nothing if the bone does not exist.

 Arguments

 string boneName


The name of the bone.
Common generic bones ( for player models and some HL2 models ):

 ValveBiped.Bip01_Head1
 ValveBiped.Bip01_Spine
 ValveBiped.Anim_Attachment_RH

Common hand bones (left hand equivalents also available, replace _R_ with _L_)

 ValveBiped.Bip01_R_Hand
 ValveBiped.Bip01_R_Forearm
 ValveBiped.Bip01_R_Foot
 ValveBiped.Bip01_R_Thigh
 ValveBiped.Bip01_R_Calf
 ValveBiped.Bip01_R_Shoulder
 ValveBiped.Bip01_R_Elbow


 Returns

 number


Index of the given bone name


"Entity/IsVehicle"
Entity:IsVehicle(  ) 
 Description
Checks if the entity is a vehicle or not.

 Returns

 boolean


Whether the entity is a vehicle.


"Entity/LookupAttachment"
Entity:LookupAttachment( string attachmentName ) 
 Description
Gets the attachment index of the given attachment name, returns 0 if the attachment does not exist, or -1 if the model is invalid.

 Arguments

 string attachmentName


The name of the attachment.

 Returns

 number


attachmentIndex


"Entity/MakePhysicsObjectAShadow"
Entity:MakePhysicsObjectAShadow( boolean allowPhysicsMovement, boolean allowPhysicsRotation ) 
 Description
Turns the Entity:GetPhysicsObject into a physics shadow.
Its used internally for the Players and NPCs physics object, and certain HL2 entities such as the crane.
A physics shadow can be used to have static entities that never move by setting both arguments to false.



NOTE


Unlike Entity:PhysicsInitShadow, this function doesnt remove the current physics object.


 Arguments

 boolean allowPhysicsMovement


Whether to allow the physics shadow to move under stress.

 Arguments

 boolean allowPhysicsRotation


Whether to allow the physics shadow to rotate under stress.


"Entity/LookupSequence"
Entity:LookupSequence( string name ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns


 Description
Returns sequence ID from its name.

 Arguments

 string name


Sequence name

 Returns

 number


Sequence ID for that name. This will differ for models with same sequence names. Will be -1 whether the sequence is invalid.

 Returns

 number


The sequence duration

 0 if the sequence is invalid


"Entity/ManipulateBoneJiggle"
Entity:ManipulateBoneJiggle( number boneID, number enabled ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Manipulates the bones jiggle value(s).

 Arguments

 number boneID


Index of the bone you want to manipulate.

 Arguments

 number enabled


0 = No Jiggle

1 = Jiggle

 Examples
 Example
Turn everyone into jelly mode

for k, v in pairs( player.GetAll() ) do
	local i = 0

	while i &lt; v:GetBoneCount() do
		v:ManipulateBoneJiggle( i, 1 )
		i = i + 1
	end
end


"Entity/MuzzleFlash"
Entity:MuzzleFlash(  ) 
 Description
Fires the muzzle flash effect of the weapon the entity is carrying. This only creates a light effect and is often called alongside Weapon:SendWeaponAnim


"Entity/MarkShadowAsDirty"
Entity:MarkShadowAsDirty(  ) 
 Description
Refreshes the shadow of the entity.


"Entity/NetworkVar"
Entity:NetworkVar( string type, number slot, string name, table extended=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Creates a network variable on the entity and adds Set/Get functions for it. This function should only be called in ENTITY:SetupDataTables.

 Arguments

 string type


Supported choices:

 String
 Bool
 Float
 Int (32-bit signed integer)
 Vector
 Angle
 Entity


 Arguments

 number slot


Each network var has to have a unique slot. The slot is per type - so you can have an int in slot 0, a bool in slot 0 and a float in slot 0 etc. but you cant have two ints in slot 0 instead you would do a int in slot 0 and another int in slot 1. 

The max slots right now are 32 - so you should pick a number between 0 and 31. An exception to this is strings which has a max slots of 4.

 Arguments

 string name


The name will affect how you access it. If you call it Foo you would add two new functions on your entity - SetFoo and GetFoo. So be careful that what you call it wont collide with any existing functions (dont call it Pos for example).

 Arguments

 table extended=nil


A table of extended information.
KeyName
If the table contains a KeyName key the value can be set using Entity:SetKeyValue. This is useful if youre making an entity that you want to be loaded in a map. The sky entity uses this.
Edit

The edit key lets you mark this variable as editable. See Editable Entities for more information.

 Examples
 Example
Setting up data tables

function ENT:SetupDataTables()

	self:NetworkVar( Float, 0, Amount )
	self:NetworkVar( Vector, 0, StartPos )
	self:NetworkVar( Vector, 1, EndPos )

end

-- Code...

-- Setting values on the entity
self:SetStartPos( Vector( 1, 0, 0 ) )
self:SetAmount( 100 )

-- Code...

-- Getting values
local startpos = self:GetStartPos()


"Entity/ManipulateBonePosition"
Entity:ManipulateBonePosition( number boneID, Vector pos ) 
 Description
Sets custom bone offsets.

 Arguments

 number boneID


Index of the bone you want to manipulate

 Arguments

 Vector pos


Position vector to apply

Note that the position is relative to the original bone position, not relative to the world or the entity.


"Entity/NearestPoint"
Entity:NearestPoint( Vector position ) 
 Description
Performs a Ray OBBox intersection from the given position to the origin of the OBBox with the entity and returns the hit position on the OBBox

 Arguments

 Vector position


The vector to start the intersection from.

 Returns

 Vector


The nearest hit point of the entitys bounding box in world coordinates.


"Entity/MapCreationID"
Entity:MapCreationID(  ) 
 Description
Returns entitys map creation ID. Unlike Entity:EntIndex or Entity:GetCreationID, it will always be the same on same map, no matter how much you clean up or restart it.
To be used in conjunction with ents.GetMapCreatedEntity.

 Returns

 number


The map creation ID or -1 if the entity is not compiled into the map.


"Entity/ManipulateBoneScale"
Entity:ManipulateBoneScale( number boneID, Vector scale ) 
 Description
Sets custom bone scale.



WARNING


When used serverside, this method produces a huge network consumption!




BUG


This does not scale procedural bones.



 Arguments

 number boneID


Index of the bone you want to manipulate

 Arguments

 Vector scale


Scale vector to apply. Note that the scale is relative to the original bone scale, not relative to the world or the entity.



BUG


The vector will be normalised if its longer than 32 units.


"Entity/IsWorld"
Entity:IsWorld(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns if the entity is the maps Entity[0] worldspawn

 Returns

 boolean


isWorld

 Examples
 Example
Stool boilerplate for the ignite tool

function TOOL:LeftClick( trace )
 local ent = trace.Entity
 if!ent or!ent:IsValid() or ent:IsPlayer() or ent:IsWorld() then return false end
 ...
Output:

LeftClick will not run for no ent, invalid ents, players, or worldspawn.


"Entity/NetworkVarNotify"
Entity:NetworkVarNotify( string name, function callback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Creates a callback that will execute when the given network variable changes - that is, when the Set&lt;name&gt; function is run.



NOTE


The callback is executed before the value is changed, and is called even if the new and old values are the same.




NOTE


This function does not exist on entities in which Entity:InstallDataTable has not been called. By default, this means this function only exists on SENTs (both serverside and clientside) and on players with a Player Class (serverside and clientside LocalPlayer only!). It is therefore safest to only use this in ENTITY:SetupDataTables.




WARNING


A clientside NetworkVarNotify will not be called when the network var is changed serverside! This makes the function less useful. This is a bug. [1]


 Arguments

 string name


Name of variable to track changes of

 Arguments

 function callback


The function to call when the variable changes. It is passed 4 arugments:

 Entity entity - Entity whos variable changed (This will be variable called self in ENT:CallBack format.)
 string name - Name of changed variable
 any old - Old/current variable value
 any new - New variable value that it was set to


 Examples
 Example
Example usage

function ENT:SetupDataTables()

	self:NetworkVar( Float, 0, Amount )
	self:NetworkVar( Vector, 1, StartPos )
	self:NetworkVar( Vector, 2, EndPos )

	if ( SERVER ) then
		self:NetworkVarNotify( EndPos, self.OnVarChanged )
	end

end

function ENT:OnVarChanged( name, old, new )
	print( name, old, new )
end
Output:

Prints variable name, old value and new value whenever SetEndPos function is called


"Entity/ManipulateBoneAngles"
Entity:ManipulateBoneAngles( number boneID, Angle ang ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets custom bone angles.



NOTE


The repeated use of bone manipulation in multiplayer games is highly discouraged due to the huge produced network traffic.


 Arguments

 number boneID


Index of the bone you want to manipulate

 Arguments

 Angle ang


Angle to apply.

The angle is relative to the original bone angle, not relative to the world or the entity.

 Examples
 Example
This example shows the network usage impact of repeatedly using bone manipulation serverside.
To see the difference, type in clients console: net_graph 3
The rotation is not smooth when using Entity:SetNWFloat() because it does not update the value on every frame.

local server_only = true -- Change the value!

if ( server_only ) then
	if ( SERVER ) then
		hook.Add( Think, bone_manipulation_test, function()
			for _,ent in ipairs( ents.FindByModel( models/buggy.mdl ) ) do
				ent:ManipulateBoneAngles( 28, Angle( 0,0,RealTime()*180 ) )
			end
		end )
	else
		hook.Add( Think, bone_manipulation_test, function()
		end )
	end
else
	if ( SERVER ) then
		hook.Add( Think, bone_manipulation_test, function()
			for _,ent in ipairs( ents.FindByModel( models/buggy.mdl ) ) do
				ent:SetNWFloat( bone_manipulation_test, RealTime()*180 ) -- Entity:SetNW....() do not broadcast new values instantly
			end
		end )
	else
		hook.Add( Think, bone_manipulation_test, function()
			for _,ent in ipairs( ents.GetAll() ) do
				if ( ent:GetModel() == models/buggy.mdl ) then
					ent:ManipulateBoneAngles( 28, Angle( 0,0,ent:GetNWFloat( bone_manipulation_test ) ) )
				end
			end
		end )
	end
end
Output:

Rotation of the ammo box of all HL2 buggies.


"Entity/OBBCenter"
Entity:OBBCenter(  ) 
 Description
Returns the center of an entitys bounding box as a local vector.

 Returns

 Vector


OBBCenter


"Entity/NextThink"
Entity:NextThink( number timestamp ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
In the case of a scripted entity, this will cause the next ENTITY:Think event to be run at the given time.
Does not work clientside! Use Entity:SetNextClientThink instead.



BUG


This does not work with SWEPs.



 Arguments

 number timestamp


The relative to CurTime timestamp, at which the next think should occur.

 Examples
 Example
Prints Hello, World! in console and sleeps for a second.

function ENT:Think()
    print( Hello, World! )

    self:NextThink( CurTime() + 1 )
    return true -- Note: You need to return true to override the default next think time
end
Output:

Hello, World! every second the entity exists in the world.


"Entity/OnGround"
Entity:OnGround(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns true if the entity is on the ground, and false if it isnt.
Internally, this checks if FL_ONGROUND is set on the entity. This is only updated for players and NPCs, and thus wont inherently work for other entities.

 Returns

 boolean


Whether the entity is on the ground or not.

 Examples
 Example
Prints if Entity(1) is on the ground or not.

print( Entity( 1 ):OnGround() )
print( Entity( 1 ):IsFlagSet( FL_ONGROUND ) ) -- This should give exact same output as the first line
Output:

In most cases, true.


"Entity/ObjectCaps"
Entity:ObjectCaps(  ) 
 Description
Returns the entitys capabilities as a bitfield.
In the engine this function is mostly used to check the use type, the save/restore system and level transitions flags.
Even though the function is defined shared, it is not guaranteed to return the same value across states.



NOTE




 Returns

 number


"Entity/OBBMaxs"
Entity:OBBMaxs(  ) 
 Description
Returns the highest corner of an entitys bounding box as a local vector.

 Returns

 Vector


The local position of the highest corner of the entitys oriented bounding box.


"Entity/PhysicsFromMesh"
Entity:PhysicsFromMesh( table vertices ) 
 Description
Initializes the physics mesh of the entity from a triangle soup defined by a table of vertices. The resulting mesh is hollow, may contain holes, and always has a volume of 0.
While this is very useful for static geometry such as terrain displacements, it is advised to use Entity:PhysicsInitConvex or Entity:PhysicsInitMultiConvex for moving solid objects instead.
Entity:EnableCustomCollisions needs to be called if you want players to collide with the entity correctly.

 Arguments

 table vertices


A table consisting of MeshVertex structure (only the pos element is taken into account). Every 3 vertices define a triangle in the physics mesh.

 Returns

 boolean


Returns true on success, nil otherwise.


"Entity/PassesDamageFilter"
Entity:PassesDamageFilter( CTakeDamageInfo dmg ) 
 Description
Tests whether the damage passes the entity filter.
This will call ENTITY:PassesDamageFilter on scripted entities of the type filter.



NOTE


This function only works on entities of the type filter. ( filter_* entities, including base game filter entites )


 Arguments

 CTakeDamageInfo dmg


The damage info to test

 Returns

 boolean


Whether the damage info passes the entity filter.


"Entity/PhysicsDestroy"
Entity:PhysicsDestroy(  ) 
 Description
Destroys the current physics object of an entity.


"Entity/PhysicsInit"
Entity:PhysicsInit( number solidType ) 
 Description
Initializes the physics object of the entity using its current model. Deletes the previous physics object if it existed and the new object creation was successful.
If the entitys current model has no physics mesh associated to it, no physics object will be created and the previous object will still exist, if applicable.



NOTE


When called clientside, this will not create a valid PhysObj if the model hasnt been precached serverside.




NOTE


If successful, this function will automatically call Entity:SetSolid( solidType ) and Entity:SetSolidFlags( 0 ).




BUG


Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.


 Arguments

 number solidType


The solid type of the physics object to create, see SOLID_ Enums. Should be SOLID_VPHYSICS in most cases.



NOTE


Using SOLID_NONE will only delete the current physics object - it does not create a new one.



 Returns

 boolean


Returns true on success, false otherwise.


"Entity/OBBMins"
Entity:OBBMins(  ) 
 Description
Returns the lowest corner of an entitys bounding box as a local vector.

 Returns

 Vector


The local position of the lowest corner of the entitys oriented bounding box.


"Entity/PassesFilter"
Entity:PassesFilter( Entity caller, Entity ent ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Tests whether the entity passes the entity filter.
This will call ENTITY:PassesFilter on scripted entities of the type filter.



NOTE


This function only works on entities of the type filter. ( filter_* entities, including base game filter entites )


 Arguments

 Entity caller


The initiator of the test.

For example the trigger this filter entity is used in.

 Arguments

 Entity ent


The entity to test against the entity filter.

 Returns

 boolean


Whether the entity info passes the entity filter.


"Entity/PhysicsInitBox"
Entity:PhysicsInitBox( Vector mins, Vector maxs ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Makes the physics object of the entity a AABB.



NOTE


If the volume of the resulting box is 0 (the mins and maxs are the same), the mins and maxs will be changed to Vector( -1, -1, -1 ) and Vector( 1, 1, 1 ), respectively.




NOTE


This function will automatically destroy any previous physics objects if successful and call Entity:SetSolid( SOLID_BBOX ), Entity:SetMoveType( MOVETYPE_VPHYSICS ), and Entity:SetCollisionBounds( mins, maxs ).




BUG


Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.


 Arguments

 Vector mins


The minimum position of the box. This is automatically ordered with the maxs.

 Arguments

 Vector maxs


The maximum position of the box. This is automatically ordered with the mins.

 Returns

 boolean


Returns true on success, nil otherwise. This fails when the game cannot create any more PhysCollides.


"Entity/PhysicsInitConvex"
Entity:PhysicsInitConvex( table points ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Initializes the physics mesh of the entity with a convex mesh defined by a table of points. The resulting mesh is the convex hull of all the input points. If successful, the previous physics object will be removed.
This is the standard way of creating moving physics objects with a custom convex shape. For more complex, concave shapes, see Entity:PhysicsInitMultiConvex.



BUG


This will crash if given all Vector(0,0,0)s.





BUG


Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.


 Arguments

 table points


A table of eight Vectors, in local coordinates, to be used in the computation of the convex mesh. Order does not matter.

 Returns

 boolean


Returns true on success, nil otherwise.

 Examples
 Example
Creates a box physics mesh for the entity.

function ENT:Initialize()
	if ( CLIENT ) then return end -- We only want to run this code serverside

	local x0 = -20 -- Define the min corner of the box
	local y0 = -10
	local z0 = -5

	local x1 = 20 -- Define the max corner of the box
	local y1 = 10
	local z1 = 5

	self:PhysicsInitConvex( {
		Vector( x0, y0, z0 ),
		Vector( x0, y0, z1 ),
		Vector( x0, y1, z0 ),
		Vector( x0, y1, z1 ),
		Vector( x1, y0, z0 ),
		Vector( x1, y0, z1 ),
		Vector( x1, y1, z0 ),
		Vector( x1, y1, z1 )
	} )

	-- Set up solidity and movetype
	self:SetMoveType( MOVETYPE_VPHYSICS )
	self:SetSolid( SOLID_VPHYSICS )

	-- Enable custom collisions on the entity
	self:EnableCustomCollisions( true )
end


"Entity/PrecacheGibs"
Entity:PrecacheGibs(  ) 
 Description
Precaches gibs for the entitys model.
Normally this function should be ran when the entity is spawned, for example the ENTITY:Initialize, after Entity:SetModel is called.
This is required for Entity:GibBreakServer and Entity:GibBreakClient to work.


"Entity/PhysicsInitMultiConvex"
Entity:PhysicsInitMultiConvex( table vertices ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
An advanced version of Entity:PhysicsInitConvex which initializes a physics object from multiple convex meshes. This should be used for physics objects with a custom shape which cannot be represented by a single convex mesh.
If successful, the previous physics object will be removed.



BUG


Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.


 Arguments

 table vertices


A table consisting of tables of Vectors. Each sub-table defines a set of points to be used in the computation of one convex mesh.

 Returns

 boolean


Returns true on success, nil otherwise

 Examples
 Example
Creates a physics mesh for the entity which consists of two boxes.

local min1 = Vector( -30, -10, 0 ) -- Box1 minimum corner
local max1 = Vector( -10, 10, 20 ) -- Box1 maximum corner

local min2 = Vector( 10, -5, 10 ) -- Box2 minimum corner
local max2 = Vector( 30, 5, 40 ) -- Box2 maximum corner

if ( SERVER ) then
	function ENT:Initialize()
		self:SetModel( models/props_c17/oildrum001.mdl )

		-- Initializing the multi-convex physics mesh
		self:PhysicsInitMultiConvex( {
			{ -- Each sub-table is a set of vertices of a convex piece, order doesnt matter
				Vector( min1.x, min1.y, min1.z ), -- The first box vertices
				Vector( min1.x, min1.y, max1.z ),
				Vector( min1.x, max1.y, min1.z ),
				Vector( min1.x, max1.y, max1.z ),
				Vector( max1.x, min1.y, min1.z ),
				Vector( max1.x, min1.y, max1.z ),
				Vector( max1.x, max1.y, min1.z ),
				Vector( max1.x, max1.y, max1.z ),
			},
			{ -- All these tables together form a concave collision mesh
				Vector( min2.x, min2.y, min2.z ), -- The second box vertices
				Vector( min2.x, min2.y, max2.z ),
				Vector( min2.x, max2.y, min2.z ),
				Vector( min2.x, max2.y, max2.z ),
				Vector( max2.x, min2.y, min2.z ),
				Vector( max2.x, min2.y, max2.z ),
				Vector( max2.x, max2.y, min2.z ),
				Vector( max2.x, max2.y, max2.z ),
			},
		} )

		self:SetSolid( SOLID_VPHYSICS ) -- Setting the solidity
		self:SetMoveType( MOVETYPE_VPHYSICS ) -- Setting the movement type

		self:EnableCustomCollisions( true ) -- Enabling the custom collision mesh

		self:PhysWake() -- Enabling the physics motion
	end
else
	local col = Color( 0, 0, 255, 255 )

	-- Drawing collision boxes on the client
	function ENT:Draw()
		self:DrawModel()

		local pos, ang = self:GetPos(), self:GetAngles()

		render.DrawWireframeBox( pos, ang, min1, max1, col ) -- Drawing the first collision box
		render.DrawWireframeBox( pos, ang, min2, max2, col ) -- Drawing the second collision box
	end
end
Output:


"Entity/Remove"
Entity:Remove(  ) 
 Description
Removes the entity it is used on.

 Examples
 Example
ents.FindByClass( prop_physics )[1]:Remove()
Output:

Removes whichever prop is first found or errors if no entity was found.


"Entity/RemoveAllGestures"
Entity:RemoveAllGestures(  ) 
 Description
Removes and stops all gestures.



NOTE


This function only works on BaseAnimatingOverlay entites!


"Entity/PhysicsInitShadow"
Entity:PhysicsInitShadow( boolean allowPhysicsMovement=true, boolean allowPhysicsRotation=true ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Initializes the entitys physics object as a physics shadow. Removes the previous physics object if successful. This is used internally for the Players and NPCs physics object, and certain HL2 entities such as the crane.
A physics shadow can be used to have static entities that never move by setting both arguments to false.



BUG


Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.


 Arguments

 boolean allowPhysicsMovement=true


Whether to allow the physics shadow to move under stress.

 Arguments

 boolean allowPhysicsRotation=true


Whether to allow the physics shadow to rotate under stress.

 Returns

 boolean


Return true on success, nil otherwise.


"Entity/PhysicsInitSphere"
Entity:PhysicsInitSphere( number radius, string physmat ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Makes the physics object of the entity a sphere.



NOTE


This function will automatically destroy any previous physics objects and call Entity:SetSolid( SOLID_BBOX ) and Entity:SetMoveType( MOVETYPE_VPHYSICS ).




BUG


Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.


 Arguments

 number radius


The radius of the sphere.

 Arguments

 string physmat



 Returns

 boolean


Returns true on success, false otherwise


"Entity/PhysWake"
Entity:PhysWake(  ) 
 Description
Wakes up the entitys physics object

 Examples
 Example
This is what the function does internally.

local phys = self:GetPhysicsObject()
if ( phys:IsValid() ) then
	phys:Wake()
end


"Entity/PointAtEntity"
Entity:PointAtEntity( Entity target ) 
 Description
Changes an entities angles so that it faces the target entity.

 Arguments

 Entity target


The entity to face.


"Entity/RagdollStopControlling"
Entity:RagdollStopControlling(  ) 
 Description
Sets the function to build the ragdoll. This is used alongside Kinect in Entity:SetRagdollBuildFunction, for more info see ragdoll_motion entity.


"Entity/RagdollUpdatePhysics"
Entity:RagdollUpdatePhysics(  ) 
 Description
Makes the physics objects follow the set bone positions. This is used alongside Kinect in Entity:SetRagdollBuildFunction, for more info see ragdoll_motion entity.


"Entity/RagdollSolve"
Entity:RagdollSolve(  ) 
 Description
Normalizes the ragdoll. This is used alongside Kinect in Entity:SetRagdollBuildFunction, for more info see ragdoll_motion entity.


"Entity/RemoveCallback"
Entity:RemoveCallback( string hook, number callbackid ) 
 Description
Removes a callback previously added with Entity:AddCallback

 Arguments

 string hook


The hook name to remove. See Entity Callbacks

 Arguments

 number callbackid


The callback id previously retrieved with the return of Entity:AddCallback or Entity:GetCallbacks


"Entity/PlayScene"
Entity:PlayScene( string scene, number delay=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Makes the entity play a .vcd scene.

 Arguments

 string scene


Filepath to scene

 Arguments

 number delay=0


Delay in seconds until the scene starts playing.

 Examples
 Example
Makes the entity that the player 1 is looking at play the Welcome to City 17 speech.

local ent = Entity( 1 ):GetEyeTrace().Entity

if( IsValid( ent ) ) then
	npc:PlayScene( scenes/breencast/welcome.vcd )
end
Output:

The entity plays the scene.


"Entity/RemoveCallOnRemove"
Entity:RemoveCallOnRemove( string identifier ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Removes a function previously added via Entity:CallOnRemove.

 Arguments

 string identifier


Identifier of the function within CallOnRemove

 Examples
 Example
Removes the call to stop an engines sounds when the entity is removed

Entity:RemoveCallOnRemove( StopEngineSound )


"Entity/RemoveAllDecals"
Entity:RemoveAllDecals(  ) 
 Description
Removes all decals from the entities surface.

 Examples
 Example
Removes all decals from all props in world.

for k, v in pairs( ents.FindByClass( prop_physics ) ) do
	v:RemoveAllDecals()
end


"Entity/RemoveEFlags"
Entity:RemoveEFlags( number flag ) 
 Description
Removes specified engine flag

 Arguments

 number flag


The flag to remove, see EFL_ Enums


"Entity/RemoveEffects"
Entity:RemoveEffects( number effect ) 
 Description
Removes an engine effect applied to an entity.

 Arguments

 number effect


The effect to remove, see EF_ Enums.


"Entity/PhysicsInitStatic"
Entity:PhysicsInitStatic( number solidType ) 
 Description
Initializes a static physics object of the entity using its current model. If successful, the previous physics object is removed.
This is what used by entities such as func_breakable, prop_dynamic, item_suitcharger, prop_thumper and npc_rollermine while it is in its buried state in the Half-Life 2 Campaign.
If the entitys current model has no physics mesh associated to it, no physics object will be created.



NOTE


This function will automatically call Entity:SetSolid( solidType ).




BUG


Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.


 Arguments

 number solidType


The solid type of the physics object to create, see SOLID_ Enums. Should be SOLID_VPHYSICS in most cases.

 Returns

 boolean


Returns true on success, false otherwise. This will fail if the entitys current model has no associated physics mesh.


"Entity/RemoveSolidFlags"
Entity:RemoveSolidFlags( number flags ) 
 Description
Removes solid flag(s) from the entity.

 Arguments

 number flags


The flag(s) to remove, see FSOLID_ Enums.


"Entity/RemoveGesture"
Entity:RemoveGesture( number activity ) 
 Description
Removes and stops the gesture with given activity.



NOTE


This function only works on BaseAnimatingOverlay entites!


 Arguments

 number activity


The activity remove. See ACT_ Enums.


"Entity/ResetSequence"
Entity:ResetSequence( number sequence ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Plays an animation on the entity. This may not always work on engine entities.



WARNING


This will not reset the animation on viewmodels, use Entity:SendViewModelMatchingSequence instead.




NOTE


This will not work properly if called directly after calling Entity:SetModel. Consider waiting until the next Tick.




NOTE


Will not work on players due to the animations being reset every frame by the base gamemode animation system. See GM:CalcMainActivity.


 Arguments

 number sequence


The sequence to play. Also accepts strings.



NOTE


If set to a string, the function will automatically call Entity:LookupSequence to retrieve the sequence ID as a number.



 Examples
 Example
Minimal code needed to make sequences work as expected on custom anim type entities.
In this example, when the player uses the crate, it will open, and when they use it again, it will close.

ENT.Base = base_anim
ENT.Spawnable = true
ENT.AutomaticFrameAdvance = true

ENT.PrintName = Animation Test
ENT.Category = My Entity Category

function ENT:Initialize()
	if ( SERVER ) then -- Only set this stuff on the server, it is networked to clients automatically
		self:SetModel( models/items/ammocrate_ar2.mdl ) -- Set the model
		self:PhysicsInit( SOLID_VPHYSICS ) -- Initialize physics
		self:SetUseType( SIMPLE_USE ) -- Make sure ENT:Use is ran only once per use ( per press of the use button on the entity, by default the E key )
	end
end

function ENT:Think()
	if ( SERVER ) then -- Only set this stuff on the server
		self:NextThink( CurTime() ) -- Set the next think for the serverside hook to be the next frame/tick
		return true -- Return true to let the game know we want to apply the self:NextThink() call
	end
end

if ( SERVER ) then -- This hook is only available on the server
	function ENT:Use( activator, caller ) -- If a player uses this entity, play an animation
		if ( !self.Opened ) then -- If we are not opened
			self:ResetSequence( open ) -- Play the open sequence
			self.Opened = true -- We are now opened
		else
			self:ResetSequence( close ) -- Play the close sequence
			self.Opened = false -- We are now closed
		end
	end
end


"Entity/RemoveFlags"
Entity:RemoveFlags( number flag ) 
 Description
Removes specified flag(s) from the entity

 Arguments

 number flag


The flag(s) to remove, see FL_ Enums


"Entity/Respawn"
Entity:Respawn(  ) 
 Description
Makes the entity/weapon respawn.
Only usable on HL2 pickups and any weapons. Seems to be buggy with weapons.
Very unreliable.


"Entity/RemoveFromMotionController"
Entity:RemoveFromMotionController( PhysObj physObj ) 
 Description
Removes a PhysObject from the entitys motion controller so that ENTITY:PhysicsSimulate will no longer be called for given PhysObject.
You must first create a motion controller with Entity:StartMotionController.



NOTE


Only works on a scripted Entity of anim type


 Arguments

 PhysObj physObj


The PhysObj to remove from the motion controller.


"Entity/SendViewModelMatchingSequence"
Entity:SendViewModelMatchingSequence( number seq ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sends sequence animation to the view model. It is recommended to use this for view model animations, instead of Entity:ResetSequence.
This function is only usable on view models.



BUG


Sequences 0-6 will not be looped regardless if theyre marked as a looped animation or not.



 Arguments

 number seq


The sequence ID returned by Entity:LookupSequence or Entity:SelectWeightedSequence.

 Examples
 Example
Converting an ACT_VM_* enumeration to a sequence usable by the function.

local VModel = self.Owner:GetViewModel()
local EnumToSeq = VModel:SelectWeightedSequence( ACT_VM_PRIMARYATTACK )

VModel:SendViewModelMatchingSequence( EnumToSeq )
Output:

Sends the primary attack enumeration sequence to the view model and plays it.


"Entity/SetBloodColor"
Entity:SetBloodColor( number bloodColor ) 
 Description
Sets the blood color this entity uses.

 Arguments

 number bloodColor


An integer corresponding to BLOOD_COLOR_ Enums.


"Entity/SetAbsVelocity"
Entity:SetAbsVelocity( Vector velocity ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the entitys velocity.



NOTE


Actually binds to CBaseEntity::SetLocalVelocity() which sets the entitys velocity due to movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision or other world movement.


 Arguments

 Vector velocity


The new velocity to set.

 Examples
 Example
Makes Entity(1) fly upwards.

Entity( 1 ):SetAbsVelocity( Vector( 0, 0, 500 ) )


"Entity/SelectWeightedSequence"
Entity:SelectWeightedSequence( number act ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns sequence ID corresponding to given activity ID.
Opposite of Entity:GetSequenceActivity.
Similar to Entity:LookupSequence.
See also Entity:SelectWeightedSequenceSeeded.

 Arguments

 number act


The activity ID, see ACT_ Enums.

 Returns

 number


The sequence ID

 Examples
 Example
Use this hook to check if the model has a certain ACT_* enumeration, and if it does, play it.

local VModel = self.Owner:GetViewModel()

if ( self:Clip1() == 0 and VModel:SelectWeightedSequence( ACT_VM_RELOAD_EMPTY ) ) then

	local SEQ = self:LookupSequence( ACT_VM_RELOAD_EMPTY )

	if ( SEQ == -1 ) then

		print( reload )

		local EnumToSeq = VModel:SelectWeightedSequence( ACT_VM_RELOAD )

		--	Play the normal reload animation
		VModel:SendViewModelMatchingSequence( EnumToSeq )

	else

		print( reload empty )

		local EnumToSeq = VModel:SelectWeightedSequence( ACT_VM_RELOAD_EMPTY )

		-- Play the empty reload animation
		VModel:SendViewModelMatchingSequence( EnumToSeq )
		
	end

end
Output:

Will play the ACT_VM_RELOAD_EMPTY enumeration if the model has it. If not, it will play the normal reload enum.


"Entity/SetAngles"
Entity:SetAngles( Angle angles ) 
 Description
Sets the angles of the entity.



NOTE


To set a players angles, use Player:SetEyeAngles instead.


 Arguments

 Angle angles


The new angles.


"Entity/ResetSequenceInfo"
Entity:ResetSequenceInfo(  ) 
 Description
Reset entity sequence info such as playback rate, ground speed, last event check, etc.


"Entity/SetAttachment"
Entity:SetAttachment( Entity ent, number attachment ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should be using Entity:SetParent instead.
Parents the sprite to an attachment on another model.
Works only on env_sprite.
Despite existing on client, it doesnt actually do anything on client.

 Arguments

 Entity ent


The entity to attach/parent to

 Arguments

 number attachment


The attachment ID to parent to


"Entity/SetAnimTime"
Entity:SetAnimTime( number time ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the time (relative to CurTime) of the current animation frame, which is used to determine Entity:GetCycle.

 Arguments

 number time


The current animation time.

 Examples
 Example
Sets each players animation time to 1 second in the future, which causes their animations to freeze in place.

function GM:PrePlayerDraw( ply )

	ply:SetAnimTime( CurTime()+1 )

end
Output:


"Entity/SequenceDuration"
Entity:SequenceDuration( number seqid=nil ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns length of currently played sequence.



BUG


This will return incorrect results for weapons and viewmodels clientside in thirdperson.



 Arguments

 number seqid=nil


A sequence ID to return the length specific sequence of instead of the entitys main/currently playing sequence.

 Returns

 number


The length of the sequence

 Examples
 Example
Example usage for the argument. Retrieve length of animation on specific gesture slot.

local ply = Entity( 1 )
local seq = ply:SelectWeightedSequence( ACT_GMOD_TAUNT_CHEER )
local len = ply:SequenceDuration( seq )
print( ply, seq, len )
Output:

Player [1][Rubat]	303	2.7499999180436


"Entity/SetBodygroup"
Entity:SetBodygroup( number bodygroup, number value ) 
 Description
Sets an entities bodygroup.

 Arguments

 number bodygroup


The id of the bodygroup youre setting. Starts from 0.

 Arguments

 number value


The value youre setting the bodygroup to. Starts from 0.


"Entity/SetBoneMatrix"
Entity:SetBoneMatrix( number boneid, VMatrix matrix ) 
 Description
Sets the bone matrix of given bone to given matrix. See also Entity:GetBoneMatrix.
Does nothing on server.

 Arguments

 number boneid


The ID of the bone

 Arguments

 VMatrix matrix


The matrix to set.


"Entity/SelectWeightedSequenceSeeded"
Entity:SelectWeightedSequenceSeeded( number act, number seed ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns the sequence ID corresponding to given activity ID, and uses the provided seed for random selection. The seed should be the same server-side and client-side if used in a predicted environment.
See Entity:SelectWeightedSequence for a provided-seed version of this function.

 Arguments

 number act


The activity ID, see ACT_ Enums.

 Arguments

 number seed


The seed to use for randomly selecting a sequence in the case the activity ID has multiple sequences bound to it. Entity:SelectWeightedSequence uses the same seed as util.SharedRandom internally for this.

 Returns

 number


The sequence ID


"Entity/SetBodyGroups"
Entity:SetBodyGroups( string bodygroups ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the bodygroups from a string. A convenience function for Entity:SetBodygroup.

 Arguments

 string bodygroups


Body groups to set. Each single-digit number in the string represents a separate bodygroup. This make it impossible to set any bodygroup to a value higher than 9! For that you need to use Entity:SetBodygroup.

 Examples
 Example
Example of the format

Entity( 1 ):SetBodyGroups( 021 )
Output:

Sets first bodygroup value to 0, second to 2 and third to 1.


"Entity/SetAnimation"
Entity:SetAnimation( number playerAnim ) 
 Description
Sets a players third-person animation. Mainly used by Weapons to start the players weapon attack and reload animations.

 Arguments

 number playerAnim


Player animation, see PLAYER_ Enums.


"Entity/RestartGesture"
Entity:RestartGesture( number activity, boolean addIfMissing=true, boolean autokill=true ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Restarts the entitys animation gesture. If the given gesture is already playing, it will reset it and play it from the beginning.



NOTE


This function only works on BaseAnimatingOverlay entites.


 Arguments

 number activity


The activity number to send to the entity. See ACT_ Enums and Entity:GetSequenceActivity

 Arguments

 boolean addIfMissing=true


Add/start the gesture to if it has not been yet started.

 Arguments

 boolean autokill=true


"Entity/SetBoneController"
Entity:SetBoneController( number boneControllerID, number value ) 
 Description
Sets the specified value on the bone controller with the given ID of this entity, its used in HL1 to change the head rotation of NPCs, turret aiming and so on.



NOTE


This is the precursor of pose parameters, and only works for Half Life 1: Source models supporting it.


 Arguments

 number boneControllerID


The ID of the bone controller to set the value to.

Goes from 0 to 3.

 Arguments

 number value


The value to set on the specified bone controller.


"Entity/SetBonePosition"
Entity:SetBonePosition( number bone, Vector pos, Angle ang ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Sets the bone position and angles.

 Arguments

 number bone


The bone ID to manipulate

 Arguments

 Vector pos


The position to set

 Arguments

 Angle ang


The angles to set


"Entity/SetColor"
Entity:SetColor( table color=Color(255, 0, 255, 255) ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Sets the color of an entity.

 Arguments

 table color=Color(255, 0, 255, 255)


The color to set. Uses the Color structure.

 Examples
 Example
Loop through all players, make them black

local colBlack = Color( 0, 0, 0, 255 ) -- Creates a black color
for key, ply in pairs( player.GetAll() ) do -- Loop through all players on the server
	ply:SetColor( colBlack ) -- Sets the players color to colBlack
end


 Examples
 Example
Creates a wooden crate at 0,0,0 and turns it a transparent green

local ent = ents.Create( prop_physics )
ent:SetPos( Vector( 0,0,0 ) )
ent:SetModel( models/props_junk/wood_crate001a.mdl )
ent:Spawn()

ent:SetColor( Color( 0, 255, 0, 230 ) ) 
ent:SetRenderMode( RENDERMODE_TRANSALPHA ) -- You need to set the render mode on some entities in order for the color to change


"Entity/SetCollisionBounds"
Entity:SetCollisionBounds( Vector mins, Vector maxs ) 
 Description
Sets the collision bounds for the entity, which are used for triggers ( Entity:SetTrigger, ENTITY:Touch ), determining if rendering is necessary clientside, and collision ( If Entity:SetSolid set as SOLID_BBOX ).
Input bounds are relative to Entity:GetPos!
See also Entity:SetCollisionBoundsWS.

 Arguments

 Vector mins


The minimum vector of the bounds. The vector must be smaller than second argument on all axises.

 Arguments

 Vector maxs


The maximum vector of the bounds. The vector must be bigger than first argument on all axises.


"Entity/SetCollisionGroup"
Entity:SetCollisionGroup( number group ) 
 Description
Sets the entitys collision group.

 Arguments

 number group


Collision group of the entity, see COLLISION_GROUP_ Enums


"Entity/SetCollisionBoundsWS"
Entity:SetCollisionBoundsWS( Vector vec1, Vector vec2 ) 
 Description
Sets the collision bounds for the entity, which are used for triggers ( Entity:SetTrigger, ENTITY:Touch ), determining if rendering is necessary clientside, and collision ( If Entity:SetSolid set as SOLID_BBOX ).
Input bounds are in world coordinates!
See also Entity:SetCollisionBounds.

 Arguments

 Vector vec1


The first vector of the bounds.

 Arguments

 Vector vec2


The second vector of the bounds.


"Entity/SetDTAngle"
Entity:SetDTAngle( number key, Angle ang ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
Sets the specified angle on the entitys datatable.

 Arguments

 number key


Goes from 0 to 31.

 Arguments

 Angle ang


The angle to write on the entitys datatable.


"Entity/SetCreator"
Entity:SetCreator( Player ply ) 
 Description
Sets the creator of the SENT.

 Arguments

 Player ply


The creator


"Entity/SetDTFloat"
Entity:SetDTFloat( number key, number float ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
Sets the specified float on the entitys datatable.

 Arguments

 number key


Goes from 0 to 31.

 Arguments

 number float


The float to write on the entitys datatable.


"Entity/SetDTEntity"
Entity:SetDTEntity( number key, Entity ent ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
Sets the specified entity on this entitys datatable.

 Arguments

 number key


Goes from 0 to 31.

 Arguments

 Entity ent


The entity to write on this entitys datatable.


"Entity/SetDTBool"
Entity:SetDTBool( number key, boolean bool ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
Sets the specified bool on the entitys datatable.

 Arguments

 number key


Goes from 0 to 31.

 Arguments

 boolean bool


The boolean to write on the entitys metatable.


"Entity/SetCustomCollisionCheck"
Entity:SetCustomCollisionCheck( boolean enable ) 
 Description
Marks the entity to call GM:ShouldCollide.

 Arguments

 boolean enable


Enable or disable the custom collision check


"Entity/SetCycle"
Entity:SetCycle( number value ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the progress of the current animation to a specific value between 0 and 1.



BUG


This does not work with viewmodels.



 Arguments

 number value


The desired cycle value

 Examples
 Example
Set the entity to be half way through its current sequence

ent:SetCycle( .5 )


"Entity/SetGravity"
Entity:SetGravity( number gravityMultiplier ) 
 Description
Sets the gravity multiplier of the entity.



BUG


This function is not predicted.



 Arguments

 number gravityMultiplier


Value which specifies the gravity multiplier.


"Entity/SetEntity"
Entity:SetEntity( string name, Entity entity ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Allows you to set the Start or End entity attachment for the rope.

 Arguments

 string name


The name of the variable to modify.

Accepted names are StartEntity and EndEntity.

 Arguments

 Entity entity


The entity to apply to the specific attachment.

 Examples
 Example
As seen in the constraints module.

local rope = ents.Create( keyframe_rope )

-- Attachment point 1
rope:SetEntity( StartEntity, 	Entity( 1 ) )
-- Attachment point 2
rope:SetEntity( EndEntity, 	Entity( 2 ) )


"Entity/SetLagCompensated"
Entity:SetLagCompensated( boolean enable ) 
 Description
This allows the entity to be lag compensated during Player:LagCompensation.



NOTE


Players are lag compensated by default and theres no need to call this function for them.
Its best to not enable lag compensation on parented entities, as the system does not handle it that well ( they will be moved back but then the entity will lag behind ).
Parented entities move back with the parent if its lag compensated, so if you are making some kind of armor piece you shouldnt do anything.


As a side note for parented entities, if your entity can be shot at, keep in mind that its collision bounds need to be bigger than the bones hitbox the entity is parented to, or hull/line traces ( such as the crowbar attack or bullets ) might not hit at all.

 Arguments

 boolean enable


Whether the entity should be lag compensated or not.


"Entity/SetHitboxSet"
Entity:SetHitboxSet( number id ) 
 Description
Sets the current Hitbox set for the entity.

 Arguments

 number id


The new hitbox set to set. Can be a name as a string, or the ID as a number.

If the operation failed, the function will silently fail.


"Entity/SetElasticity"
Entity:SetElasticity( number elasticity ) 
 Description
Sets the elasticity of this entity, used by some flying entities such as the Helicopter NPC to determine how much it should bounce around when colliding.

 Arguments

 number elasticity


The elasticity to set.


"Entity/SetFriction"
Entity:SetFriction( number friction ) 
 Description
Sets how much friction an entity has when sliding against a surface. Entities default to 1 (100%) and can be higher or even negative.



NOTE


Works only for MOVETYPE_STEP entities.




BUG


This has no effect on players.



 Arguments

 number friction


Friction multiplier


"Entity/SetGroundEntity"
Entity:SetGroundEntity( Entity ground ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the ground the entity is standing on.

 Arguments

 Entity ground


The ground entity.

 Examples
 Example
Gives all players the ability to (sort of) walk on water.

-- shared.lua tick
function GM:Tick()
	
	local trace = {}

	local world = Entity( 0 )
	
	for p, ply in pairs( player.GetAll() ) do
	
		trace = util.TraceLine( {
			start = ply:GetPos() + Vector( 0, 0, 72 ),
			endpos = ply:GetPos() + Vector( 0, 0, -3 ),
			mask = MASK_WATER,
			filter = function( ent ) return true end
		} )
		
		if( trace.Hit ) then
			ply:SetGravity( 0.0001 )
			ply:SetGroundEntity( world )
		else
			ply:SetGravity( 1.0 )
		end
		
	end
	
end


"Entity/SetHealth"
Entity:SetHealth( number newHealth ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Sets the health of the entity.



NOTE


You may want to take Entity:GetMaxHealth into account when calculating what to set health to, in case a gamemode has a different max health than 100.


 Arguments

 number newHealth


New health value.

 Examples
 Example
Sets the entitys health to their maximum health.

Entity( 1 ):SetHealth( Entity( 1 ):GetMaxHealth() )
Output:

The entitys health is now full.
 Examples
 Example
Deducts 50 points of health from the entity.

Entity( 1 ):SetHealth( Entity( 1 ):Health() - 50 )
Output:

The entity now has 50 less health.


"Entity/SetDTString"
Entity:SetDTString( number key, string str ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
Sets the specified string on the entitys datatable.



NOTE


The length of these strings are capped at 512 characters.


 Arguments

 number key


Goes from 0 to 3.

 Arguments

 string str


The string to write on the entitys datatable, cant be more than 512 characters per string.


"Entity/SetDTInt"
Entity:SetDTInt( number key, number integer ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
Sets the specified integer on the entitys datatable.

 Arguments

 number key


Goes from 0 to 31.

 Arguments

 number integer


The integer to write on the entitys datatable. This will be cast to a 32-bit signed integer internally.


"Entity/SetEyeTarget"
Entity:SetEyeTarget( Vector pos ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Sets the position an entitys eyes look toward.

 Arguments

 Vector pos


The world position the entity is looking toward.

 Examples
 Example
Makes an NPC (self) look into a nearby players eyes.

for p, ply in pairs( player.GetAll() ) do
    if( ply:EyePos():Distance( self:EyePos() ) &lt;= 60 ) then
        self:SetEyeTarget( ply:EyePos() )
        break
    end
end


 Examples
 Example
Makes an entity look at a vector the way the eyeposer does it

local lookat = Vector( 0, 0, 0 )

local attachment = ent:GetAttachment( ent:LookupAttachment( eyes ) )
local LocalPos, LocalAng = WorldToLocal( lookat, Angle( 0, 0, 0 ), attachment.Pos, attachment.Ang )
ent:SetEyeTarget( LocalPos )


"Entity/SetLayerDuration"
Entity:SetLayerDuration( number layerID, number duration ) 
 Description
Sets the duration of given layer. This internally overrides the Entity:SetLayerPlaybackRate.



NOTE


This function only works on BaseAnimatingOverlay entites!


 Arguments

 number layerID


The Layer ID

 Arguments

 number duration


The new duration of the layer in seconds.


"Entity/SetDTVector"
Entity:SetDTVector( number key, Vector vec ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
Sets the specified vector on the entitys datatable.

 Arguments

 number key


Goes from 0 to 31.

 Arguments

 Vector vec


The vector to write on the entitys datatable.


"Entity/SetIK"
Entity:SetIK( boolean useIK=false ) 
 Description
Enables or disable the inverse kinematic usage of this entity.

 Arguments

 boolean useIK=false


The state of the IK.


"Entity/SetLayerPlaybackRate"
Entity:SetLayerPlaybackRate( number layerID, number rate ) 
 Description
Sets the layer player back rate. See also Entity:SetLayerDuration.



NOTE


This function only works on BaseAnimatingOverlay entites!


 Arguments

 number layerID


The Layer ID

 Arguments

 number rate


The new playback rate.


"Entity/SetLayerCycle"
Entity:SetLayerCycle( number layerID, number cycle ) 
 Description
Sets the animation cycle/frame of given layer.



NOTE


This function only works on BaseAnimatingOverlay entites!


 Arguments

 number layerID


The Layer ID

 Arguments

 number cycle


The new animation cycle/frame for given layer.


"Entity/SetLayerBlendOut"
Entity:SetLayerBlendOut( number layerID, number blendOut ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


NOTE


This function only works on BaseAnimatingOverlay entites!


 Arguments

 number layerID


The Layer ID

 Arguments

 number blendOut


"Entity/SetLayerPriority"
Entity:SetLayerPriority( number layerID, number priority ) 
 Description
Sets the priority of given layer.



NOTE


This function only works on BaseAnimatingOverlay entites!


 Arguments

 number layerID


The Layer ID

 Arguments

 number priority


The new priority of the layer.


"Entity/SetKeyValue"
Entity:SetKeyValue( string key, string value ) 
 Description
Sets key value for the entity.

 Arguments

 string key


The key

 Arguments

 string value


The value


"Entity/SetFlexWeight"
Entity:SetFlexWeight( number flex, number weight ) 
 Description
Sets the flex weight.

 Arguments

 number flex


The ID of the flex to modify weight of

 Arguments

 number weight


The new weight to set


"Entity/SetLayerBlendIn"
Entity:SetLayerBlendIn( number layerID, number blendIn ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


NOTE


This function only works on BaseAnimatingOverlay entites!


 Arguments

 number layerID


The Layer ID

 Arguments

 number blendIn


"Entity/SetLayerLooping"
Entity:SetLayerLooping( number layerID, boolean loop ) 
 Description
Sets whether the layer should loop or not.



NOTE


This function only works on BaseAnimatingOverlay entites!


 Arguments

 number layerID


The Layer ID

 Arguments

 boolean loop


Whether the layer should loop or not.


"Entity/SetLocalAngularVelocity"
Entity:SetLocalAngularVelocity( Angle angVel ) 
 Description
Sets the entitys angular velocity (rotation speed).

 Arguments

 Angle angVel


The angular velocity to set.


"Entity/SetLocalAngles"
Entity:SetLocalAngles( Angle ang ) 
 Description
Sets angles relative to angles of Entity:GetParent

 Arguments

 Angle ang


The local angle


"Entity/SetLegacyTransform"
Entity:SetLegacyTransform( boolean enabled ) 
 Description
This forces an entity to use the bone transformation behaviour from versions prior to 2014-07-08.
This behaviour affects Entity:EnableMatrix and Entity:SetModelScale and is incorrect, therefore this function be used exclusively as a quick fix for old scripts that rely on it.

 Arguments

 boolean enabled


Whether the entity should use the old bone transformation behaviour or not.


"Entity/SetFlexScale"
Entity:SetFlexScale( number scale ) 
 Description
Sets the flex scale of the entity.



BUG


This does not work on ClientsideModels or ClientsideRagdolls.



 Arguments

 number scale


The new flex scale to set to


"Entity/SetLayerWeight"
Entity:SetLayerWeight( number layerID, number weight ) 
 Description
Sets the layer weight. This influences how strongly the animation should be overriding the normal animations of the entity.



NOTE


This function only works on BaseAnimatingOverlay entites!


 Arguments

 number layerID


The Layer ID

 Arguments

 number weight


The new layer weight.


"Entity/SetLocalPos"
Entity:SetLocalPos( Vector pos ) 
 Description
Sets local position relative to the parented position. This is for use with Entity:SetParent to offset position.

 Arguments

 Vector pos


The local position


"Entity/SetLOD"
Entity:SetLOD( number lod=-1 ) 
 Description
Sets the Level Of Detail model to use with this entity. This may not work for all models if the model doesnt include any LOD sub models.
This function works exactly like the clientside r_lod convar and takes priority over it.

 Arguments

 number lod=-1


The Level Of Detail model ID to use. -1 leaves the engine to automatically set the Level of Detail.

The Level Of Detail may range from 0 to 8, with 0 being the highest quality and 8 the lowest.


"Entity/SetMaxHealth"
Entity:SetMaxHealth( number maxhealth ) 
 Description
Sets the maximum health for entity. Note, that you can still set entitys health above this amount with Entity:SetHealth.

 Arguments

 number maxhealth


What the max health should be


"Entity/SetModelName"
Entity:SetModelName( string modelname ) 
 Description
Alter the model name returned by Entity:GetModel. Does not affect the entitys actual model.

 Arguments

 string modelname


The new model name.


"Entity/SetModelScale"
Entity:SetModelScale( number scale, number deltaTime=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Scales the model of the entity, if the entity is a Player or an NPC the hitboxes will be scaled as well.
For some entities, calling Entity:Activate after this will scale the collision bounds and PhysObj as well; be wary as theres no optimization being done internally and highly complex collision models might crash the server.
This is the same system used in TF2 for the Mann Vs Machine robots.
To resize the entity along any axis, use Entity:EnableMatrix instead.
If your old scales are wrong due to a recent update, use Entity:SetLegacyTransform as a quick fix.



BUG


The hull does not scale properly with this function.





BUG


This does not scale procedural bones.



 Arguments

 number scale


A float to scale the model by. 0 will not draw anything. &lt; 0 will draw the model inverted.

 Arguments

 number deltaTime=0


Transition time of the scale change, set to 0 to modify the scale right away.

 Examples
 Example
From the Biggify option of right clicking an npc

ent:SetModelScale( ent:GetModelScale() * 1.25, 1 )


"Entity/SetLocalVelocity"
Entity:SetLocalVelocity( Vector velocity ) 
 Description
Sets the entitys local velocity which is their velocity due to movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision or other world movement.



WARNING


Same as Entity:SetAbsVelocity, but clamps the given velocity, and is not recommended to be used because of that.


 Arguments

 Vector velocity


The new velocity to set.


"Entity/SetModel"
Entity:SetModel( string modelName ) 
 Description
Sets the model of the entity.

 Arguments

 string modelName


New model value.


"Entity/SetNetworkAngles"
Entity:SetNetworkAngles( Angle angle ) 
 Description
Alters the entitys perceived serverside angle on the client.

 Arguments

 Angle angle


Networked angle.


"Entity/SetName"
Entity:SetName( string mappingName ) 
 Description
Sets the mapping name of the entity.

 Arguments

 string mappingName


The name to set for the entity.


"Entity/SetNetworkedEntity"
Entity:SetNetworkedEntity( string key, Entity value=NULL ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use Entity:SetNWEntity instead.
Sets a networked entity value at specified index on the entity.
The value then can be accessed with Entity:GetNetworkedEntity both from client and server.



NOTE


Running this function clientside will only set it clientside for the client it is called on.


 Arguments

 string key


The key to associate the value with

 Arguments

 Entity value=NULL


The value to set


"Entity/SetMoveCollide"
Entity:SetMoveCollide( number moveCollideType ) 
 Description
Sets the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide?

 Arguments

 number moveCollideType


The move collide type, see MOVECOLLIDE_ Enums


"Entity/SetNetworkedBool"
Entity:SetNetworkedBool( string key, boolean value=false ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use Entity:SetNWBool instead.
Sets a networked boolean value at specified index on the entity.
The value then can be accessed with Entity:GetNetworkedBool both from client and server.



NOTE


Running this function clientside will only set it clientside for the client it is called on.


 Arguments

 string key


The key to associate the value with

 Arguments

 boolean value=false


The value to set


"Entity/SetMoveParent"
Entity:SetMoveParent( Entity Parent ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the Movement Parent of an entity to another entity.
Similar to Entity:SetParent, except the objects coordinates are not translated automatically before parenting.

 Arguments

 Entity Parent


The entity to change this entitys Movement Parent to.

 Examples
 Example
Sets the Movement Entity of a new entity to Player 1.

local hat = ents.Create( prop_physics )
//Position and angles are relative to our future parent.
hat:SetPos( Vector( 0,0,10 ) )
hat:SetAngles( Angle( 0,90,0 ) )

hat:SetMoveParent( Entity( 1 ) )

hat:Spawn()


"Entity/SetNetworkedString"
Entity:SetNetworkedString( string key, string value= ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use Entity:SetNWString instead.
Sets a networked string value at specified index on the entity.
The value then can be accessed with Entity:GetNetworkedString both from client and server.



NOTE


Running this function clientside will only set it clientside for the client it is called on.


 Arguments

 string key


The key to associate the value with

 Arguments

 string value=


The value to set


"Entity/SetNetworkedInt"
Entity:SetNetworkedInt( string key, number value=0 ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use Entity:SetNWInt instead.
Sets a networked integer value at specified index on the entity.
The value then can be accessed with Entity:GetNetworkedInt both from client and server.



NOTE


Running this function clientside will only set it clientside for the client it is called on.


 Arguments

 string key


The key to associate the value with

 Arguments

 number value=0


The value to set


"Entity/SetNetworkedVarProxy"
Entity:SetNetworkedVarProxy( string name, function callback ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should be using Entity:SetNWVarProxy instead.
Sets callback function to be called when given NWVar changes.



NOTE


Currently this function only works for the NW2Var system (accessed by adding a 2 in between Networked and Var for most NetworkedVar functions), which will replace the original one at some point in the future


 Arguments

 string name


The name of the NWVar to add callback for.

 Arguments

 function callback


The function to be called when the NWVar changes.


"Entity/SetNetworkedFloat"
Entity:SetNetworkedFloat( string key, number value=0 ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use Entity:SetNWFloat instead.
Sets a networked float value at specified index on the entity.
The value then can be accessed with Entity:GetNetworkedFloat both from client and server.
Seems to be the same as Entity:GetNetworkedInt.



NOTE


Running this function clientside will only set it clientside for the client it is called on.


 Arguments

 string key


The key to associate the value with

 Arguments

 number value=0


The value to set


"Entity/SetMaterial"
Entity:SetMaterial( string materialName, boolean forceMaterial=false ) 
 Description
Sets the rendering material override of the entity.
To set a Lua material created with CreateMaterial, just prepend a ! to the material name.



NOTE


If you wish to override a single material on the model, use Entity:SetSubMaterial instead.




NOTE


Please note that to apply materials to models, that material must have VertexLitGeneric shader. For that reason you cannot apply map textures onto models, map textures use a different material shader - LightmappedGeneric.




BUG


The servers value takes priority on the client.



 Arguments

 string materialName


New material name. Use an empty string () to reset to the default materials.

 Arguments

 boolean forceMaterial=false


Use it if you wish to apply material other than VertexLitGeneric (such as tools/toolswhite).


"Entity/SetNetworkedVector"
Entity:SetNetworkedVector( string key, Vector value=Vector( 0, 0, 0 ) ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use Entity:SetNWVector instead.
Sets a networked vector value at specified index on the entity.
The value then can be accessed with Entity:GetNetworkedVector both from client and server.



NOTE


Running this function clientside will only set it clientside for the client it is called on.


 Arguments

 string key


The key to associate the value with

 Arguments

 Vector value=Vector( 0, 0, 0 )


The value to set


"Entity/SetNotSolid"
Entity:SetNotSolid( boolean IsNotSolid ) 
 Description
Sets whether the entity is solid or not.

 Arguments

 boolean IsNotSolid


True will make the entity not solid, false will make it solid.


"Entity/SetNetworkedNumber"
Entity:SetNetworkedNumber( any index, number number ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets a networked number at the specified index on the entity.

 Arguments

 any index


The index that the value is stored in.

 Arguments

 number number


The value to network.

 Examples
 Example
This will set the networked number score on all clients to 3.

for k, v in pairs( player.GetAll() ) do
    v:SetNetworkedInt( score, 3 )
end


"Entity/SetNoDraw"
Entity:SetNoDraw( boolean shouldNotDraw ) 
 Description
Sets if the entitys model should render at all.
If set on the server, this entity will no longer network to clients, and for all intents and purposes cease to exist clientside.

 Arguments

 boolean shouldNotDraw


true disables drawing


"Entity/SetNetworkedAngle"
Entity:SetNetworkedAngle( string key, Angle value=Angle( 0, 0, 0 ) ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use Entity:SetNWAngle instead.
Sets a networked angle value at specified index on the entity.
The value then can be accessed with Entity:GetNetworkedAngle both from client and server.



NOTE


Running this function clientside will only set it clientside for the client it is called on.


 Arguments

 string key


The key to associate the value with

 Arguments

 Angle value=Angle( 0, 0, 0 )


The value to set


"Entity/SetNetworkOrigin"
Entity:SetNetworkOrigin( Vector origin ) 
 Description
Virtually changes entity position for clients. Does the same thing as Entity:SetPos when used serverside.

 Arguments

 Vector origin


The position to make clients think this entity is at.


"Entity/SetNextClientThink"
Entity:SetNextClientThink( number nextthink ) 
 Description
Sets the next time the clientside ENTITY:Think is called.

 Arguments

 number nextthink


The next time, relative to CurTime, to execute the ENTITY:Think clientside.


"Entity/SetNWEntity"
Entity:SetNWEntity( string key, Entity value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets a networked entity value on the entity.
The value can then be accessed with Entity:GetNWEntity both from client and server.



NOTE


Running this function clientside will only set it for the client it is called on.


 Arguments

 string key


The key to associate the value with

 Arguments

 Entity value


The value to set

 Examples
 Example
This will set the networked entity owner on all clients to themselves.

for k, v in pairs( player.GetAll() ) do
    v:SetNWEntity( owner, v )
end


"Entity/SetNWAngle"
Entity:SetNWAngle( string key, Angle value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets a networked angle value on the entity.
The value can then be accessed with Entity:GetNWAngle both from client and server.



NOTE


Running this function clientside will only set it for the client it is called on.


 Arguments

 string key


The key to associate the value with

 Arguments

 Angle value


The value to set

 Examples
 Example
This will set the networked angle direction on all clients that is pointing straight up.

for k, v in pairs( player.GetAll() ) do
    v:SetNWAngle( direction, Angle( -90, 0, 0 ) )
end


"Entity/SetNWBool"
Entity:SetNWBool( string key, boolean value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets a networked boolean value on the entity.
The value can then be accessed with Entity:GetNWBool both from client and server.



NOTE


Running this function clientside will only set it for the client it is called on.


 Arguments

 string key


The key to associate the value with

 Arguments

 boolean value


The value to set

 Examples
 Example
Sets a networked boolean with a key of VIP and a value of true on a player.

player:SetNWBool( VIP, true )
print( player:GetNWBool( VIP ) )
Output:

true


"Entity/SetNWVector"
Entity:SetNWVector( string key, Vector value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets a networked vector value on the entity.
The value can then be accessed with Entity:GetNWVector both from client and server.



NOTE


Running this function clientside will only set it for the client it is called on.


 Arguments

 string key


The key to associate the value with

 Arguments

 Vector value


The value to set

 Examples
 Example
This will set the networked angle direction on all clients to straight up.

for k, v in pairs( player.GetAll() ) do
    v:SetNWVector( direction, Vector( 0, 0, 1 ) )
end


"Entity/SetNWVarProxy"
Entity:SetNWVarProxy( any key, function callback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets a function to be called when the NWVar changes.



NOTE


Currently this function only works for the NW2Var system (accessed by adding a 2 in between NW and Var for most NWVar functions), which will replace the original one at some point in the future


 Arguments

 any key


The key of the NWVar to add callback for.

 Arguments

 function callback


The function to be called when the NWVar changes. It has 3 arguments:

 Entity ent - The entity
 string name - Name of the NWVar that has changed
 any oldval - The old value
 any newval - The new value


 Examples
 Example
Prints all changes to a NWVar called Key of Player 1.

Entity( 1 ):SetNWVarProxy( Key, print )
Entity( 1 ):SetNWString( Key, Value )
Entity( 1 ):SetNWString( Key, Table )
Output:

Player [1][Player1]	Key	nil	Value
Player [1][Player1]	Key	Value	Table


"Entity/SetNWString"
Entity:SetNWString( string key, string value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets a networked string value on the entity.
The value can then be accessed with Entity:GetNWString both from client and server.



NOTE


Running this function clientside will only set it for the client it is called on.


 Arguments

 string key


The key to associate the value with

 Arguments

 string value


The value to set, up to 199 characters.

 Examples
 Example
Sets a networked string with a key of Nickname and a value of
John on a player.

player:SetNWString( Nickname, John )
print( player:GetNWString( Nickname ) )
Output:

John


"Entity/SetOwner"
Entity:SetOwner( Entity owner=NULL ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the owner of this entity, disabling all physics interaction with it.



NOTE


This function is generally used to disable physics interactions on projectiles being fired by their owner, but can also be used for normal ownership in case physics interactions are not involved at all. The Gravity gun will be able to pick up the entity even if the owner cant collide with it


 Arguments

 Entity owner=NULL


The entity to be set as owner.

 Examples
 Example
Taken from Garrys Flechette gun , shoots a hunters flechette and sets the owner of the flechette to the player using the weapon.

function SWEP:PrimaryAttack()
	self:SetNextPrimaryFire( CurTime() + 0.1 )
	
	if ( !SERVER ) then return end

	local Forward = self.Owner:EyeAngles():Forward()

	local ent = ents.Create( hunter_flechette )
	
	if ( IsValid( ent ) ) then

		ent:SetPos( self.Owner:GetShootPos() + Forward * 32 )
		ent:SetAngles( self.Owner:EyeAngles() )
		ent:Spawn()
		ent:SetVelocity( Forward * 2000 )
		ent:SetOwner( self.Owner )
	end
end


"Entity/SetParentPhysNum"
Entity:SetParentPhysNum( number bone ) 
 Description
Sets the parent of an entity to another entity with the given physics bone number. Similar to Entity:SetParent, except it is parented to a physbone. This function is useful mainly for ragdolls.



NOTE


Despite this function being available server side, it doesnt actually do anything server side.


 Arguments

 number bone


Physics bone number to attach to. Use 0 for objects with only one physics bone. (See Entity:GetPhysicsObjectNum)


"Entity/SetNWInt"
Entity:SetNWInt( string key, number value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets a networked integer (whole number) value on the entity.
The value can then be accessed with Entity:GetNWInt both from client and server.
See Entity:SetNWFloat for numbers that arent integers.



NOTE


Running this function clientside will only set it for the client it is called on.




BUG


This function will not round decimal values as it actually networks a float internally.



 Arguments

 string key


The key to associate the value with

 Arguments

 number value


The value to set

 Examples
 Example
This will set the networked integer money on all clients to 100.

for k, v in ipairs( player.GetAll() ) do
    v:SetNWInt( money, 100 )
end


"Entity/SetPersistent"
Entity:SetPersistent( boolean persist ) 
 Description
Sets whether or not the given entity is persistent. A persistent entity will be saved on server shutdown and loaded back when the server starts up. Additionally, by default persistent entities cannot be grabbed with the physgun and tools cannot be used on them.
In sandbox, this can be set on an entity by opening the context menu, right clicking the entity, and choosing Make Persistent.



NOTE


Persistence can only be enabled with the sbox_persist convar, which works as an identifier for the current set of persistent entities. An empty identifier (which is the default value) disables this feature.




NOTE


This feature only works in Sandbox and Sandbox-derived gamemodes.


 Arguments

 boolean persist


Whether or not the entity should be persistent.


"Entity/SetPredictable"
Entity:SetPredictable( boolean setPredictable ) 
 Description
Sets whether an entity should be predictable or not.
When an entity is set as predictable, its DT vars can be changed during predicted hooks. This is useful for entities which can be controlled by player input.
Any datatable value that mismatches from the server will be overridden and a prediction error will be spewed.
Weapons are predictable by default, and the drive system uses this function to make the controlled prop predictable as well.



NOTE


This function resets the datatable variables everytime its called, it should ideally be called when a player starts using the entity and when he stops




NOTE


Entities set as predictable with this function will be unmarked when the user lags and receives a full packet update, to handle such case visit GM:NotifyShouldTransmit


 Arguments

 boolean setPredictable


whether to make this entity predictable or not.


"Entity/SetPlaybackRate"
Entity:SetPlaybackRate( number fSpeed ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Allows you to set how fast an entitys animation will play, with 1.0 being the default speed.

 Arguments

 number fSpeed


How fast the animation will play.

 Examples
 Example
Makes Entity(1)s viewmodel play animations 50% slower.

Entity( 1 ):GetViewModel():SetPlaybackRate( 0.5 )
Output:

Entity(1)s viewmodel now plays animations 50% slower.


"Entity/SetPos"
Entity:SetPos( Vector position ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Moves the entity to the specified position.



NOTE


If the new position doesnt take effect right away, you can use Entity:SetupBones to force it to do so. This issue is especially common when trying to render the same entity twice or more in a single frame at different positions.




WARNING


Entities with Entity:GetSolid of SOLID_BBOX will have their angles reset!




BUG


This will fail inside of predicted functions called during player movement processing. This includes WEAPON:PrimaryAttack and WEAPON:Think.



 Arguments

 Vector position


The position to move the entity to.

 Examples
 Example
Sets the players position to (0, 0, 0)

Entity( 1 ):SetPos( Vector( 0, 0, 0 ) )
Output:

The player is now located at Vector(0, 0, 0)


"Entity/SetPoseParameter"
Entity:SetPoseParameter( string poseName, number poseValue ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets the specified pose parameter to the specified value.
You should call Entity:InvalidateBoneCache after calling this function.



NOTE


Avoid calling this in draw hooks, especially when animating things, as it might cause visual artifacts.


 Arguments

 string poseName


Name of the pose parameter.

 Arguments

 number poseValue


The value to set the pose to.

 Examples
 Example
Copies pose parameters from one entity to another. Since Entity.GetPoseParameter returns pose parameter values 0-1 on the client, they have to be remapped to the range returned by Entity.GetPoseParameterRange before being set on the target entity.

local function CopyPoseParams( pEntityFrom, pEntityTo )
	if ( SERVER ) then
		for i = 0, pEntityFrom:GetNumPoseParameters() - 1 do
			local sPose = pEntityFrom:GetPoseParameterName( i )
			pEntityTo:SetPoseParameter( sPose, pEntityFrom:GetPoseParameter( sPose ) )
		end
	else
		for i = 0, pEntityFrom:GetNumPoseParameters() - 1 do
			local flMin, flMax = pEntityFrom:GetPoseParameterRange( i )
			local sPose = pEntityFrom:GetPoseParameterName( i )
			pEntityTo:SetPoseParameter( sPose, math.Remap( pEntityFrom:GetPoseParameter( sPose ), 0, 1, flMin, flMax ) )
		end
	end
end


"Entity/SetNWFloat"
Entity:SetNWFloat( string key, number value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets a networked float (number) value on the entity.
The value can then be accessed with Entity:GetNWFloat both from client and server.
Unlike Entity:SetNWInt, floats dont have to be whole numbers.



NOTE


Running this function clientside will only set it for the client it is called on.


 Arguments

 string key


The key to associate the value with

 Arguments

 number value


The value to set

 Examples
 Example
This will set the networked float test on all clients to 0.5.

for k,v in pairs( player.GetAll() ) do
    v:SetNWFloat( test, 0.5 )
end


"Entity/SetParent"
Entity:SetParent( Entity parent=NULL, number attachmentId=-1 ) 
 Description
Sets the parent of this entity, making it move with its parent.



NOTE


This does not work on the world.




WARNING




 Arguments

 Entity parent=NULL


The entity to parent to. Setting this to nil will clear the parent.

 Arguments

 number attachmentId=-1


The attachment id to use when parenting, defaults to -1 or whatever the parent had set previously.



NOTE


You must call Entity:SetMoveType( MOVETYPE_NONE ) on the child for this argument to have any effect!


"Entity/SetRenderAngles"
Entity:SetRenderAngles( Angle newAngles ) 
 Description
Sets the render angles of the Entity.

 Arguments

 Angle newAngles


The new render angles to be set to.


"Entity/SetPhysConstraintObjects"
Entity:SetPhysConstraintObjects( PhysObj Phys1, PhysObj Phys2 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
When called on a constraint entity, sets the two physics objects to be constrained.
Usage is not recommended as the Constraint library provides easier ways to deal with constraints.

 Arguments

 PhysObj Phys1


The first physics object to be constrained.

 Arguments

 PhysObj Phys2


The second physics object to be constrained.

 Examples
 Example
From constraint.lua

Constraint = ents.Create( phys_lengthconstraint )
	Constraint:SetPos( WPos1 )
	Constraint:SetKeyValue( attachpoint, tostring( WPos2 ) )
	Constraint:SetKeyValue( minlength, 0.0 )
	Constraint:SetKeyValue( length, length + addlength )
	if ( forcelimit ) then Constraint:SetKeyValue( forcelimit, forcelimit ) end
	if ( rigid ) then Constraint:SetKeyValue( spawnflags, 2 ) end
	Constraint:SetPhysConstraintObjects( Phys1, Phys2 )
Constraint:Spawn()
Constraint:Activate()


"Entity/SetRagdollAng"
Entity:SetRagdollAng( number boneid, Angle pos ) 
 Description
Sets the bone angles. This is used alongside Kinect in Entity:SetRagdollBuildFunction, for more info see ragdoll_motion entity.

 Arguments

 number boneid


Bone ID

 Arguments

 Angle pos


Angle to set


"Entity/SetPreventTransmit"
Entity:SetPreventTransmit( Player player, boolean stopTransmitting ) 
 Description
Prevents the server from sending any further information about the entity to a player.



BUG


This does not work for nextbots.



Validation required.
This page contains possibly incorrect or incomplete information. Further testing is required.
UNCONFIRMED: When using this function, Entity:SetFlexScale will conflict with this function. Instead, consider using Entity:SetFlexScale on the client.

 Arguments

 Player player


The player to stop networking the entity to.

 Arguments

 boolean stopTransmitting


true to stop the entity from networking, false to make it network again.


"Entity/SetRagdollPos"
Entity:SetRagdollPos( number boneid, Vector pos ) 
 Description
Sets the bone position. This is used alongside Kinect in Entity:SetRagdollBuildFunction, for more info see ragdoll_motion entity.

 Arguments

 number boneid


Bone ID

 Arguments

 Vector pos


Position to set


"Entity/SetRenderBounds"
Entity:SetRenderBounds( Vector mins, Vector maxs, Vector add=Vector( 0, 0, 0 ) ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Sets the render bounds for the entity. For world space coordinates see Entity:SetRenderBoundsWS.

 Arguments

 Vector mins


The minimum corner of the bounds, relative to origin of the entity.

 Arguments

 Vector maxs


The maximum corner of the bounds, relative to origin of the entity.

 Arguments

 Vector add=Vector( 0, 0, 0 )


If defined, adds this vector to maxs and subtracts this vector from mins.


"Entity/SetRenderClipPlane"
Entity:SetRenderClipPlane( Vector planeNormal, number planePosition ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Used to specify a plane, past which an object will be visually clipped.

 Arguments

 Vector planeNormal


The normal of the plane. Anything behind the normal will be clipped.

 Arguments

 number planePosition


The position of the plane.

 Examples
 Example
Creates a blue barrel at Vector(0, 0, 0), freezes it, and will visually clip the barrels lower half.

local ent = ents.Create( prop_physics )
ent:SetModel( models/props_borealis/bluebarrel001.mdl )
ent:SetPos( Vector( 0, 0, 0 ) )
ent:Spawn()
ent:GetPhysicsObject():EnableMotion( false )

local normal = ent:GetUp()
local position = normal:Dot( ent:GetPos() )
ent:SetRenderClipPlaneEnabled( true )
ent:SetRenderClipPlane( normal, position )


"Entity/SetRagdollBuildFunction"
Entity:SetRagdollBuildFunction( function func ) 
 Description
Sets the function to build the ragdoll. This is used alongside Kinect, for more info see ragdoll_motion entity.

 Arguments

 function func


The build function. This function has one argument:

 Entity ragdoll - The ragdoll to build


"Entity/SetPhysicsAttacker"
Entity:SetPhysicsAttacker( Player ent, number timeLimit=5 ) 
 Description
Sets the player who gets credit if this entity kills something with physics damage within the time limit.



NOTE


This can only be called on props.


 Arguments

 Player ent


Player who gets the kills. Setting this to a non-player entity will not work.

 Arguments

 number timeLimit=5


Time in seconds until the entity forgets its physics attacker and prevents it from getting the kill credit.


"Entity/SetRenderBoundsWS"
Entity:SetRenderBoundsWS( Vector mins, Vector maxs, Vector add=Vector( 0, 0, 0 ) ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Sets the render bounds for the entity in world space coordinates. For relative coordinates see Entity:SetRenderBounds.

 Arguments

 Vector mins


The minimum corner of the bounds, relative to origin of the world/map.

 Arguments

 Vector maxs


The maximum corner of the bounds, relative to origin of the world/map.

 Arguments

 Vector add=Vector( 0, 0, 0 )


If defined, adds this vector to maxs and subtracts this vector from mins.


"Entity/SetRenderClipPlaneEnabled"
Entity:SetRenderClipPlaneEnabled( boolean enabled ) 
 Description
Enables the use of clipping planes to cut objects.

 Arguments

 boolean enabled


Enable or disable clipping planes


"Entity/SetRenderFX"
Entity:SetRenderFX( number renderFX ) 
 Description
Sets entitys render FX.

 Arguments

 number renderFX


The new render FX to set, see kRenderFx_ Enums


"Entity/SetSaveValue"
Entity:SetSaveValue( string name, any value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Sets a save value for an entity.

 Arguments

 string name


Name of the save value to set

 Arguments

 any value


Value to set

 Returns

 boolean


Key successfully set

 Examples
 Example
Make all rollermines currently on the map friendly

for k, v in pairs( ents.FindByClass( npc_rollermine ) ) do
    v:SetSaveValue( m_bHackedByAlyx, true )
end


"Entity/SetShouldPlayPickupSound"
Entity:SetShouldPlayPickupSound( boolean playsound=false ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets whether or not the entity should make a physics contact sound when its been picked up by a player.

 Arguments

 boolean playsound=false


True to play the pickup sound, false otherwise.

 Examples
 Example
Enable pickup sound on all entities.

function GM:OnEntityCreated( ent )
    ent:SetShouldPlayPickupSound( true )
end


"Entity/SetShouldServerRagdoll"
Entity:SetShouldServerRagdoll( boolean serverragdoll ) 
 Description
Sets if entity should create a server ragdoll on death or a client one.

 Arguments

 boolean serverragdoll


Set true if ragdoll should be created on server, false if on client


"Entity/SetSolid"
Entity:SetSolid( number solid_type ) 
 Description
Sets the solidity of an entity.

 Arguments

 number solid_type


The solid type. See the SOLID_ Enums.


"Entity/SetRenderOrigin"
Entity:SetRenderOrigin( Vector newOrigin ) 
 Description
Set the origin in which the Entity will be drawn from.

 Arguments

 Vector newOrigin


The new origin in world coordinates where the Entitys model will now be rendered from.


"Entity/SetSkin"
Entity:SetSkin( number skinIndex ) 
 Description
Sets the skin of the entity.

 Arguments

 number skinIndex


Index of the skin to use.


"Entity/SetRenderMode"
Entity:SetRenderMode( number renderMode ) 
 Description
Sets the render mode of the entity.

 Arguments

 number renderMode


New render mode to set, see RENDERMODE_ Enums.


"Entity/SetSpawnEffect"
Entity:SetSpawnEffect( boolean spawnEffect ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets whether the entity should use a spawn effect. See also: Entity:GetSpawnEffect



NOTE


This function doesnt actually give the entity a spawn effect, but its merely a networked bool.


 Arguments

 boolean spawnEffect


Sets if we should show a spawn effect.

 Examples
 Example
Simplified code taken from sandboxs commands.lua

local function MakeRagdoll( Player, Pos, Ang, Model, PhysicsObjects, Data )

	local Ent = ents.Create( prop_ragdoll )
	duplicator.DoGeneric( Ent, Data )
	Ent:Spawn()
	
	duplicator.DoGenericPhysics( Ent, Player, Data )
	Ent:Activate()

	Ent:SetSpawnEffect( true );
	return Ent	
end
Output:

Spawns the ragdoll and then sets the spawnEffect flag to true


"Entity/SetSolidFlags"
Entity:SetSolidFlags( number flags ) 
 Description
Sets solid flag(s) for the entity.
This overrides any other flags the entity might have had. See Entity:AddSolidFlags for adding flags.

 Arguments

 number flags


The flag(s) to set, see FSOLID_ Enums.


"Entity/SetTransmitWithParent"
Entity:SetTransmitWithParent( boolean onoff ) 
 Description
When this flag is set the entity will only transmit to the player when its parent is transmitted. This is useful for things like viewmodel attachments since without this flag they will transmit to everyone (and cause the viewmodels to transmit to everyone too).



NOTE


In the case of scripted entities, this will override ENTITY:UpdateTransmitState


 Arguments

 boolean onoff


Will set the TransmitWithParent flag on or off


"Entity/SetTable"
Entity:SetTable( table tab ) 
 Description
Changes the table that can be accessed by indexing an entity. Each entity starts with its own table by default.

 Arguments

 table tab


Table for the entity to use


"Entity/SetupBones"
Entity:SetupBones(  ) 
 Description
Forces the entity to reconfigure its bones. You might need to call this after changing your models scales or when manually drawing the entity multiple times at different positions.



NOTE


This calls the BuildBonePositions callback added via Entity:AddCallback, so avoid calling this function inside it to prevent an infinite loop.


"Entity/SetVelocity"
Entity:SetVelocity( Vector velocity ) 
 Description
Sets the entitys velocity. For entities with physics, consider using PhysObj:SetVelocity on the PhysObj of the entity.



NOTE


Actually binds to CBaseEntity::SetBaseVelocity() which sets the entitys velocity due to forces applied by other entities.




WARNING


If applied to a player, this will actually ADD velocity, not set it.


 Arguments

 Vector velocity


The new velocity to set.


"Entity/SetTrigger"
Entity:SetTrigger( boolean maketrigger ) 
 Description
Marks the entity as a trigger, so it will generate ENTITY:StartTouch, ENTITY:Touch and ENTITY:EndTouch callbacks.
Internally this is stored as FSOLID_ Enums flag.

 Arguments

 boolean maketrigger


Make the entity trigger or not


"Entity/SetUnFreezable"
Entity:SetUnFreezable( boolean freezable=false ) 
 Description
Sets whether an entity can be unfrozen, meaning that it cannot be unfrozen using the physgun.

 Arguments

 boolean freezable=false


True to make the entity unfreezable, false otherwise.


"Entity/SkinCount"
Entity:SkinCount(  ) 
 Description
Returns the amount of skins the entity has.

 Returns

 number


skinCount


"Entity/SnatchModelInstance"
Entity:SnatchModelInstance( Entity srcEntity ) 
 Description
Moves the model instance from the source entity to this entity. This can be used to transfer decals that have been applied on one entity to another.
Both entities must have the same model.

 Arguments

 Entity srcEntity


Entity to move the model instance from.

 Returns

 boolean


Whether the operation was successful or not


"Entity/SetUseType"
Entity:SetUseType( number useType ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the use type of an entity, affecting how often ENTITY:Use will be called for Lua entities.

 Arguments

 number useType


The use type to apply to the entity. Uses _USE Enums.

 Examples
 Example
Makes the ENTITY:Use hook only get called once at every use.

Entity:SetUseType( SIMPLE_USE )


"Entity/SetupPhonemeMappings"
Entity:SetupPhonemeMappings( string fileRoot ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Initializes the class names of an entitys phoneme mappings (mouth movement data). This is called by default with argument phonemes when a flex-based entity (such as an NPC) is created.

 Arguments

 string fileRoot


The file prefix of the phoneme mappings (relative to garrysmod/expressions/).

 Examples
 Example
Defines a function that can enable or disable phoneme mappings on an entity.

-- Turn phoneme mappings on or off
function EnablePhonemes( ent, on )

	if( !IsValid( ent ) ) then return end
	
	if( !on ) then
		-- Disable mouth movement
		ent:SetupPhonemeMappings(  )
	else
		-- Enable mouth movement
		ent:SetupPhonemeMappings( phonemes )
	end

end


"Entity/SetWeaponModel"
Entity:SetWeaponModel( string viewModel, Weapon weapon=NULL ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Sets the model and associated weapon to this viewmodel entity.
This is used internally when the player switches weapon.



NOTE


View models are not drawn without a weapons associated to them.




WARNING


This will silently fail if the entity is not a viewmodel.


 Arguments

 string viewModel


The model string to give to this viewmodel.

Example: models/weapons/c_smg1.mdl

 Arguments

 Weapon weapon=NULL


The weapon entity to associate this viewmodel to.

 Examples
 Example
Sets the model of the second viewmodel to the smg and associates it with the players current weapon.

Entity( 1 ):GetViewModel( 1 ):SetWeaponModel( models/weapons/c_smg1.mdl, Entity( 1 ):GetActiveWeapon() )


 Examples
 Example
Initializes the extra viewmodel in Deploy and hides it again on Holster, also plays the attack animation on left and right click.

SWEP.ViewModel = models/weapons/v_pistol.mdl
SWEP.UseHands = false
SWEP.ViewModelFlip = false	--the default viewmodel wont be flipped
SWEP.ViewModelFlip1 = true	--the second viewmodel will


function SWEP:Deploy()
	--get the second viewmodel
	local viewmodel1 = self.Owner:GetViewModel( 1 )
	if ( IsValid( viewmodel1 ) ) then
		--associate its weapon to us
		viewmodel1:SetWeaponModel( self.ViewModel , self )
	end
	
	self:SendViewModelAnim( ACT_VM_DEPLOY , 1 )
	
	return true
end

function SWEP:Holster()
	local viewmodel1 = self.Owner:GetViewModel( 1 )
	if ( IsValid( viewmodel1 ) ) then
		--set its weapon to nil, this way the viewmodel wont show up again
		viewmodel1:SetWeaponModel( self.ViewModel , nil )
	end
	
	return true
end

--since self:SendWeaponAnim always sends the animation to the first viewmodel, we need this as a replacement
function SWEP:SendViewModelAnim( act , index , rate )
	
	if ( not game.SinglePlayer() and not IsFirstTimePredicted() ) then
		return
	end
	
	local vm = self.Owner:GetViewModel( index )
	
	if ( not IsValid( vm ) ) then
		return
	end
	
	local seq = vm:SelectWeightedSequence( act )
	
	if ( seq == -1 ) then
		return
	end
	
	vm:SendViewModelMatchingSequence( seq )
	vm:SetPlaybackRate( rate or 1 )
end

function SWEP:PrimaryAttack()
	
	self:SendViewModelAnim( ACT_VM_PRIMARYATTACK , 0 )--target the first viewmodel
	self:SetNextPrimaryFire( CurTime() + 0.25 )
	
end

function SWEP:SecondaryAttack()
	
	self:SendViewModelAnim( ACT_VM_PRIMARYATTACK , 1 )--target the second
	self:SetNextSecondaryFire( CurTime() + 0.25 )
	
end
Output:


"Entity/SetSubMaterial"
Entity:SetSubMaterial( number index=nil, string material=nil ) 
 Description
Overrides a single material on the model of this entity.
To set a Lua material created with CreateMaterial, just prepend a ! to the material name.



BUG


The servers value takes priority on the client.



 Arguments

 number index=nil


Index of the material to override, acceptable values are from 0 to 31.
Indexes are by Entity:GetMaterials, but you have to subtract 1 from them.

If called with no arguments, all sub materials will be reset.

 Arguments

 string material=nil


The material to override the default one with. Set to nil to revert to default material.


"Entity/SetSequence"
Entity:SetSequence( number sequenceId ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Sets the entitys model sequence.
If the specified sequence is already active, the animation will not be restarted. See Entity:ResetSequence for a function that restarts the animation even if it is already playing.
In some cases you want to run Entity:ResetSequenceInfo to make this function run.



NOTE


This will not work properly if called directly after calling Entity:SetModel. Consider waiting until the next Tick.




NOTE


Will not work on players due to the animations being reset every frame by the base gamemode animation system in GM:CalcMainActivity. For Players, use in GM:UpdateAnimation instead.


 Arguments

 number sequenceId


The sequence to play. Also accepts strings.



NOTE


If set to a string, the function will automatically call Entity:LookupSequence to retrieve the sequence ID as a number.



 Examples
 Example
Set the entity to play the idle sequence.

self:SetSequence( idle )


 Examples
 Example
Set the entity to play the first sequence defined on the model (usually idle).

self:SetSequence( 0 )


"Entity/SetVar"
Entity:SetVar( any key, any value ) 
 Description
Allows to quickly set variable to entitys Entity:GetTable.



NOTE


This will not network the variable to client(s). You want Entity:SetNWString and similar functions for that


 Arguments

 any key


Key of the value to set

 Arguments

 any value


Value to set the variable to


"Entity/StartMotionController"
Entity:StartMotionController(  ) 
 Description
Starts a motion controller in the physics engine tied to this entitys PhysObj, which enables the use of ENTITY:PhysicsSimulate.
The motion controller can later be destroyed via Entity:StopMotionController.
Motion controllers are used internally to control other Entities PhysObjects, such as the Gravity Gun, +use pickup and the Physics Gun.
This function should be called every time you recreate the Entitys PhysObj. Or alternatively you should call Entity:AddToMotionController on the new PhysObj.
Also see Entity:AddToMotionController and Entity:RemoveFromMotionController.



NOTE


Only works on a scripted Entity of anim type.


"Entity/StartLoopingSound"
Entity:StartLoopingSound( string sound ) 
 Description
Starts a looping sound. As with any other sound playing methods, this function expects the sound file to be looping itself and will not automatically loop a non looping sound file as one might expect.
This function is almost identical to CreateSound, with the exception of the sound being created in the STATIC channel and with normal attenuation.
See also Entity:StopLoopingSound

 Arguments

 string sound


Sound to play. Can be either a sound script or a filepath.

 Returns

 number


The ID number of started sound starting with 0, or -1 if we failed for some reason.


"Entity/Spawn"
Entity:Spawn(  ) 
 Description
Initializes the entity and starts its networking. If called on a player, it will respawn them.
This calls ENTITY:Initialize on Lua-defined entities.


"Entity/StopLoopingSound"
Entity:StopLoopingSound( number id ) 
 Description
Stops a sound created by Entity:StartLoopingSound.

 Arguments

 number id


The sound ID returned by Entity:StartLoopingSound


"Entity/StopAndDestroyParticles"
Entity:StopAndDestroyParticles(  ) 
 Description
Stops all particle effects parented to the entity and immediately destroys them.


"Entity/TakePhysicsDamage"
Entity:TakePhysicsDamage( CTakeDamageInfo dmginfo ) 
 Description
Applies physics damage to the entity

 Arguments

 CTakeDamageInfo dmginfo


The damage to apply


"Entity/StopParticlesWithNameAndAttachment"
Entity:StopParticlesWithNameAndAttachment( string name, number attachment ) 
 Description
Stops all particle effects parented to the entity with given name on given attachment.

 Arguments

 string name


The name of the particle to stop.

 Arguments

 number attachment


The attachment of the entity to stop particles on.


"Entity/StopParticleEmission"
Entity:StopParticleEmission(  ) 
 Description
Stops all particle effects parented to the entity.
This is ran automatically on every client by Entity:StopParticles if called on the server.


"Entity/StopParticlesNamed"
Entity:StopParticlesNamed( string name ) 
 Description
Stops all particle effects parented to the entity with given name.

 Arguments

 string name


The name of the particle to stop.


"Entity/TakeDamageInfo"
Entity:TakeDamageInfo( CTakeDamageInfo damageInfo ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Applies the damage specified by the damage info to the entity.

 Arguments

 CTakeDamageInfo damageInfo


The damage to apply.

 Examples
 Example
Dissolve the target into oblivion.

function DissolveIt( ent )
	local d = DamageInfo()
	d:SetDamage( ent:Health() )
	d:SetAttacker( ent )
	d:SetDamageType( DMG_DISSOLVE )

	ent:TakeDamageInfo( d )
end

DissolveIt( Entity( 1 ) )


"Entity/StopSound"
Entity:StopSound( string soundscript ) 
 Description
Stops emitting the given sound script from the entity, especially useful for looping sound scripts.



NOTE


This only works with sound scripts (sound.Add), using a file path will not work!


 Arguments

 string soundscript


The name of the sound script to stop playback of.


"Entity/TakeDamage"
Entity:TakeDamage( number damageAmount, Entity attacker, Entity inflictor ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Applies the specified amount of damage to the entity with DMG_GENERIC flag.

 Arguments

 number damageAmount


The amount of damage to be applied.

 Arguments

 Entity attacker


The entity that initiated the attack that caused the damage.

 Arguments

 Entity inflictor


The entity that applied the damage, eg. a weapon.


"Entity/StopMotionController"
Entity:StopMotionController(  ) 
 Description
Stops the motion controller created with Entity:StartMotionController.


"Entity/TranslatePhysBoneToBone"
Entity:TranslatePhysBoneToBone( number physNum ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the boneID of the bone the given PhysObj is attached to.
See Entity:TranslateBoneToPhysBone for reverse function.

 Arguments

 number physNum


The PhysObj number on the entity

 Returns

 number


The boneID of the bone the PhysObj is attached to.

 Examples
 Example
Does a trace, gets the physics bone from the trace, converts the physics bone number into the bone number and prints the result

local tr = LocalPlayer():GetEyeTrace()
local bone = tr.Entity:TranslatePhysBoneToBone( tr.PhysicsBone )
print( bone )
Output:

The bone number of what the client is looking at


"Entity/TranslateBoneToPhysBone"
Entity:TranslateBoneToPhysBone( number boneID ) 
 Description
Returns the ID of a PhysObj attached to the given bone. To be used with Entity:GetPhysicsObjectNum.
See Entity:TranslatePhysBoneToBone for reverse function.

 Arguments

 number boneID


The ID of a bone to look up the physics root bone of.

 Returns

 number


The PhysObj ID of the given bone.

 -1 if we somehow cannot translate


"Entity/ViewModelIndex"
Entity:ViewModelIndex(  ) 
 Description
Returns the index of this view model, it can be used to identify which one of the players view models this entity is.

 Returns

 number


View model index, ranges from 0 to 2, nil if the entity is not a view model


"Entity/UseTriggerBounds"
Entity:UseTriggerBounds( boolean enable, number bloat=0 ) 
 Description
Enables or disables trigger bounds.
This will give the entity a trigger box that extends around its bounding box by iBloatSize units in X/Y and (iBloatSize/2) in +Z (-Z remains the same).
The trigger box is world aligned and will work regardless of the objects solidity and collision group.
It will be visible as a light blue box when the ent_bbox console command is used.
Valve use trigger boxes for all pickup items. Their bloat size is 24, a surprisingly large figure.

 Arguments

 boolean enable


Should we enable or disable the bounds.

 Arguments

 number bloat=0


The distance/size of the trigger bounds.


"Entity/Visible"
Entity:Visible( Entity target ) 
 Description
Returns whether the target/given entity is visible from the this entity.
This is meant to be used only with NPCs.
Differences from a simple trace include:

 If target has FL_NOTARGET, returns false
 If ai_ignoreplayers is turned on and target is a player, returns false
 Reacts to ai_LOS_mode:
 If 1, does a simple trace with COLLISION_GROUP_NONE and MASK_BLOCKLOS
 If not, does a trace with MASK_BLOCKLOS_AND_NPCS ( - CONTENTS_BLOCKLOS is target is player ) and a custom LOS filter ( CTraceFilterLOS )

 Returns true if hits a vehicle the target is driving

 Arguments

 Entity target


Entity to check for visibility to.

 Returns

 boolean


If the entities can see each other.


"Entity/Use"
Entity:Use( Player Activator, Entity Caller, number UseType, number Integer ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Activates the entity, as if a player pressed the Use key (Default E) on it.

 Arguments

 Player Activator


The player to credit with activating the entity.

 Arguments

 Entity Caller


Used when an entity instead of a player should trigger the use.

 Arguments

 number UseType


The type of use to trigger. See USE_ Enums

 Arguments

 number Integer


You can usually set this to 1.


"Entity/StopParticles"
Entity:StopParticles(  ) 
 Description
Stops any attached to the entity .pcf particles using ParticleEffectAttach.
On client, this is the same as Entity:StopParticleEmission. ( and you should use StopParticleEmission instead )
On server, this is the same as running Entity:StopParticleEmission on every client.


"Entity/VisibleVec"
Entity:VisibleVec( Vector pos ) 
 Description
Returns true if supplied vector is visible from the entitys line of sight.
This is achieved similarly to a trace.

 Arguments

 Vector pos


The position to check for visibility

 Returns

 boolean


Within line of sight


"Entity/WorldToLocal"
Entity:WorldToLocal( Vector wpos ) 
 Description
Converts a worldspace vector into a vector local to an entity

 Arguments

 Vector wpos


The world vector

 Returns

 Vector


The local vector


"Entity/Weapon_TranslateActivity"
Entity:Weapon_TranslateActivity( number act ) 
 Description
Calls and returns WEAPON:TranslateActivity on the weapon the entity ( player or NPC ) carries.
Despite existing on client, it doesnt actually do anything on client.

 Arguments

 number act


The activity to translate

 Returns

 number


The translated activity


"Entity/WorldToLocalAngles"
Entity:WorldToLocalAngles( Angle ang ) 
 Description
Converts world angles to local angles ( local to the entity )

 Arguments

 Angle ang


The world angles

 Returns

 Angle


The local angles


"Entity/WaterLevel"
Entity:WaterLevel(  ) 
 Description
Returns an integer that represents how deep in water the entity is.


 0 - The entity isnt in water.

 1 - Slightly submerged (at least to the feet).

 2 - The majority of the entity is submerged (at least to the waist).

 3 - Completely submerged.

 Returns

 number


The water level.


"Entity/UseClientSideAnimation"
Entity:UseClientSideAnimation(  ) 
 Description


NOTE


Does nothing on server.


Animations will be handled purely clientside instead of a fixed animtime, enabling interpolation. This does not affect layers and gestures.


"Entity/TestPVS"
Entity:TestPVS( any testPoint ) 
 Description
Check if the given position or entity is within this entitys PVS.



NOTE


The function wont take in to account AddOriginToPVS and the like.


 Arguments

 any testPoint


Entity or Vector to test against. If an entity is given, this function will test using its bounding box.

 Returns

 boolean


True if the testPoint is within our PVS.


"Entity/Weapon_SetActivity"
Entity:Weapon_SetActivity( number act, number duration ) 
 Description
Sets the activity of the entitys active weapon.



NOTE


This does nothing on the client.




NOTE


Only works for CBaseCombatCharacter entities, which includes players and NPCs.


 Arguments

 number act


Activity number. See ACT_ Enums.

 Arguments

 number duration


How long the animation should take in seconds.


"ents/Create"
ents.Create( string class ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Creates an entity. This function will fail and return NULL if the soft-edict limit is hit (8176), or the provided entity class doesnt exist.



WARNING


Do not use before GM:InitPostEntity has been called, otherwise the server will crash!If you need to perform entity creation when the game starts, create a hook for GM:InitPostEntity and do it there


 Arguments

 string class


The classname of the entity to create

 Returns

 Entity


The created entity, or NULL if failed

 Examples
 Example
Creates a gmod_button entity near 0,0,0

local button = ents.Create( gmod_button )
if ( !IsValid( button ) ) then return end // Check whether we successfully made an entity, if ( not - bail
button:SetModel( models/dav0r/buttons/button.mdl )
button:SetPos( Vector( 0, 0, 100 ) )
button:Spawn()


"ents/FindAlongRay"
ents.FindAlongRay( Vector start, Vector end, Vector mins=nil, Vector maxs=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Returns a table of all entities along the ray. The ray does not stop on collisions, meaning it will go through walls/entities.

 Arguments

 Vector start


The start position of the ray

 Arguments

 Vector end


The end position of the ray

 Arguments

 Vector mins=nil


The mins corner of the ray

 Arguments

 Vector maxs=nil


The maxs corner of the ray

 Returns

 table


Table of the found entities.


"ents/CreateClientProp"
ents.CreateClientProp( string model=models/error.mdl ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Creates a clientside only prop. See also ClientsideModel.



BUG


Clientside entities are not garbage-collected, thus you must store a reference to the object and call CSEnt:Remove manually.





BUG





 Arguments

 string model=models/error.mdl


The model for the entity to be created.



WARNING


Model must be precached with util.PrecacheModel on the server before usage.



 Returns

 CSEnt


Created entity.

 Examples
 Example
Creates a clientside prop at the player location.

function GhostBarrel( ply )
	local c_Model = ents.CreateClientProp()
	c_Model:SetPos( ply:GetPos() )
	c_Model:SetModel( models/props_borealis/bluebarrel001.mdl )
	c_Model:SetParent( ply )
	c_Model:Spawn()
end


"Entity/WorldSpaceCenter"
Entity:WorldSpaceCenter(  ) 
 Description
Returns the center of the entity according to its collision model.

 Returns

 Vector


The center of the entity


"Entity/WorldSpaceAABB"
Entity:WorldSpaceAABB(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Examples

4.1 Example




 Description
Returns two vectors representing the minimum and maximum extent of the entitys bounding box.

 Returns

 Vector


The minimum vector for the entitys bounding box.

 Returns

 Vector


The maximum vector for the entitys bounding box.

 Examples
 Example
Prints Entity(1)s maximum bounding box vector.

local min,max = Entity( 1 ):WorldSpaceAABB()
print( max )
Output:

-496.828125 11730.426758 5189.393066


"ents/FindByClass"
ents.FindByClass( string class ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Gets all entities with the given class, supports wildcards. This works internally by iterating over ents.GetAll.



NOTE


Asterisks (*) are the only wildcard supported.


 Arguments

 string class


The class of the entities to find.

 Returns

 table


A table containing all found entities

 Examples
 Example
Prints the location of every prop on the map.

for k, v in pairs( ents.FindByClass( prop_* ) ) do
	print( v:GetPos() )
end
Output:


The location of each prop on the map. In gm_construct, the output might be as follows:

-2936.288818 -1376.545532 -73.852913
-2943.928467 -1375.800171 -84.964996
-2932.637695 -1288.051636 -76.791924
-2064.000000 -183.000000 -179.216003
-2384.000000 -183.000000 -179.216003
-2704.000000 -183.000000 -179.216003
-1744.000000 -183.000000 -179.216003
-1424.000000 -183.000000 -179.216003
-3019.895020 -1095.824829 -78.900757


"ents/FindByClassAndParent"
ents.FindByClassAndParent( string class, Entity parent ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Finds all entities that are of given class and are children of given entity. This works internally by iterating over ents.GetAll.

 Arguments

 string class


The class of entities to search for

 Arguments

 Entity parent


Parent of entities that are being searched for

 Returns

 table


A table of found entities or nil if none are found


"ents/FindByModel"
ents.FindByModel( string model ) 
 Description
Gets all entities with the given model, supports wildcards. This works internally by iterating over ents.GetAll.



BUG


This currently only supports trailing asterisks (*) for wildcards.



 Arguments

 string model


The model of the entities to find.

 Returns

 table


A table of all found entities.


"ents/FindInBox"
ents.FindInBox( Vector boxMins, Vector boxMaxs ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns all entities within the specified box.



NOTE


Clientside entities will not be returned by this function.




WARNING


There is a limit of 512 entities for the output!


 Arguments

 Vector boxMins


The box minimum coordinates.

 Arguments

 Vector boxMaxs


The box maximum coordinates.

 Returns

 table


A table of all found entities.

 Examples
 Example
Returns a table of players in a box using ents.FindInBox

function ents.FindPlayersInBox( vCorner1, vCorner2 )
	local tEntities = ents.FindInBox( vCorner1, vCorner2 )
	local tPlayers = {}

	local iPlayers = 0
	
	for i = 1, #tEntities do
		if ( tEntities[ i ]:IsPlayer() ) then
			iPlayers = iPlayers + 1
			tPlayers[ iPlayers ] = tEntities[ i ]
		end
	end
	
	return tPlayers, iPlayers
end


"ents/FindInPVS"
ents.FindInPVS( any viewPoint ) 
 Description



NOTE


The function wont take in to account AddOriginToPVS and the like.


 Arguments

 any viewPoint


Entity or Vector to find entities within the PVS of. If a player is given, this function will use the players view entity.

 Returns

 table


The found Entitys.


"ents/FindInCone"
ents.FindInCone( Vector origin, Vector normal, number range, number angle_cos ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example




 Description
 2D visualization of the actual shape of the cone, click to enlarge
Finds and returns all entities within the specified cone. Only entities whose Entity:WorldSpaceCenter is within the cone are considered to be in it.
The cone is actually a conical slice of an axis-aligned box (see: ents.FindInBox). The image to the right shows approximately how this function would look in 2D. Due to this, the entity may be farther than the specified range!



NOTE


Clientside entities will not be returned by this function.




WARNING


If there are more than 512 entities in the axis-aligned box around the origin, then the result may be incomplete!


 Arguments

 Vector origin


The tip of the cone.

 Arguments

 Vector normal


Direction of the cone.

 Arguments

 number range


The range of the cone/box around the origin.

 Arguments

 number angle_cos


The cosine of the angle between the center of the cone to its edges, which is half the overall angle of the cone.

1 makes a 0 cone, 0.707 makes approximately 90, 0 makes 180, and so on.

 Returns

 table


A table of all found Entitys.

 Examples
 Example
An example usage of this function. This example shows which entities are being returned by the function with red lines and the range with white transparent box.

local mat = Material( models/shiny )
mat:SetFloat( $alpha, 0.5 )

hook.Add( PostDrawOpaqueRenderables, conetest, function()
	local size = 200
	local dir = LocalPlayer():GetAimVector()
	local angle = math.cos( math.rad( 15 ) ) -- 15 degrees
	local startPos = LocalPlayer():EyePos()

	local entities = ents.FindInCone( startPos, dir, size, angle )

	-- draw the outer box
	local mins = Vector( -size, -size, -size )
	local maxs = Vector( size, size, size )

	render.SetMaterial( mat )
	render.DrawWireframeBox( startPos, Angle( 0, 0, 0 ), mins, maxs, color_white, true )
	render.DrawBox( startPos, Angle( 0, 0, 0 ), -mins, -maxs, color_white )

	-- draw the lines
	for id, ent in pairs( entities ) do
		render.DrawLine( ent:WorldSpaceCenter() - dir * ( ent:WorldSpaceCenter()-startPos ):Length(), ent:WorldSpaceCenter(), Color( 255, 0, 0 ) )
	end
end )


"ents/GetByIndex"
ents.GetByIndex( number entIdx ) 
 Description
Returns an entity by its index. Same as Entity.

 Arguments

 number entIdx


The index of the entity.

 Returns

 Entity


The entity if it exists.


"ents/GetAll"
ents.GetAll(  ) 
 Description
Returns a table of all existing entities.

 Returns

 table


Table of all existing Entitys.


"ents/FindByName"
ents.FindByName( string name ) 
 Description
Gets all entities with the given hammer targetname. This works internally by iterating over ents.GetAll.



NOTE


A players Name is his nickname, see Player:GetName


Doesnt do anything on client.

 Arguments

 string name


The targetname to look for

 Returns

 table


A table of all found entities


"ents/GetCount"
ents.GetCount( boolean IncludeKillMe=false ) 
 Description
Gives you the amount of currently existing entities.
Similar to #ents.GetAll but with much better performance.

 Arguments

 boolean IncludeKillMe=false


Include entities with the FL_KILLME flag. This will skip an internal loop, and the function will be more efficient as a byproduct.

 Returns

 number


Number of entities


"file/CreateDir"
file.CreateDir( string name ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Creates a directory that is relative to the data folder.

 Arguments

 string name


The directorys name.

 Examples
 Example
Creates a directory named sample in the data folder.

file.CreateDir( sample )


 Examples
 Example
This function will create all subfolders you specify.

file.CreateDir( a/b/c/d/e/f/g )
Output:

A folder named a is created in the data folder, which contains the folder named b, which contains a folder named c, etc.


"ents/GetEdictCount"
ents.GetEdictCount(  ) 
 Description
Returns the amount of networked entities, which is limited to 8192. ents.Create will fail somewhere between 8064 and 8176 - this can vary based on the amount of existing temp ents.

 Returns

 number


Number of networked entities


"ents/FireTargets"
ents.FireTargets( string target, Entity activator, Entity caller, number usetype, number value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Fires a use event.

 Arguments

 string target


Name of the target entity.

 Arguments

 Entity activator


Activator of the event.

 Arguments

 Entity caller


Caller of the event.

 Arguments

 number usetype


Use type. See the USE_ Enums.

 Arguments

 number value


This value is passed to ENTITY:Use, but isnt used by any default entities in the engine.


"File/Close"
File:Close(  ) 
 Description
Dumps the file changes to disk and closes the file handle which makes the handle useless.


"ents/GetMapCreatedEntity"
ents.GetMapCreatedEntity( number id ) 
 Description
Returns entity that has given Entity:MapCreationID.

 Arguments

 number id


Entitys creation id

 Returns

 Entity


Found entity


"file/Delete"
file.Delete( string name ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Deletes a file or empty folder that is relative to the data folder.
You cant remove any files outside of data folder.

 Arguments

 string name


The file name

 Examples
 Example
Deletes data/helloworld.txt file.

file.Delete( helloworld.txt )


"file/Exists"
file.Exists( string name, string path ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns a boolean of whether the file or directory exists or not.

 Arguments

 string name


The file or directorys name.

 Arguments

 string path


The path of where to look for the file.

 GAME Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)
 LUA or lsv - All Lua folders (lua/) including gamesmodes and addons
 DATA Data folder (garrysmod/data)
 MOD Strictly the game folder (garrysmod/), ignores mounting.


 Returns

 boolean


Returns true if the file exists and false if it is not.

 Examples
 Example
Prints whether the data folder exists in the base directory.

print( file.Exists( data, GAME ) )
Output:

true


"file/Find"
file.Find( string name, string path, string sorting=nameasc ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Returns
7 Examples

7.1 Example




 Description
Returns a list of files and directories inside a single folder.



BUG


This will have undefined results if a path contains 3+ slashes.



 Arguments

 string name


The wildcard to search for. models/*.mdl will list .mdl files in the models/ folder.

 Arguments

 string path


The path to look for the files and directories in. See this list for a list of valid paths.

 Arguments

 string sorting=nameasc


The sorting to be used, optional.

 nameasc sort the files ascending by name
 namedesc sort the files descending by name
 dateasc sort the files ascending by date
 datedesc sort the files descending by date


 Returns

 table


A table of found files, or nil if the path is invalid

 Returns

 table


A table of found directories, or nil if the path is invalid

 Examples
 Example
Prints the first file and the first directory in the data folder.

local files, directories = file.Find( *, DATA )

print( File:  .. files[1], Folder:  .. directories[1] )
Output:

 File: helloworld.txt
Folder: ctp


"file/Append"
file.Append( string name, string content ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Appends a file relative to the data folder.

 Arguments

 string name


The files name.

 Arguments

 string content


The content which should be appended to the file.

 Examples
 Example
Adds Append! to helloworld.txt, then prints it.

file.Append( helloworld.txt, Append! )

print( file.Read( helloworld.txt, DATA ) )
Output:

This is the content!Append!


"File/Flush"
File:Flush(  ) 
 Description
Dumps the file changes to disk and saves the file.


"ents/FindInSphere"
ents.FindInSphere( Vector origin, number radius ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Gets all entities within the specified sphere.



NOTE


Clientside entities will not be returned by this function.


 Arguments

 Vector origin


Center of the sphere.

 Arguments

 number radius


Radius of the sphere.

 Returns

 table


A table of all found Entitys. Has a limit of 1024 entities.


"file/Read"
file.Read( string fileName, string path=DATA ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns the content of a file.
Beware of casing -- some filesystems are case-sensitive. SRCDS on Linux seems to force file/directory creation to lowercase, but will not modify read operations.

 Arguments

 string fileName


The name of the file.

 Arguments

 string path=DATA


The path used to look up the file.

 GAME Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)
 LUA or lsv - All Lua folders (lua/) including gamesmodes and addons
 DATA Data folder (garrysmod/data)
 MOD Strictly the game folder (garrysmod/), ignores mounting.

It can also be a boolean:

 true = GAME
 false = DATA


 Returns

 string


The data from the file as a string, or nil if the file isnt found

 Examples
 Example
Prints out the content of helloworld.txt.

print( file.Read( helloworld.txt, DATA ) )
Output:

This is the content!


"file/IsDir"
file.IsDir( string fileName, string path ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns whether the given file is a directory or not.

 Arguments

 string fileName


The file or directorys name.

 Arguments

 string path


The path type.

 Returns

 boolean


True if the given path is a directory or false if it is a file.

 Examples
 Example
Prints if helloworld.txt is a directory.

print( file.IsDir( helloworld.txt, DATA ) )
Output:

false


"File/ReadBool"
File:ReadBool(  ) 
 Description
Reads one byte of the file and returns whether that byte was not 0.

 Returns

 boolean


val


"file/Open"
file.Open( string fileName, string fileMode, string path ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Attempts to open a file with the given mode.

 Arguments

 string fileName


The files name. See file.Write for details on filename restrictions when writing to files.

 Arguments

 string fileMode


The mode to open the file in. Possible values are:

 r - read mode
 w - write mode
 a - append mode

 rb - binary read mode
 wb - binary write mode
 ab - binary append mode


 Arguments

 string path


The path type.

 GAME Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)
 LUA or lsv - All Lua folders (lua/) including gamesmodes and addons
 DATA Data folder (garrysmod/data)
 MOD Strictly the game folder (garrysmod/), ignores mounting.


 Returns

 File


The opened file object, or nil if it failed to open due to it not existing or being used by another process.


"File/ReadFloat"
File:ReadFloat(  ) 
 Description
Reads 4 bytes from the file converts them to a float and returns them.

 Returns

 number


value


"File/ReadShort"
File:ReadShort(  ) 
 Description
Reads a signed 16-bit integer from the file.

 Returns

 number


int16


"File/ReadLine"
File:ReadLine(  ) 
 Description
Returns the contents of the file from the current position up until the end of the current line. This function will not return more than 8192 characters.

 Returns

 string


The string of data from the read line.


"File/ReadLong"
File:ReadLong(  ) 
 Description
Reads a signed 32-bit integer from the file.

 Returns

 number


A signed 32-bit integer


"File/ReadByte"
File:ReadByte(  ) 
 Description
Reads one unsigned 8-bit integer from the file.

 Returns

 number


The unsigned 8-bit integer from the file.


"File/ReadUShort"
File:ReadUShort(  ) 
 Description
Reads a unsigned 16-bit integer from the file.

 Returns

 number


The 16-bit integer


"File/Seek"
File:Seek( number pos ) 
 Description
Sets the file pointer to the specified position.

 Arguments

 number pos


Pointer position.


"File/Read"
File:Read( number length ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Reads the specified amount of chars and returns them as a binary string.

 Arguments

 number length


Reads the specified amount of chars.

 Returns

 string


data

 Examples
 Example
Adapted from extensions/file.lua

function file.Read( filename, path )
	if ( path == true ) then path = GAME end
	if ( path == nil or path == false ) then path = DATA end

	local f = file.Open( filename, r, path )
	if ( !f ) then return end
	local str = f:Read( f:Size() )
	f:Close()
	return str or 
end


"file/Size"
file.Size( string fileName, string path ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Returns the files size in bytes. If the file is not found, returns -1.

 Arguments

 string fileName


The files name.

 Arguments

 string path


The path type.

 GAME Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)
 LUA or lsv - All Lua folders (lua/) including gamesmodes and addons
 DATA Data folder (garrysmod/data)
 MOD Strictly the game folder (garrysmod/), ignores mounting.


 Examples
 Example
Prints the size of helloworld.txt.

print( file.Size( helloworld.txt, DATA ) )
Output:

8


"File/ReadDouble"
File:ReadDouble(  ) 
 Description
Reads 8 bytes from the file converts them to a double and returns them.

 Returns

 number


value


"file/Rename"
file.Rename( string orignalFileName, string targetFileName ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Attempts to rename a file with the given name to another given name.
This function is constrained to the data/ folder.

 Arguments

 string orignalFileName


The original file or folder name. See file.Write for details on filename restrictions when writing to files.

 Arguments

 string targetFileName


The target file or folder name. See file.Write for details on filename restrictions when writing to files.

 Returns

 boolean


True on success, false otherwise.


"File/Size"
File:Size(  ) 
 Description
Returns the size of the file in bytes.

 Returns

 number


size


"File/Write"
File:Write( string data ) 
 Description
Writes the given string into the file.

 Arguments

 string data


Binary data to write to the file.


"File/Skip"
File:Skip( number amount ) 
 Description
Moves the file pointer by the specified amount of chars.

 Arguments

 number amount


The amount of chars to skip, can be negative to skip backwards.

 Returns

 number


amount


"file/Write"
file.Write( string fileName, string content ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Writes the given string to a file. Erases all previous data in the file. To add data without deleting previous data, use file.Append.
It is recommended to write only to lowercase file paths and names because some filesystems are case-sensitive. The Linux build of SRCDS seems to auto-lower directory and file names on write, but not on read.

 Arguments

 string fileName


The name of the file being written into.
The filename must end with .txt, .jpg, .png, .vtf or .dat and the path is relative to the data/ folder.

Restricted symbols are: :

 Arguments

 string content


The content that will be written into the file.

 Examples
 Example
Writes to data/helloworld.txt.

file.Write( helloworld.txt, This is the content! )


"File/Tell"
File:Tell(  ) 
 Description
Returns the current position of the file pointer.

 Returns

 number


pos


"File/WriteLong"
File:WriteLong( number int32 ) 
 Description
Writes a 32-bit signed integer to the file.

 Arguments

 number int32


The 32-bit signed integer to be written to the file.


"File/WriteShort"
File:WriteShort( number int16 ) 
 Description
Writes a 16-bit signed integer to the file.

 Arguments

 number int16


The 16-bit signed integer to be written to the file.


"File/WriteDouble"
File:WriteDouble( number double ) 
 Description
Writes a 8byte floating point double to the file.

 Arguments

 number double


The double to be written to the file.


"file/Time"
file.Time( string path, string gamePath ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Returns when the file or folder was lasted modified in Unix time.

 Arguments

 string path


The file or folder path.

 Arguments

 string gamePath


The game path to be used.

 GAME Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)
 LUA or lsv - All Lua folders (lua/) including gamesmodes and addons
 DATA Data folder (garrysmod/data)
 MOD Strictly the game folder (garrysmod/), ignores mounting.


 Returns

 number


Seconds passed since Unix epoch.

 Examples
 Example
Prints out the last modified date of file helloworld.txt

print( os.date( %d.%m.%Y, file.Time( helloworld.txt, DATA ) ) )
Output:

04.08.2012
 Examples
 Example
Prints out the last modified date of folder lua

print( os.date( %d.%m.%Y, file.Time( lua, GAME ) ) )
Output:

31.01.2016


"File/WriteFloat"
File:WriteFloat( number float ) 
 Description
Writes a 4byte float to the file.

 Arguments

 number float


The float to be written to the file.


"File/WriteBool"
File:WriteBool( boolean bool ) 
 Description
Writes a boolean value to the file as one byte.

 Arguments

 boolean bool


The bool to be written to the file.


"File/WriteUShort"
File:WriteUShort( number uint16 ) 
 Description
Writes an unsigned 16-bit integer to the file.

 Arguments

 number uint16


The unsigned 16-bit integer to the file.


"File/WriteULong"
File:WriteULong( number uint32 ) 
 Description
Writes an unsigned 32-bit integer to the file.

 Arguments

 number uint32


The unsigned 32-bit integer to be written to the file.


"frame_blend/AddFrame"
frame_blend.AddFrame(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Adds a frame to the blend. Calls frame_blend.CompleteFrame once enough frames have passed since last frame_blend.CompleteFrame call.


"File/WriteByte"
File:WriteByte( number uint8 ) 
 Description
Write an 8-bit unsigned integer to the file.

 Arguments

 number uint8


The 8-bit unsigned integer to be written to the file.


"frame_blend/CompleteFrame"
frame_blend.CompleteFrame(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Renders the frame onto internal render target.


"frame_blend/DrawPreview"
frame_blend.DrawPreview(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Actually draws the frame blend effect.


"frame_blend/BlendFrame"
frame_blend.BlendFrame(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Blends the frame(s).


"frame_blend/ShouldSkipFrame"
frame_blend.ShouldSkipFrame(  ) 
 Description
Returns whether we should skip frame or not

 Returns

 boolean


Should the frame be skipped or not


"game/AddDecal"
game.AddDecal( string decalName, string materialName ) 
 Description
Registers a new decal.



WARNING


Theres a rather low limit of around 256 for decals that may be registered and they are not cleared on map load.


 Arguments

 string decalName


The name of the decal.

 Arguments

 string materialName


The material to be used for the decal. May also be a list of material names, in which case a random material from that list will be chosen every time the decal is placed.


"game/BuildAmmoTypes"
game.BuildAmmoTypes(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Called by the engine to retrieve the ammo types.

 Returns

 table


All ammo types registered via game.AddAmmoType, sorted by its name value.


"game/GetAmmoDamageType"
game.GetAmmoDamageType( number id ) 
 Description
Returns the damage type of given ammo type.

 Arguments

 number id


Ammo ID to retrieve the damage type of. Starts from 1.

 Returns

 number


See DMG_ Enums


"game/CleanUpMap"
game.CleanUpMap( boolean dontSendToClients=false, table ExtraFilters={} ) 
 Description
If called serverside it will remove ALL entities which were not created by the map(not players or weapons held by players).
On the client it will remove decals, sounds, gibs, dead NPCs, and entities created via ents.CreateClientProp.
This function calls GM:PreCleanupMap before cleaning up the map and GM:PostCleanupMap after cleaning up the map.



BUG


Calling this in a ENTITY:StartTouch or ENTITY:Touch hook will crash the game.





BUG


Calling this destroys all BASS streams.





BUG


This can crash when removing _firesmoke entities.



 Arguments

 boolean dontSendToClients=false


If set to true, dont run this functions on all clients.

 Arguments

 table ExtraFilters={}


Entity classes not to reset during cleanup.


"frame_blend/IsLastFrame"
frame_blend.IsLastFrame(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Validation required.
This page contains possibly incorrect or incomplete information. Further testing is required.
Returns whether the current frame is the last frame?

 Returns

 boolean


Whether the current frame is the last frame?


"game/ConsoleCommand"
game.ConsoleCommand( string stringCommand ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Runs a console command.
Make sure to add a newline (\n) at the end of the command.



WARNING


If you use data that were received from a client, you should avoid using this function because newline and semicolon (at least) allow the client to run arbitrary commands!
For safety, you are urged to prefer using RunConsoleCommand in this case.


 Arguments

 string stringCommand


String containing the command and arguments to be ran.

 Examples
 Example
Changes the gravity to 400 (default 600).

game.ConsoleCommand( sv_gravity 400\n )


"frame_blend/IsActive"
frame_blend.IsActive(  ) 
 Description
Returns whether frame blend post processing effect is enabled or not.

 Returns

 boolean


Is frame blend enabled or not


"game/GetAmmoID"
game.GetAmmoID( string name ) 
 Description
Returns the ammo type ID for given ammo type name.
See game.GetAmmoName for reverse.

 Arguments

 string name


Name of the ammo type to look up ID of

 Returns

 number


The ammo type ID of given ammo type name, or -1 if not found


"game/GetAmmoForce"
game.GetAmmoForce( number id ) 
 Description
Returns the ammo bullet force that is applied when an entity is hit by a bullet of given ammo type.

 Arguments

 number id


Ammo ID to retrieve the force of. Starts from 1.

 Returns

 number


"game/AddAmmoType"
game.AddAmmoType( table ammoData ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Adds a new ammo type to the game.
You can find a list of default ammo types here.



WARNING


This function must be called shared or you will have unexpected problems.




NOTE


There is a limit of 128 ammo types, including the default ones.




BUG


This will have unpredictable results when registering ammo types with the same name but different capitalisation.



 Arguments

 table ammoData


The attributes of the ammo. See the AmmoData structure.

 Examples
 Example
Add an ammo type

game.AddAmmoType( {
	name = ammo_9mm_max,
	dmgtype = DMG_BULLET,
	tracer = TRACER_LINE,
	plydmg = 0,
	npcdmg = 0,
	force = 2000,
	minsplash = 10,
	maxsplash = 5
} )


"game/GetAmmoMax"
game.GetAmmoMax( number id ) 
 Description
Returns the real maximum amount of ammo of given ammo ID.



NOTE


Currently all ammo types have overridden maximum value of reserve ammo set to 9999.


 Arguments

 number id


Ammo type ID

 Returns

 number


The maximum amount of reserve ammo a player can hold of this ammo type.


"game/GetAmmoNPCDamage"
game.GetAmmoNPCDamage( number id ) 
 Description
Returns the damage given ammo type should do to NPCs.

 Arguments

 number id


Ammo ID to retrieve the damage info of. Starts from 1.

 Returns

 number


"game/GetGlobalState"
game.GetGlobalState( string name ) 
 Description
Returns whether a Global State is off, active or dead ( inactive )
See Global States for more information.

 Arguments

 string name


The name of the Global State to retrieve the state of.
If the Global State by that name does not exist, GLOBAL_DEAD will be returned.

See Global States for a list of default global states.

 Returns

 number


The state of the Global State. See GLOBAL_ Enums


"frame_blend/RenderableFrames"
frame_blend.RenderableFrames(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Validation required.
This page contains possibly incorrect or incomplete information. Further testing is required.
Returns amount of frames needed to render?

 Returns

 number


Amount of frames needed to render?


"game/GetAmmoName"
game.GetAmmoName( number id ) 
 Description
Returns the ammo name for given ammo type ID.
See game.GetAmmoID for reverse.

 Arguments

 number id


Ammo ID to retrieve the name of. Starts from 1.

 Returns

 string


The name of given ammo type ID or nil if ammo type ID is invalid.


"game/GetMap"
game.GetMap(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the name of the current map, without a file extension.
On the menu state, returns menu.

 Returns

 string


The name of the current map, without a file extension.

 Examples
 Example
print( game.GetMap() )
Output:

gm_flatgrass


"game/GetGlobalCounter"
game.GetGlobalCounter( string name ) 
 Description
Returns the counter of a Global State.
See Global States for more information.

 Arguments

 string name


The name of the Global State to set.
If the Global State by that name does not exist, it will be created.

See Global States for a list of default global states.

 Returns

 number


The value of the given Global State, 0 if the global state doesnt exist.


"game/AddParticles"
game.AddParticles( string particleFileName ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Loads a particle file.



NOTE


You will still need to call this function clientside regardless if you create the particle effects serverside.


 Arguments

 string particleFileName


The path of the file to add. Must be (file).pcf.

 Examples
 Example
Example usage of the function. Precaches ExplosionCore_wall particle from particles/explosion.pcf, a Team Fortress 2 particle file.

game.AddParticles( particles/explosion.pcf )
PrecacheParticleSystem( ExplosionCore_wall )

if ( SERVER ) then
	-- A test console command to see if ( the particle works, spawns the particle where the player is looking at. 
	concommand.Add( particleitup, function( ply, cmd, args )
		ParticleEffect( ExplosionCore_wall, ply:GetEyeTrace().HitPos, Angle( 0, 0, 0 ) )
	end )
end


"game/GetAmmoPlayerDamage"
game.GetAmmoPlayerDamage( number id ) 
 Description
Returns the damage given ammo type should do to players.

 Arguments

 number id


Ammo ID to retrieve the damage info of. Starts from 1.

 Returns

 number


"game/GetIPAddress"
game.GetIPAddress(  ) 
 Description
Returns the public IP address and port of the current server. This will return the IP/port that you are connecting through when ran clientside.



NOTE


Returns 0.0.0.0:0 in singleplayer.




BUG


Returns 0.0.0.0:port on the server when called too early, including in GM:Initialize and GM:InitPostEntity. This bug seems to only happen the first time a server is launched, and will return the correct value after switching maps.



 Returns

 string


The IP address and port in the format x.x.x.x:x


"game/GetMapNext"
game.GetMapNext(  ) 
 Description
Returns the next map that would be loaded according to the file that is set by the mapcyclefile convar.

 Returns

 string


nextMap


"game/GetSkillLevel"
game.GetSkillLevel(  ) 
 Description
Returns the difficulty level of the game.
TIP: You can use this function in your scripted NPCs or Nextbots to make them harder, however, it is a good idea to lock powerful attacks behind the highest difficulty instead of just increasing the health.



NOTE


Internally this is tied to the gamerules entity, so youll have to wait to wait until GM:InitPostEntity is called to return the skill level


 Returns

 number


The difficulty level, Easy( 1 ), Normal( 2 ), Hard( 3 ).


"game/GetTimeScale"
game.GetTimeScale(  ) 
 Description
Returns the time scale of the game

 Returns

 number


The time scale


"game/IsDedicated"
game.IsDedicated(  ) 
 Description
Returns true if the server is a dedicated server, false if it is a Listen server or a singleplayer game.



BUG


This always returns false on the client.



 Returns

 boolean


Is the server dedicated or not.


"game/GetWorld"
game.GetWorld(  ) 
 Description
Returns the worldspawn entity.

 Returns

 Entity


The world


"game/LoadNextMap"
game.LoadNextMap(  ) 
 Description
Loads the next map according to the nextlevel convar, or from the current mapcycle file set by the respective convar.


"game/GetMapVersion"
game.GetMapVersion(  ) 
 Description
Returns the VBSP version of the current map.

 Returns

 number


mapVersion


"game/KickID"
game.KickID( string id, string reason=No reason given ) 
 Description
Kicks a player from the server. This can be ran before the player has spawned.

 Arguments

 string id


UserID or SteamID of the player to kick.

 Arguments

 string reason=No reason given


Reason to display to the player. This can span across multiple lines.


"game/MapLoadType"
game.MapLoadType(  ) 
 Description
Returns the map load type of the current map.
After changing the map with the console command changelevel, newgame is returned. With changelevel2 (single player only), transition is returned.

 Returns

 string


The load type. Possible values are: newgame, loadgame, transition, background.


"game/MountGMA"
game.MountGMA( string path ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns
5 Examples

5.1 Example




 Description
Mounts a GMA addon from the disk. Any error models currently loaded that the mounted addon provides will be reloaded.
Can be used with steamworks.Download

 Arguments

 string path


Location of the GMA file to mount, relative to the garrysmod directory

 Returns

 boolean


success

 Returns

 table


If successful, a table of files that have been mounted

 Examples
 Example
Downloads the Playable Piano addon and mounts the content.

steamworks.FileInfo( 104548572, function( result )
	steamworks.Download( result.fileid, true, function( name )
		game.MountGMA( name )
	end ) 
end )


"game/MaxPlayers"
game.MaxPlayers(  ) 
 Description
Returns the maximum amount of players (including bots) that the server can have.

 Returns

 number


The maximum amount of players


"game/SetGlobalCounter"
game.SetGlobalCounter( string name, number count ) 
 Description
Sets the counter of a Global State.
See Global States for more information.

 Arguments

 string name


The name of the Global State to set.
If the Global State by that name does not exist, it will be created.

See Global States for a list of default global states.

 Arguments

 number count


The value to set for that Global State.


"game/RemoveRagdolls"
game.RemoveRagdolls(  ) 
 Description
Removes all the clientside ragdolls.

 Examples
 Example
This will remove all the client ragdolls every 3 secconds.

timer.Create( removeRagdolls, 3, 0, function() game.RemoveRagdolls() end )


"game/SetSkillLevel"
game.SetSkillLevel( number level ) 
 Description
Sets the difficulty level of the game, can be retrieved with game.GetSkillLevel.
This will automatically change whenever the skill convar is modified serverside.



BUG


This function will not work if the skill convar doesnt match the targeted value. To work around this, you must use RunConsoleCommand(skill, num) alongside this function.



 Arguments

 number level


The difficulty level, Easy( 1 ), Normal( 2 ), Hard( 3 ).


"game/SetTimeScale"
game.SetTimeScale( number timeScale ) 
 Description
Sets the time scale of the game.
This function is supposed to remove the need of using the host_timescale convar, which is cheat protected.
To slow down or speed up the movement of a specific player, use Player:SetLaggedMovementValue instead.



NOTE


Like host_timescale, this method does not affect sounds, if you wish to change that, look into GM:EntityEmitSound.


 Arguments

 number timeScale


The new timescale, minimum value is 0.001 and maximum is 5.


"game/StartSpot"
game.StartSpot(  ) 
 Description
Returns position the player should start from, this is not the same thing as spawn points, it is used to properly transit the player between maps.

 Returns

 Vector


startSpot


"game/SinglePlayer"
game.SinglePlayer(  ) 
 Description
Returns whenever the current session is a single player game.

 Returns

 boolean


isSinglePlayer


"gamemode/Get"
gamemode.Get( string name ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. This returns the internally stored gamemode table.
 Arguments

 string name


The name of the gamemode you want to get

 Returns

 table


The gamemodes table


"Global/AddBackgroundImage"
AddBackgroundImage( string path ) 
 Description
Adds the specified image path to the main menu background pool. Image can be png or jpeg.

 Arguments

 string path


Path to the image.


"gameevent/Listen"
gameevent.Listen( string eventName ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example


5 Examples

5.1 Example


6 Examples

6.1 Example


7 Examples

7.1 Example


8 Examples

8.1 Example


9 Examples

9.1 Example




 Description
Add a game event listener.

 Arguments

 string eventName


The event to listen to, travels through hooks with eventName as event.

List of valid events can be found here.

 Examples
 Example
Announce to everyone that a player has connected.

gameevent.Listen( player_connect )
hook.Add( player_connect, AnnounceConnection, function( data )
	for k,v in pairs( player.GetAll() ) do
		v:ChatPrint( data.name ..  has connected to the server. )
	end
end )
Output:

Shinycow has connected to the server.
 Examples
 Example
This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_connect. player_connect is triggered at the exact moment they join the server.

gameevent.Listen( player_connect )
hook.Add( player_connect, player_connect_example, function( data )
	local name = data.name			// Same as Player:Nick()
	local steamid = data.networkid	// Same as Player:SteamID()
	local ip = data.address			// Same as Player:IPAddress()
	local id = data.userid			// Same as Player:UserID()
	local bot = data.bot			// Same as Player:IsBot()
	local index = data.index		// Same as Player:EntIndex()

	// Player has connected; this happens instantly after they join -- do something..

end )


 Examples
 Example
This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_disconnect. player_disconnect is triggered at the exact moment they disconnect from the server and will ALWAYS trigger regardless of whether they time-out, are kick/banned, client crashes, they click the X, they type quit in console, etc...

gameevent.Listen( player_disconnect )
hook.Add( player_disconnect, player_disconnect_example, function( data )
	local name = data.name			// Same as Player:Nick()
	local steamid = data.networkid		// Same as Player:SteamID()
	local id = data.userid			// Same as Player:UserID()
	local bot = data.bot			// Same as Player:IsBot()
	local reason = data.reason		// Text reason for disconnected such as Kicked by console!, Timed out!, etc...

	// Player has disconnected - this is more reliable than PlayerDisconnect
	
end )


 Examples
 Example
This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_spawn. player_spawn is triggered when the player initially spawns, or respawns.

gameevent.Listen( player_spawn )
hook.Add( player_spawn, player_spawn_example, function( data ) 
	local id = data.userid	// Same as Player:UserID()

	// Called when the player spawns initially or respawns.

end )


 Examples
 Example
This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_hurt. player_hurt is triggered when the player is injured or dies.
The SERVER receives 1 extra value - Priority.

gameevent.Listen( player_hurt )
hook.Add( player_hurt, player_hurt_example, function( data ) 
	local health = data.health				// Remaining health after injury
	local priority = SERVER and data.Priority or 5 		// Priority??
	local id = data.userid					// Same as Player:UserID()
	local attackerid = data.attacker			// Same as Player:UserID() but its the attacker id.

	// Called when the player is injured or dies.

end )


 Examples
 Example
This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_hurt. player_hurt is triggered when the player is injured or dies.
The SERVER receives 1 extra value - Priority.

gameevent.Listen( player_say )
hook.Add( player_say, player_say_example, function( data ) 
	local priority = SERVER and data.Priority or 1 	// Priority??
	local id = data.userid				// Same as Player:UserID() for the speaker
	local text = data.text				// The written text.

	// Called when a player writes text ( Called by the SERVER on the client AFTER the PlayerSay hook )

end )


 Examples
 Example
This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: entity_killed. entity_killed is triggered when the player or entity dies.

gameevent.Listen( entity_killed )
hook.Add( entity_killed, entity_killed_example, function( data ) 
	local inflictor_index = data.entindex_inflictor		// Same as Weapon:EntIndex() / weapon used to kill victim
	local attacker_index = data.entindex_attacker		// Same as Player/Entity:EntIndex() / person or entity who did the damage
	local damagebits = data.damagebits			// DAMAGE_TYPE - use BIT operations to decipher damage types...
	local victim_index = data.entindex_killed		// Same as Victim:EntIndex() / the entity / player victim

	// Called when a Player or Entity is killed

end )


"gamemode/Register"
gamemode.Register( table gm, string name, string derived ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Called by the engine when a gamemode is being loaded.
 Arguments

 table gm


Your GM table

 Arguments

 string name


Name of your gamemode, lowercase, no spaces.

 Arguments

 string derived


The gamemode name that your gamemode is derived from


"Global/AccessorFunc"
AccessorFunc( table tab, any key, string name, number force=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Adds simple Get/Set accessor functions on the specified table.
Can also force the value to be set to a number, bool or string.

 Arguments

 table tab


The table to add the accessor functions too.

 Arguments

 any key


The key of the table to be get/set.

 Arguments

 string name


The name of the functions (will be prefixed with Get and Set).

 Arguments

 number force=nil


The type the setter should force to (uses FORCE_ Enums).

 Examples
 Example
Adds the GetFooBar and SetFooBar functions to the Player metatable and then uses them.

local meta = FindMetaTable( Player )
AccessorFunc( meta, foo_bar, FooBar, FORCE_BOOL )

local ply = player.GetByID( 1 )
ply:SetFooBar( true )

print( not ply:GetFooBar() )
Output:

false


"Global/AddCSLuaFile"
AddCSLuaFile( string file=current file ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Marks a Lua file to be sent to clients when they join the server. Doesnt do anything on the client - this means you can use it in a shared file without problems.



WARNING


If the file trying to be added is empty, an error will occur, and the file will not be sent to the client.




NOTE


This function is not needed for scripts located in lua/autorun/ and lua/autorun/client/: they are automatically sent to clients.


 Arguments

 string file=current file


The name/path to the Lua file that should be sent, relative to the garrysmod/lua folder. If no parameter is specified, it sends the current file.

The file path can be relative to the script it is ran from. For example, if your script is in lua/myfolder/stuff.lua, calling AddCSLuaFile(otherstuff.lua) and AddCSLuaFile(myfolder/otherstuff.lua) is the same thing.

 Examples
 Example
Adds the cl_init.lua file in the lua folder to be downloaded by connecting clients. This is required, and is normally done in init.lua.

AddCSLuaFile( cl_init.lua )


 Examples
 Example
Adds the current file to the list of files to be downloaded by clients. This is usually done at the top of a shared file.

AddCSLuaFile()


"Global/AddConsoleCommand"
AddConsoleCommand( string name, string helpText, number flags ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.

Use concommand.Add instead.Tells the engine to register a console command. If the command was ran, the engine calls concommand.Run.
 Arguments

 string name


The name of the console command to add.

 Arguments

 string helpText


The help text.

 Arguments

 number flags


Concommand flags using FCVAR_ Enums


"Global/Add_NPC_Class"
Add_NPC_Class( string name ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Defines a global entity class variable with an automatic value in order to prevent collisions with other CLASS_ Enums. You should prefix your variable with CLASS_ for consistency.

 Arguments

 string name


The name of the new enum/global variable.

 Examples
 Example
Creates a global variable named CLASS_TESTER and prints its value.

Add_NPC_Class( CLASS_TESTER )
print( CLASS_TESTER )
Output:

26 (one greater than the current highest value of the CLASS_ Enums)


"game/SetGlobalState"
game.SetGlobalState( string name, number state ) 
 Description
Sets whether a Global State is off, active or dead ( inactive )
See Global States for more information.

 Arguments

 string name


The name of the Global State to set.
If the Global State by that name does not exist, it will be created.

See Global States for a list of default global states.

 Arguments

 number state


The state of the Global State. See GLOBAL_ Enums


"Global/AddWorldTip"
AddWorldTip( number entindex=nil, string text, number dieTime=SysTime() + 0.05, Vector pos=ent:GetPos(), Entity ent=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example




 Description
This function creates a World Tip, similar to the one shown when aiming at a Thruster where it shows you its force.
This function will make a World Tip that will only last 50 milliseconds (1/20th of a second), so you must call it continuously as long as you want the World Tip to be shown. It is common to call it inside a Think hook.
Contrary to what the functions name implies, it is impossible to create more than one World Tip at the same time. A new World Tip will overwrite the old one, so only use this function when you know nothing else will also be using it.
See SANDBOX:PaintWorldTips for more information.



NOTE


This function is only available in Sandbox and its derivatives


 Arguments

 number entindex=nil


This argument is no longer used; it has no effect on anything. You can use nil in this argument.

 Arguments

 string text


The text for the world tip to display.

 Arguments

 number dieTime=SysTime() + 0.05


This argument is no longer used; when you add a World Tip it will always last only 0.05 seconds. You can use nil in this argument.

 Arguments

 Vector pos=ent:GetPos()


Where in the world you want the World Tip to be drawn. If you add a valid Entity in the next argument, this argument will have no effect on the actual World Tip.

 Arguments

 Entity ent=nil


Which entity you want to associate with the World Tip. This argument is optional. If set to a valid entity, this will override the position set in pos with the Entitys position.

 Examples
 Example
Creates a World Tip where the player is looking. If the player is looking at an entity, the World Tip is positioned on the entity.

hook.Add( Think, draw World Tip, function()
	local ply = Entity( 1 )
	local tr = ply:GetEyeTrace()
	
	local pos = tr.HitPos -- will be unused if ( ent is valid
	local ent = tr.Entity
	
	AddWorldTip( nil, Hello world!, nil, pos, ent )
end )


"Global/Angle"
Angle( number pitch=0, number yaw=0, number roll=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Creates an Angle object.

 Arguments

 number pitch=0


The pitch value of the angle.
If this is an Angle, this function will return a copy of the given angle.
If this is a string, this function will try to parse the string as a angle. If it fails, it returns a 0 angle.

(See examples)

 Arguments

 number yaw=0


The yaw value of the angle.

 Arguments

 number roll=0


The roll value of the angle.

 Returns

 Angle


Created angle

 Examples
 Example
Creates an angle and prints the value to the console.

print( Angle( 1, 2, 3 ) )
print( Angle( 4 5 6 ) )
local test = Angle( 7, 8, 9 )
print( Angle( test ) )

print( Angle( 4 5 test ) )
print( Angle() )
Output:

1.00 2.00 3.00
4.00 5.00 6.00
7.00 8.00 9.00

0.00 0.00 0.00
0.00 0.00 0.00


"Global/AddonMaterial"
AddonMaterial( string name ) 
 Description
Loads the specified image from the /cache folder, used in combination steamworks.Download.
Most addons will provide a 512x512 png image.

 Arguments

 string name


The name of the file.

 Returns

 IMaterial


The material, returns nil if the cached file is not an image.


"Global/AddOriginToPVS"
AddOriginToPVS( Vector position ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Adds the specified vector to the PVS which is currently building. This allows all objects in visleafs visible from that vector to be drawn.

 Arguments

 Vector position


The origin to add.

 Examples
 Example
Adds an RTCameras current position to all players PVS, causing props near it to always render on an rtscreen

hook.Add( SetupPlayerVisibility, AddRTCamera, function( pPlayer, pViewEntity )
	-- Adds any view entity
	if ( pViewEntity:IsValid() ) then
		AddOriginToPVS( pViewEntity:GetPos() )
	end
end )


"Global/BuildNetworkedVarsTable"
BuildNetworkedVarsTable(  ) 
 Description
Dumps the networked variables of all entities into one table and returns it.

 Returns

 table


Format:

 key = Entity for NWVars or number (always 0) for global vars
 value = table formatted as:
 key = string var name
 value = any type var value


"Global/AngleRand"
AngleRand(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns an angle with a randomized pitch, yaw and roll. The pitch is between -90 and 90 degrees, while yaw and roll are between -180 and 180 degrees.

 Returns

 Angle


The randomly generated angle.

 Examples
 Example
Prints out a random angle.

print( AngleRand() )
Output:

-6.949 113.388 130.879


"Global/assert"
assert( any expression, string errorMessage=assertion failed!, vararg returns=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Returns
7 Returns
8 Examples

8.1 Example


9 Examples

9.1 Example


10 Examples

10.1 Example




 Description
If the result of the first argument is false or nil, an error is thrown with the second argument as the message.

 Arguments

 any expression


The expression to assert.

 Arguments

 string errorMessage=assertion failed!


The error message to throw when assertion fails. This is only type-checked if the assertion fails.

 Arguments

 vararg returns=nil


Any arguments past the error message will be returned by a successful assert.

 Returns

 any


If successful, returns the first argument.

 Returns

 any


If successful, returns the error message. This will be nil if the second argument wasnt specified.

Since the second argument is only type-checked if the assertion fails, this doesnt have to be a string.

 Returns

 vararg


Returns any arguments past the error message.

 Examples
 Example
The assertion is successful, and the result of the first argument is returned.

local ABC = assert( print )
print( ABC )
Output:

function: builtin#25
 Examples
 Example
Since the first argument evaluates to false, an error is thrown.

assert( print == 1, print is not equal to 1! )
Output:

[ERROR] lua_run:1: print is not equal to 1!
 Examples
 Example
Examples of return behaviour.

print( assert( 5 ) )
print( assert( true, foo, 2, {} ) )
Output:

5
true	foo	2	table: 0x36409278


"Global/CancelLoading"
CancelLoading(  ) 
 Description
Aborts joining of the server you are currently joining.


"Global/CanAddServerToFavorites"
CanAddServerToFavorites(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Used internally to check if the current server the player is on can be added to favorites or not. Does not check if the server is ALREADY in the favorites.

 Returns

 boolean


"Global/ClearBackgroundImages"
ClearBackgroundImages(  ) 
 Description
Empties the pool of main menu background images.


"Global/ClientsideRagdoll"
ClientsideRagdoll( string model, number renderGroup=RENDER_GROUP_OPAQUE ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Creates a fully clientside ragdoll.



NOTE


The ragdoll initially starts as hidden and with shadows disabled, see the example for how to enable it.Theres no need to call Entity:Spawn on this entity.The physics wont initialize at all if the model hasnt been precached serverside first.




BUG


Clientside entities are not garbage-collected, thus you must store a reference to the object and call CSEnt:Remove manually.



 Arguments

 string model


The file path to the model.



WARNING


Model must be precached with util.PrecacheModel on the server before usage.



 Arguments

 number renderGroup=RENDER_GROUP_OPAQUE


The RENDERGROUP_ Enums to assign.

 Returns

 CSEnt


The newly created client-side ragdoll. ( C_ClientRagdoll )

 Examples
 Example
Creates a new ragdoll with the player model of breen and enables rendering and shadows.

local ragdoll = ClientsideRagdoll( models/player/breen.mdl )
ragdoll:SetNoDraw( false )
ragdoll:DrawShadow( true )


"Global/BroadcastLua"
BroadcastLua( string code ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sends the specified Lua code to all connected clients and executes it.

 Arguments

 string code


The code to be executed. Capped at length of 254 characters.

 Examples
 Example
Print Hello World! in the clients console

BroadcastLua( [[print( Hello World! )]] )
Output:

Hello World!


"Global/ClientsideModel"
ClientsideModel( string model, number renderGroup=RENDERGROUP_OTHER ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Creates a non physical entity that only exists on the client. See also ents.CreateClientProp.



BUG


Parented clientside models will become detached if the parent entity leaves the PVS.





BUG


Clientside entities are not garbage-collected, thus you must store a reference to the object and call CSEnt:Remove manually.





BUG


Clientside models will occasionally delete themselves during high server lag.



 Arguments

 string model


The file path to the model.



WARNING


Model must be precached with util.PrecacheModel on the server before usage.



 Arguments

 number renderGroup=RENDERGROUP_OTHER


The rendergroup of the entity, see RENDERGROUP_ Enums.

 Returns

 CSEnt


Created client-side model. ( C_BaseFlex )


"gamemode/Call"
gamemode.Call( string name, vararg args ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Called by the engine to call a hook within the loaded gamemode.
The supplied event name must be defined in the active gamemode. Otherwise, nothing will happen - not even hooks added with hook.Add will be called.
This is similar to hook.Run and hook.Call, except the hook library will call hooks created with hook.Add even if there is no corresponding gamemode function.

 Arguments

 string name


The name of the hook to call.

 Arguments

 vararg args


The arguments

 Returns

 any


The result of the hook function - can be up to 6 values. Returns false if the gamemode function doesnt exist (i.e. nothing happened), but remember - a hook can also return false.

 Examples
 Example
Shows a suicide death notice in Sandbox.

local ply = Entity( 1 )
gamemode.Call( AddDeathNotice, ply:GetName(), ply:Team(), nil, ply:GetName(), ply:Team() )
Output:


"Global/ColorRand"
ColorRand( boolean a=false ) 
 Description
Creates a Color structure with randomized red, green, and blue components. If the alpha argument is true, alpha will also be randomized.

 Arguments

 boolean a=false


Should alpha be randomized.

 Returns

 table


The created Color structure.


"Global/Color"
Color( number r, number g, number b, number a=255 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example


8 Examples

8.1 Example


9 Examples

9.1 Example


10 Examples

10.1 Example




 Description
Creates a Color structure.

 Arguments

 number r


An integer from 0-255 describing the red value of the color.

 Arguments

 number g


An integer from 0-255 describing the green value of the color.

 Arguments

 number b


An integer from 0-255 describing the blue value of the color.

 Arguments

 number a=255


An integer from 0-255 describing the alpha (transparency) of the color.

 Returns

 table


The created Color structure.

 Examples
 Example
Creates a color and prints the components to the console.

PrintTable( Color( 1, 2, 3, 4 ) )
Output:

a	=	4
b	=	3
g	=	2
r	=	1
 Examples
 Example
Color variables can have individual channels set using the arguments

local col = Color( 0, 255, 0, 255 )

col.r = 255

PrintTable( col )
Output:

a	=	255
b	=	0
g	=	255
r	=	255
 Examples
 Example
Transforms a color object to a string, then prints it.

local str = tostring( Color( 255, 0, 0 ) )
print( str )
Output:

255 0 0
 Examples
 Example
Prints equal if both colors are equal, otherwise unequal will be printed.

if ( Color( 255, 0, 0 ) == Color( 255, 0, 0 ) then
	print( equal )
else
	print( unequal )
end
Output:

equal


"Global/ChangeTooltip"
ChangeTooltip( Panel panel ) 
 Description
Automatically called by the engine when a panel is hovered over with the mouse

 Arguments

 Panel panel


Panel that has been hovered over


"Global/CompileString"
CompileString( string code, string identifier, boolean HandleError=true ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Returns
7 Examples

7.1 Example


8 Examples

8.1 Example


9 Examples

9.1 Example




 Description
This function will compile the code argument as lua code and return a function that will execute that code.
Please note that this function will not automatically execute the given code after compiling it.

 Arguments

 string code


The code to compile.

 Arguments

 string identifier


An identifier in case an error is thrown. (The same identifier can be used multiple times)

 Arguments

 boolean HandleError=true


If false this function will return an error string instead of throwing an error.

 Returns

 function


A function that, when called, will execute the given code. Returns nil if there was an error.

 Returns

 string


The error string. Will be nil if there were no errors or the function handles errors (third argument is true).

 Examples
 Example
Code that will not compile, with ErrorHandling set to false.

local code = MsgN( Hi )
local func = CompileString( code, TestCode, false )
MsgN( func )
Output:

TestCode:1: unfinished string near &lt;eof&gt; (this is not a script error - it is a returned string)
 Examples
 Example
Code that will compile.

local code = MsgN( Hi )
local func = CompileString( code, TestCode )

if ( func ) then -- Compile String returns nil if ( 3rd argument is true and code has errors.
   func()
end
Output:

Hi


 Examples
 Example
Compiled code with custom arguments; captured with the varargs identifier.

local code = [[
	local args = { ... } 
	print( unpack( args ) )
	print( args[ 2 ] + args[ 3 ] )
	print( args[ 4 ] .. args[ 5 ] )

	local first, second = ...
	print( first, second )
]]
local func = CompileString( code, VarargCodeTest )
func( 1, 2, 3, A, B, C )
Output:

1	2	3	A	B	C
5
AB
1   2


"Global/ChangeBackground"
ChangeBackground( string currentgm ) 
 Description
Sets the active main menu background image to a random entry from the background images pool. Images are added with AddBackgroundImage.

 Arguments

 string currentgm


Apparently does nothing.


"Global/ConVarExists"
ConVarExists( string name ) 
 Description
Returns whether a ConVar with the given name exists or not

 Arguments

 string name


Name of the ConVar.

 Returns

 boolean


True if the ConVar exists, false otherwise.


"Global/CreateClientConVar"
CreateClientConVar( string name, string default, boolean shouldsave=true, boolean userinfo=false, string helptext= ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Returns
8 Examples

8.1 Example




 Description
Makes a clientside-only console variable



NOTE


This function is a wrapper of CreateConVar, with the difference being that FCVAR_ARCHIVE and FCVAR_USERINFO are added automatically when shouldsave and userinfo are true, respectively.


Although this function is shared, it should only be used clientside.

 Arguments

 string name


Name of the ConVar to be created and able to be accessed.

This cannot be a name of existing console command or console variable. It will silently fail if it is.

 Arguments

 string default


Default value of the ConVar.

 Arguments

 boolean shouldsave=true


Should the ConVar be saved across sessions

 Arguments

 boolean userinfo=false


Should the ConVar and its containing data be sent to the server when it has changed. This make the convar accessible from server using Player:GetInfoNum and similar functions.

 Arguments

 string helptext=


Help text to display in the console.

 Returns

 ConVar


Created convar.

 Examples
 Example
Creates a ConVar that does nothing and saves.

CreateClientConVar( superspeed_enabled, 0, true, false )


"Global/CloseDermaMenus"
CloseDermaMenus(  ) 
 Description
Closes all Derma menus that have been passed to RegisterDermaMenuForClose and calls GM:CloseDermaMenus


"Global/ClientsideScene"
ClientsideScene( string name, Entity targetEnt ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Creates a scene entity based on the scene name and the entity.

 Arguments

 string name


The name of the scene.

 Arguments

 Entity targetEnt


The entity to play the scene on.

 Returns

 CSEnt


C_SceneEntity

 Examples
 Example
Plays I guess you should go with Alyx line from HL2.

ClientsideScene( scenes/eli_lab/mo_gowithalyx01.vcd, LocalPlayer() )


"Global/ConsoleAutoComplete"
ConsoleAutoComplete( string text ) 
 Description
Returns a table of console command names beginning with the given text.

 Arguments

 string text


Text that the console commands must begin with.

 Returns

 table


Table of console command names.


"Global/collectgarbage"
collectgarbage( string action=collect, number arg ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Executes the specified action on the garbage collector.

 Arguments

 string action=collect


The action to run.

Valid actions are collect, stop, restart, count, step, setpause and setstepmul.

 Arguments

 number arg


The argument of the specified action, only applicable for step, setpause and setstepmul.

 Returns

 any


If the action is count this is the number of kilobytes of memory used by Lua.
If the action is step this is true if a garbage collection cycle was finished.
If the action is setpause this is the previous value for the GCs pause.

If the action is setstepmul this is the previous value for the GCs step.

 Examples
 Example
The current floored dynamic memory usage of Lua, in kilobytes.

print( collectgarbage( count ) )


"Global/ColorToHSV"
ColorToHSV( table color ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns
5 Returns
6 Examples

6.1 Example




 Description
Converts a Color structure into HSV color space.

 Arguments

 table color


The Color structure.

 Returns

 number


The hue in degrees.

 Returns

 number


The saturation in the range 0-1.

 Returns

 number


The value in the range 0-1.

 Examples
 Example
Creates a color and prints the HSV values to the console.

print( ColorToHSV( Color( 255, 255, 0 ) ) )
Output:

60 1 1


"Global/ColorAlpha"
ColorAlpha( table color, number alpha ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns a new Color structure with the RGB components of the given Color structure and the alpha value specified.

 Arguments

 table color


The Color structure from which to take RGB values. This color will not be modified.

 Arguments

 number alpha


The new alpha value, a number between 0 and 255. Values above 255 will be clamped.

 Returns

 table


The new Color structure with the modified alpha value

 Examples
 Example
local red = Color( 255, 0, 0, 255 )
local red2 = ColorAlpha( red, 125 )
print( red.r, red.g, red.b, red.a )
print( red2.r, red2.g, red2.b, red2.a )
Output:

255	0	0	255
255	0	0	125


"Global/CompileFile"
CompileFile( string path ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Attempts to compile the given file. If successful, returns a function that can be called to perform the actual execution of the script.

 Arguments

 string path


Path to the file, relative to the garrysmod/lua/ directory.

 Returns

 function


The function which executes the script.

 Examples
 Example
Assuming our file is named example.lua and located in the garrysmod/lua/ directory, the following code would execute the script.

local example = CompileFile( example.lua )
example()
Output:

Hello!


"Global/CreateParticleSystem"
CreateParticleSystem( Entity ent, string effect, number partAttachment, number entAttachment=0, Vector offset=Vector( 0, 0, 0 ) ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Returns


 Description
Creates a new particle system.



NOTE


The particle effect must be precached with PrecacheParticleSystem and the file its from must be added via game.AddParticles before it can be used!


 Arguments

 Entity ent


The entity to attach the control point to.

 Arguments

 string effect


The name of the effect to create. It must be precached.

 Arguments

 number partAttachment


See PATTACH_ Enums.

 Arguments

 number entAttachment=0


The attachment ID on the entity to attach the particle system to

 Arguments

 Vector offset=Vector( 0, 0, 0 )


The offset from the Entity:GetPos of the entity we are attaching this CP to.

 Returns

 CNewParticleEffect


The created particle system.


"Global/CreateSprite"
CreateSprite( IMaterial material ) 
 Description
Creates and returns a new DSprite element with the supplied material.

 Arguments

 IMaterial material


Material the sprite should draw.

 Returns

 Panel


The new DSprite element.


"Global/CreateMaterial"
CreateMaterial( string name, string shaderName, table materialData ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Creates a new material with the specified name and shader.



NOTE


Materials created with this function can be used in Entity:SetMaterial and Entity:SetSubMaterial by prepending a ! to their material name argument.




BUG


.pngs must be loaded with Material before being used with this function.





BUG







BUG


This will not create a new material if another material object with the same name already exists.



 Arguments

 string name


The material name. Must be unique.

 Arguments

 string shaderName


The shader name. See Category: Shaders.

 Arguments

 table materialData


Key-value table that contains shader parameters and proxies.




NOTE


Unlike IMaterial:SetTexture, this table will not accept ITexture values. Instead, use the textures name (see ITexture:GetName).



 Returns

 IMaterial


Created material

 Examples
 Example
Alternative to render.SetColorMaterial, mainly for use with Entity:SetMaterial

CreateMaterial( colortexshp, VertexLitGeneric, {
  [$basetexture] = color/white,
  [$model] = 1,
  [$translucent] = 1,
  [$vertexalpha] = 1,
  [$vertexcolor] = 1
} )


"Global/CreateSound"
CreateSound(  ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Returns a sound parented to the specified entity.



NOTE


You can only create one CSoundPatch per audio file, per entity at the same time.


 Arguments

 Entity targetEnt


The target entity.

 Arguments

 string soundName


The sound to play.

 Arguments

 


A CRecipientFilter of the players that will have this sound networked to them.



NOTE


This argument only works serverside.



 Returns

 CSoundPatch


The sound object

 Examples
 Example
Play a sound everywhere, similar to surface.PlaySound but available clientside and serverside.

local LoadedSounds
if ( CLIENT ) then
	LoadedSounds = {} -- this table caches existing CSoundPatches
end

local function ReadSound( FileName )
	local sound
	local filter
	if ( SERVER ) then
		filter = RecipientFilter()
		filter:AddAllPlayers()
	end
	if ( SERVER or!LoadedSounds[FileName] ) then
		-- The sound is always re-created serverside because of the RecipientFilter.
		sound = CreateSound( game.GetWorld(), FileName, filter ) -- create the new sound, parented to the worldspawn ( which always exists )
		if ( sound ) then
			sound:SetSoundLevel( 0 ) -- play everywhere
			if ( CLIENT ) then
				LoadedSounds[FileName] = { sound, filter } -- cache the CSoundPatch
			end
		end
	else
		sound = LoadedSounds[FileName][1]
		filter = LoadedSounds[FileName][2]
	end
	if ( sound ) then
		if ( CLIENT ) then
			sound:Stop() -- it wont play again otherwise
		end
		sound:Play()
	end
	return sound -- useful if ( you want to stop the sound yourself
end

-- When we are ready, we play the sound:
ReadSound( phx/hmetal1.wav )


"Global/CreatePhysCollideBox"
CreatePhysCollideBox( Vector mins, Vector maxs ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Creates a new PhysCollide from the given bounds.



BUG


This fails to create planes or points - no components of the mins or maxs can be the same.



 Arguments

 Vector mins


Min corner of the box. This is not automatically ordered with the maxs and must contain the smallest vector components. See OrderVectors.

 Arguments

 Vector maxs


Max corner of the box. This is not automatically ordered with the mins and must contain the largest vector components.

 Returns

 PhysCollide


The new PhysCollide. This will be a NULL PhysCollide (PhysCollide:IsValid returns false) if given bad vectors or no more PhysCollides can be created in the physics engine.

 Examples
 Example
A box that interacts correctly with VPhysics objects and player movement.

AddCSLuaFile()

DEFINE_BASECLASS( base_anim )

ENT.PrintName = Cube
ENT.Spawnable = true

ENT.Mins = Vector( -16, -16, -16 )
ENT.Maxs = Vector(  16,  16,  16 )

function ENT:Initialize()
    self.PhysCollide = CreatePhysCollideBox( self.Mins, self.Maxs )
    self:SetCollisionBounds( self.Mins, self.Maxs )

    if ( SERVER ) then
        self:PhysicsInitBox( self.Mins, self.Maxs )
        self:SetSolid( SOLID_VPHYSICS )
        self:PhysWake()
    end

    if ( CLIENT ) then
        self:SetRenderBounds( self.Mins, self.Maxs )
    end

    self:EnableCustomCollisions( true )
    self:DrawShadow( false )
end

-- Handles collisions against traces. This includes player movement.
function ENT:TestCollision( startpos, delta, isbox, extents )
    if ( not IsValid( self.PhysCollide ) then
        return
    end

    -- TraceBox expects the trace to begin at the center of the box, but TestCollision is bad
    local max = extents
    local min = -extents
    max.z = max.z - min.z
    min.z = 0

    local hit, norm, frac = self.PhysCollide:TraceBox( self:GetPos(), self:GetAngles(), startpos, startpos + delta, min, max )

    if ( not hit ) then
        return
    end

    return { 
        HitPos = hit,
        Normal  = norm,
        Fraction = frac,
    }

end

function ENT:Draw()
    render.DrawWireframeBox( self:GetPos(), self:GetAngles(), self.Mins, self.Maxs, Color( 255, 0, 0 ), true )
end


"Global/DamageInfo"
DamageInfo(  ) 
 Description
Returns an CTakeDamageInfo object.



BUG


This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once.



 Returns

 CTakeDamageInfo


The CTakeDamageInfo object.


"Global/CreateConVar"
CreateConVar( string name, string value, number flags=FCVAR_NONE, string helptext= ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Creates a console variable (ConVar), in general these are for things like gamemode/server settings.

 Arguments

 string name


Name of the convar.

This cannot be a name of an engine console command or console variable. It will silently fail if it is. If it is the same name as another lua ConVar, it will return that ConVar object.

 Arguments

 string value


Default value of the convar. Can also be a number.

 Arguments

 number flags=FCVAR_NONE


Flags of the convar, see FCVAR_ Enums, either as bitflag or as table.

 Arguments

 string helptext=


The help text to show in the console.

 Returns

 ConVar


The convar created.


"Global/DeriveGamemode"
DeriveGamemode( string base ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Retrieves data from a gamemode to use in yours. This also sets a BaseClass field on your GM table to the gamemode you are deriving from. It appears that this function works by running the init and cl_init Lua files of the target gamemode, then overriding functions that appear in both the target and your gamemode with your gamemodes functions.

 Arguments

 string base


Gamemode name to derive from.

 Examples
 Example
Retrieves data from sandbox.

DeriveGamemode( sandbox )


"Global/Derma_Anim"
Derma_Anim( string name, Panel panel, function func ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Creates a new derma animation.

 Arguments

 string name


Name of the animation to create

 Arguments

 Panel panel


Panel to run the animation on

 Arguments

 function func


Function to call to process the animation
Arguments:

 Panel pnl - the panel passed to Derma_Anim
 table anim - the anim table
 number delta - the fraction of the progress through the animation
 any data - optional data passed to the run metatable method


 Returns

 table


A lua metatable containing four methods:

 Run() - Should be called each frame you want the animation to be ran.
 Active() - Returns if the animation is currently active (has not finished and stop has not been called)
 Stop() - Halts the animation at its current progress.
 Start( Length, Data ) - Prepares the animation to be ran for Length seconds. Must be called once before calling Run(). The data parameter will be passed to the func function.


 Examples
 Example

local function inQuad( fraction, beginning, change )
	return change * ( fraction ^ 2 ) + beginning
end

local main = vgui.Create( DFrame )
main:SetTitle( Derma_Anim Example )
main:SetSize( 250, 200 )
main:SetPos( 200 )
main:MakePopup()
local anim = Derma_Anim( EaseInQuad, main, function( pnl, anim, delta, data )
	pnl:SetPos( inQuad( delta, 200, 600 ), 300 ) -- Change the X coordinate from 200 to 200+600
end )
anim:Start( 2 ) -- Animate for two seconds
main.Think = function( self )
	if ( anim:Active() then
		anim:Run()
	end
end
Output:

Panel naturally glides across the screen from 200 x to 800 x


"Global/CreatePhysCollidesFromModel"
CreatePhysCollidesFromModel( string modelName ) 
 Description
Creates PhysCollide objects for every physics object the model has. The model must be precached with util.PrecacheModel before being used with this function.

 Arguments

 string modelName


Model path to get the collision objects of.

 Returns

 table


Table of PhysCollide objects. The number of entries will match the models physics object count. See also Entity:GetPhysicsObjectCount. Returns no value if the model doesnt exist, or has not been precached.


"Global/DEFINE_BASECLASS"
baseclass.Get( string name ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Gets the base class of an an object.
This is used not just by entities, but also by widgets, panels, drive modes, weapons and gamemodes (with gamemode_ prefix).
The keyword DEFINE_BASECLASS translates into a call to this function. In the engine, it is replaced with:

local BaseClass = baseclass.Get
 Arguments

 string name


The child class.

 Returns

 table


The base classs meta table.

 Examples
 Example
Inherits the weapon from weapon_csbasegun and calls its base functions

AddCSLuaFile()
DEFINE_BASECLASS( weapon_csbasegun ) //this is equivalent to local BaseClass = baseclass.Get( weapon_csbasegun )

//omitted generic swep definitions

function SWEP:Initialize()
	BaseClass.Initialize( self ) //calls SWEP:Initialize() from weapon_csbasegun
	self:SetHoldType( pistol )
end

function SWEP:Deploy()
	self:SetAccuracy( 0.9 )
	return BaseClass.Deploy( self ) //calls SWEP:Deploy() from weapon_csbasegun and returns its result
end

function SWEP:SetupDataTables()
	BaseClass.SetupDataTables( self ) //calls SWEP:SetupDataTables() from weapon_csbasegun and inits its dtvars
end


"Global/CurTime"
CurTime(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the uptime of the server in seconds (to at least 4 decimal places)
This is a synchronised value and affected by various factors such as host_timescale (or game.GetTimeScale) and the server being paused - either by sv_pausable or all players disconnecting.
You should use this function for timing in-game events but not for real-world events.
See also: RealTime, SysTime



NOTE


This is internally defined as a float, and as such it will be affected by precision loss if your server uptime is more than 6 hours, which will cause jittery movement of players and props and inaccuracy of timers, it is highly encouraged to refresh or change the map when that happens (a server restart is not necessary).This is NOT easy as it sounds to fix in the engine, so please refrain from posting issues about this




BUG


This returns 0 in GM:PlayerAuthed.



 Returns

 number


Time synced with the game server.

 Examples
 Example
Simple delay timer.

local delay = 0
hook.Add( Think, CurTimeDelay, function()
 if ( CurTime() &lt; delay ) then return end
	print( This message will repeat every 5 seconds. )
	 delay = CurTime() + 5
 end )
Output:

This message will repeat every 5 seconds.


"Global/Derma_DrawBackgroundBlur"
Derma_DrawBackgroundBlur( Panel panel, number startTime ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Draws background blur around the given panel.

 Arguments

 Panel panel


Panel to draw the background blur around

 Arguments

 number startTime


Time that the blur began being painted

 Examples
 Example
Blur being drawn around a panel

function PANEL:Init()
    self.startTime = SysTime()
end

function PANEL:Paint()
    Derma_DrawBackgroundBlur( self, self.startTime )
end
Output:

Background blur is drawn around the panel


"Global/Derma_Install_Convar_Functions"
Derma_Install_Convar_Functions( Panel target ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Makes the panel (usually an input of sorts) respond to changes in console variables by adding next functions to the panel:

 Panel:SetConVar
 Panel:ConVarChanged
 Panel:ConVarStringThink
 Panel:ConVarNumberThink

The console variable value is saved in the m_strConVar property of the panel.
The panel should call
Panel:ConVarStringThink or
Panel:ConVarNumberThink
in its PANEL:Think hook and should call Panel:ConVarChanged when the panels value has changed.

 Arguments

 Panel target


The panel the functions should be added to.

 Examples
 Example
Adds the functions to a panel (snippet of vgui/dcheckbox.lua)

local PANEL = {}


Derma_Install_Convar_Functions( PANEL )

function PANEL:Init()
	-- Init function here
end
function PANEL:Think()
	self:ConVarStringThink()
end
Output:

The PANEL table now contains the functions SetConVar, ConVarChanged, ConVarStringThink and ConVarNumberThink (and an Init function and a Think function)


"Global/DebugInfo"
DebugInfo( number slot, string info ) 
 Description
Writes text to the right hand side of the screen, like the old error system. Messages disappear after a couple of seconds.

 Arguments

 number slot


The location on the right hand screen to write the debug info to. Starts at 0, no upper limit

 Arguments

 string info


The debugging information to be written to the screen


"Global/Derma_StringRequest"
Derma_StringRequest( string title, string subtitle, string default, function confirm, function cancel=nil, string confirmText=OK, string cancelText=Cancel ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Returns
10 Examples

10.1 Example




 Description
Creates a derma window asking players to input a string.

 Arguments

 string title


The title of the created panel.

 Arguments

 string subtitle


The text above the input box

 Arguments

 string default


The default text for the input box.

 Arguments

 function confirm


The function to be called once the user has confirmed their input.

 Arguments

 function cancel=nil


The function to be called once the user has cancelled their input

 Arguments

 string confirmText=OK


Allows you to override text of the OK button

 Arguments

 string cancelText=Cancel


Allows you to override text of the Cancel button

 Returns

 Panel


The created DFrame

 Examples
 Example
Asks the user to input a string which is then printed to their console

Derma_StringRequest( 
	Console Print, 
	Input the string to print to console,
	,
	function( text ) print( text ) end,
	function( text ) print( Cancelled input ) end
 )
Output:


"Global/Derma_Query"
Derma_Query( string text=Message Text (Second Parameter), string title=Message Title (First Parameter), string btn1text, function btn1func=nil, string btn2text=nil, function btn2func=nil, string btn3text=nil, function btn3func=nil, string btn4text=nil, function btn4func=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Arguments
12 Returns


 Description
Shows a message box in the middle of the screen, with up to 4 buttons they can press.

 Arguments

 string text=Message Text (Second Parameter)


The message to display.

 Arguments

 string title=Message Title (First Parameter)


The title to give the message box.

 Arguments

 string btn1text


The text to display on the first button.

 Arguments

 function btn1func=nil


The function to run if the user clicks the first button.

 Arguments

 string btn2text=nil


The text to display on the second button.

 Arguments

 function btn2func=nil


The function to run if the user clicks the second button.

 Arguments

 string btn3text=nil


The text to display on the third button

 Arguments

 function btn3func=nil


The function to run if the user clicks the third button.

 Arguments

 string btn4text=nil


The text to display on the third button

 Arguments

 function btn4func=nil


The function to run if the user clicks the fourth button.

 Returns

 Panel


The Panel object of the created window.


"Global/DOF_Kill"
DOF_Kill(  ) 
 Description
Cancels current DOF post-process effect started with DOF_Start


"Global/DisableClipping"
DisableClipping( boolean disable ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets whether rendering should be limited to being inside a panel or not.
See also surface.DisableClipping and Panel:NoClipping.

 Arguments

 boolean disable


Whether or not clipping should be disabled

 Examples
 Example
Renders a white box outside of the panel

function PANEL:Paint()
    DisableClipping( true )
    draw.RoundedBox( 0, -50, -50, 25, 25, color_white )
    DisableClipping( false )
end


"Global/DermaMenu"
DermaMenu( Panel parent ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Creates a DMenu and closes any current menus.

 Arguments

 Panel parent


The panel to parent the created menu to.

 Returns

 Panel


The created DMenu

 Examples
 Example
Creates a DMenu with buttons to commit suicide or close it.

local menu = DermaMenu() 
menu:AddOption( Die, function() RunConsoleCommand( kill ) end )
menu:AddOption( Close, function() print( Close pressed ) end ) -- The menu will remove itself, we dont have to do anything.
menu:Open()
Output:


"Global/Derma_Hook"
Derma_Hook( Panel panel, string functionName, string hookName, string typeName ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Creates panel method that calls the supplied Derma skin hook via derma.SkinHook

 Arguments

 Panel panel


Panel to add the hook to

 Arguments

 string functionName


Name of panel function to create

 Arguments

 string hookName


Name of Derma skin hook to call within the function

 Arguments

 string typeName


Type of element to call Derma skin hook for

 Examples
 Example
Creates PANEL.Paint function to call Derma skin hook Paint with type Panel

Derma_Hook( PANEL, Paint, Paint, Panel )
Output:

Panel is painted with correct derma hooks


"Global/DrawColorModify"
DrawColorModify( table modifyParameters ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Draws the Color Modify shader, which can be used to adjust colors on screen.

 Arguments

 table modifyParameters


Color modification parameters. See g_colourmodify shader and the example below. Note that if you leave out a field, it will retain its last value which may have changed if another caller uses this function.

 Examples
 Example
Draws color modify with bright yellow and green colors.

local tab =
{
	[ $pp_colour_addr ] = 0.02,
	[ $pp_colour_addg ] = 0.02,
	[ $pp_colour_addb ] = 0,
	[ $pp_colour_brightness ] = 0,
	[ $pp_colour_contrast ] = 1,
	[ $pp_colour_colour ] = 3,
	[ $pp_colour_mulr ] = 0,
	[ $pp_colour_mulg ] = 0.02,
	[ $pp_colour_mulb ] = 0
}


function GM:RenderScreenspaceEffects()

	DrawColorModify( tab )

end


"Global/DOFModeHack"
DOFModeHack( boolean enable ) 
 Description
A hacky method used to fix some bugs regarding DoF.

This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 boolean enable


Enables or disables depth-of-field mode


"Global/DrawBackground"
DrawBackground(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Draws the currently active main menu background image and handles transitioning between background images.
This is called by default in the menu panels Paint hook.


"Global/DrawMaterialOverlay"
DrawMaterialOverlay( string Material, number RefractAmount ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Draws a material overlay on the screen.

 Arguments

 string Material


This will be the material that is drawn onto the screen.

 Arguments

 number RefractAmount


This will adjust how much the material will refract your screen.

 Examples
 Example
Creates a fisheye effect on your screen.

function GM:RenderScreenspaceEffects()

	DrawMaterialOverlay( models/props_c17/fisheyelens, -0.06 )

end


"Global/Derma_Message"
Derma_Message( string Text, string Title, string Button ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Creates a derma window to display information

 Arguments

 string Text


The text within the created panel.

 Arguments

 string Title


The title of the created panel.

 Arguments

 string Button


The text of the button to close the panel.

 Examples
 Example
Creates a popup informing the player that they are dead.

Derma_Message( You are currently dead, Death Notice, OK )
Output:


"Global/DrawBloom"
DrawBloom( number Darken, number Multiply, number SizeX, number SizeY, number Passes, number ColorMultiply, number Red, number Green, number Blue ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Examples

11.1 Example




 Description
Draws the bloom shader, which creates a glowing effect from bright objects.

 Arguments

 number Darken


Determines how much to darken the effect. A lower number will make the glow come from lower light levels. A value of 1 will make the bloom effect unnoticeable. Negative values will make even pitch black areas glow.

 Arguments

 number Multiply


Will affect how bright the glowing spots are. A value of 0 will make the bloom effect unnoticeable.

 Arguments

 number SizeX


The size of the bloom effect along the horizontal axis.

 Arguments

 number SizeY


The size of the bloom effect along the vertical axis.

 Arguments

 number Passes


Determines how much to exaggerate the effect.

 Arguments

 number ColorMultiply


Will multiply the colors of the glowing spots, making them more vivid.

 Arguments

 number Red


How much red to multiply with the glowing color. Should be between 0 and 1

 Arguments

 number Green


How much green to multiply with the glowing color. Should be between 0 and 1

 Arguments

 number Blue


How much blue to multiply with the glowing color. Should be between 0 and 1

 Examples
 Example
Draws bloom effect with default settings.

function GM:RenderScreenspaceEffects()
	DrawBloom( 0.65, 2, 9, 9, 1, 1, 1, 1, 1 )
end


"Global/DrawSobel"
DrawSobel( number Threshold ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Draws the sobel shader, which detects edges and draws a black border.

 Arguments

 number Threshold


Determines the threshold of edges. A value of 0 will make your screen completely black.

 Examples
 Example
Draws the sobel shader.

function GM:RenderScreenspaceEffects()

 DrawSobel( 0.5 )

end


"Global/DOF_Start"
DOF_Start(  ) 
 Description
Cancels any existing DOF post-process effects.
Begins the DOF post-process effect.


"Global/DrawMotionBlur"
DrawMotionBlur( number AddAlpha, number DrawAlpha, number Delay ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Creates a motion blur effect by drawing your screen multiple times.

 Arguments

 number AddAlpha


How much alpha to change per frame.

 Arguments

 number DrawAlpha


How much alpha the frames will have. A value of 0 will not render the motion blur effect.

 Arguments

 number Delay


Determines the amount of time between frames to capture.

 Examples
 Example
Creates a motion blur effect.

function GM:RenderScreenspaceEffects()

 DrawMotionBlur( 0.4, 0.8, 0.01 )

end


"Global/DrawSunbeams"
DrawSunbeams( number darken, number multiplier, number sunSize, number sunX, number sunY ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Renders the post-processing effect of beams of light originating from the maps sun. Utilises the pp/sunbeams material

 Arguments

 number darken


$darken property for sunbeams material

 Arguments

 number multiplier


$multiply property for sunbeams material

 Arguments

 number sunSize


$sunsize property for sunbeams material

 Arguments

 number sunX


$sunx property for sunbeams material

 Arguments

 number sunY


$suny property for sunbeams material


"Global/DrawTexturize"
DrawTexturize( number Scale, number BaseTexture ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Draws the texturize shader, which replaces each pixel on your screen with a different part of the texture depending on its brightness. See g_texturize for information on making the texture.

 Arguments

 number Scale


Scale of the texture. A smaller number creates a larger texture.

 Arguments

 number BaseTexture


This will be the texture to use in the effect. Make sure you use Material to get the texture number

 Examples
 Example
Draws the texturize shader with a pattern texture.

function GM:RenderScreenspaceEffects()

 DrawTexturize( 1, Material( pp/texturize/pattern1.png ) )

end


"Global/DrawToyTown"
DrawToyTown( number Passes, number Height ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Draws the toy town shader, which blurs the top and bottom of your screen. This can make very large objects look like toys, hence the name.

 Arguments

 number Passes


An integer determining how many times to draw the effect. A higher number creates more blur.

 Arguments

 number Height


The amount of screen which should be blurred on the top and bottom.

 Examples
 Example
Draws toy town effect.

function GM:RenderScreenspaceEffects()

 DrawToyTown( 2, ScrH()/2 )

end


"Global/DynamicLight"
DynamicLight( number index ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Creates or replaces a dynamic light with the given id.



NOTE


Only 32 lights can be active at once.


 Arguments

 number index


An unsigned Integer. Usually an entity index is used here.

 Returns

 table


A DynamicLight structured table. See DynamicLight structure

 Examples
 Example
Emits a bright white light from local players eyes.

hook.Add( Think, Think_Lights!, function()
	local dlight = DynamicLight( LocalPlayer():EntIndex() )
	if ( dlight ) then
		dlight.pos = LocalPlayer():GetShootPos()
		dlight.r = 255
		dlight.g = 255
		dlight.b = 255
		dlight.brightness = 2
		dlight.Decay = 1000
		dlight.Size = 256
		dlight.DieTime = CurTime() + 1
	end
end )


"Global/DrawSharpen"
DrawSharpen( number Contrast, number Distance ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Draws the sharpen shader, which creates more contrast.

 Arguments

 number Contrast


How much contrast to create.

 Arguments

 number Distance


How large the contrast effect will be.

 Examples
 Example
Draws the sharpen shader.

function GM:RenderScreenspaceEffects()

 DrawSharpen( 1.2,1.2 )

end


"Global/EffectData"
EffectData(  ) 
 Description
Returns a CEffectData object to be used with util.Effect.



BUG


This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once.



 Returns

 CEffectData


The CEffectData object.


"Global/EmitSentence"
EmitSentence( string soundName, Vector position, number entity, number channel=CHAN_AUTO, number volume=1, number soundLevel=75, number soundFlags=0, number pitch=100 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Examples

10.1 Example




 Description
Plays a sentence from scripts/sentences.txt



BUG


Seems to work only on serverside.
This bug will be fixed in the next update.


 Arguments

 string soundName


The sound to play

 Arguments

 Vector position


The position to play at

 Arguments

 number entity


The entity to emit the sound from. Must be Entity:EntIndex

 Arguments

 number channel=CHAN_AUTO


The sound channel, see CHAN_ Enums.

 Arguments

 number volume=1


The volume of the sound, from 0 to 1

 Arguments

 number soundLevel=75


The sound level of the sound, see SNDLVL_ Enums

 Arguments

 number soundFlags=0


The flags of the sound, see SND_ Enums

 Arguments

 number pitch=100


The pitch of the sound, 0-255

 Examples
 Example
Plays random combine death sound on first player.

EmitSentence( COMBINE_DIE .. math.random( 0, 3 ), Entity( 1 ):GetPos(), 1, CHAN_AUTO, 1, 75, 0, 100 )


"Global/Entity"
Entity( number entityIndex ) 
 Description
Returns the entity with the matching Entity:EntIndex.
Indices 1 through game.MaxPlayers() are always reserved for players.



NOTE


In examples on this wiki, Entity( 1 ) is used when a player entity is needed (see wiki editing guide). In singleplayer and listen servers, Entity( 1 ) will always be the first player. In dedicated servers, however, Entity( 1 ) wont always be a valid player.


 Arguments

 number entityIndex


The entity index.

 Returns

 Entity


The entity if it exists, or NULL if it doesnt.


"Global/DropEntityIfHeld"
DropEntityIfHeld( Entity ent ) 
 Description
Drops the specified entity if it is being held by any player with Gravity Gun or +use pickup.

 Arguments

 Entity ent


The entity to drop.


"Global/error"
error( string message, number errorLevel=1 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Throws a Lua error and breaks out of the current call stack.

 Arguments

 string message


The error message to throw.

 Arguments

 number errorLevel=1


The level to throw the error at.

 Examples
 Example
error( garry )
Output:

[ERROR] lua_run:1: garry


"Global/Error"
Error( vararg arguments ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Throws a Lua error with the specified message and stack level.



BUG


Using this function in the menu state exits the menu.





BUG


This function is currently bugged and does not halt execution. It is recommended to use error in the meantime.





BUG


This function has a character limit of 511.



 Arguments

 vararg arguments


Converts all arguments to strings and prints them with no spacing or line breaks.

 Examples
 Example
An example of the use of this function

local num = 11
if ( num&lt;=10 and num&gt;=0 ) then
 print( The number is, num )
else
 Error( Number out of range!\n )
 print( This line will not be run, as it is after the error )
end
Output:

[@lua/example.lua:5] Number out of range!


"Global/EmitSound"
EmitSound( string soundName, Vector position, number entity, number channel=CHAN_AUTO, number volume=1, number soundLevel=75, number soundFlags=0, number pitch=100 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Examples

10.1 Example




 Description
Emits the specified sound at the specified position.



BUG


Sounds must be precached serverside manually before they can be played. util.PrecacheSound does not work for this purpose, Entity.EmitSound does the trick




BUG


This does not work with soundscripts. TODO: Is this a bug or intended?


 Arguments

 string soundName


The sound to play

 Arguments

 Vector position


The position to play at

 Arguments

 number entity


The entity to emit the sound from. Can be an Entity:EntIndex or one of the following:

 0 - Plays sound on the world (Position set to 0,0,0)
 -1 - Plays sound on the local player (on server acts as 0)
 -2 - Plays UI sound (Position set to 0,0,0, no spatial sound,on server acts as 0)


 Arguments

 number channel=CHAN_AUTO


The sound channel, see CHAN_ Enums.

 Arguments

 number volume=1


The volume of the sound, from 0 to 1

 Arguments

 number soundLevel=75


The sound level of the sound, see SNDLVL_ Enums

 Arguments

 number soundFlags=0


The flags of the sound, see SND_ Enums

 Arguments

 number pitch=100


The pitch of the sound, 0-255

 Examples
 Example
Plays magical sound on first player.

EmitSound( Sound( garrysmod/save_load1.wav ), Entity( 1 ):GetPos(), 1, CHAN_AUTO, 1, 75, 0, 100 )


"Global/EndTooltip"
EndTooltip( Panel panel ) 
 Description
Removes the currently active tool tip from the screen.

 Arguments

 Panel panel


This is the panel that has a tool tip.


"Global/ErrorNoHalt"
ErrorNoHalt( vararg arguments ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Throws a Lua error but does not break out of the current call stack.



BUG


Using this function in the menu state exits the menu.





BUG


This function has a character limit of 511.



 Arguments

 vararg arguments


Converts all arguments to strings and prints them with no spacing.

 Examples
 Example
An example of the use of this function

local num = 11
if ( num &lt;= 10 and num &gt;= 0 ) then
	print( The number is, num )
else
	ErrorNoHalt( Number out of range!\n )
	print( This line will be printed )
end
Output:

Number out of range!
1. lua/example.lua:5 (unknown)
This line will be printed


"Global/EyeAngles"
EyeAngles(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Returns the angles of the current render context as calculated by GM:CalcView.



BUG


This function is only reliable inside rendering hooks.



 Returns

 Angle


The angle of the currently rendered scene.

 Examples
 Example
Print the view angles

print( EyeAngles() )


 Examples
 Example
Identical to EyeVector

print( EyeAngles():Forward() )


"Global/EyePos"
EyePos(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Returns the origin of the current render context as calculated by GM:CalcView.



BUG


This function is only reliable inside rendering hooks.



 Returns

 Vector


Camera position.

 Examples
 Example
Print the view position

print( EyePos() )


 Examples
 Example
Ensuring EyePos returns the correct value outside of render hooks.

hook.Add( PreDrawTranslucentRenderables, FixEyePos, function() EyePos() end )
hook.Add( Think, Use Eyepos outside of render function, function()
	local start = EyePos()
	local dir = gui.ScreenToVector( gui.MousePos() )
	local trace = util.TraceLine{
		start = start,
		endpos = start + ( dir * 10000 ),
		filter = { ply },
	}

	debugoverlay.Box( trace.HitPos, Vector( -5, -5, -5 ), Vector( 5, 5, 5 ) )
end )
Output:

Draws a white box in the world where you point the mouse to. Requires the developer convar to be set to 1.


"Global/EyeVector"
EyeVector(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the normal vector of the current render context as calculated by GM:CalcView, similar to EyeAngles.



BUG


This function is only reliable inside rendering hooks.



 Returns

 Vector


View direction of the currently rendered scene.

 Examples
 Example
Print the view angles

print( EyeVector() )


"Global/Either"
Either( any condition, any truevar, any falsevar ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
An if then else. This is almost equivalent to (condition and truevar or falsevar) in Lua. The difference is that if truevar evaluates to false, the plain Lua method stated would return falsevar regardless of condition whilst this function would take condition into account.

 Arguments

 any condition


The condition to check if true or false.

 Arguments

 any truevar


If the condition isnt nil/false, returns this value.

 Arguments

 any falsevar


If the condition is nil/false, returns this value.

 Returns

 any


The result.

 Examples
 Example
The following two print statements have identical results.

local ply = Entity( 1 )
print( Player  .. Either( ply:IsAdmin(), is, is not ) ..  an admin )

print( Player  .. ( ply:IsAdmin() and is or is not ) ..  an admin )
Output:

If Player 1 is admin, it will print Player is an admin.
 Examples
 Example
Plain Lua alias version.

print( You are: ..( LocalPlayer():Alive() and alive or dead ) )

// conditional:

print( Halflife? ..( ( LocalPlayer():Health()==50 ) and halflife or not halflife ) )
Output:

You are alive

Halflife? not halflife


"Global/FrameTime"
FrameTime(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Returns the CurTime-based time in seconds it took to render the last frame.
This should be used for frame/tick based timing, such as movement prediction or animations.
For real-time-based frame time that isnt affected by host_timescale, use RealFrameTime. RealFrameTime is more suited for things like GUIs or HUDs.

 Returns

 number


time (in seconds)

 Examples
 Example
Print the frame time

print( FrameTime() )
Output:

0.014999999664724
 Examples
 Example
Get the servers/clients tickrate/fps

print( Tick: ..( 1/FrameTime() ) )
Output:

Tick: 66.666668156783


"Global/Format"
Format( string format, vararg formatParameters ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Formats the specified values into the string given. Same as string.format.

 Arguments

 string format


The string to be formatted.

Follows this format: http://www.cplusplus.com/reference/cstdio/printf/

 Arguments

 vararg formatParameters


Values to be formatted into the string.

 Returns

 string


The formatted string


"Global/FindTooltip"
FindTooltip( Panel panel ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns
5 Returns


 Description
Returns the tool-tip text and tool-tip-panel (if any) of the given panel as well as itself

 Arguments

 Panel panel


Panel to find tool-tip of

 Returns

 string


tool-tip text

 Returns

 Panel


tool-tip panel

 Returns

 Panel


panel that the function was called with


"Global/FindMetaTable"
FindMetaTable( string metaName ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the meta table for the class with the matching name.
Internally returns debug.getregistry()[metaName]
You can learn more about meta tables on the Meta Tables page.
You can find a list of meta tables that can be retrieved with this function on TYPE_ Enums. The name in the description is the string to use with this function.

 Arguments

 string metaName


The object type to retrieve the meta table of.

 Returns

 table


The corresponding meta table.

 Examples
 Example
Adds a very simple function for checking if a player is sick to the player metatable.

local meta = FindMetaTable( Player )

function meta:IsSick()
	return true
end

-- Sometime later...
local ply = Entity( 1 )
if ( ply:IsSick() ) then
	ply:ChatPrint( Get well soon,  .. ply:Nick() .. ! )
	ply:ChatPrint( I just dont understand how youre always sick... )
end
Output:

Get well soon, Yupi2!
I just dont understand how youre always sick...


"Global/FrameNumber"
FrameNumber(  ) 
 Description
Returns the number of frames rendered since the game was launched.

 Examples
 Example
Prints the frame count to the console.

print( FrameNumber() )


"Global/GetConVar_Internal"
GetConVar_Internal( string name ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Gets the ConVar with the specified name. This function doesnt cache the convar.
 Arguments

 string name


Name of the ConVar to get

 Returns

 ConVar


The ConVar object


"Global/GetConVarNumber"
GetConVarNumber( string name ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Store the ConVar object retrieved with GetConVar and call ConVar:GetInt or ConVar:GetFloat on it.Gets the numeric value ConVar with the specified name.
 Arguments

 string name


Name of the ConVar to get.

 Returns

 number


The ConVars value.


"Global/GetConVar"
GetConVar( string name ) 
 Description
Gets the ConVar with the specified name. This function caches the ConVar object internally.

 Arguments

 string name


Name of the ConVar to get

 Returns

 ConVar


The ConVar object


"Global/gcinfo"
gcinfo(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

This function was deprecated in Lua 5.1 and is removed in Lua 5.2. Use collectgarbage( count ) instead. Returns the current floored dynamic memory usage of Lua in kilobytes.
 Returns

 number


The current floored dynamic memory usage of Lua, in kilobytes.


"Global/GetDefaultLoadingHTML"
GetDefaultLoadingHTML(  ) 
 Description
Returns the default loading screen URL (asset://garrysmod/html/loading.html)

 Returns

 string


Default loading url (asset://garrysmod/html/loading.html)


"Global/GetConVarString"
GetConVarString( string name ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Store the ConVar object retrieved with GetConVar and call ConVar:GetString on it.Gets the string value ConVar with the specified name.
 Arguments

 string name


Name of the ConVar to get.

 Returns

 string


The ConVars value.


"Global/GameDetails"
GameDetails( string servername, string serverurl, string mapname, number maxplayers, string steamid, string gamemode ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Examples

8.1 Example




 Description
Callback function for when the client has joined a server. This function shows the servers loading URL by default.

 Arguments

 string servername


Servers name.

 Arguments

 string serverurl


Servers loading screen URL, or  if the URL is not set.

 Arguments

 string mapname


Servers current maps name.

 Arguments

 number maxplayers


Max player count of server.

 Arguments

 string steamid


The local players Player:SteamID64.

 Arguments

 string gamemode


Servers current gamemodes folder name.

 Examples
 Example
Prints GameDetails of the server you join to console, and preserves default behavior.

local OldGameDetails = GameDetails
function GameDetails( servername, serverurl, mapname, maxplayers, steamid, gamemode )
	print( 1, servername )
	print( 2, serverurl )
	print( 3, mapname )
	print( 4, maxplayers )
	print( 5, steamid )
	print( 6, gamemode )
	OldGameDetails( servername, serverurl, mapname, maxplayers, steamid, gamemode )
end
Output:

1	ZerfTestServer
2	
3	gm_construct
4	8
5	76561198052589582
6	sandbox


"Global/getfenv"
getfenv( function location=1 ) 
 Description
Returns the environment table of either the stack level or the function specified.

 Arguments

 function location=1


The object to get the enviroment from. Can also be a number that specifies the function at that stack level: Level 1 is the function calling getfenv.

 Returns

 table


The environment.


"Global/GetDownloadables"
GetDownloadables(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns a table with the names of files needed from the server you are currently joining.

 Returns

 table


table of file names

 Examples
 Example
Returns a table with the file names.

PrintTable( GetDownloadables() )
Output:

1	=	maps\gm_flatgrass.bsp
2	=	maps\graphs\gm_flatgrass.ain
3	=	maps\gm_flatgrass.nav


"Global/GetGlobalAngle"
GetGlobalAngle( string index, Angle default=Angle( 0, 0, 0 ) ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns an angle that is shared between the server and all clients.

 Arguments

 string index


The unique index to identify the global value with.

 Arguments

 Angle default=Angle( 0, 0, 0 )


The value to return if the global value is not set.

 Returns

 Angle


The global value, or default if the global is not set.


"Global/GetGlobalInt"
GetGlobalInt( string index, number default=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns an integer that is shared between the server and all clients.



BUG


This function will not round decimal values as it actually networks a float internally.



 Arguments

 string index


The unique index to identify the global value with.

 Arguments

 number default=0


The value to return if the global value is not set.

 Returns

 number


The global value, or the default if the global value is not set.

 Examples
 Example
Prints the current round number if set, otherwise 0.

print( GetGlobalInt( RoundNumber, 0 ) )


"Entity/GetHitBoxBone"
Entity:GetHitBoxBone( number hitbox, number group ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Gets the bone the hit box is attached to.

 Arguments

 number hitbox


The number of the hit box.

 Arguments

 number group


The number of the hit box group. This should be 0 in most cases.

Numbering for these groups start from 0. The total group count can be found with Entity:GetHitBoxGroupCount.

 Returns

 number


The number of the bone. Will be nil if the hit box index was out of range.

 Examples
 Example
local ply = LocalPlayer()
local numHitBoxGroups = ply:GetHitBoxGroupCount()

for group=0, numHitBoxGroups - 1 do
  local numHitBoxes = ply:GetHitBoxCount( group )
    
  for hitbox=0, numHitBoxes - 1 do
    local bone = ply:GetHitBoxBone( hitbox, group )

    print( Hit box group  .. group .. , hitbox  .. hitbox ..  is attached to bone  .. ply:GetBoneName( bone ) )
  end
end
Output:

Hit box group 0, hit box 0 is attached to bone ValveBiped.Bip01_Head1, etc.


"Global/GetGlobalEntity"
GetGlobalEntity( string index, Entity default=NULL ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns an entity that is shared between the server and all clients.

 Arguments

 string index


The unique index to identify the global value with.

 Arguments

 Entity default=NULL


The value to return if the global value is not set.

 Returns

 Entity


The global value, or the default if the global value is not set.


"Global/GetDemoFileDetails"
GetDemoFileDetails( string filename ) 
 Description
Retrieves data about the demo with the specified filename. Similar to GetSaveFileDetails.

 Arguments

 string filename


The file name of the demo.

 Returns

 table


Demo data.


"Global/GetGlobalBool"
GetGlobalBool( string index, boolean default=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns a boolean that is shared between the server and all clients.

 Arguments

 string index


The unique index to identify the global value with.

 Arguments

 boolean default=false


The value to return if the global value is not set.

 Returns

 boolean


The global value, or the default if the global value is not set.


"Global/GetHostName"
GetHostName(  ) 
 Description
Returns the name of the current server.


"Global/GetGlobalString"
GetGlobalString( string index, string default= ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns a string that is shared between the server and all clients.

 Arguments

 string index


The unique index to identify the global value with.

 Arguments

 string default=


The value to return if the global value is not set.

 Returns

 string


The global value, or the default if the global value is not set.

 Examples
 Example
Prints the current server name if set, otherwise Garrys Mod 13.

print( GetGlobalString( ServerName, Garrys Mod 13 ) )


"Global/GetGlobalFloat"
GetGlobalFloat( string index, number default=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns a float that is shared between the server and all clients.

 Arguments

 string index


The unique index to identify the global value with.

 Arguments

 number default=0


The value to return if the global value is not set.

 Returns

 number


The global value, or the default if the global value is not set.


"Global/GetGlobalVector"
GetGlobalVector( string Index, Vector Default ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns a vector that is shared between the server and all clients.

 Arguments

 string Index


The unique index to identify the global value with.

 Arguments

 Vector Default


The value to return if the global value is not set.

 Returns

 Vector


The global value, or the default if the global value is not set.


"Global/GetRenderTargetEx"
GetRenderTargetEx( string name, number width, number height, number sizeMode, number depthMode, number textureFlags, number rtFlags, number imageFormat ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Returns


 Description
Creates (or gets if it already exsits) the rendertarget with the given name, this function allows to adjust the creation of a rendertarget more than GetRenderTarget.
See also render.PushRenderTarget and render.SetRenderTarget.

 Arguments

 string name


The internal name of the render target.



WARNING


The name is treated like a path and gets its extension discarded.name.1 and name.2 are considered the same name and will result in the same render target being reused.



 Arguments

 number width


The width of the render target, must be power of 2.

 Arguments

 number height


The height of the render target, must be power of 2.

 Arguments

 number sizeMode


Bitflag that influences the sizing of the render target, see RT_SIZE_ Enums.

 Arguments

 number depthMode


Bitflag that determines the depth buffer usage of the render target MATERIAL_RT_DEPTH_ Enums.

 Arguments

 number textureFlags


Bitflag that configurates the texture, see TEXTUREFLAGS_ Enums.
List of flags can also be found on the Valves Developer Wiki:

https://developer.valvesoftware.com/wiki/Valve_Texture_Format

 Arguments

 number rtFlags


Flags that controll the HDR behaviour of the render target, see CREATERENDERTARGETFLAGS_ Enums.

 Arguments

 number imageFormat


Image format, see IMAGE_FORMAT_ Enums.

 Returns

 ITexture


The new render target.


"Global/getmetatable"
getmetatable( any object ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the metatable of an object. This function obeys the metatables __metatable field, and will return that field if the metatable has it set.
Use debug.getmetatable if you want the true metatable of the object.

 Arguments

 any object


The value to return the metatable of.

 Returns

 any


The metatable of the value. This is not always a table.

 Examples
 Example
Use a tables metatable and alter it.

print( getmetatable( Pupil ).__index.GetName( Pupil ) )
-- getmetatable( Pupil ) will return Pupil_meta.
-- Same as print( Pupil:GetName() )
-- This is what the Lua interpreter basically does. ( When __index is a table. )

getmetatable( Pupil ).SetName = function( self, newName )
 self.name = newName
end
-- Were adding a new method to Pupils metatable

print( getmetatable( Pupil ).GetName( Pupil ) )
-- Still the same, because Pupil_meta.__index is Pupil_meta.
Output:

John Doe


"Global/GetRenderTarget"
GetRenderTarget( string name, number width, number height, boolean additive=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Creates or gets the rendertarget with the given name.
See GetRenderTargetEx for an advanced version of this function with more options.



BUG


This crashes when used on a cubemap texture.



 Arguments

 string name


The internal name of the render target.

 Arguments

 number width


The width of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size.

 Arguments

 number height


The height of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size.

 Arguments

 boolean additive=false


Sets whenever the rt should be additive.

 Returns

 ITexture


The render target


"Global/GetViewEntity"
GetViewEntity(  ) 
 Description
Returns the entity the client is using to see from (such as the player itself, the camera, or another entity).

 Returns

 Entity


The view entity.


"Global/GetHUDPanel"
GetHUDPanel(  ) 
 Description
Returns the panel that is used as a wrapper for the HUD.
See also vgui.GetWorldPanel


 Returns

 Panel


The HUD panel


"Global/HTTP"
HTTP( table parameters ) 
 Description
Launches an asynchronous http request with the given parameters.



BUG


This cannot send or receive multiple headers at once.





BUG


This can crash on Linux.



 Arguments

 table parameters


The request parameters. See HTTPRequest structure.

 Returns

 boolean


true if we made a request, nil if we failed.


"Global/GetSaveFileDetails"
GetSaveFileDetails( string filename ) 
 Description
Retrieves data about the save with the specified filename. Similar to GetDemoFileDetails.

 Arguments

 string filename


The file name of the save.

 Returns

 table


Save data.


"Global/GetLoadPanel"
GetLoadPanel(  ) 
 Description
Returns the loading screen panel and creates it if it doesnt exist.

 Returns

 Panel


The loading screen panel


"Global/include"
include( string fileName ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Executes a Lua script.



NOTE


Addon files (.gma files) do not support relative parent folders (.. notation).




WARNING


The file you are attempting to include MUST NOT be empty or the include will fail. Files over a certain size may fail as well.




WARNING


If the file you are including is clientside or shared, it must be AddCSLuaFiled or this function will error saying the file doesnt exist.




BUG


pcalling this function will break autorefresh.



 Arguments

 string fileName


The name of the script to be executed. The path must be either relative to the current file, or be an absolute path (relative to and excluding the lua/ folder).



NOTE


Please make sure your file names are unique, the filesystem is shared across all addons, so a file named lua/config.lua in your addon may be overwritten by the same file in another addon.



 Returns

 vararg


Anything that the executed Lua script returns.

 Examples
 Example
Demonstrates correct and incorrect usage.

-- Correct usage:
-- Will look for lua/myLuaFolder/myLuaFile.lua in all addons and ) then the base game lua/ folder
include( myLuaFolder/myLuaFile.lua )

-- This is incorrect, and will NOT work
include(               lua/myLuaFolder/myLuaFile.lua )
include(         addons/lua/myLuaFolder/myLuaFile.lua )
include( addons/MyAddon/lua/myLuaFolder/myLuaFile.lua )
include(       MyAddon/lua/myLuaFolder/myLuaFile.lua )


"Global/HSVToColor"
HSVToColor( number hue, number saturation, number value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example


7 Examples

7.1 Example


8 Examples

8.1 Example




 Description
Converts a color from HSV color space into RGB color space and returns a Color structure.



BUG


The returned color will not have the color metatable.



 Arguments

 number hue


Hue in degrees.

 Arguments

 number saturation


Saturation from 0 - 1.

 Arguments

 number value


Value from 0 - 1.

 Returns

 table


The Color structure created from the HSV color space.

 Examples
 Example
A helper function for drawing rainbow text.

local function DrawRainbowText( frequency, str, font, x, y )
	
	surface.SetFont( font )
	
	for i = 1, #str do
		surface.SetTextColor( HSVToColor( i * frequency% 360, 1, 1 ) )
		local w = surface.GetTextSize( string.sub( str, 1, i - 1 ) )
		surface.SetTextPos( x + w, y )
		surface.DrawText( string.sub( str, i, i ) )
	end
	
end
Output:


 Examples
 Example
A helper function for printing rainbow text in the chat.

local function ChatPrintRainbow( frequency, str )
	
	local text = {}

	
	for i = 1, #str do
		table.insert( text, HSVToColor( i * frequency% 360, 1, 1 ) )
		table.insert( text, string.sub( str, i, i ) )
	end

	chat.AddText( unpack( text ) )
	
end
Output:


 Examples
 Example
A helper function for printing rainbow text in the console.

local function ConsolePrintRainbow( frequency, str )
	
	local text = {}

	
	for i = 1, #str do
		table.insert( text, HSVToColor( i * frequency% 360, 1, 1 ) )
		table.insert( text, string.sub( str, i, i ) )
	end
	
	table.insert( text, \n )
	
	MsgC( unpack( text ) )
	
end
Output:


"Global/GetMapList"
GetMapList(  ) 
 Description
Returns a table with the names of all maps and categories that you have on your client.

 Returns

 table


table of map names and categories


"Global/GetOverlayPanel"
GetOverlayPanel(  ) 
 Description
Returns the menu overlay panel, a container for panels like the error panel created in GM:OnLuaError.

 Returns

 Panel


The overlay panel


"Global/IsColor"
IsColor( any Object ) 
 Description
Returns whether the given object does or doesnt have a metatable of a color.
Important: Engine functions (i.e. those not written in plain Lua) that return color objects do not currently set the color metatable and this function will return false if you use it on them.

 Arguments

 any Object


The object to be tested

 Returns

 boolean


Whether the given object is a color or not


"Global/ipairs"
ipairs( table tab ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns
5 Returns
6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Returns an iterator function for a for loop, to return ordered key-value pairs from a table.
This will only iterate though numerical keys, and these must also be sequential; starting at 1 with no gaps.
For unordered pairs, see pairs.
For pairs sorted by key in alphabetical order, see SortedPairs.

 Arguments

 table tab


The table to iterate over.

 Returns

 function


The iterator function.

 Returns

 table


The table being iterated over

 Returns

 number


The origin index =0

 Examples
 Example
Demonstrates how this differs from pairs.

local tbl = { two = 2, one = 1, alpha, bravo, [3] = charlie, [5] = echo, [6] = foxtrot }


print( pairs: )
for k, v in pairs( tbl ) do
	print( k, v )
end
print( \nipairs: )
for k, v in ipairs( tbl ) do
	print( k, v )
end
Output:

pairs:
1	alpha
2	bravo
3	charlie
5	echo
6	foxtrot
one	1
two	2

ipairs:
1	alpha
2	bravo
3	charlie
 Examples
 Example

local NUM = 32
local Count = 0
for k, v in ipairs( ClientUndos ) do
	local Item = ComboBox:AddItem( tostring( v.Name ) )
	Item.DoClick = function() RunConsoleCommand( gmod_undonum, tostring( v.Key ) ) end

	Count = Count + 1
	if ( Count &gt; NUM ) then break end
end


"Global/GetLoadStatus"
GetLoadStatus(  ) 
 Description
Returns the current status of the server join progress.

 Returns

 string


The current status


"Global/isbool"
isbool( any variable ) 
 Description
Returns if the passed object is a boolean.

 Arguments

 any variable


The variable to perform the type check for.

 Returns

 boolean


True if the variable is a boolean.


"Global/IsEntity"
IsEntity( any variable ) 
 Description
Returns if the passed object is an Entity. Alias of isentity.

 Arguments

 any variable


The variable to check.

 Returns

 boolean


True if the variable is an Entity.


"Global/isangle"
isangle( any variable ) 
 Description
Returns if the passed object is an Angle.

 Arguments

 any variable


The variable to perform the type check for.

 Returns

 boolean


True if the variable is an Angle.


"Global/IsEnemyEntityName"
IsEnemyEntityName( string className ) 
 Description
Returns if the given NPC class name is an enemy.
Returns true if the entity name is one of the following:

 npc_combine_s
 npc_cscanner
 npc_manhack
 npc_hunter
 npc_antlion
 npc_antlionguard
 npc_antlion_worker
 npc_fastzombie_torso
 npc_fastzombie
 npc_headcrab
 npc_headcrab_fast
 npc_poisonzombie
 npc_headcrab_poison
 npc_zombie
 npc_zombie_torso
 npc_zombine
 npc_gman
 npc_breen

 Arguments

 string className


Class name of the entity to check

 Returns

 boolean


Is an enemy


"Global/ismatrix"
ismatrix( any variable ) 
 Description
Returns whether the passed object is a VMatrix.

 Arguments

 any variable


The variable to perform the type check for.

 Returns

 boolean


True if the variable is a VMatrix.


"Global/IsFriendEntityName"
IsFriendEntityName( string className ) 
 Description
Returns if the given NPC class name is a friend.
Returns true if the entity name is one of the following:

 npc_monk
 npc_alyx
 npc_barney
 npc_citizen
 npc_kleiner
 npc_magnusson
 npc_eli
 npc_mossman
 npc_vortigaunt

 Arguments

 string className


Class name of the entity to check

 Returns

 boolean


Is a friend


"Global/IncludeCS"
IncludeCS( string filename ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

To send the target file to the client simply call AddCSLuaFile() in the target file itself.
This function works exactly the same as include both clientside and serverside.
The only difference is that on the serverside it also calls AddCSLuaFile on the filename, so that it gets sent to the client.

 Arguments

 string filename


The filename of the Lua file you want to include.


"Global/IsInGame"
IsInGame(  ) 
 Description
Returns true if the client is currently playing either a singleplayer or multiplayer game.

 Returns

 boolean


True if we are in a game.


"Global/isentity"
isentity( any variable ) 
 Description
Returns if the passed object is an Entity.

 Arguments

 any variable


The variable to perform the type check for.

 Returns

 boolean


True if the variable is an Entity.


"Global/IsMounted"
IsMounted( string game ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Checks whether or not a game is currently mounted. Uses data given by engine.GetGames. Currently does not work correctly serverside on dedicated servers.

 Arguments

 string game


The game string/app ID to check.

 Returns

 boolean


True if the game is mounted.

 Examples
 Example
Check if Counter-Strike: Source is mounted.

IsMounted( cstrike )


"Global/isfunction"
isfunction( any variable ) 
 Description
Returns if the passed object is a function.

 Arguments

 any variable


The variable to perform the type check for.

 Returns

 boolean


True if the variable is a function.


"Global/IsValid"
IsValid( any toBeValidated ) 
 Description
Returns whether an object is valid or not. (Such as Entitys, Panels, custom table objects and more)Checks that an object is not nil, has an IsValid method and if this method returns true.



NOTE


Due to vehicles being technically valid the moment theyre spawned, also use Vehicle:IsValidVehicle to make sure theyre fully initialized


 Arguments

 any toBeValidated


The table or object to be validated.

 Returns

 boolean


True if the object is valid.


"Global/IsFirstTimePredicted"
IsFirstTimePredicted(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns if this is the first time this hook was predicted.
This is useful for one-time logic in your SWEPs PrimaryAttack, SecondaryAttack and Reload and other predicted hooks (to prevent those hooks from being called rapidly in succession). Its also useful in a Move hook for when the client predicts movement.
Visit Prediction for more information about this behavior.



NOTE


This is already used internally for Entity:EmitSound, Weapon:SendWeaponAnim and Entity:FireBullets, but NOT in util.Effect.


 Returns

 boolean


Whether or not this is the first time being predicted.

 Examples
 Example
An override for GM:KeyPress in the gamemode Trouble in Terrorist Town, to work around the hook being called multiple times.

-- Note that for some reason KeyPress and KeyRelease are called multiple times
-- for the same key event in multiplayer.
function GM:KeyPress( ply, key )
   if ( not IsFirstTimePredicted() then return end
   if ( not IsValid( ply ) or ply!= LocalPlayer() then return end

   if ( key == IN_SPEED and ply:IsActiveTraitor() then
      timer.Simple( 0.05, function() RunConsoleCommand( +voicerecord ) end )
   end
end


"Global/isnumber"
isnumber( any variable ) 
 Description
Returns if the passed object is a number.

 Arguments

 any variable


The variable to perform the type check for.

 Returns

 boolean


True if the variable is a number.


"Global/IsTableOfEntitiesValid"
IsTableOfEntitiesValid( table table ) 
 Description
Returns whether or not every element within a table is a valid entity

 Arguments

 table table


Table containing entities to check

 Returns

 boolean


All entities valid


"Global/ispanel"
ispanel( any variable ) 
 Description
Returns if the passed object is a Panel.

 Arguments

 any variable


The variable to perform the type check for.

 Returns

 boolean


True if the variable is a Panel.


"Global/istable"
istable( any variable ) 
 Description
Returns if the passed object is a table.

 Arguments

 any variable


The variable to perform the type check for.

 Returns

 boolean


True if the variable is a table.


"Global/JoinServer"
JoinServer( string IP ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Joins the server with the specified IP.

 Arguments

 string IP


The IP of the server to join

 Examples
 Example
Joins the server running on your machine.

JoinServer( localhost )


"Global/isstring"
isstring( any variable ) 
 Description
Returns if the passed object is a string.

 Arguments

 any variable


The variable to perform the type check for.

 Returns

 boolean


True if the variable is a string.


"Global/LerpVector"
LerpVector( number fraction, Vector from, Vector to ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Linear interpolation between two vectors. It is commonly used to smooth movement between two vectors.

 Arguments

 number fraction


Fraction ranging from 0 to 1

 Arguments

 Vector from


The initial Vector

 Arguments

 Vector to


The desired Vector

 Returns

 Vector


The lerped vector.

 Examples
 Example
Get the middle point (50%) between two vectors.

local output = LerpVector( 0.5, Vector( 0, 0, 100 ), Vector( 0, 0, 200 ) )
Output:

Vector( 0, 0, 150 )
If you do it each frame to smooth positions, you should couple it with FrameTime()


"Global/Lerp"
Lerp( number t, number from, number to ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Performs a linear interpolation from the start number to the end number.
This function provides a very efficient and easy way to smooth out movements.

 Arguments

 number t


The fraction for finding the result. This number is clamped between 0 and 1.

 Arguments

 number from


The starting number. The result will be equal to this if delta is 0.

 Arguments

 number to


The ending number. The result will be equal to this if delta is 1.

 Returns

 number


The result of the linear interpolation, (1 - t) * from + t * to.


"Global/IsUselessModel"
IsUselessModel( string modelName ) 
 Description
Returns whether or not a model is useless by checking that the file path is that of a proper model.
If the string .mdl is not found in the model name, the function will return true.
The function will also return true if any of the following strings are found in the given model name:

 _gesture
 _anim
 _gst
 _pst
 _shd
 _ss
 _posture
 _anm
 ghostanim
 _paths
 _shared
 anim_
 gestures_
 shared_ragdoll_

 Arguments

 string modelName


The model name to be checked

 Returns

 boolean


Whether or not the model is useless


"Global/LerpAngle"
LerpAngle( number ratio, Angle angleStart, Angle angleEnd ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Returns point between first and second angle using given fraction and linear interpolation

 Arguments

 number ratio


Ratio of progress through values

 Arguments

 Angle angleStart


Angle to begin from

 Arguments

 Angle angleEnd


Angle to end at

 Returns

 Angle


angle

 Examples
 Example
Turns an entity 180 degrees uses lerp over ten seconds

local startAngle = Angle( 0, 0, 0 )
local endAngle = Angle( 0, 180, 0 )
local ratio = 0

timer.Create( Turn, 0.1, 10, function()
    ratio = ratio + 0.1
    entity:SetAngles( Lerp( ratio, startAngle, endAngle ) )
end )


"Global/isvector"
isvector( any variable ) 
 Description
Returns if the passed object is a Vector.

 Arguments

 any variable


The variable to perform the type check for.

 Returns

 boolean


True if the variable is a Vector.


"Global/JS_Workshop"
JS_Workshop( Panel htmlPanel ) 
 Description
Adds workshop related javascript functions to an HTML panel, used by the Dupes and Saves tabs in the spawnmenu.

 Arguments

 Panel htmlPanel


Panel to add javascript functions to.


"Global/JS_Language"
JS_Language( Panel htmlPanel ) 
 Description
Adds javascript function language.Update to an HTML panel as a method to call Luas language.GetPhrase function.

 Arguments

 Panel htmlPanel


Panel to add javascript function language.Update to.


"Global/JS_Utility"
JS_Utility( Panel htmlPanel ) 
 Description
Adds javascript function util.MotionSensorAvailable to an HTML panel as a method to call Luas motionsensor.IsAvailable function.

 Arguments

 Panel htmlPanel


Panel to add javascript function util.MotionSensorAvailable to.


"Global/LocalPlayer"
LocalPlayer(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the player object of the current client.
LocalPlayer() will return NULL until all entities have been initialized. See GM:InitPostEntity.

 Returns

 Player


The player object representing the client.

 Examples
 Example
Demonstrates the use of this function.

print( LocalPlayer() )
Output:

[Player][1][Player1]


"Global/Matrix"
Matrix( table data={{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}} ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns a VMatrix object.

 Arguments

 table data={{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}


Initial data to initialize the matrix with. Leave empty to initialize an identity matrix. See examples for usage.

 Returns

 VMatrix


New matrix.

 Examples
 Example
Initializes a matrix, translates it by Vector( 4, 5, 6 ) and then scales it by Vector( 1, 2, 3 ).

local M = Matrix()
M:Translate( Vector( 4, 5, 6 ) )
M:Scale( Vector( 1, 2, 3 ) )

-- This matrix is equivalent:
local M2 = Matrix( {
	{ 1, 0, 0, 4 },
	{ 0, 2, 0, 5 },
	{ 0, 0, 3, 6 },
	{ 0, 0, 0, 1 }

} )


"Global/Label"
Label( string text, Panel parent=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Convenience function that creates a DLabel, sets the text, and returns it

 Arguments

 string text


The string to set the labels text to

 Arguments

 Panel parent=nil


Optional. The panel to parent the DLabel to

 Returns

 Panel


The created DLabel

 Examples
 Example
Create a label

local lbl = Label( The quick brown fox )


 Examples
 Example
Create a label and parents it to a DPanel

local pnl = vgui.Create( DPanel )
local lbl = Label( The quick brown fox, pnl )


"Global/LanguageChanged"
LanguageChanged( string lang ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Callback function for when the clients language changes. Called by the engine.

 Arguments

 string lang


The new language code.

 Examples
 Example
Prints the new language code whenever the language changes.

local OldLanguageChanged = LanguageChanged
function LanguageChanged( lang )
	print( New language:  .. lang )
	OldLanguageChanged( lang )
end
Output:

New language: en


"Global/LoadLastMap"
LoadLastMap(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.This function is used to get the last map and category to which the map belongs from the cookie saved with SaveLastMap.


"Global/Mesh"
Mesh( IMaterial mat=nil ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns a new mesh object.

 Arguments

 IMaterial mat=nil


The material the mesh is intended to be rendered with. Its merely a hint that tells that mesh what vertex format it should use.

 Returns

 IMesh


The created object.

 Examples
 Example
Draws a triangle near Vector( 0, 0, 0 ) in the map.

local mat = Material( editor/wireframe ) -- The material ( a wireframe )
local obj = Mesh() -- Create the IMesh object

local verts = { -- A table of 3 vertices that form a triangle
	{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, -- Vertex 1
	{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, -- Vertex 2
	{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, -- Vertex 3
}


obj:BuildFromTriangles( verts ) -- Load the vertices into the IMesh object

hook.Add( PostDrawOpaqueRenderables, IMeshTest, function()

	render.SetMaterial( mat ) -- Apply the material
	obj:Draw() -- Draw the mesh
end )


"Global/LoadPresets"
LoadPresets(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Loads all preset settings for the presets library and returns them in a table

 Returns

 table


Preset data

 Examples
 Example
Prints all of the presets in to the console

PrintTable( LoadPresets() )


"Global/Material"
Material( string materialName, string pngParameters=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns
6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Either returns the material with the given name, or loads the material interpreting the first argument as the path.



NOTE


When using .png or .jpg textures, make sure that their sizes are Power Of 2 (1, 2, 4, 8, 16, 32, 64, etc). If they are not, they will be automatically stretched to the nearest PO2 size and cause graphical artifacts.


 Arguments

 string materialName


The material name or path. The path is relative to the materials/ folder. You do not need to add materials/ to your path.

To retrieve a Lua material created with CreateMaterial, just prepend a ! to the material name.

 Arguments

 string pngParameters=nil


A string containing space separated keywords which will be used to add material parameters.
See Material Parameters for more information.



NOTE


This feature only works when importing .png or .jpeg image files



 Returns

 IMaterial


Generated material

 Returns

 number


How long it took for the function to run

 Examples
 Example
Creates a PNG material with noclamp and smooth parameters set.
In this example the .png file is located in materials/vgui/wave.png

local wave = Material( vgui/wave.png, noclamp smooth )


 Examples
 Example
Acquires and uses one of the Post-Processing Materials to make the screen darker and more saturated

local mat_color = Material( pp/colour )  -- used outside of the hook for performance

hook.Add( RenderScreenspaceEffects, ColorExample, function()
	render.UpdateScreenEffectTexture()

	mat_color:SetTexture( $fbtexture, render.GetScreenEffectTexture() )

	mat_color:SetFloat( $pp_colour_addr, 0 )
	mat_color:SetFloat( $pp_colour_addg, 0 )
	mat_color:SetFloat( $pp_colour_addb, 0 )
	mat_color:SetFloat( $pp_colour_mulr, 0 )
	mat_color:SetFloat( $pp_colour_mulg, 0 )
	mat_color:SetFloat( $pp_colour_mulb, 0 )
	mat_color:SetFloat( $pp_colour_brightness, 0 )
	mat_color:SetFloat( $pp_colour_contrast, 0.5 )
	mat_color:SetFloat( $pp_colour_colour, 5 )

	render.SetMaterial( mat_color )
	render.DrawScreenQuad()
end )


"Global/Localize"
Localize( string localisationToken, string default ) 
 Description
Returns a localisation for the given token, if none is found it will return the default(second) parameter.

 Arguments

 string localisationToken


The token to find a translation for.

 Arguments

 string default


The default value to be returned if no translation was found.


"Global/Model"
Model( string model ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Runs util.PrecacheModel and returns the string

 Arguments

 string model


The model to precache

 Returns

 string


The same string entered as an argument

 Examples
 Example
From entities/gmod_cameraprop.lua

local CAMERA_MODEL = Model( models/dav0r/camera.mdl )
function ENT:Initialize()
 self:SetModel( CAMERA_MODEL )
 ...


"Global/MsgAll"
MsgAll( vararg args ) 
 Description
Works exactly like Msg except that, if called on the server, will print to all players consoles plus the server console.

 Arguments

 vararg args


List of values to print.


"Global/module"
module( string name, vararg loaders ) 
 Description
Creates a table with the specified module name and sets the function environment for said table.
Any passed loaders are called with the table as an argument. An example of this is package.seeall.

 Arguments

 string name


The name of the module. This will be used to access the module table in the runtime environment.

 Arguments

 vararg loaders


Calls each function passed with the new table as an argument.


"Global/Msg"
Msg( vararg args ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Writes every given argument to the console.
Automatically attempts to convert each argument to a string. (See tostring)
Unlike print, arguments are not separated by anything. They are simply concatenated.
Additionally, a newline isnt added automatically to the end, so subsequent Msg or print operations will continue the same line of text in the console. See MsgN for a version that does add a newline.
The text is blue on the server, orange on the client, and green on the menu: 

 Arguments

 vararg args


List of values to print.

 Examples
 Example
Prints Hello World! to the console.

Msg( Hello,  World! )
Output:

Hello World!


"Global/NamedColor"
NamedColor( string name ) 
 Description
Returns named color defined in resource/ClientScheme.res.

 Arguments

 string name


Name of color

 Returns

 table


A Color structure or nil


"Global/LocalToWorld"
LocalToWorld( Vector localPos, Angle localAng, Vector originPos, Angle originAngle ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Returns


 Description
Translates the specified position and angle from the specified local coordinate system into worldspace coordinates.
If youre working with an entitys local vectors, use Entity:LocalToWorld and/or Entity:LocalToWorldAngles instead.
See also: WorldToLocal, the reverse of this function.

 Arguments

 Vector localPos


The position vector in the source coordinate system, that should be translated to world coordinates

 Arguments

 Angle localAng


The angle in the source coordinate system, that should be converted to a world angle. If you dont need to convert an angle, you can supply an arbitrary valid angle (e.g. Angle()).

 Arguments

 Vector originPos


The origin point of the source coordinate system, in world coordinates

 Arguments

 Angle originAngle


The angles of the source coordinate system, as a world angle

 Returns

 Vector


The world position of the supplied local position.

 Returns

 Angle


The world angles of the supplied local angle.


"Global/MsgC"
MsgC( vararg args ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Just like Msg, except it can also print colored text, just like chat.AddText.

 Arguments

 vararg args


Values to print. If you put in a color, all text after that color will be printed in that color.

 Examples
 Example
Prints Hello World! in red to the console.

MsgC( Color( 255, 0, 0 ), Hello World! )
Output:


 Examples
 Example
Shows the built in colors for server and client

MsgC( Color( 137, 222, 255 ), Default server color )
MsgC( Color( 255, 222, 102 ), Default client color )


"Global/MsgN"
MsgN( vararg args ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Same as print, except it concatinates the arguments without inserting any whitespace in between them.
See also Msg, which doesnt add a newline (\n) at the end.

 Arguments

 vararg args


List of values to print. They can be of any type and will be converted to strings with tostring.

 Examples
 Example
Prints Hello, World! in two lines to the console.

MsgN( Hello, )
MsgN( World! )
Output:

Hello,
World!


"Global/next"
next( table tab, any prevKey=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns
6 Examples

6.1 Example




 Description
Returns the next key and value pair in a table.



NOTE


Table keys in Lua have no specific order, and will be returned in whatever order they exist in memory. This may not always be in ascending order or alphabetical order. If you need to iterate over an array in order, use ipairs.


 Arguments

 table tab


The table

 Arguments

 any prevKey=nil


The previous key in the table.

 Returns

 any


The next key for the table. If the previous key was nil, this will be the first key in the table. If the previous key was the last key in the table, this will be nil.

 Returns

 any


The value associated with that key. If the previous key was the last key in the table, this will be nil.

 Examples
 Example
Returns whether the table is empty or not

local function IsEmptyTable( t )
	return next( t ) == nil
end

local mytable = {}

print( mytable is empty:, IsEmptyTable( mytable ) )
mytable[hello]=true
print( mytable is empty:, IsEmptyTable( mytable ) )
Output:

mytable is empty: true
mytable is empty: false


"Global/OnModelLoaded"
OnModelLoaded( string modelName, number numPostParams, number numSeq, number numAttachments, number numBoneControllers, number numSkins, number size ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Called by the engine when a model has been loaded. Caches model information with the sql library.
 Arguments

 string modelName


Name of the model.

 Arguments

 number numPostParams


Number of pose parameters the model has.

 Arguments

 number numSeq


Number of sequences the model has.

 Arguments

 number numAttachments


Number of attachments the model has.

 Arguments

 number numBoneControllers


Number of bone controllers the model has.

 Arguments

 number numSkins


Number of skins that the model has.

 Arguments

 number size


Size of the model.


"Global/ParticleEmitter"
ParticleEmitter( Vector position, boolean use3D ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Creates a new CLuaEmitter.



NOTE


Do not forget to delete the emitter with CLuaEmitter:Finish once you are done with it


 Arguments

 Vector position


The start position of the emitter.

This is only used to determine particle drawing order for translucent particles.

 Arguments

 boolean use3D


Whenever to render the particles in 2D or 3D mode.

 Returns

 CLuaEmitter


The new particle emitter.

 Examples
 Example
Creates a simple spark particle effect 100 units above where the local player is looking at.

local tr =  LocalPlayer():GetEyeTrace()
local pos = tr.HitPos + tr.HitNormal * 100 -- The origin position of the effect

local emitter = ParticleEmitter( pos ) -- Particle emitter in this position

for i = 0, 100 do -- Do 100 particles
	local part = emitter:Add( effects/spark, pos ) -- Create a new particle at pos
	if ( part ) then
		part:SetDieTime( 1 ) -- How long the particle should live

		part:SetStartAlpha( 255 ) -- Starting alpha of the particle
		part:SetEndAlpha( 0 ) -- Particle size at the end if ( its lifetime

		part:SetStartSize( 5 ) -- Starting size
		part:SetEndSize( 0 ) -- Size when removed

		part:SetGravity( Vector( 0, 0, -250 ) ) -- Gravity of the particle
		part:SetVelocity( VectorRand() * 50 ) -- Initial velocity of the particle
	end
end

emitter:Finish()


"Global/pairs"
pairs( table tab ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns
5 Returns
6 Examples

6.1 Example




 Description
Returns an iterator function(next) for a for loop that will return the values of the specified table in an arbitrary order.
For alphabetical key order use SortedPairs.
For alphabetical value order use SortedPairsByValue.

 Arguments

 table tab


The table to iterate over

 Returns

 function


The iterator (next)

 Returns

 table


The table being iterated over

 Returns

 any


nil (for the constructor)

 Examples
 Example
Iterates through all players on the server and prints their names.

for k, v in pairs( player.GetAll() ) do
	print( v:Nick() )
end
Output:

A list of players in console.


"Global/NumDownloadables"
NumDownloadables(  ) 
 Description
Returns the number of files needed from the server you are currently joining.

 Returns

 number


The number of downloadables


"Global/ParticleEffectAttach"
ParticleEffectAttach( string particleName, number attachType, Entity entity, number attachmentID ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Creates a particle effect with specialized parameters.



NOTE


The particle effect must be precached with PrecacheParticleSystem and the file its from must be added via game.AddParticles before it can be used!


 Arguments

 string particleName


The name of the particle effect.

 Arguments

 number attachType


Attachment type using PATTACH_ Enums.

 Arguments

 Entity entity


The entity to be used in the way specified by the attachType.

 Arguments

 number attachmentID


The id of the attachment to be used in the way specified by the attachType.


"Global/NumModelSkins"
NumModelSkins( string modelName ) 
 Description
Returns the amount of skins the specified model has

 Arguments

 string modelName


Model to return amount of skins of

 Returns

 number


Amount of skins


"Global/Path"
Path( string type ) 
 Description
Creates a path for the bot to follow

 Arguments

 string type


The name of the path to create.

This is going to be Follow or Chase right now.

 Returns

 PathFollower


The path


"Global/OpenFolder"
OpenFolder( string folder ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Opens a folder with the given name in the garrysmod folder using the operating systems file browser. Currently broken on OS X and Linux.

 Arguments

 string folder


The subdirectory to open in the garrysmod folder.

 Examples
 Example
Opens the saves folder.

OpenFolder( saves )


"Global/pcall"
pcall( function func, vararg arguments ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns
6 Examples

6.1 Example




 Description
Calls a function and catches an error that can be thrown while the execution of the call.



BUG


Using this function with include will break autorefresh.





BUG


This does not stop Error and ErrorNoHalt from sending error messages to the server (if called clientside) or calling the GM:OnLuaError hook. The success boolean returned will always return true and thus you will not get the error message returned. error does not exhibit these behaviours.





BUG


This does not stop errors incurred by include.



 Arguments

 function func


Function to be executed and of which the errors should be caught of

 Arguments

 vararg arguments


Arguments to call the function with.

 Returns

 boolean


If the function had no errors occur within it.

 Returns

 vararg


If an error occurred, this will be a string containing the error message. Otherwise, this will be the return values of the function passed in.

 Examples
 Example
Catch an error.

local succ, err = pcall( function() aisj() end )
print( succ, err )
Output:

false attempt to call global aisj (a nil value)


"Global/newproxy"
newproxy( boolean addMetatable=false ) 
 Description
Returns a new userdata object.

 Arguments

 boolean addMetatable=false


If true, the userdata will get its own metatable automatically.

 Returns

 userdata


The newly created userdata.


"Global/Player"
Player( number playerIndex ) 
 Description
Returns the player with the matching Player:UserID.
For a function that returns a player based on their Entity:EntIndex, see Entity.
For a function that returns a player based on their connection ID, see player.GetByID.

 Arguments

 number playerIndex


The player index.

 Returns

 Player


The retrieved player.


"Global/PrecacheParticleSystem"
PrecacheParticleSystem( string particleSystemName ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Precaches the particle with the specified name.

 Arguments

 string particleSystemName


The name of the particle system.

 Examples
 Example
Example usage of the function. Precaches ExplosionCore_wall particle from particles/explosion.pcf, a Team Fortress 2 particle file.

game.AddParticles( particles/explosion.pcf )
PrecacheParticleSystem( ExplosionCore_wall )

if ( SERVER ) then
	-- A test console command to see if ( the particle works, spawns the particle where the player is looking at. 
	concommand.Add( particleitup, function( ply, cmd, args )
		ParticleEffect( ExplosionCore_wall, ply:GetEyeTrace().HitPos, Angle( 0, 0, 0 ) )
	end )
end


"Global/PrecacheScene"
PrecacheScene( string scene ) 
 Description
Precaches a scene file.

 Arguments

 string scene


Path to the scene file to precache.


"Global/OrderVectors"
OrderVectors( Vector vector1, Vector vector2 ) 
 Description
Modifies the given vectors so that all of vector2s axis are larger than vector1s by switching them around. Also known as ordering vectors.



NOTE


This function will irreversibly modify the given vectors


 Arguments

 Vector vector1


Bounding box min resultant

 Arguments

 Vector vector2


Bounding box max resultant


"Global/Particle"
Particle( string file ) 
 Description
Calls game.AddParticles and returns given string.

 Arguments

 string file


The particle file.

 Returns

 string


The particle file.


"Global/PrecacheSentenceGroup"
PrecacheSentenceGroup( string group ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Precache a sentence group in a sentences.txt definition file.

 Arguments

 string group


The group to precache.

 Examples
 Example
Precache all metropolice sentences.

PrecacheSentenceGroup( METROPOLICE )
Output:

Precaches sounds used in all sentences starting with METROPOLICE.


"Global/print"
print( vararg args ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Writes every given argument to the console.
Automatically attempts to convert each argument to a string. (See tostring)
Separates arguments with a tab character (\t).

 Arguments

 vararg args


List of values to print.

 Examples
 Example
Prints Hello World! Yay! to the console.

print( Hello World!, Yay! )
Output:

Hello World! Yay!


"Global/ParticleEffect"
ParticleEffect( string particleName, Vector position, Angle angles, Entity parent=NULL ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Creates a particle effect.



NOTE


The particle effect must be precached with PrecacheParticleSystem and the file its from must be added via game.AddParticles before it can be used!


 Arguments

 string particleName


The name of the particle effect.

 Arguments

 Vector position


The start position of the effect.

 Arguments

 Angle angles


The orientation of the effect.

 Arguments

 Entity parent=NULL


If set, the particle will be parented to the entity.

 Examples
 Example
Example usage of the function. Precaches ExplosionCore_wall particle from particles/explosion.pcf, a Team Fortress 2 particle file.
You can then test the particle by using the particleitup console command.

game.AddParticles( particles/explosion.pcf )
PrecacheParticleSystem( ExplosionCore_wall )

if ( SERVER ) then
	-- A test console command to see if ( the particle works, spawns the particle where the player is looking at. 
	concommand.Add( particleitup, function( ply, cmd, args )
		ParticleEffect( ExplosionCore_wall, ply:GetEyeTrace().HitPos, Angle( 0, 0, 0 ) )
	end )
end


"Global/PrintTable"
PrintTable( table tableToPrint, number indent=0, table done={} ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Recursively prints the contents of a table to the console.

 Arguments

 table tableToPrint


The table to be printed

 Arguments

 number indent=0


Number of tabs to start indenting at. Increases by 2 when entering another table.

 Arguments

 table done={}


Internal argument, you shouldnt normally change this. Used to check if a nested table has already been printed so it doesnt get caught in a loop.

 Examples
 Example
Prints the table we created.

local tbl =
{
 test,
 3829.4,
 {foo, baah, 20/5},
 true
}

PrintTable( tbl )
Output:

1 = test
2 = 3829.4
3:
 1 = foo
 2 = baah
 3 = 4
4 = true


"Global/PrintMessage"
PrintMessage( number type, string message ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Displays a message in the chat, console, or center of screen of every player.
This uses the archaic user message system (umsg library) and hence is limited to &#x2248;250 characters.

 Arguments

 number type


Which type of message should be sent to the players (see HUD_ Enums)

 Arguments

 string message


Message to be sent to the players

 Examples
 Example
Prints into the every players chat: Im new here.

PrintMessage( HUD_PRINTTALK, Im new here. )
Output:

Im new here.


"Global/PositionSpawnIcon"
PositionSpawnIcon( Entity model, Vector position ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Moves the given model to the given position and returns view information based on its properties

 Arguments

 Entity model


Model that is being rendered to the spawn icon

 Arguments

 Vector position


Position that the model is being rendered at

 Returns

 table


Table of information of the view which can be used for rendering


"Global/PrecacheSentenceFile"
PrecacheSentenceFile( string filename ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Load and precache a custom sentence file.

 Arguments

 string filename


The path to the custom sentences.txt.

 Examples
 Example
Precache a file named customsentences.txt in the data directory.

PrecacheSentenceFile( data/customsentences.txt )
Output:

Loads and precaches the sentences.


"Global/rawget"
rawget( table table, any index ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Gets the value with the specified key from the table without calling the __index method.

 Arguments

 table table


Table to get the value from.

 Arguments

 any index


The index to get the value from.

 Returns

 any


The value.


"Global/ProtectedCall"
ProtectedCall( function func ) 
 Description
Runs a function without stopping the whole script on error.
This function is similar to pcall and xpcall except the errors are still printed and sent to the error handler (i.e. sent to server console if clientside and GM:OnLuaError called).

 Arguments

 function func


Function to run

 Returns

 boolean


Were there any errors or not


"Global/RealFrameTime"
RealFrameTime(  ) 
 Description
Returns the real frame-time which is unaffected by host_timescale. To be used for GUI effects (for example)

 Returns

 number


Real frame time


"Global/ProjectedTexture"
ProjectedTexture(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Creates a new ProjectedTexture.

 Returns

 ProjectedTexture


Newly created projected texture.

 Examples
 Example
Creates a simple ProjectedTexture attached to a Scripted Entity.
Note that this code must be ran on clientside only, not shared.

function ENT:Initialize()
	local lamp = ProjectedTexture() -- Create a projected texture
	self.lamp = lamp -- Assign it to the entity table so it may be accessed later

	-- Set it all up
	lamp:SetTexture( effects/flashlight001 )
	lamp:SetFarZ( 500 ) -- How far the light should shine

	lamp:SetPos( self:GetPos() ) -- Initial position and angles
	lamp:SetAngles( self:GetAngles() )
	lamp:Update()
end

function ENT:OnRemove()
	if ( IsValid( self.lamp ) ) then
		self.lamp:Remove()
	end
end

function ENT:Think()
	-- Keep updating the light so its attached to our entity
	-- you might want to call other functions here, you can do animations here as well
	if ( IsValid( self.lamp ) ) then
		self.lamp:SetPos( self:GetPos() )
		self.lamp:SetAngles( self:GetAngles() )
		self.lamp:Update()
	end
end


"Global/rawequal"
rawequal( any value1, any value2 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Compares the two values without calling their __eq operator.

 Arguments

 any value1


The first value to compare.

 Arguments

 any value2


The second value to compare.

 Returns

 boolean


Whether or not the two values are equal.


"Global/rawset"
rawset( table table, any index, any value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Sets the value with the specified key from the table without calling the __newindex method.

 Arguments

 table table


Table to get the value from.

 Arguments

 any index


The index to get the value from.

 Arguments

 any value


The value to set for the specified key.


"Global/RecipientFilter"
RecipientFilter(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Creates a new CRecipientFilter.

 Returns

 CRecipientFilter


The new created recipient filter.

 Examples
 Example
Example usage of the function

local rf = RecipientFilter()
rf:AddAllPlayers()
print( rf:GetCount() )
PrintTable( rf:GetPlayers() )
Output:

2
1	=	Player [1][Player #1]
2	=	Player [2][Player #2]


"Global/RememberCursorPosition"
RememberCursorPosition(  ) 
 Description
Saves position of your cursor on screen. You can restore it by using RestoreCursorPosition.
Despite this function being available on server, it will not do anything on server.


"Global/RandomPairs"
RandomPairs( table table, boolean descending ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns an iterator function that can be used to loop through a table in random order

 Arguments

 table table


Table to create iterator for

 Arguments

 boolean descending


Whether the iterator should iterate descending or not

 Returns

 function


Iterator function

 Examples
 Example
Creates a table and prints its contents in random order

local tab = {a, b, c, d, e, f}


for k, v in RandomPairs( tab ) do
    print( v )
end
Output:

b
d
f
c
a

e


"Global/RenderSuperDoF"
RenderSuperDoF( Vector viewOrigin, Angle viewAngles, number viewFOV ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Renders the Super Depth of Field post-process effect

 Arguments

 Vector viewOrigin


Origin to render the effect at

 Arguments

 Angle viewAngles


Angles to render the effect at

 Arguments

 number viewFOV


Field of View to render the effect at


"Global/RenderAngles"
RenderAngles(  ) 
 Description
Returns the angle that the clients view is being rendered at

 Returns

 Angle


Render Angles


"Global/RenderStereoscopy"
RenderStereoscopy( Vector viewOrigin, Angle viewAngles ) 
 Description
Renders the stereoscopic post-process effect

 Arguments

 Vector viewOrigin


Origin to render the effect at

 Arguments

 Angle viewAngles


Angles to render the effect at


"Global/RunConsoleCommand"
RunConsoleCommand( string command, vararg arguments ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Executes the given console command with the parameters.



NOTE


Some commands/convars are blocked from being ran/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see Blocked ConCommands.


 Arguments

 string command


The command to be executed.

 Arguments

 vararg arguments


The arguments. Note, that unlike Player:ConCommand, you must pass each argument as a new string, not separating them with a space.

 Examples
 Example
Changes the gravity to 400 (default 600).

RunConsoleCommand( sv_gravity, 400 )


"Global/RunString"
RunString( string code, string identifier=RunString, boolean handleError=true ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Evaluates and executes the given code, will throw an error on failure.



NOTE


Local variables are not passed to the given code.


 Arguments

 string code


The code to execute.

 Arguments

 string identifier=RunString


The name that should appear in any error messages caused by this code.

 Arguments

 boolean handleError=true


If false, this function will return a string containing any error messages instead of throwing an error.

 Returns

 string


If handleError is false, the error message (if any).


"Global/RemoveTooltip"
RemoveTooltip(  ) 
 Description
Does the removing of the tooltip panel. Called by EndTooltip.


"Global/RegisterDermaMenuForClose"
RegisterDermaMenuForClose( Panel menu ) 
 Description
Registers a Derma element to be closed the next time CloseDermaMenus is called

 Arguments

 Panel menu


Menu to be registered for closure


"Global/RealTime"
RealTime(  ) 
 Description
Returns the uptime of the game/server in seconds (to at least 4 decimal places)



NOTE


This is not synchronised or affected by the game.


You should use this function (or SysTime) for timing real-world events such as user interaction, but not for timing game events such as animations.
See also: CurTime, SysTime

 Returns

 number


Uptime of the server.


"Global/RenderDoF"
RenderDoF( Vector origin, Angle angle, Vector usableFocusPoint, number angleSize, number radialSteps, number passes, boolean spin, table inView, number fov ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments


 Description
Renders a Depth of Field effect

 Arguments

 Vector origin


Origin to render the effect at

 Arguments

 Angle angle


Angle to render the effect at

 Arguments

 Vector usableFocusPoint


Point to focus the effect at

 Arguments

 number angleSize


Angle size of the effect

 Arguments

 number radialSteps


Amount of radial steps to render the effect with

 Arguments

 number passes


Amount of render passes

 Arguments

 boolean spin


Whether to cycle the frame or not

 Arguments

 table inView


Table of view data

 Arguments

 number fov


FOV to render the effect with


"Global/RunStringEx"
RunStringEx(  ) 
 Description
Alias of RunString.

This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Use RunString instead.


"Global/SaveLastMap"
SaveLastMap( string map, string category ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
This function is used to save the last map and category to which the map belongs as a cookie.

 Arguments

 string map


The name of the map.

 Arguments

 string category


The name of the category to which this map belongs.


"Global/RecordDemoFrame"
RecordDemoFrame(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Adds a frame to the currently recording demo.


"Global/RestoreCursorPosition"
RestoreCursorPosition(  ) 
 Description
Restores position of your cursor on screen. You can save it by using RememberCursorPosition.
Despite this function being available on server, it will not do anything on server.


"Global/SafeRemoveEntityDelayed"
SafeRemoveEntityDelayed( Entity entity, number delay ) 
 Description
Removes entity after delay using SafeRemoveEntity

 Arguments

 Entity entity


Entity to be removed

 Arguments

 number delay


Delay for entity removal in seconds


"Global/ScreenScale"
ScreenScale( number Size ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Returns a number based on the Size argument and your screens width. The screens width is always equal to size 640. This function is primarily used for scaling font sizes.

 Arguments

 number Size


The number you want to scale.

 Examples
 Example
Prints a scaled number based on the number 96, 400 and 640.

print( ScreenScale( 96 ) )
print( ScreenScale( 400 ) )
print( ScreenScale( 640 ) )
Output:

252, 1050, 1680 (This will differ depending on your screen width. Here the screen width is 1680.)


"Global/ScrH"
ScrH(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Gets the height of the games window (in pixels).

 Returns

 number


The height of the games window in pixels

 Examples
 Example
Prints the Height of the window.

print( ScrH() )
Output:

1080 (Depends on your screen)
 Examples
 Example
Draws a white box on the top left corner of your screen

hook.Add( HUDPaint, WhiteBox, function()
    surface.SetDrawColor( Color( 255,255,255,255 ) )
    surface.DrawRect( 0, 0, ScrW() / 2, ScrH() / 2 )
end )
Output:

A white box on the top left corner of your screen


"Global/RunGameUICommand"
RunGameUICommand( string command ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Runs a menu command. Equivalent to RunConsoleCommand( gamemenucommand, command ) unless the command starts with the engine keyword in which case it is equivalent to RunConsoleCommand( command ).

 Arguments

 string command


The menu command to run
Should be one of the following:

 Disconnect - Disconnects from the current server.
 OpenBenchmarkDialog - Opens the Video Hardware Stress Test dialog.
 OpenChangeGameDialog - Does not work in GMod.
 OpenCreateMultiplayerGameDialog - Opens the Source dialog for creating a listen server.
 OpenCustomMapsDialog - Does nothing.
 OpenFriendsDialog - Does nothing.
 OpenGameMenu - Does not work in GMod.
 OpenLoadCommentaryDialog - Opens the Developer Commentary selection dialog. Useless in GMod.
 OpenLoadDemoDialog - Does nothing.
 OpenLoadGameDialog - Opens the Source Load Game dialog.
 OpenNewGameDialog - Opens the New Game dialog. Useless in GMod.
 OpenOptionsDialog - Opens the options dialog.
 OpenPlayerListDialog - Opens the Mute Players dialog that shows all players connected to the server and allows to mute them.
 OpenSaveGameDialog - Opens the Source Save Game dialog.
 OpenServerBrowser - Opens the legacy server browser.
 Quit - Quits the game without confirmation (unlike other Source games).
 QuitNoConfirm - Quits the game without confirmation (like other Source games).
 ResumeGame - Closes the menu and returns to the game.
 engine &lt;concommand&gt; - Runs a console command. Equivalent to RunConsoleCommand( &lt;concommand&gt; ).


 Examples
 Example
Opens the options dialog.

RunGameUICommand( OpenOptionsDialog )


 Examples
 Example
Hides the game UI (menu). Equivalent to RunConsoleCommand( gameui_hide )

RunGameUICommand( engine gameui_hide )


"Global/SafeRemoveEntity"
SafeRemoveEntity( Entity ent ) 
 Description
Removes the given entity unless it is a player or the world entity

 Arguments

 Entity ent


Entity to safely remove.


"Global/SavePresets"
SavePresets( table presets ) 
 Description
Overwrites all presets with the supplied table. Used by the presets library for preset saving

 Arguments

 table presets


Presets to be saved


"Global/SendUserMessage"
SendUserMessage( string name, any recipients, vararg args ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Send a usermessage

 Arguments

 string name


The name of the usermessage

 Arguments

 any recipients


Can be a CRecipientFilter, table or Player object.

 Arguments

 vararg args


Data to send in the usermessage


"Global/ScrW"
ScrW(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Gets the width of the games window (in pixels).

 Returns

 number


The width of the games window in pixels

 Examples
 Example
Prints the width of the screen

print( ScrW() )
Output:

1280 (depends on your resolution)


"Global/require"
require( string name ) 
 Description
First tries to load a binary module with the given name, if unsuccessful, it tries to load a Lua module with the given name.



BUG


Running this function with pcall or xpcall will still print an error that counts towards sv_kickerrornum.




 Arguments

 string name


The name of the module to be loaded.


"Global/ServerLog"
ServerLog( string parameter ) 
 Description
Prints ServerLog: PARAM without a newline, to the server log and console.

 Arguments

 string parameter


The value to be printed to console.


"Global/select"
select( any parameter, vararg vararg ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Used to select single values from a vararg or get the count of values in it.

 Arguments

 any parameter


Can be a number or string.

 If its a string and starts with #, the function will return the amount of values in the vararg (ignoring the rest of the string).
 If its a positive number, the function will return all values starting from the given index.
 If the number is negative, it will return the amount specified from the end instead of the beginning.


 Arguments

 vararg vararg


The vararg. These are the values from which you want to select.

 Returns

 any


Returns a number or vararg, depending on the select method.

 Examples
 Example
This code shows how it works with the # modifier:

print( select( #, a, true, false, {}, 1 ) )
Output:

5, which is the count of parameters passed excluding the modifier (the #)
 Examples
 Example
This prints from the 2nd vararg passed to the last

print( select( 2, 1, 2, 3, 4, 5 ) )
Output:

2 3 4 5 in the console
 Examples
 Example
This prints the last 2 arguments passed

print( select( -2, 1, 2, 3, 4, 5 ) )
Output:

4 5 in the console


"Global/SetClipboardText"
SetClipboardText( string text ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Adds the given string to the computers clipboard, which can then be pasted in or outside of GMod with Ctrl + V.

 Arguments

 string text


The text to add to the clipboard.

 Examples
 Example
Sets the clipboards text to Hello!.

SetClipboardText( Hello! )


"Global/setfenv"
setfenv( function location, table enviroment ) 
 Description
Sets the enviroment for a function or a stack level, if a function is passed, the return value will be the function, otherwise nil.

 Arguments

 function location


The function to set the enviroment for or a number representing stack level.

 Arguments

 table enviroment


Table to be used as enviroment.


"Global/SetGlobalString"
SetGlobalString( any index, string string ) 
 Description
Defines a string with a maximum of 199 characters to be automatically networked to clients



NOTE


Running this function clientside will only set it clientside for the client it is called on!


 Arguments

 any index


Index to identify the global string with

 Arguments

 string string


String to be networked


"Global/SetGlobalAngle"
SetGlobalAngle( any index, Angle angle ) 
 Description
Defines an angle to be automatically networked to clients



NOTE


Running this function clientside will only set it clientside for the client it is called on!


 Arguments

 any index


Index to identify the global angle with

 Arguments

 Angle angle


Angle to be networked


"Global/setmetatable"
setmetatable( table Tab, table Metatable ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Sets, changes or removes a tables metatable. Returns Tab (the first argument).

 Arguments

 table Tab


The table whos metatable to change.

 Arguments

 table Metatable


The metatable to assign.If its nil, the metatable will be removed.

 Returns

 table


The first argument.

 Examples
 Example
Creates a metatable and assigns it to a table.

local Pupil_meta =
{
	GetName = function( self )
		return self.name
	end
}

Pupil_meta.__index = Pupil_meta
-- If a key cannot be found in an object, it will look in its metatables __index metamethod.

local Pupil =
{
	name = John Doe
}


setmetatable( Pupil, Pupil_meta )

print( Pupil:GetName() )
-- This will look for the GetName key in Pupil, but it doesnt have one. So it will look in its metatable ( Pupil_meta ) __index key instead.
Output:

John Doe


"Global/Sound"
Sound( string soundPath ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Runs util.PrecacheSound and returns the string

 Arguments

 string soundPath


The soundpath to precache

 Returns

 string


The string passed as the first argument

 Examples
 Example
From entities/sent_ball.lua

local BounceSound = Sound( garrysmod/balloon_pop_cute.wav )
function ENT:PhysicsCollide( data, physobj )
 -- Play sound on bounce
 if ( data.Speed &gt; 60 &amp;&amp; data.DeltaTime &gt; 0.2 ) then
 sound.Play( BounceSound, self:GetPos(), 75, math.random( 90, 120 ), math.Clamp( data.Speed / 150, 0, 1 ) )
 ...


"Global/SetGlobalBool"
SetGlobalBool( any index, boolean bool ) 
 Description
Defined a boolean to be automatically networked to clients



NOTE


Running this function clientside will only set it clientside for the client it is called on!


 Arguments

 any index


Index to identify the global boolean with

 Arguments

 boolean bool


Boolean to be networked


"Global/SortedPairsByMemberValue"
SortedPairsByMemberValue( table table, any memberKey, boolean descending=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Returns
7 Examples

7.1 Example




 Description
Returns an iterator function that can be used to loop through a table in order of member values, when the values of the table are also tables and contain that member.
To sort by value, use SortedPairsByValue.
To sort by keys, use SortedPairs.

 Arguments

 table table


Table to create iterator for.

 Arguments

 any memberKey


Key of the value member to sort by.

 Arguments

 boolean descending=false


Whether the iterator should iterate in descending order or not.

 Returns

 function


Iterator function

 Returns

 table


The table the iterator was created for.

 Examples
 Example
Creates a table and prints its contents in order of the age member descending

local tab =
{
	{
		Name = Adam,
		Age = 16
	},
	{
		Name = Charles,
		Age = 18
	}

}


for k, v in SortedPairsByMemberValue( tab, Age, true ) do
	print( v.Name )
end
Output:

Charles
Adam


"Global/SetGlobalInt"
SetGlobalInt( string index, number value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets an integer that is shared between the server and all clients.



NOTE


Running this function clientside will only set it clientside for the client it is called on!




BUG


This function will not round decimal values as it actually networks a float internally.



 Arguments

 string index


The unique index to identify the global value with.

 Arguments

 number value


The value to set the global value to

 Examples
 Example
Sets the current round number.

SetGlobalInt( RoundNumber, 4 )


"Global/SetGlobalVector"
SetGlobalVector( any index, Vector vec ) 
 Description
Defines a vector to be automatically networked to clients



NOTE


Running this function clientside will only set it clientside for the client it is called on!


 Arguments

 any index


Index to identify the global vector with

 Arguments

 Vector vec


Vector to be networked


"Global/SortedPairsByValue"
SortedPairsByValue( table table, boolean descending=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns


 Description
Returns an iterator function that can be used to loop through a table in order of its values.
To sort by specific value member, use SortedPairsByMemberValue.
To sort by keys, use SortedPairs.

 Arguments

 table table


Table to create iterator for

 Arguments

 boolean descending=false


Whether the iterator should iterate in descending order or not

 Returns

 function


Iterator function

 Returns

 table


The table which will be iterated over


"Global/SQLStr"
SQLStr( string input, boolean noQuotes=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns the input value in an escaped form so that it can safely be used inside of queries. The returned value is surrounded by quotes unless noQuotes is true. Alias of sql.SQLStr

 Arguments

 string input


String to be escaped

 Arguments

 boolean noQuotes=false


Whether the returned value should be surrounded in quotes or not

 Returns

 string


Escaped input


"Global/SetGlobalEntity"
SetGlobalEntity( any index, Entity ent ) 
 Description
Defines an entity to be automatically networked to clients



NOTE


Running this function clientside will only set it clientside for the client it is called on!


 Arguments

 any index


Index to identify the global entity with

 Arguments

 Entity ent


Entity to be networked


"Global/SoundDuration"
SoundDuration( string soundName ) 
 Description
Returns the duration of the sound specified in seconds.



BUG


This only works properly for .wav files serverside.



 Arguments

 string soundName


The sound file path.

 Returns

 number


Sound duration in seconds.


"Global/SuppressHostEvents"
SuppressHostEvents( Player suppressPlayer ) 
 Description
Suppress any networking from the server to the specified player. This is automatically called by the engine before/after a player fires their weapon, reloads, or causes any other similar shared-predicted event to occur.

 Arguments

 Player suppressPlayer


The player to suppress any networking to.


"Global/SetGlobalFloat"
SetGlobalFloat( any index, number float ) 
 Description
Defines a floating point number to be automatically networked to clients



NOTE


Running this function clientside will only set it clientside for the client it is called on!


 Arguments

 any index


Index to identify the global float with

 Arguments

 number float


Float to be networked


"Global/SetPhysConstraintSystem"
SetPhysConstraintSystem( Entity constraintSystem ) 
 Description
Called by the engine to set which constraint system [1] the next created constraints should use

 Arguments

 Entity constraintSystem


Constraint system to use


"Global/TauntCamera"
TauntCamera(  ) 
 Description
Returns a TauntCamera object

 Returns

 table


TauntCamera


"Global/tobool"
tobool( any val ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Attempts to return an appropriate boolean for the given value

 Arguments

 any val


The object to be converted to a boolean

 Returns

 boolean


false for the boolean false.false for false.false for 0.false for numeric 0.false for nil.true otherwise.

 Examples
 Example
Demonstrate the output of this function with various values.

print( boolean true:, tobool( true ) )
print( boolean false:, tobool( false ) )
print( string true:, tobool( true ) )
print( string false:, tobool( false ) )
print( numeric 0:, tobool( 0 ) )
print( string 0:, tobool( 0 ) )
print( string 1:, tobool( 1 ) )
print( nil:, tobool( nil ) )
print( text string:, tobool( not a boolean ) )
print( empty string:, tobool(  ) )
Output:

boolean true: true
boolean false: false
string true: true
string false: false
numeric 0: false
string 0: false
string 1: true
nil: false
text string: true
empty string: true


"Global/SysTime"
SysTime(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Returns a highly accurate time in seconds since the start up, ideal for benchmarking.

 Returns

 number


Uptime of the server.

 Examples
 Example
Prints the runtime

print( SysTime() )
Output:

1654.4422888037
 Examples
 Example
Typical usage of this function for benchmarking

local SysTime = SysTime
local Distance = FindMetaTable( Vector ).Distance

local vec1 = Vector( 1, 2, 3 )
local vec2 = Vector( 13, 26, -10 )

local count = 10000

local StartTime = SysTime()

for i = 1, count do
	-- Repeat an action 10,000 times to check how long it takes on average
	-- Example action:
	Distance( vec1 , vec2 )
end

local EndTime = SysTime()
local TotalTime = EndTime - StartTime
local AverageTime = TotalTime / count

print( Total:  .. TotalTime ..  seconds. Average:  .. AverageTime ..  seconds. )
Output:

Total: 0.0099969995115998 seconds. Average: 9.9969995115998e-07 seconds.


"Global/STNDRD"
STNDRD( number number ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the ordinal suffix of a given number.

 Arguments

 number number


The number to find the ordinal suffix of.

 Returns

 string


suffix

 Examples
 Example
Returns the ordinal suffix of 72.

print( 72 .. STNDRD( 72 ) )
Output:

72nd


"Global/SortedPairs"
SortedPairs( table table, boolean desc=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns
6 Examples

6.1 Example




 Description
This function can be used in a for loop instead of pairs. It sorts all keys alphabetically.
For sorting by specific value member, use SortedPairsByMemberValue.
For sorting by value, use SortedPairsByValue.

 Arguments

 table table


The table to sort

 Arguments

 boolean desc=false


Reverse the sorting order

 Returns

 function


Iterator function

 Returns

 table


The table being iterated over

 Examples
 Example
Example of usage.

for id, text in SortedPairs( { e, b, d, c, a } ) do
    print( id, text )
end

print( --- )

for id, text in SortedPairs( { e = 1, b = 2, d = 3, c = 4, a = 5 } ) do
    print( id, text )
end
Output:

1 e
2 b
3 d
4 c
5 a
---
a 5
b 2
c 4
d 3
e 1


"Global/ToggleFavourite"
ToggleFavourite( string map ) 
 Description
Toggles whether or not the named map is favorited in the new game list.

 Arguments

 string map


Map to toggle favorite.


"Global/TextEntryLoseFocus"
TextEntryLoseFocus(  ) 
 Description
Clears focus from any text entries player may have focused.


"Global/SScale"
SScale( number Size ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should be using ScreenScale instead.
Returns a number based on the Size argument and your screens width. Alias of ScreenScale.

 Arguments

 number Size


The number you want to scale.

 Examples
 Example
Prints a scaled number based on the number 40.

print( SScale( 40 ) )
Output:

105 (This will differ depending on your screen size.)


"Global/TimedSin"
TimedSin( number frequency, number origin, number max, number offset ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Returns a sine value that fluctuates based on CurTime. The value returned will be between the start value plus/minus the range value.
Due to a bug, the range arguments dont work as intended. The existing (bugged) behavior is documented below.

 Arguments

 number frequency


The frequency of fluctuation, in hertz

 Arguments

 number origin


The center value of the sine wave.

 Arguments

 number max


This arguments distance from origin defines the size of the full range of the sine wave. For example, if origin is 3 and max is 5, then the full range of the sine wave is 5-3 = 2. 3 is the center point of the sine wave, so the sine wave will range between 2 and 4.

 Arguments

 number offset


Offset variable that doesnt affect the rate of change, but causes the returned value to be offset by time

 Returns

 number


Sine value


"Global/TimedCos"
TimedCos( number frequency, number min, number max, number offset ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Returns a cosine value that fluctuates based on the current time

 Arguments

 number frequency


The frequency of fluctuation

 Arguments

 number min


Minimum value

 Arguments

 number max


Maxmimum value

 Arguments

 number offset


Offset variable that doesnt affect the rate of change, but causes the returned value to be offset by time

 Returns

 number


Cosine value


"Global/tonumber"
tonumber( any value, number base=10 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Attempts to convert the value to a number.
Returns nil on failure.

 Arguments

 any value


The value to convert. Can be a number or string.

 Arguments

 number base=10


The numeric base used in the string. Can be any integer between 2 and 36, inclusive.

 Returns

 number


The numeric representation of the value with the given base, or nil if the conversion failed.


"Global/tostring"
tostring( any value ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Attempts to convert the value to a string. If the value is an object and its metatable has defined the __tostring metamethod, this will call that function.
print also uses this functionality.

 Arguments

 any value


The object to be converted to a string.

 Returns

 string


The string representation of the value.

 Examples
 Example
Convert a number to a string.

print( tostring( 0x16 ) )
Output:

22


"Global/TranslateDownloadableName"
TranslateDownloadableName( string filename ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Returns Lua Cache File if the given file name is in a certain string table, nothing otherwise.

 Arguments

 string filename


File name to test

 Returns

 string


Lua Cache File if the given file name is in a certain string table, nothing otherwise.


"Global/type"
type( any var ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example


5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Returns a string representing the name of the type of the passed object.

 Arguments

 any var


The object to get the type of.

 Returns

 string


The name of the objects type.

 Examples
 Example
Print the name of a few types.

print( type( 2 ) )
print( type( hai ) )
print( type( {} ) )
Output:

number
string
table
 Examples
 Example
Returns no value if called with 0 arguments/parameters.

print( type() )
Output:

no value
 Examples
 Example
A list of code showing how you can use the type function in replacement with any of the is functions. (example being istable, isentity, etc.)

print( type( LocalPlayer() ) )
print( type( Vector() ) )
print( type( Angle() ) )
print( type( Entity( num ) ) ) -- -&gt; num is the EntIndex for the entity
print( type( vgui.Create( DFrame ) ) )
Output:

Player
Vector
Angle
Entity
Panel


"Global/Vector"
Vector( number x=0, number y=0, number z=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Creates a Vector object.

 Arguments

 number x=0


The x component of the vector.
If this is a Vector, this function will return a copy of the given vector.
If this is a string, this function will try to parse the string as a vector. If it fails, it returns a 0 vector.

(See examples)

 Arguments

 number y=0


The y component of the vector.

 Arguments

 number z=0


The z component of the vector.

 Returns

 Vector


The created vector object.

 Examples
 Example
Creates a vector and prints the value to the console.

print( Vector( 1, 2, 3 ) )
print( Vector( 4 5 6 ) )
local test = Vector( 7, 8, 9 )
print( Vector( test ) )

print( Vector( 4 5 test ) )
print( Vector() )
Output:

1.000000 2.000000 3.000000
4.000000 5.000000 6.000000
7.000000 8.000000 9.000000

0.000000 0.000000 0.000000
0.000000 0.000000 0.000000


"Global/UnPredictedCurTime"
UnPredictedCurTime(  ) 
 Description
Returns the current asynchronous in-game time.

 Returns

 number


The asynchronous in-game time.


"Global/VectorRand"
VectorRand(  ) 
 Description
Returns a random vector whose components are each between -1 and 1

 Returns

 Vector


The random direction vector


"Global/unpack"
unpack( table tbl, number startIndex=1, number endIndex=#tbl ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
This function takes a numeric indexed table and return all the members as a vararg. If specified, it will start at the given index and end at end index.

 Arguments

 table tbl


The table to generate the vararg from.

 Arguments

 number startIndex=1


Which index to start from. Optional.

 Arguments

 number endIndex=#tbl


Which index to end at. Optional, even if you set StartIndex.

 Returns

 vararg


Output values

 Examples
 Example
Prints a vararg

print( unpack( {a, b, c} ) )
Output:

a b c


"Global/UpdateLoadPanel"
UpdateLoadPanel( string javascript ) 
 Description
Runs JavaScript on the loading screen panel (GetLoadPanel).

 Arguments

 string javascript


JavaScript to run on the loading panel.


"Global/ValidPanel"
ValidPanel( Panel panel ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use IsValid instead
Returns if a panel is safe to use.

 Arguments

 Panel panel


The panel to validate.


"Global/TypeID"
TypeID( any variable ) 
 Description
Gets the associated type ID of the variable.



BUG


This does not work properly with _LOADLIB objects.



 Arguments

 any variable


The variable to get the type ID of.

 Returns

 number


The type ID of the variable. See the TYPE_ Enums.


"gmsave/SaveMap"
gmsave.SaveMap( Player ply ) 
 Description
Saves the map

 Arguments

 Player ply


The player, whose position should be saved for loading the save

 Returns

 string


The encoded to JSON string containing save data


"gmsave/PlayerLoad"
gmsave.PlayerLoad( Player ply, table data ) 
 Description
Sets player position and angles from supplied table

 Arguments

 Player ply


The player to load values for

 Arguments

 table data


A table containing Origin and Angle keys for position and angles to set.


"gmsave/PlayerSave"
gmsave.PlayerSave( Player ply ) 
 Description
Returns a table containing player position and angles. Used by gmsave.SaveMap.

 Arguments

 Player ply


The player to save

 Returns

 table


A table containing player position ( Origin ) and angles ( Angle )


"Global/UTIL_IsUselessModel"
UTIL_IsUselessModel( string modelName ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use IsUselessModel instead.
Returns whether or not a model is useless by checking that the file path is that of a proper model.
If the string .mdl is not found in the model name, the function will return true.
The function will also return true if any of the following strings are found in the given model name:

 _gesture
 _anim
 _gst
 _pst
 _shd
 _ss
 _posture
 _anm
 ghostanim
 _paths
 _shared
 anim_
 gestures_
 shared_ragdoll_

 Arguments

 string modelName


The model name to be checked

 Returns

 boolean


Whether or not the model is useless


"gmsave/ShouldSaveEntity"
gmsave.ShouldSaveEntity( Entity ent, table t ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns if we should save this entity in a duplication or a map save or not.

 Arguments

 Entity ent


The entity

 Arguments

 table t


A table containing classname key with entities classname.

 Returns

 boolean


Should save entity or not


"gui/EnableScreenClicker"
gui.EnableScreenClicker( boolean enabled ) 
 Description
Enables the mouse cursor without restricting player movement, like using Sandboxs context menu.



BUG


Some CUserCmd functions to return incorrect values will return incorrect values when this function is active


.
 Arguments

 boolean enabled


Whether the cursor should be enabled or not. (true = enable, false = disable)


"Global/xpcall"
xpcall( function func, function errorCallback, vararg arguments ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Returns
7 Examples

7.1 Example




 Description
Attempts to call the first function. If the execution succeeds, this returns true followed by the returns of the function. If execution fails, this returns false and the second function is called with the error message.
Unlike in pcall, the stack is not unwound and can therefore be used for stack analyses with the debug library.



BUG


Using this function with include will break autorefresh.





BUG


This does not stop Error and ErrorNoHalt from sending error messages to the server (if called clientside) or calling the GM:OnLuaError hook. The success boolean returned will always return true and thus you will not get the error message returned. error does not exhibit these behaviours.





BUG


This does not stop errors incurred by include.



 Arguments

 function func


The function to call initially.

 Arguments

 function errorCallback


The function to be called if execution of the first fails; the error message is passed as a string.

You cannot throw an error() from this callback: it will have no effect (not even stopping the callback).

 Arguments

 vararg arguments


Arguments to pass to the initial function.

 Returns

 boolean


Status of the execution; true for success, false for failure.

 Returns

 vararg


The returns of the first function if execution succeeded, otherwise the first return value of the error callback.

 Examples
 Example
Using xpcall to catch an error.

local function test()
	aisj()
end

local function catch( err )
	print( ERROR: , err )
end

print( Output: , xpcall( test, catch ) )
Output:

ERROR: 	lua/wiki/xpcall_example.lua:2: attempt to call global aisj (a nil value)
Output:	false 	nil


"Global/VGUIFrameTime"
VGUIFrameTime(  ) 
 Description
Returns the time in seconds it took to render the VGUI.


"gui/HideGameUI"
gui.HideGameUI(  ) 
 Description
Hides the game menu overlay.


"Global/VisualizeLayout"
VisualizeLayout( Panel panel ) 
 Description
Briefly displays layout details of the given panel on-screen

 Arguments

 Panel panel


Panel to display layout details of


"Global/WorldToLocal"
WorldToLocal( Vector position, Angle angle, Vector newSystemOrigin, Angle newSystemAngles ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Returns


 Description
Translates the specified position and angle into the specified coordinate system.

 Arguments

 Vector position


The position that should be translated from the current to the new system.

 Arguments

 Angle angle


The angles that should be translated from the current to the new system.

 Arguments

 Vector newSystemOrigin


The origin of the system to translate to.

 Arguments

 Angle newSystemAngles


The angles of the system to translate to.

 Returns

 Vector


Local position

 Returns

 Angle


Local angles


"gui/InternalKeyCodePressed"
gui.InternalKeyCodePressed( number key ) 
 Description
Simulates a key press for the given key.

 Arguments

 number key


The key, see KEY_ Enums.


"gui/InternalCursorMoved"
gui.InternalCursorMoved( number deltaX, number deltaY ) 
 Description
Simulates a mouse move with the given deltas.

 Arguments

 number deltaX


The movement delta on the x axis.

 Arguments

 number deltaY


The movement delta on the y axis.


"gmod/GetGamemode"
gmod.GetGamemode(  ) 
 Description
Returns GAMEMODE.

 Returns

 table


GAMEMODE


"gui/ActivateGameUI"
gui.ActivateGameUI(  ) 
 Description
Opens the game menu overlay.


"gmsave/LoadMap"
gmsave.LoadMap( string mapData, Player ply ) 
 Description
Loads a saved map.

 Arguments

 string mapData


The JSON encoded string containing all the map data.

 Arguments

 Player ply


The player to load positions for


"Global/VGUIRect"
VGUIRect( number x, number y, number w, number h ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Creates and returns a DShape rectangle GUI element with the given dimensions.

 Arguments

 number x


X position of the created element

 Arguments

 number y


Y position of the created element

 Arguments

 number w


Width of the created element

 Arguments

 number h


Height of the created element

 Returns

 Panel


DShape element


"gui/InternalKeyCodeReleased"
gui.InternalKeyCodeReleased( number key ) 
 Description
Simulates a key release for the given key.

 Arguments

 number key


The key, see KEY_ Enums.


"Global/WorkshopFileBase"
WorkshopFileBase( string namespace, table requiredTags ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Returns a new WorkshopFileBase element
 Arguments

 string namespace


Namespace for the file base

 Arguments

 table requiredTags


Tags required for a Workshop submission to be interacted with by the filebase

 Returns

 table


WorkshopFileBase element


"gui/InternalKeyCodeTyped"
gui.InternalKeyCodeTyped( number key ) 
 Description
Simulates a key type typing to the specified key.

 Arguments

 number key


The key, see KEY_ Enums.


"gui/InternalKeyTyped"
gui.InternalKeyTyped( number code ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Simulates an ASCII symbol writing.
Use to write text in the chat or in VGUI.
Doesnt work while the main menu is open!

 Arguments

 number code


ASCII code of symbol, see http://www.mikroe.com/img/publication/spa/pic-books/programming-in-basic/chapter/04/fig4-24.gif

 Examples
 Example
Writes Hello every think.

hook.Add( Think,Example,function()
	gui.InternalKeyTyped( 72 )
	gui.InternalKeyTyped( 101 )
	gui.InternalKeyTyped( 108 )
	gui.InternalKeyTyped( 108 )
	gui.InternalKeyTyped( 111 )
end )


"gui/IsConsoleVisible"
gui.IsConsoleVisible(  ) 
 Description
Returns whether the console is visible or not.

 Returns

 boolean


Whether the console is visible or not.


"gui/InternalMouseWheeled"
gui.InternalMouseWheeled( number delta ) 
 Description
Simulates a mouse wheel scroll with the given delta.

 Arguments

 number delta


The amount of scrolling to simulate.


"gui/IsGameUIVisible"
gui.IsGameUIVisible(  ) 
 Description
Returns whenever the game menu overlay ( main menu ) is open or not.

 Returns

 boolean


Whenever the game menu overlay ( main menu ) is open or not


"gui/MouseX"
gui.MouseX(  ) 
 Description
Returns x component of the mouse position.

 Returns

 number


mouseX


"gui/InternalMouseDoublePressed"
gui.InternalMouseDoublePressed( number key ) 
 Description
Simulates a double mouse key press for the given mouse key.

 Arguments

 number key


The key, see MOUSE_ Enums.


"gui/MouseY"
gui.MouseY(  ) 
 Description
Returns y component of the mouse position.

 Returns

 number


mouseY


"gui/ScreenToVector"
gui.ScreenToVector( number x, number y ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Converts the specified screen position to a direction vector local to the players view. A related function is Vector:ToScreen, which translates a 3D position to a screen coordinate.
util.AimVector is a more generic version of this, using a custom view instead of the players current view.

 Arguments

 number x


X coordinate on the screen.

 Arguments

 number y


Y coordinate on the screen.

 Returns

 Vector


Direction

 Examples
 Example
This will do a trace from the mouse position to the world

local tr = util.QuickTrace( LocalPlayer():GetShootPos(), gui.ScreenToVector( gui.MousePos() ),LocalPlayer() )
print( tr.HitPos )
Output:

The worldpos the cursor is pointing at will be printed
 Examples
 Example
Replacement for Player:GetAimVector

print( gui.ScreenToVector( ScrW()/2, ScrH()/2 ) )
Output:

The players current aimvector will be printed


"gui/ShowConsole"
gui.ShowConsole(  ) 
 Description
Shows console in the game UI.

 Examples
 Example
Example from garrysmod\lua\menu\mainmenu.lua that initializes the game UI and shows console if activated.

function PANEL:Init()

	self:Dock( FILL )
	self:SetKeyboardInputEnabled( true )
	self:SetMouseInputEnabled( true )

	self.HTML = vgui.Create( DHTML, self )

	JS_Language( self.HTML )
	JS_Utility( self.HTML )
	JS_Workshop( self.HTML )

	self.HTML:Dock( FILL )
	self.HTML:OpenURL( asset://garrysmod/html/menu.html )
	self.HTML:SetKeyboardInputEnabled( true )
	self.HTML:SetMouseInputEnabled( true )
	self.HTML:SetAllowLua( true )
	self.HTML:RequestFocus()

	ws_save.HTML = self.HTML
	addon.HTML = self.HTML
	demo.HTML = self.HTML

	self:MakePopup()
	self:SetPopupStayAtBack( true )
	
	-- If the console is already open, weve got in its way.
	if ( gui.IsConsoleVisible() ) then
		gui.ShowConsole()
	end

end


"gui/InternalMousePressed"
gui.InternalMousePressed( number key ) 
 Description
Simulates a mouse key press for the given mouse key.

 Arguments

 number key


The key, see MOUSE_ Enums.


"GWEN/CreateTextureBorder"
GWEN.CreateTextureBorder( number x, number y, number w, number h, number left, number top, number right, number bottom, IMaterial source=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Returns
12 Examples

12.1 Example




 Description
Used in derma skins to create a bordered rectangle drawing function from an image. The texture is taken either from last argument or from SKIN.GwenTexture

 Arguments

 number x


The X coordinate on the texture

 Arguments

 number y


The Y coordinate on the texture

 Arguments

 number w


Width of the area on texture

 Arguments

 number h


Height of the area on texture

 Arguments

 number left


Left width of border

 Arguments

 number top


Top width of border

 Arguments

 number right


Right width of border

 Arguments

 number bottom


Bottom width of border

 Arguments

 IMaterial source=nil


Texture of source image to create a bordered rectangle from. Uses SKIN.GwenTexture if not set.

 Returns

 function


The drawing function. Arguments are:

number x - X coordinate for the box
number y - Y coordinate for the box
number w - Width of the box
number h - Height of the box
table clr - Optional color, default is white. Uses the Color structure


 Examples
 Example
Draws a bordered box in the top left corner of the screen using current skins texture.

local paintBox = GWEN.CreateTextureBorder( 384, 32, 31, 31, 4, 4, 4, 4 )
hook.Add( HUDPaint, PaintStuff, function()
    paintBox( 0, 0, 100, 100 )
end )
Output:

If using default skin, it will be a 100x100px transparent blue box in top left corner with solid blue borders.


"GWEN/CreateTextureNormal"
GWEN.CreateTextureNormal( number x, number y, number w, number h ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example




 Description
Used in derma skins to create a rectangle drawing function from an image. The texture of the rectangle will be scaled. The texture is taken from SKIN.GwenTexture

 Arguments

 number x


The X coordinate on the texture

 Arguments

 number y


The Y coordinate on the texture

 Arguments

 number w


Width of the area on texture

 Arguments

 number h


Height of the area on texture

 Returns

 function


The drawing function. Arguments are:

number x - X coordinate for the box
number y - Y coordinate for the box
number w - Width of the box
number h - Height of the box
table clr - Optional color, default is white. Uses the Color structure


 Examples
 Example
Draws a huge checked checkbox in the top left corner of the screen using current skins texture.

local paintBox = GWEN.CreateTextureNormal( 448, 32, 15, 15 )
hook.Add( HUDPaint, PaintStuff, function()
    paintBox( 0, 0, 100, 100 )
end )
Output:

If using default skin, it will be a 100x100px checked checkbox in top left corner of the screen.


"gui/MousePos"
gui.MousePos(  ) 
 Description
Returns the cursors position on the screen

 Returns

 number


mouseX

 Returns

 number


mouseY


"gui/SetMousePos"
gui.SetMousePos( number mouseX, number mouseY ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Use input.SetCursorPos instead.
Sets the cursors position on the screen, relative to the topleft corner of the window

 Arguments

 number mouseX


The X coordinate to move the cursor to.

 Arguments

 number mouseY


The Y coordinate to move the cursor to.


"halo/Add"
halo.Add( table entities, table color, number blurX=2, number blurY=2, number passes=1, boolean additive=true, boolean ignoreZ=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Examples

9.1 Example


10 Examples

10.1 Example




 Description
Applies a halo glow effect to one or multiple entities.



WARNING


Using this function outside of the PreDrawHalos hook can cause instability or crashes.


 Arguments

 table entities


A table of entities to add the halo effect to

 Arguments

 table color


The desired color of the halo. See Color structure

 Arguments

 number blurX=2


The strength of the halos blur on the x axis.

 Arguments

 number blurY=2


The strength of the halos blur on the y axis.

 Arguments

 number passes=1


The number of times the halo should be drawn per frame. Increasing this may hinder player FPS.

 Arguments

 boolean additive=true


Sets the render mode of the halo to additive.

 Arguments

 boolean ignoreZ=false


Renders the halo through anything when set to true.

 Examples
 Example
Adds a halo around all props in the map using an O(n) operation and iterating through unseen objects which can be extremely expensive to process.

hook.Add( PreDrawHalos, AddPropHalos, function()
	halo.Add( ents.FindByClass( prop_physics* ), Color( 255, 0, 0 ), 5, 5, 2 )
end )
Output:


All the props on the map will be rendered with a red halo, a blur amount of 5, and two passes.
 Examples
 Example
Adds a green halo around all admins.

hook.Add( PreDrawHalos, AddStaffHalos, function()
	local staff = {}

	local staffcount = 0

	for _, ply in ipairs( player.GetAll() ) do
		if ( ply:IsAdmin() ) then
			staffcount = staffcount + 1
			staff[ staffcount ] = ply
		end
	end

	if ( staffcount &gt; 0 ) then
		halo.Add( staff, Color( 0, 255, 0 ), 0, 0, 2, true, true )
	end
end )


"halo/RenderedEntity"
halo.RenderedEntity(  ) 
 Description
Returns the entity the halo library is currently rendering the halo for.
The main purpose of this function is to be used in ENTITY:Draw in order not to draw certain parts of the entity when the halo is being rendered, so theres no halo around unwanted entity parts, such as lasers, 3D2D displays, etc.

 Returns

 Entity


If set, the currently rendered entity by the halo library.


"GWEN/TextureColor"
GWEN.TextureColor( number x, number y ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
When used in a material skin, it returns a color value from a point in the skin image.

 Arguments

 number x


X position of the pixel to get the color from.

 Arguments

 number y


Y position of the pixel to get the color from.

 Returns

 table


The color of the point on the skin as a Color structure.


"hook/Remove"
hook.Remove( string eventName, any identifier ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Removes the hook with the supplied identifier from the given event.

 Arguments

 string eventName


The event name.

 Arguments

 any identifier


The unique identifier of the hook to remove, usually a string.

 Examples
 Example
Darkens the players screen for 15 seconds.

hook.Add( HUDPaint, my_hook_identifier, function()
	
	surface.SetDrawColor( 0, 0, 0, 150 )
	surface.DrawRect( 0, 0, ScrW(), ScrH() )
	
end )

timer.Simple( 15, function()

	hook.Remove( HUDPaint, my_hook_identifier )

end )
Output:

After the hook gets removed, the dark overlay doesnt appear anymore.


"gui/InternalMouseReleased"
gui.InternalMouseReleased( number key ) 
 Description
Simulates a mouse key release for the given mouse key.

 Arguments

 number key


The key, see MOUSE_ Enums.


"hook/GetTable"
hook.GetTable(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns a list of all the hooks registered with hook.Add.

 Returns

 table


A table of tables. See below for output example.

 Examples
 Example
Example of output table structure.

PrintTable( hook.GetTable() )
Output:

EntityNetworkedVarChanged:
	NetworkedVars	=	function: 0x1098ef38
EntityRemoved:
	DoDieFunction	=	function: 0x253b2650
	nocollide_fix	=	function: 0x3f934a90
InitPostEntity:
	PersistenceInit	=	function: 0x02b6e2c0
LoadGModSave:
	LoadGModSave	=	function: 0x1098a680
OnEntityCreated:
	map_sethelinpcnode	=	function: 0x3ffe3568
OnViewModelChanged:
	Entity [40][gmod_hands]	=	function: 0x403478a0
PersistenceLoad:
	PersistenceLoad	=	function: 0x10961cd0
PersistenceSave:
	PersistenceSave	=	function: 0x253d8f08
PlayerInitialSpawn:
	PlayerAuthSpawn	=	function: 0x02b63398
PlayerTick:
	TickWidgets	=	function: 0x10986c40
PostDrawEffects:
	RenderWidgets	=	function: 0x10979af8
ShutDown:
	SavePersistenceOnShutdown	=	function: 0x10950c18


"gui/OpenURL"
gui.OpenURL( string url ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Opens specified URL in the steam overlay browser. The URL has to start with either http:// or https://



NOTE


User will be asked for confirmation before the website will open.




BUG


You cant click the confirmation if a modal panel has focus.



 Arguments

 string url


URL to open

 Examples
 Example
Opens a page when a button is clicked.

local button = vgui.Create( DButton )
button:SetSize( 125, 90 )
button:Center() 
button:SetText( Join our Steam Group! )
button.DoClick = function()
    gui.OpenURL( http://steamcommunity.com/groups/glua )
end


"hook/Add"
hook.Add( string eventName, any identifier, function func ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example


6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Add a hook to be called upon the given event occurring.

 Arguments

 string eventName


The event to hook on to, see GM Hooks and Sandbox Hooks

 Arguments

 any identifier


The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier should be unique so that you do not accidentally override some other mods hook, unless thats what you are trying to do.
The identifier can be either a string, or a table/object with an IsValid function defined such as an Entity or Panel. numbers and booleans, for example, are not allowed.

If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as its valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.

 Arguments

 function func


The function to be called, arguments given to it depend on the hook.



WARNING


Returning any value besides nil from the hooks function will stop other hooks of the same event down the loop from being executed. Only return a value when absolutely necessary and when you know what you are doing.It WILL break other addons.



 Examples
 Example
This will hook onto the Think event with the function onThink, printing to the console whenever the event occurs.

local function onThink()
	print( onThink has been called )
end

hook.Add( Think, Some unique name, onThink )
Output:

onThink has been called repeating continuously.
 Examples
 Example
This works the same as above, but defines the function inside hook.Add rather than above it.

hook.Add( Think, Another unique name, function()
	print( Think has been called )
end )
Output:

Think has been called repeating continuously.
 Examples
 Example
This code demonstrates how you can add a table function with a self argument, without the use of a wrapper function

local myTable = {}

function myTable:IsValid()
    return true
end

function myTable:PlayerInitialSpawn( ply )
    print( CustomHook, self, ply )
end

hook.Add( CustomHook , myTable , myTable.PlayerInitialSpawn )
hook.Run( CustomHook )
Output:

CustomHook table: 0x00000000 Player [1][PotatoMan]


"halo/Render"
halo.Render( table entry ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Renders a halo according to the specified table, only used internally, called from a PostDrawEffects hook added by the halo library
 Arguments

 table entry


Table with info about the halo to draw.


"hook/Call"
hook.Call( string eventName, table gamemodeTable, vararg args ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Calls all hooks associated with the given event until one returns something other than nil, and then returns that data.
In almost all cases, you should use hook.Run instead - it calls hook.Call internally but supplies the gamemode table by itself, making your code neater.

 Arguments

 string eventName


The event to call hooks for

 Arguments

 table gamemodeTable


If the gamemode is specified, the gamemode hook within will be called, otherwise not

 Arguments

 vararg args


The arguments to be passed to the hooks

 Returns

 vararg


Return data from called hooks. Limited to 6 return values

 Examples
 Example
Runs function DoSomething, which eventually calls the event DoneDoingSomething, triggering the hooked function DoSomethingElse.

function DoSomething()
    --Does something
    hook.Call( DoneDoingSomething )
end

function DoSomethingElse()
    --Does something else, once the hook DoneDoingSomething is called.
    print( Done! )
end
hook.Add( DoneDoingSomething, Does something else, DoSomethingElse )

DoSomething()
Output:

Done!
 Examples
 Example
You can also make custom functions controllable via hooks.

function MakeCheese()
    local shouldMakeCheese = hook.Call( MakeCheezPleez )

    if ( shouldMakeCheese ) then
        print( yay )
    else
        print( nay )
    end
end

function MakeCheeseOrNot()
    if ( #player.GetAll() &gt;= 1 ) then
        return true
    else
        return false
    end
end
hook.Add( MakeCheezPleez, Does something else, MakeCheeseOrNot )

MakeCheese()
Output:

If there is players in the server, we print yay. If there isnt, we print nay


"hook/Run"
hook.Run( string eventName, vararg args ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Calls hooks associated with the given event.
Calls all hooks until one returns something other than nil and then returns that data.
If no hook returns any data, it will try to call the GAMEMODE:&lt;eventName&gt; alternative, if one exists.
This function internally calls hook.Call.
See also: gamemode.Call - same as this, but does not call hooks if the gamemode hasnt defined the function.

 Arguments

 string eventName


The event to call hooks for

 Arguments

 vararg args


The arguments to be passed to the hooks

 Returns

 any


Returned data from called hooks


"http/Fetch"
http.Fetch( string url, function onSuccess=nil, function onFailure=nil, table headers={} ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Launches a GET request.

 Arguments

 string url


The URL of the website to fetch.

 Arguments

 function onSuccess=nil


Function to be called on success. Arguments are

 string body
 string size - equal to string.len(body)
 table headers
 number code - The HTTP success code


 Arguments

 function onFailure=nil


Function to be called on failure. Arguments are

 string error - The error message


 Arguments

 table headers={}


KeyValue table for headers

 Examples
 Example
Shows the typical usage to get the HTML of a webpage.

local TheReturnedHTML =  -- Blankness

http.Fetch( http://www.google.com,
	function( body, len, headers, code )
		-- The first argument is the HTML we asked for.
		TheReturnedHTML = body
	end,
	function( error )
		-- We failed. =( 
	end
 )
Output:

If it successfully fetched the page, the variable TheReturnedHTML should contain the returned HTML in plain text.


"hammer/SendCommand"
hammer.SendCommand( string cmd ) 
Contents

1 Description
2 Arguments

2.1 List of commands


3 Returns
4 Examples

4.1 Example




 Description
Sends command to Hammer, if Hammer is running with the current map loaded.

 Arguments

 string cmd


Command to send including arguments
All commands are in the format command var1 var2 etc
All commands that pick an entity with x y z , must use the exact position including decimals. i.e. -354.4523 123.4 -1224.325452 

 List of commands
session_begin mapName mapVersion - Starts a hammer edit, locking the editor. mapName is the current map without path or suffix, mapVersion is the current version in the .vmf file
session_end - Ends a hammer edit, unlocking the editor.
map_check_version mapName mapVersion - This only works after session_begin, so youd know the right version already and this only returns ok, this function is apparently useless
entity_create entityClass x y z - Creates an entity of entityClass at position x y z 
entity_delete entityClass x y z - Deletes an entity of entityClass at position x y z 
entity_set_keyvalue entityClass x y z key value - Sets the KeyValue pair of an entity of entityClass at x y z. The Key name and Value String must be in quotes.
entity_rotate_incremental entityClass x y z incX incY incZ - Rotates an entity of entityClass at x y z by incX incY incZ
node_create nodeClass nodeID x y z - Creates an AI node of nodeClass with nodeID at x y z you should keep nodeID unique or you will have issues
node_delete nodeID - Deletes node(s) with nodeID, this will delete multiple nodes if they have the same nodeID
nodelink_create startNodeID endNodeID - Creates a link between AI nodes startNodeID and endNodeID

nodelink_delete startNodeID endNodeID - Removes a link between AI nodes startNodeID and endNodeID

 Returns

 string


Returns ok if command succeeded otherwise returns badcommand.

All changes only happen in hammer, there is *NO* in game representation/feedback

 Examples
 Example
A hammer function library I wrote while testing all these functions.
Please feel free to use this library as-is or with modification.

if ( !SERVER ) then return end
-- Hammer Editor Lua Library
-- By Malcolm Greene Jr ( Fantym420 )
 
-- Allows easy access to the hammer editor commands from lua code
-- All commands return ok if ( they worked and badcommand if ( they dont
-- All changes only show up in hammer, so if ( you want to see stuff in game you must
-- write your own ghost entites and such.

hammerLib = {}

hammerLib.mapName = game.GetMap() -- Get the map name
hammerLib.vBSPMapVer = game.GetMapVersion() -- This is the vbsp map version, we need the vmf map version
hammerLib.mapVer = hammerLib.vBSPMapVer -- place holder value findGoodVer will find the current vmf version via trial and error

-- returns a vector string with spaces the way hammer likes it
function hammerLib.vectorToString( vec )

	return tostring( vec.x ) ..   .. tostring( vec.y ) ..   .. tostring( vec.z )

end

-- tries to start a session using the current version, if ( it fails it tries the next
-- if ( it cant find it in 20 tries you should probably compile your map before edititng more
function hammerLib.findGoodVer()
	
	local verInc = 0
	local result = 
	
	for verInc = 0, 20 do 
	
		hammerLib.mapVer = hammerLib.vBSPMapVer + verInc
		
		result = hammerLib.startSession()
		
		if ( result == ok ) then
			break
		end
		
		if ( verInc == 20 ) then
			print( Good Version Not Found, Please Re-Compile your map!!! )
		end
	end
	
	hammerLib.endSession()
	
end

-- simple wrapper for hammer.SendCommand so that I could print the debug info
-- un-comment the prints to see the command strings and results in console
function hammerLib.runCommand( cmd )
	
	local result = 
	--print( running  .. cmd )
	result = hammer.SendCommand( cmd )
	--print( cmd ..  result:  .. result )
	return result
	

end

-- Always ran when starting an edit
-- This locks hammer until you issue the session_end command
function hammerLib.startSession()
	
	local cmd = session_begin  .. hammerLib.mapName ..   .. hammerLib.mapVer
	
	return hammerLib.runCommand( cmd )
	
end

-- Ends the session unlocking hammer
function hammerLib.endSession()
	
	local cmd = session_end

	return hammer.SendCommand( cmd )
	
end

-- useless function, it will return ok if ( you give it a good name and version
-- however to run it you must already have a good version because you ran session_start
-- implemented here for thoroughness, if ( you give it no variables it will just use the stored info.
function hammerLib.mapCheckVersion( mcName, mcVer )
	
	mcName = mcName or hammerLib.mapName
	mcVer = mcVer or hammerLib.mapVer
	local cmd = map_check_version  .. mcName ..   .. mcVer
	local result = 
	hammerLib.startSession()
	result = hammerLib.runCommand( cmd )
	hammerLib.endSession()
	
	return result
	
end

-- this creates an entity of type entityClass at the given position
--  I believe this only works with point entites seeing as there is no tie to brush command
function hammerLib.entityCreate( entityClass, entityPos )
	
	if ( entityClass == nil ) or ( entityPos == nil ) then return end
	local cmd = entity_create  .. entityClass ..   .. hammerLib.vectorToString( entityPos )
	local result = 
	hammerLib.startSession()
	result = hammerLib.runCommand( cmd )
	hammerLib.endSession()
	
	return result
	
end

-- this deletes an entity of type entityClass at entityPos
-- NOTE: must be entities **EXACT** position, decimals and all or it fails
function hammerLib.entityDelete( entityClass, entityPos )
	
	if ( entityClass == nil ) or ( entityPos == nil ) then return end
	local cmd = entity_delete  .. entityClass ..   .. hammerLib.vectorToString( entityPos )
	local result = 
	hammerLib.startSession()
	result = hammerLib.runCommand( cmd )
	hammerLib.endSession()
	
	return result
	
end

-- Sets a Key/Value pair on entity of type entityClass at entityPos
-- NOTE: must be entities **EXACT** position, decimals and all or it fails
function hammerLib.entitySetKeyValue( entityClass, entityPos, key, value )
	
	
	if ( entityClass == nil ) or 
	   ( entityPos == nil ) or
	   ( key == nil ) or
	   ( value == nil ) then return end
	   
	local cmd = entity_set_keyvalue  .. entityClass ..   .. hammerLib.vectorToString( entityPos ) ..  \ .. key .. \ \ .. value .. \
	local result = 
	hammerLib.startSession()
	result = hammerLib.runCommand( cmd )
	hammerLib.endSession()
	
	return result
	
end
-- this will rotate an entity of type entityClass( string ) at entityPos( vector ) by rotationInc( vector )
-- NOTE: must be entities **EXACT** position, decimals and all or it fails
function hammerLib.entityRotateIncremental( entityClass, entityPos, rotationInc )
	
	if ( entityClass == nil ) or ( entityPos == nil ) then return end
	local cmd = entity_rotate_incremental  .. entityClass ..   .. hammerLib.vectorToString( entityPos ) ..   .. hammerLib.vectorToString( rotationInc )
	local result = 
	hammerLib.startSession()
	result = hammerLib.runCommand( cmd )
	hammerLib.endSession()
	
	return result
	
end

-- This creates a node of type nodeClass with an ID of nodeID at nodePos
-- keep nodeID unique, if ( you dont and you use node_delete, it deletes all nodes with the given id
function hammerLib.nodeCreate( nodeClass, nodeID, nodePos )
	
	if ( nodeClass == nil ) or ( nodeID == nil ) or ( nodePos == nil ) then return end
	local cmd = node_create  .. nodeClass ..   .. nodeID ..   .. hammerLib.vectorToString( nodePos )
	local result = 
	hammerLib.startSession()
	result = hammerLib.runCommand( cmd )
	hammerLib.endSession()
	
	return result
	
end
-- deletes node( s ) with the given nodeID, however if ( there are more than one node with the nodeID all 
-- are deleted
function hammerLib.nodeDelete( nodeID )
	
	if ( nodeID == nil ) then return end
	local cmd = node_delete  .. nodeID
	local result = 
	hammerLib.startSession()
	result = hammerLib.runCommand( cmd )
	hammerLib.endSession()
	
	return result
end

-- This creates a link between two nodes, not sure if ( theres a limit no number of links
-- so far it does at least 2 per node
function hammerLib.nodeLinkCreate( node1ID, node2ID )
	
	if ( node1ID == nil ) or ( node2ID == nil ) then return end
	local cmd = nodelink_create  .. node1ID ..   .. node2ID
	local result = 
	hammerLib.startSession()
	result = hammerLib.runCommand( cmd )
	hammerLib.endSession()
	
	return result
	
end

-- This deletes a connection between two nodes
function hammerLib.nodeLinkDelete( node1ID, node2ID )
	
	if ( node1ID == nil ) or ( node2ID == nil ) then return end
	local cmd = nodelink_delete  .. node1ID ..   .. node2ID
	local result = 
	hammerLib.startSession()
	result = hammerLib.runCommand( cmd )
	hammerLib.endSession()
	
	return result
	
end

-- All loaded, run findGoodVer to store the current vmf version
hammerLib.findGoodVer()


"GWEN/CreateTextureCentered"
GWEN.CreateTextureCentered( number x, number y, number w, number h ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example




 Description
Used in derma skins to create a rectangle drawing function from an image. The rectangle will not be scaled, but instead it will be drawn in the center of the box. The texture is taken from SKIN.GwenTexture

 Arguments

 number x


The X coordinate on the texture

 Arguments

 number y


The Y coordinate on the texture

 Arguments

 number w


Width of the area on texture

 Arguments

 number h


Height of the area on texture

 Returns

 function


The drawing function. Arguments are:
number x - X coordinate for the box
number y - Y coordinate for the box
number w - Width of the box
number h - Height of the box
table clr - Optional color, default is white. Uses the Color structure



 Examples
 Example
Draws a box in the top left corner of the screen using current skins texture.

local paintBox = GWEN.CreateTextureCentered( 384, 32, 32, 32 )
hook.Add( HUDPaint, PaintStuff, function()
    paintBox( 0, 0, 100, 100 )
end )
Output:

If using default skin, it will be 32x32 transparent blue box centered inside the 100x100 box.


"IGModAudioChannel/FFT"
IGModAudioChannel:FFT( table tbl, number size ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Visualization protip: For a size N DFT, bin k (1-indexed) corresponds to a frequency of (k - 1) / N * sampleRate.
Visualization protip: Sound energy is proportional to the square of the magnitudes. Adding magnitudes together makes no sense physically, but adding energies does.

 Arguments

 table tbl


The table to output the DFT magnitudes (numbers between 0 and 1) into. Indices start from 1.

 Arguments

 number size


The number of samples to use. See FFT_ Enums

 Returns

 number


The number of frequency bins that have been filled in the output table.


"IGModAudioChannel/EnableLooping"
IGModAudioChannel:EnableLooping( boolean enable ) 
 Description
Enables or disables looping of audio channel, requires noblock flag.

 Arguments

 boolean enable


Enable or disable looping of this audio channel.


"http/Post"
http.Post( string url, table parameters, function onSuccess=nil, function onFailure=nil, table headers={} ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example




 Description
Sends an asynchronous POST request to a HTTP server.
HTTP requests returning a status code &gt;= 400 are still considered a success and will call the onSuccess callback.
The onFailure callback is usually only called on DNS or TCP errors (e.g. the website is unavailable or the domain does not exist)

 Arguments

 string url


The url to of the website to fetch.

 Arguments

 table parameters


The post parameters to be send to the server. Keys and values must be strings.

 Arguments

 function onSuccess=nil


The function called on success: function( string responseText, number contentLength, table responseHeaders, number statusCode )

 Arguments

 function onFailure=nil


The function called on failure: function( string errorMessage )

 Arguments

 table headers={}


KeyValue table for headers

 Examples
 Example
Write a file in PHP, and invoke it from Lua. The output below is written in the file, not in the console.

&lt;?php
	$p = $_POST[p];
	$a = $_POST[a];

	$f = fopen( write.html, w );

	fwrite( $f, This is a test. $p $a\n );

	fclose( $f );
?&gt;
http.Post( http://localhost/post.php, { p = Gmod, a = Test }, function( result )
	if ( result ) then print( Done! ) end
end, function( failed )
	print( failed )
end )
Output:

This is a test. Gmod Test


"IGModAudioChannel/GetAverageBitRate"
IGModAudioChannel:GetAverageBitRate(  ) 
 Description
Returns the average bit rate of the sound channel.

 Returns

 number


The average bit rate of the sound channel.


"IGModAudioChannel/GetBitsPerSample"
IGModAudioChannel:GetBitsPerSample(  ) 
 Description
Retrieves the number of bits per sample of the sound channel.
Doesnt work for mp3 and ogg files.

 Returns

 number


Number of bits per sample, or 0 if unknown.


"IGModAudioChannel/Get3DCone"
IGModAudioChannel:Get3DCone(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Returns


 Description
Returns 3D cone of the sound channel. See IGModAudioChannel:Set3DCone.

 Returns

 number


The angle of the inside projection cone in degrees.

 Returns

 number


The angle of the outside projection cone in degrees.

 Returns

 number


The delta-volume outside the outer projection cone.


"IGModAudioChannel/GetFileName"
IGModAudioChannel:GetFileName(  ) 
 Description
Returns the filename for the sound channel.

 Returns

 string


The file name. This will not be always what you have put into the sound.PlayURL as first argument.


"IGModAudioChannel/GetLength"
IGModAudioChannel:GetLength(  ) 
 Description
Returns the length of sound played by the sound channel.

 Returns

 number


The length of the sound. This value seems to be less then 0 for continuous radio streams.


"IGModAudioChannel/GetPlaybackRate"
IGModAudioChannel:GetPlaybackRate(  ) 
 Description
Returns the playback rate of the sound channel.

 Returns

 number


The current playback rate of the sound channel


"IGModAudioChannel/Get3DFadeDistance"
IGModAudioChannel:Get3DFadeDistance(  ) 
 Description
Returns 3D fade distances of a sound channel.

 Returns

 number


The minimum distance. The channels volume is at maximum when the listener is within this distance

 Returns

 number


The maximum distance. The channels volume stops decreasing when the listener is beyond this distance


"IGModAudioChannel/GetState"
IGModAudioChannel:GetState(  ) 
 Description
Returns the state of a sound channel

 Returns

 number


The state of the sound channel, see GMOD_CHANNEL_ Enums


"IGModAudioChannel/GetTime"
IGModAudioChannel:GetTime(  ) 
 Description
Returns the current time of the sound channel

 Returns

 number


The current time of the stream


"IGModAudioChannel/GetPos"
IGModAudioChannel:GetPos(  ) 
 Description
Returns position of the sound channel

 Returns

 Vector


The position of the sound channel, previously set by IGModAudioChannel:SetPos


"IGModAudioChannel/GetVolume"
IGModAudioChannel:GetVolume(  ) 
 Description
Returns volume of a sound channel

 Returns

 number


The volume of the sound channel


"IGModAudioChannel/GetSamplingRate"
IGModAudioChannel:GetSamplingRate(  ) 
 Description
Returns the sample rate for currently playing sound.

 Returns

 number


The sample rate in MHz. This should always be 44100.


"IGModAudioChannel/IsOnline"
IGModAudioChannel:IsOnline(  ) 
 Description
Returns if the sound channel is streamed from the Internet or not.

 Returns

 boolean


Is online or not.


"IGModAudioChannel/IsBlockStreamed"
IGModAudioChannel:IsBlockStreamed(  ) 
 Description
Returns whether the audio stream is block streamed or not.

 Returns

 boolean


Is the audio stream block streamed or not.


"IGModAudioChannel/Play"
IGModAudioChannel:Play(  ) 
 Description
Starts playing the stream.


"IGModAudioChannel/Set3DCone"
IGModAudioChannel:Set3DCone( number innerAngle, number outerAngle, number outerVolume ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Sets 3D cone of the sound channel.

 Arguments

 number innerAngle


The angle of the inside projection cone in degrees.

Range is from 0 (no cone) to 360 (sphere), -1 = leave current.

 Arguments

 number outerAngle


The angle of the outside projection cone in degrees.

Range is from 0 (no cone) to 360 (sphere), -1 = leave current.

 Arguments

 number outerVolume


The delta-volume outside the outer projection cone.

Range is from 0 (silent) to 1 (same as inside the cone), less than 0 = leave current.

 Examples
 Example
The default values

Channel:Set3DCone( 360, 360, 0 )


"IGModAudioChannel/SetPlaybackRate"
IGModAudioChannel:SetPlaybackRate( number rate ) 
 Description
Sets the playback rate of the sound channel. May not work with high values for radio streams.

 Arguments

 number rate


Playback rate to set to. 1 is normal speed, 0.5 is half the normal speed, etc.


"IGModAudioChannel/IsValid"
IGModAudioChannel:IsValid(  ) 
 Description
Returns if the sound channel is valid or not.

 Returns

 boolean


Is the sound channel valid or not


"IGModAudioChannel/SetPos"
IGModAudioChannel:SetPos( Vector pos, Vector dir=Vector( 0, 0, 0 ) ) 
 Description
Sets position of sound channel in case the sound channel has a 3d option set.

 Arguments

 Vector pos


The position to put the sound into

 Arguments

 Vector dir=Vector( 0, 0, 0 )


The direction of the sound


"IGModAudioChannel/GetLevel"
IGModAudioChannel:GetLevel(  ) 
 Description
Returns the right and left levels of sound played by the sound channel.

 Returns

 number


The left sound level. The value is between 0 and 1.

 Returns

 number


The right sound level. The value is between 0 and 1.


"IGModAudioChannel/Is3D"
IGModAudioChannel:Is3D(  ) 
 Description
Returns if the sound channel is in 3D mode or not.

 Returns

 boolean


Is 3D or not.


"IGModAudioChannel/SetTime"
IGModAudioChannel:SetTime( number secs ) 
 Description
Sets the sound channel to specified time ( Rewind to that position of the song ). Does not work on online radio streams.
Streamed sounds must have noblock parameter for this to work.

 Arguments

 number secs


The time to set the stream to, in seconds.


"IGModAudioChannel/Pause"
IGModAudioChannel:Pause(  ) 
 Description
Pauses the stream. It can be started again using IGModAudioChannel:Play


"IGModAudioChannel/Set3DFadeDistance"
IGModAudioChannel:Set3DFadeDistance( number min, number max ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets 3D fade distances of a sound channel.

 Arguments

 number min


The minimum distance. The channels volume is at maximum when the listener is within this distance.

0 or less = leave current.

 Arguments

 number max


The maximum distance. The channels volume stops decreasing when the listener is beyond this distance.

0 or less = leave current.

 Examples
 Example
The default values.

Channel:Set3DFadeDistance( 200, 1000000000 )


"IGModAudioChannel/IsLooping"
IGModAudioChannel:IsLooping(  ) 
 Description
Returns if the sound channel is looping or not.

 Returns

 boolean


Is looping or not.


"IGModAudioChannel/SetVolume"
IGModAudioChannel:SetVolume( number volume ) 
 Description
Sets the volume of a sound channel

 Arguments

 number volume


Volume to set, a number between 0 and 1


"IGModAudioChannel/Stop"
IGModAudioChannel:Stop(  ) 
 Description
Stop the stream. It can be started again using IGModAudioChannel:Play.



BUG


Calling this invalidates the IGModAudioChannel object rendering it unusable for further functions.


"IMaterial/GetFloat"
IMaterial:GetFloat( string materialFloat ) 
 Description
Returns the specified material value as a float, or nil if the value is not set.

 Arguments

 string materialFloat


The name of the material value.

 Returns

 number


float


"IMaterial/GetColor"
IMaterial:GetColor( number x, number y ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns the color of the specified pixel of the $basetexture, only works for materials created from PNG files.
Basically identical to ITexture:GetColor used on IMaterial:GetTexture( $basetexture ).



BUG


The returned color will not have the color metatable.



 Arguments

 number x


The X coordinate.

 Arguments

 number y


The Y coordinate.

 Returns

 table


The color of the pixel as a Color structure.

 Examples
 Example
Identical functionality.

local m = Material( gui/colors_dark.png )
local t = m:GetTexture( $basetexture )

PrintTable( t:GetColor( 5, 5 ) )
PrintTable( m:GetColor( 5, 5 ) )
Output:

Both printouts will return identical color, which at the time of testing is RGBA - 255, 244, 242, 255.


"IMaterial/GetKeyValues"
IMaterial:GetKeyValues(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Gets all the key values defined for the material.

 Returns

 table


The materials key values.

 Examples
 Example
Example output of this function

PrintTable( Material( pp/add ):GetKeyValues() )
Output:


$alpha=1
$alphatestreference=0
$basetexture=userdata: 0x2e13fc18
$basetexturetransform=[1.00000,0.00000,0.00000,0.00000]
[0.00000,1.00000,0.00000,0.00000]
[0.00000,0.00000,1.00000,0.00000]
[0.00000,0.00000,0.00000,1.00000]
$color=1.000000 1.000000 1.000000
$color2=1.000000 1.000000 1.000000
$depthblend=0
$depthblendscale=50
$detailblendfactor=1
$detailblendmode=0
$detailframe=0
$detailscale=4
$detailtexturetransform=[1.00000,0.00000,0.00000,0.00000]
[0.00000,1.00000,0.00000,0.00000]
[0.00000,0.00000,1.00000,0.00000]
[0.00000,0.00000,0.00000,1.00000]
$distancealpha=0
$distancealphafromdetail=0
$edgesoftnessend=0.5
$edgesoftnessstart=0.5
$envmapcontrast=0
$envmapframe=0
$envmapmaskframe=0
$envmapmasktransform=[1.00000,0.00000,0.00000,0.00000]
[0.00000,1.00000,0.00000,0.00000]
[0.00000,0.00000,1.00000,0.00000]
[0.00000,0.00000,0.00000,1.00000]
$envmapsaturation=1
$envmaptint=1.000000 1.000000 1.000000
$flags=32896
$flags2=262144
$flags_defined=32896
$flags_defined2=0
$flashlighttexture=userdata: 0x2e13fe68
$flashlighttextureframe=0
$frame=0
$gammacolorread=0
$glow=0
$glowalpha=1
$glowcolor=1.000000 1.000000 1.000000
$glowend=0
$glowstart=0
$glowx=0
$glowy=0
$hdrcolorscale=1
$linearwrite=0
$outline=0
$outlinealpha=1
$outlinecolor=1.000000 1.000000 1.000000
$outlineend0=0
$outlineend1=0
$outlinestart0=0
$outlinestart1=0
$phong=0
$phongalbedotint=0
$phongboost=0
$phongexponent=0
$phongfresnelranges=0.000000 0.000000 0.000000
$phongtint=0.000000 0.000000 0.000000
$receiveflashlight=0
$scaleedgesoftnessbasedonscreenres=0
$scaleoutlinesoftnessbasedonscreenres=0
$separatedetailuvs=0
$softedges=0
$srgbtint=1.000000 1.000000 1.000000
$vertexalphatest=0


"IMaterial/GetInt"
IMaterial:GetInt( string materialInt ) 
 Description
Returns the specified material value as a int, rounds the value if its a float, or nil if the value is not set.

 Arguments

 string materialInt


The name of the material integer.

 Returns

 number


int


"IMaterial/GetMatrix"
IMaterial:GetMatrix( string materialMatrix ) 
 Description
Returns the specified material matrix as a int, or nil if the value is not set or is not a matrix.

 Arguments

 string materialMatrix


The name of the material matrix.

 Returns

 VMatrix


matrix


"IMaterial/GetName"
IMaterial:GetName(  ) 
 Description
Returns the name of the material, in most cases the path.

 Returns

 string


Material name/path


"IMaterial/GetString"
IMaterial:GetString( string materialString ) 
 Description
Returns the specified material string, or nil if the value is not set or if the value can not be converted to a string.

 Arguments

 string materialString


The name of the material string.

 Returns

 string


The value as a string


"IMaterial/GetTexture"
IMaterial:GetTexture( string param ) 
 Description
Returns an ITexture based on the passed shader parameter.

 Arguments

 string param



 Returns

 ITexture


The value of the shader parameter. Returns nothing if the param doesnt exist.


"IMaterial/Recompute"
IMaterial:Recompute(  ) 
 Description
Recomputes the materials snapshot. This needs to be called if you have changed variables on your material and it isnt changing.
Be careful though - this function is slow - so try to call it only when needed!


"IMaterial/SetMatrix"
IMaterial:SetMatrix( string materialMatrix, VMatrix matrix ) 
 Description
Sets the specified material value to the specified matrix, does nothing on a type mismatch.

 Arguments

 string materialMatrix


The name of the material int.

 Arguments

 VMatrix matrix


The new matrix.


"IMaterial/GetVectorLinear"
IMaterial:GetVectorLinear( string materialVector ) 
 Description
Returns the specified material linear color vector, or nil if the value is not set.
See https://en.wikipedia.org/wiki/Gamma_correction
See also IMaterial:GetVector

 Arguments

 string materialVector


The name of the material vector.

 Returns

 Vector


The linear color vector


"IMaterial/IsError"
IMaterial:IsError(  ) 
 Description
Returns whenever the material was not loaded successfully.

 Returns

 boolean


isError


"IMaterial/GetVector"
IMaterial:GetVector( string materialVector ) 
 Description
Returns the specified material vector, or nil if the value is not set.
See also IMaterial:GetVectorLinear

 Arguments

 string materialVector


The name of the material vector.

 Returns

 Vector


The color vector


"IMaterial/SetInt"
IMaterial:SetInt( string materialInt, number int ) 
 Description
Sets the specified material value to the specified int, does nothing on a type mismatch.

 Arguments

 string materialInt


The name of the material int.

 Arguments

 number int


The new int value.


"IMaterial/SetShader"
IMaterial:SetShader( string shaderName ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

This function does nothingThe functionality of this function was removed due to the amount of crashes it caused.
 Arguments

 string shaderName


Name of the shader


"IMaterial/Height"
IMaterial:Height(  ) 
 Description
Returns the height of the member texture set for $basetexture.

 Returns

 number


height


"IMaterial/SetFloat"
IMaterial:SetFloat( string materialFloat, number float ) 
 Description
Sets the specified material float to the specified float, does nothing on a type mismatch.

 Arguments

 string materialFloat


The name of the material float.

 Arguments

 number float


The new float value.


"IMaterial/SetTexture"
IMaterial:SetTexture( string materialTexture, ITexture texture ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Sets the specified material texture to the specified texture, does nothing on a type mismatch.

 Arguments

 string materialTexture


The name of the keyvalue on the material to store the texture on.

 Arguments

 ITexture texture


The new texture. This can also be a string, the name of the new texture.

 Examples
 Example
Example usage of this function.

local blur_mat = Material( pp/bokehblur )

blur_mat:SetTexture( $basetexture, render.GetScreenEffectTexture() )


 Examples
 Example
Equivalent of Example 1, demonstrating the use of a textures name.

local blur_mat = Material( pp/bokehblur )

blur_mat:SetTexture( $basetexture, _rt_fullframefb )


"IMaterial/SetVector"
IMaterial:SetVector( string MaterialVector, Vector vec ) 
 Description
Sets the specified material vector to the specified vector, does nothing on a type mismatch.

 Arguments

 string MaterialVector


The name of the material vector.

 Arguments

 Vector vec


The new vector.


"IMaterial/SetString"
IMaterial:SetString( string materialString, string string ) 
 Description
Sets the specified material value to the specified string, does nothing on a type mismatch.

 Arguments

 string materialString


The name of the material string.

 Arguments

 string string


The new string.


"IMaterial/Width"
IMaterial:Width(  ) 
 Description
Returns the width of the member texture set for $basetexture.

 Returns

 number


width


"IMaterial/SetUndefined"
IMaterial:SetUndefined( string materialValueName ) 
 Description
Unsets the value for the specified material value.

 Arguments

 string materialValueName


The name of the material value to be unset.


"IMaterial/GetShader"
IMaterial:GetShader(  ) 
 Description
Returns the name of the materials shader.



BUG


This function does not work serverside on Linux SRCDS.



 Returns

 string


shaderName


"input/CheckKeyTrapping"
input.CheckKeyTrapping(  ) 
 Description
Returns the last key captured by key trapping.

 Returns

 number


The key, see KEY_ Enums


"IMesh/Draw"
IMesh:Draw(  ) 
 Description
Renders the mesh with the active matrix.


"input/GetKeyCode"
input.GetKeyCode( string button ) 
 Description
Gets the button code from a button name. This is opposite of input.GetKeyName.

 Arguments

 string button


The internal button name, such as e or shift.

 Returns

 number


The button code, see BUTTON_CODE_ Enums.


"IMesh/BuildFromTriangles"
IMesh:BuildFromTriangles( table vertexes ) 
 Description
Builds the mesh from a table mesh vertexes.

 Arguments

 table vertexes


A table consisting of MeshVertex structures.


"input/GetCursorPos"
input.GetCursorPos(  ) 
 Description
Returns the cursors position on the screen

 Returns

 number


mouseX

 Returns

 number


mouseY


"input/IsKeyDown"
input.IsKeyDown( number key ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Gets whether a key is down

 Arguments

 number key


The key, see KEY_ Enums.

 Returns

 boolean


Is the key down

 Examples
 Example
Show cursor if you press alt.

hook.Add( Think, BM_Clients_Key, function()
   gui.EnableScreenClicker( input.IsKeyDown( KEY_LALT ) )
end )
// Note this may prevent the cursor from naturally appearing without alt


"input/IsControlDown"
input.IsControlDown(  ) 
 Description
Returns whether a control key is being pressed

 Returns

 boolean


Is Ctrl key down or not


"input/GetKeyName"
input.GetKeyName( number button ) 
 Description
Gets the button name from a numeric button code. The name needs to be translated with language.GetPhrase before being displayed.



NOTE


Despite the name of the function, this also works for the full range of keys in BUTTON_CODE_ Enums.


 Arguments

 number button


The button, see BUTTON_CODE_ Enums.

 Returns

 string


Button name.


"IMesh/Destroy"
IMesh:Destroy(  ) 
 Description
Deletes the mesh and frees the memory used by it..


"input/IsButtonDown"
input.IsButtonDown( number button ) 
 Description
Gets whether the specified button code is down.
Unlike input.IsKeyDown this can also detect joystick presses from JOYSTICK_ Enums

 Arguments

 number button


The button, valid values are in the range of BUTTON_CODE_ Enums.

 Returns

 boolean


Is the button down


"Entity/SetMoveType"
Entity:SetMoveType( number movetype ) 
 Description
Sets the entitys move type. This should be called before initializing the physics object on the entity, unless it will override SetMoveType such as Entity:PhysicsInitBox.
Despite existing on client, it doesnt actually do anything on client.

 Arguments

 number movetype


The new movetype, see MOVETYPE_ Enums


"input/IsMouseDown"
input.IsMouseDown( number mouseKey ) 
 Description
Gets whether a mouse button is down

 Arguments

 number mouseKey


The key, see MOUSE_ Enums

 Returns

 boolean


Is the key down


"input/IsKeyTrapping"
input.IsKeyTrapping(  ) 
 Description
Returns whether key trapping is activate and the next key press will be captured.

 Returns

 boolean


Whether key trapping active or not


"input/LookupKeyBinding"
input.LookupKeyBinding( number key ) 
 Description
Returns the bind string that the given key is bound to.

 Arguments

 number key


Key from BUTTON_CODE_ Enums

 Returns

 string


The bind string of the given key.


"input/StartKeyTrapping"
input.StartKeyTrapping(  ) 
 Description
Begins waiting for a key to be pressed so we can save it for input.CheckKeyTrapping. Used by the DBinder.


"input/IsShiftDown"
input.IsShiftDown(  ) 
 Description
Gets whether a shift key is being pressed

 Returns

 boolean


isDown


"input/WasKeyPressed"
input.WasKeyPressed( number key ) 
 Description
Returns whether a key was initially pressed in the same frame this function was called.
This function only works in Move hooks, and will detect key presses even in main menu or when a typing in a text field.

 Arguments

 number key


The key, see KEY_ Enums.

 Returns

 boolean


True if the key was initially pressed the same frame that this function was called, false otherwise.


"IRestore/EndBlock"
IRestore:EndBlock(  ) 
 Description
Ends current data block started with IRestore:StartBlock and returns to the parent block.
To avoid all sorts of errors, you must end all blocks you start.


"input/WasKeyTyped"
input.WasKeyTyped( number key ) 
 Description
Returns whether the key is being held down or not.
This function only works in Move hooks, and will detect key events even in main menu or when a typing in a text field.

 Arguments

 number key


The key to test, see KEY_ Enums

 Returns

 boolean


Whether the key is being held down or not.


"input/WasMouseDoublePressed"
input.WasMouseDoublePressed( number button ) 
 Description
Returns whether a mouse key was double pressed in the same frame this function was called.
If this function returns true, input.WasMousePressed will return false.
This function only works in Move hooks, and will detect mouse events even in main menu or when a typing in a text field.

 Arguments

 number button


The mouse button to test, see MOUSE_ Enums

 Returns

 boolean


Whether the mouse key was double pressed or not.


"input/SetCursorPos"
input.SetCursorPos( number mouseX, number mouseY ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets the cursors position on the screen, relative to the topleft corner of the window

 Arguments

 number mouseX


X coordinate for mouse position

 Arguments

 number mouseY


Y coordinate for mouse position

 Examples
 Example
Makes the users cursor circle their screen

hook.Add( HUDPaint, CircleScreen, function()
	input.SetCursorPos( ScrW()/2+math.sin( CurTime() )*ScrW()/2, ScrH()/2+math.cos( CurTime() )*ScrH()/2 )
end )


"input/SelectWeapon"
input.SelectWeapon( Weapon weapon ) 
 Description

 Arguments

 Weapon weapon


The weapon entity to switch to.


"input/WasKeyReleased"
input.WasKeyReleased( number key ) 
 Description
Returns whether a key was released in the same frame this function was called.
This function only works in Move hooks, and will detect key releases even in main menu or when a typing in a text field.

 Arguments

 number key


The key, see KEY_ Enums.

 Returns

 boolean


True if the key was released the same frame that this function was called, false otherwise.


"input/LookupBinding"
input.LookupBinding( string binding, boolean exact=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Gets the match uppercase key for the specified binding.

 Arguments

 string binding


The binding name

 Arguments

 boolean exact=false


True if the binding should match exactly

 Returns

 string


The first key found with that binding or no value if no key with given binding was found.

See also input.GetKeyCode.

 Examples
 Example
Demonstrates usage of this function and its arguments.

print( input.LookupBinding( +use ) )
print( input.LookupBinding( use ) )
print( input.LookupBinding( +use, true ) )
print( input.LookupBinding( use, true ) )
Output:

e
e
e
no value


"IRestore/ReadFloat"
IRestore:ReadFloat(  ) 
 Description
Reads next bytes from the restore object as a floating point number.

 Returns

 number


The read floating point number.


"input/WasMousePressed"
input.WasMousePressed( number key ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns whether a mouse key was initially pressed in the same frame this function was called.
If input.WasMouseDoublePressed returns true, this function will return false.
This function only works in Move hooks, and will detect mouse events even in main menu or when a typing in a text field.

 Arguments

 number key


The key, see MOUSE_ Enums

 Returns

 boolean


True if the mouse key was initially pressed the same frame that this function was called, false otherwise.

 Examples
 Example
Example usage

hook.Add( CreateMove, fafawefafwf, function()
	if ( input.WasMousePressed( MOUSE_LEFT ) ) then print( Left mouse button was pressed ) end
end )


"IRestore/ReadAngle"
IRestore:ReadAngle(  ) 
 Description
Reads next bytes from the restore object as an Angle.

 Returns

 Angle


The angle that has been read


"IRestore/ReadEntity"
IRestore:ReadEntity(  ) 
 Description
Reads next bytes from the restore object as an Entity.

 Returns

 Entity


The entity that has been read.


"IRestore/ReadInt"
IRestore:ReadInt(  ) 
 Description
Reads next bytes from the restore object as an integer number.

 Returns

 number


The read integer number.


"input/WasMouseReleased"
input.WasMouseReleased( number key ) 
 Description
Returns whether a mouse key was released in the same frame this function was called.
This function only works in Move hooks, and will detect mouse events even in main menu or when a typing in a text field.


Next Update ChangeThis feature is only available in the next update.
 Arguments

 number key


The key to test, see MOUSE_ Enums

 Returns

 boolean


True if the mouse key was released the same frame that this function was called, false otherwise.


"IRestore/ReadBool"
IRestore:ReadBool(  ) 
 Description
Reads next bytes from the restore object as a boolean.

 Returns

 boolean


The boolean that has been read


"IRestore/ReadVector"
IRestore:ReadVector(  ) 
 Description
Reads next bytes from the restore object as a Vector.

 Returns

 Vector


The read vector.


"IRestore/ReadString"
IRestore:ReadString(  ) 
 Description
Reads next bytes from the restore object as a string.

 Returns

 string


The read string. Maximum length is 1024.


"ISave/EndBlock"
ISave:EndBlock(  ) 
 Description
Ends current data block started with ISave:StartBlock and returns to the parent block.
To avoid all sorts of errors, you must end all blocks you start.


"IRestore/StartBlock"
IRestore:StartBlock(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Loads next block of data to be read inside current block. Blocks must be ended with IRestore:EndBlock.

 Returns

 string


The name of the next data block to be read.

 Examples
 Example
Example usage.

saverestore.AddRestoreHook( HookNameHere, function( save )
	local name = save:StartBlock()
	local myval = save:ReadString()
	save:EndBlock()

	print( name, myval )
end )
Output:

With example from ISave:StartBlock
Test myawesomestring


"ISave/WriteAngle"
ISave:WriteAngle( Angle ang ) 
 Description
Writes an Angle to the save object.

 Arguments

 Angle ang


The angle to write.


"ISave/WriteBool"
ISave:WriteBool( boolean bool ) 
 Description
Writes a boolean to the save object.

 Arguments

 boolean bool


The boolean to write.


"ISave/WriteFloat"
ISave:WriteFloat( number float ) 
 Description
Writes a floating point number to the save object.

 Arguments

 number float


The floating point number to write.


"ISave/WriteInt"
ISave:WriteInt( number int ) 
 Description
Writes an integer number to the save object.

 Arguments

 number int


The integer number to write.


"ISave/StartBlock"
ISave:StartBlock( string name ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Starts a new block of data that you can write to inside current block. Blocks must be ended with ISave:EndBlock.

 Arguments

 string name


Name of the new block. Used for determining which block is which, returned by IRestore:StartBlock during game load.

 Examples
 Example
Example usage

saverestore.AddSaveHook( HookNameHere, function( save )
	save:StartBlock( Test )
		save:WriteString( myawesomestring )
	save:EndBlock()
end )


"ITexture/GetMappingHeight"
ITexture:GetMappingHeight(  ) 
 Description
Returns the true unmodified height of the texture.

 Returns

 number


height


"ISave/WriteVector"
ISave:WriteVector( Vector vec ) 
 Description
Writes a Vector to the save object.

 Arguments

 Vector vec


The vector to write.


"ITexture/GetColor"
ITexture:GetColor( number x, number y ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns the color of the specified pixel, only works for textures created from PNG files.



BUG


The returned color will not have the color metatable.



 Arguments

 number x


The X coordinate.

 Arguments

 number y


The Y coordinate.

 Returns

 table


The color of the pixel as a Color structure.


"ITexture/Download"
ITexture:Download(  ) 
 Description
Invokes the generator of the texture. Reloads file based textures from disk and clears render target textures.


"ITexture/Height"
ITexture:Height(  ) 
 Description
Returns the modified height of the texture, this value may be affected by mipmapping and other factors.

 Returns

 number


height


"ITexture/IsError"
ITexture:IsError(  ) 
 Description
Returns whenever the texture is invalid or not.

 Returns

 boolean


isError


"IVideoWriter/AddFrame"
IVideoWriter:AddFrame( number frameTime, boolean downsample ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Adds the current framebuffer to the video stream.

 Arguments

 number frameTime


Usually set to what FrameTime is, or simply 1/fps.

 Arguments

 boolean downsample


If true it will downsample the whole screenspace to the videos width and height, otherwise it will just record from the top left corner to the given width and height and therefor not the whole screen.

 Examples
 Example
If ActiveVideo was a IVideoWriter, it would record the screen every frame.

--Taken from /lua/menu/video.lua

hook.Add( DrawOverlay, CaptureFrames, function()

	if ( !ActiveVideo ) then return end
	
	ActiveVideo:AddFrame( FrameTime(), true );

end )


"ITexture/Width"
ITexture:Width(  ) 
 Description
Returns the modified width of the texture, this value may be affected by mipmapping and other factors.

 Returns

 number


width


"IVideoWriter/Height"
IVideoWriter:Height(  ) 
 Description
Returns the height of the video stream.

 Returns

 number


height


"ISave/WriteEntity"
ISave:WriteEntity( Entity ent ) 
 Description
Writes an Entity to the save object.

 Arguments

 Entity ent


The entity to write.


"IVideoWriter/Finish"
IVideoWriter:Finish(  ) 
 Description
Ends the video recording and dumps it to disk.


"ITexture/GetMappingWidth"
ITexture:GetMappingWidth(  ) 
 Description
Returns the true unmodified width of the texture.

 Returns

 number


width


"IVideoWriter/Width"
IVideoWriter:Width(  ) 
 Description
Returns the width of the video stream.

 Returns

 number


width


"ISave/WriteString"
ISave:WriteString( string str ) 
 Description
Writes a string to the save object.

 Arguments

 string str


The string to write. Maximum length is 1024.


"jit/arch"
Not a function
This is NOT a function, its a variable containing the target architecture name: x86, x64, arm, ppc, ppcspe, or mips. This will be x86 in GMod.


"ITexture/GetName"
ITexture:GetName(  ) 
 Description
Returns the name of the texture, in most cases the path.

 Returns

 string


name


"jit/attach"
jit.attach( function callback, string event ) 
 Description
You can attach callbacks to a number of compiler events with jit.attach. The callback can be called:

when a function has been compiled to bytecode (bc);
when trace recording starts or stops (trace);
as a trace is being recorded (record);
or when a trace exits through a side exit (texit).

Set a callback with jit.attach(callback, event) and clear the same callback with jit.attach(callback)



WARNING


This function isnt officially documented on LuJIT wiki, use it at your own risk.


 Arguments

 function callback


The callback function.
The arguments passed to the callback depend on the event being reported:

bc:

function func - The function thats just been recorded

trace:

string what - description of the trace event: flush, start, stop, abort. Available for all events.
number tr - The trace number. Not available for flush.
function func - The function being traced. Available for start and abort.
number pc - The program counter - the bytecode number of the function being recorded (if this a Lua function). Available for start and abort.
number otr - start: the parent trace number if this is a side trace, abort: abort code
string oex - start: the exit number for the parent trace, abort: abort reason (string)

record:

number tr - The trace number. Not available for flush.
function func - The function being traced. Available for start and abort.
number pc - The program counter - the bytecode number of the function being recorded (if this a Lua function). Available for start and abort.
number depth - The depth of the inlining of the current bytecode.

texit:

number tr - The trace number. Not available for flush.
number ex - The exit number
number ngpr - The number of general-purpose and floating point registers that are active at the exit.

number nfpr - The number of general-purpose and floating point registers that are active at the exit.

 Arguments

 string event


The event to hook into.


"jit/on"
jit.on(  ) 
 Description
Enables LuaJIT Lua compilation.


"jit/flush"
jit.flush(  ) 
 Description
Flushes the whole cache of compiled code.


"IVideoWriter/SetRecordSound"
IVideoWriter:SetRecordSound( boolean record ) 
 Description
Sets whether to record sound or not.

 Arguments

 boolean record


Record.


"jit/off"
jit.off(  ) 
 Description
Disables LuaJIT Lua compilation.


"jit/util.funcbc"
jit.util.funcbc( function func, number pos ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns


 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.Returns bytecode of a function at a position.
 Arguments

 function func


Function to retrieve bytecode from.

 Arguments

 number pos


Position of the bytecode to retrieve.

 Returns

 number


bytecode instruction

 Returns

 number


bytecode opcode


"jit/os"
Not a function
This is NOT a function, its a variable containing the target OS name: Windows, Linux, OSX, BSD, POSIX or Other.


"jit/status"
jit.status(  ) 
 Description
Returns the status of the JIT compiler and the current optimizations enabled.

 Returns

 boolean


Is JIT enabled

 Returns

 any


Strings for CPU-specific features and enabled optimizations


"jit/opt.start"
jit.opt.start( vararg args ) 
 Description
JIT compiler optimization control. The opt sub-module provides the backend for the -O command line LuaJIT option.
You can also use it programmatically, e.g.:

jit.opt.start( 2 ) -- same as -O2
jit.opt.start( -dce )
jit.opt.start( hotloop=10, hotexit=2 )

 Arguments

 vararg args


"jit/util.funcinfo"
jit.util.funcinfo( function func, number pos=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Retrieves LuaJIT information about a given function, similarly to debug.getinfo. Possible table fields:

 linedefined: as for debug.getinfo
 lastlinedefined: as for debug.getinfo
 params: the number of parameters the function takes
 stackslots: the number of stack slots the functions local variable use
 upvalues: the number of upvalues the function uses
 bytecodes: the number of bytecodes it the compiled function
 gcconsts: the number of garbage collectable constants
 nconsts: the number of lua_Number (double) constants
 children: Boolean representing whether the function creates closures
 currentline: as for debug.getinfo
 isvararg: if the function is a vararg function
 source: as for debug.getinfo
 loc: a string describing the source and currentline, like &lt;source&gt;:&lt;line&gt;
 ffid: the fast function id of the function (if it is one). In this case only upvalues above and addr below are valid
 addr: the address of the function (if it is not a Lua function). If its a C function rather than a fast function, only upvalues above is valid*

 Arguments

 function func


Function to retrieve info about.

 Arguments

 number pos=0


 Returns

 table


Information about the supplied function.

 Examples
 Example
Demonstrates output of this function.

PrintTable( jit.util.funcinfo( print ) )

local print = print
_G.print = function( ... ) print( ... ) end -- redefine print

PrintTable( jit.util.funcinfo( print ) )
Output:

-- First PrintTable output:
addr	=	1773317824
ffid	=	25
upvalues	=	1

-- Second PrintTable output:
linedefined	=	1
currentline	=	1
params	=	0
stackslots	=	2
source	=	@lua_run
lastlinedefined	=	1
children	=	false
upvalues	=	1
nconsts	=	0
isvararg	=	true
loc	=	lua_run:1
bytecodes	=	5
gcconsts	=	0


"jit/util.funck"
jit.util.funck( function func, number index ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Gets a constant at a certain index in a function.



WARNING


This function isnt officially documented on LuJIT wiki, use it at your own risk.


 Arguments

 function func


Function to get constant from

 Arguments

 number index


Constant index (counting down from the top of the function at -1)

 Returns

 any


the constant found

 Examples
 Example
This code demonstrates how to get a constant in a function.

function bob()
    print( hi )
end

print( jit.util.funck( bob, -1 ) )
print( jit.util.funck( bob, -2 ) )
Output:

print
hi


"jit/util.tracek"
jit.util.tracek( number tr, number index ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns
6 Returns


 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 number tr


 Arguments

 number index


 Returns

 any


k

 Returns

 number


t

 Returns

 number


slot; optional


"killicon/AddFont"
killicon.AddFont( string class, string font, string symbol, table color ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Adds kill icon for given weapon/entity class using special font.

 Arguments

 string class


Weapon or entity class

 Arguments

 string font


Font to be used

 Arguments

 string symbol


The symbol to be used

 Arguments

 table color


Color of the killicon

 Examples
 Example
Example of using the function. Adds pistol kill icon.

killicon.AddFont( weapon_pistol, HL2MPTypeDeath, -, Color( 255, 80, 0, 255 ) )


"jit/util.traceinfo"
jit.util.traceinfo( number trace ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
Return table fields:

 link (number): the linked trace (0 for link types: none, return, interpreter)
 nk (number): the lowest IR constant (???)
 nins (number): the next IR instruction (???)
 linktype (string): the link type (none, root, loop, tail-recursion, up-recursion, down-recursion, interpreter, return)
 nexit (number): number of snapshots (for use with jit.util.tracesnap)

 Arguments

 number trace


trace index to retrieve info for (gotten via jit.attach)

 Returns

 table


trace info


"jit/util.funcuvname"
jit.util.funcuvname( function func, number index ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Does the exact same thing as debug.getupvalue except it only returns the name, not the name and the object. The upvalue indexes also start at 0 rather than 1, so doing jit.util.funcuvname(func, 0) will get you the same name as debug.getupvalue(func, 1)



WARNING


This function isnt officially documented on LuJIT wiki, use it at your own risk.


 Arguments

 function func


Function to get the upvalue indexed from

 Arguments

 number index


The upvalue index, starting from 0

 Returns

 string


The function returns nil if there is no upvalue with the given index, otherwise the name of the upvalue is returned

 Examples
 Example
Get the name of the first upvalue in hook.Add

local a = jit.util.funcuvname( hook.Add, 0 )
local b = debug.getupvalue( hook.Add, 1 )
print( a )
print( a == b )
Output:

isfunction
true


"jit/util.ircalladdr"
jit.util.ircalladdr( number index ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Gets the address of a function from a list of 20 functions, for the list see Ircalladdr Functions



WARNING


This function isnt officially documented on LuJIT wiki, use it at your own risk.


 Arguments

 number index


The index of the function address to get from the ircalladdr func array (starting from 0)

 Returns

 number


The address of the function

 Examples
 Example
Get the address of sinh (ircalladdr array function #15)

local sinhAddress = jit.util.ircalladdr( 14 )
print( sinhAddress )


"killicon/AddAlias"
killicon.AddAlias( string new_class, string existing_class ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Creates kill icon from existing one.

 Arguments

 string new_class


New class of the kill icon

 Arguments

 string existing_class


Already existing kill icon class

 Examples
 Example
Copies prop_physics kill icon to prop_ragdoll.

killicon.AddAlias( prop_ragdoll, prop_physics )


"killicon/Exists"
killicon.Exists( string class ) 
 Description
Checks if kill icon exists for given class.

 Arguments

 string class


The class to test

 Returns

 boolean


Returns true if kill icon exists


"jit/util.tracesnap"
jit.util.tracesnap( number tr, number sn ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
Return table fields:

 0 (ref) (number): first IR ref for the snapshot
 1 (nslots) (number): the number of valid slots
 all indexes except first 2 and last (there might not be any of these): the snapshot map
 last index in table (number): -16777216 (255 &lt;&lt; 24)

 Arguments

 number tr


trace index to retrieve snapshot for (gotten via jit.attach)

 Arguments

 number sn


snapshot index for trace (starting from 0 to nexit - 1, nexit gotten via jit.util.traceinfo)

 Returns

 table


snapshot


"jit/version_num"
Not a function
This is NOT a function, its a variable containing the version number of the LuaJIT core. Version xx.yy.zz is represented by the decimal number xxyyzz. In GMod this is 20004.


"killicon/Add"
killicon.Add( string class, string texture, table color ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Creates new kill icon using a texture.

 Arguments

 string class


Weapon or entity class

 Arguments

 string texture


Path to the texture

 Arguments

 table color


Color of the kill icon

 Examples
 Example
Creates default killicon.

killicon.Add( default, HUD/killicons/default, Color( 255, 80, 0, 255 ) )


"killicon/Draw"
killicon.Draw( number x, number y, string name, number alpha ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Draws a kill icon.

 Arguments

 number x


X coordinate of the icon

 Arguments

 number y


Y coordinate of the icon

 Arguments

 string name


Classname of the kill icon

 Arguments

 number alpha


Alpha/transparency value ( 0 - 255 ) of the icon


"jit/util.traceexitstub"
jit.util.traceexitstub( number exitno ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 number exitno


exit number to retrieve exit stub address from (gotten via jit.attach with the texit event)

 Returns

 number


exitstub trace address


"jit/version"
Not a function
This is NOT a function, its a variable containing the LuaJIT version string. This is LuaJIT 2.0.4 in GMod.


"killicon/GetSize"
killicon.GetSize( string name ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns


 Description
Returns the size of a kill icon.

 Arguments

 string name


Classname of the kill icon

 Returns

 number


Width of the kill icon

 Returns

 number


Height of the kill icon


"jit/util.traceir"
jit.util.traceir( number tr, number index ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns
6 Returns
7 Returns
8 Returns


 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 number tr


 Arguments

 number index


 Returns

 number


m

 Returns

 number


ot

 Returns

 number


op1

 Returns

 number


op2

 Returns

 number


prev


"list/Set"
list.Set( string identifier, any key, any item ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Sets a specific position in the named list to a value.

 Arguments

 string identifier


The list identifier

 Arguments

 any key


The key in the list to set

 Arguments

 any item


The item to set to the list as key

 Examples
 Example
Adds an NPC to the spawnmenu NPC list with the name Fisherman, classname of npc_fisherman and the default weapon of weapon_oldmanharpoon

-- Lost Coast
list.Set( NPC, npc_fisherman, {
	Name = Fisherman,
	Class = npc_fisherman,
	Weapons = { weapon_oldmanharpoon },
	Category = Category
} )


 Examples
 Example
Adds a new Desktop Widget to the Context Menu (C Menu). (This is how Player Model selection is added)

list.Set( DesktopWindows, My Custom Context Menu Icon, {
	title = Context Menu Icon,
	icon = icon64/icon.png,
	init = function( icon, window )
		--Your code here
	end
} )


"list/Get"
list.Get( string identifier ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns a copy of the list stored at identifier

 Arguments

 string identifier


The list identifier

 Returns

 table


listCopy

 Examples
 Example
From entities/gmod_emitter.lua

local elist = list.Get( EffectType )
local EffectTable = elist[self:GetEffect()]


"language/GetPhrase"
language.GetPhrase( string phrase ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Retrieves the translated version of inputted string. Useful for concentrating multiple translated strings.

 Arguments

 string phrase


The phrase to translate

 Returns

 string


The translated phrase, or the input string if no translation was found

 Examples
 Example
An example on usage of this function.

print( Our phrase is:  .. language.GetPhrase( limit_physgun ) )
Output:

Our phrase is: Limited Physgun


"jit/util.tracemc"
jit.util.tracemc( number tr ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns
5 Returns


 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 number tr


 Returns

 string


mcode

 Returns

 number


address

 Returns

 number


loop


"list/Add"
list.Add( string identifier, any item ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Adds an item to a named list

 Arguments

 string identifier


The list identifier

 Arguments

 any item


The item to add to the list

 Examples
 Example
From weapons/gmod_tool/stools/paint.lua

list.Add( PaintMaterials, Eye )
list.Add( PaintMaterials, Smile )
list.Add( PaintMaterials, Light )


"list/GetForEdit"
list.GetForEdit( string identifier ) 
 Description
Returns the actual table of the list stored at identifier. Modifying this will affect the stored list

 Arguments

 string identifier


The list identifier

 Returns

 table


The actual list


"language/Add"
language.Add( string placeholder, string fulltext ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Adds a language item. Language placeholders preceded with # are replaced with full text in Garrys Mod once registered with this function.

 Arguments

 string placeholder


The key for this phrase, without the preceding #.

 Arguments

 string fulltext


The phrase that should be displayed whenever this key is used.

 Examples
 Example
Small excerpt from a STOOL named cooltool. It has been registered as cooltool.

language.Add( Tool_cooltool_name, The really cool tool )
language.Add( Tool_cooltool_desc, Do some random cool stuff. )
language.Add( Tool_cooltool_0, Left-click: Cool Stuff. Right-click: Nothing. )
language.Add( Undone_cooltool, Cool stuff has been undone. )
Output:

When the player presses undo, Cool stuff has been undone will be shown. The cooltools name will be The really cool tool. Below that, where the description is shown, Do some random cool stuff. will be shown. Below that, where the instructions or additional notes for the tool are shown, it will display Left-click: Cool Stuff. Right-click: Nothing..


"MarkupObject/GetHeight"
MarkupObject:GetHeight(  ) 
 Description
Gets computed the height of the markupobject.

 Returns

 number


The computed height.


"list/Contains"
list.Contains( string list, any value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns true if the list contains the value. (as a value - not a key)

 Arguments

 string list


List to search through

 Arguments

 any value


The value to test

 Returns

 boolean


Returns true if the list contains the value, false otherwise


"MarkupObject/Draw"
MarkupObject:Draw( number xOffset, number yOffset, number xAlign, number yAlign, number alphaoverride=255 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Draws the computed markupobject to the screen.

 Arguments

 number xOffset


The X coordinate on the screen.

 Arguments

 number yOffset


The Y coordinate on the screen.

 Arguments

 number xAlign


The alignment of the x coordinate using TEXT_ALIGN_ Enums

 Arguments

 number yAlign


The alignment of the y coordinate using TEXT_ALIGN_ Enums

 Arguments

 number alphaoverride=255


Sets the alpha of all drawn objects to this.


"MarkupObject/Create"
MarkupObject:Create(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Creates a new empty markupobject. Use markup.Parse instead of calling this.

 Returns

 MarkupObject


The created object.


"markup/Parse"
markup.Parse( string markup, number maxwidth ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Parses markup into a  MarkupObject. Currently, this only supports fonts and colors as demonstrated in the example.

 Arguments

 string markup


The markup to be parsed.

 Arguments

 number maxwidth


The max width of the output

 Returns

 MarkupObject


parsed

 Examples
 Example
Renders a markup string on the HUD.

local parsed = markup.Parse( &lt;font=Default&gt;changed font&lt;/font&gt;\n&lt;colour=255,0,255,255&gt;changed colour&lt;/colour&gt; )

hook.Add( HUDPaint, MarkupTest, function()
 parsed:Draw( 100, 100, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
end )
Output:


"MarkupObject/GetWidth"
MarkupObject:GetWidth(  ) 
 Description
Gets computed the width of the markupobject.

 Returns

 number


The computed width.


"MarkupObject/Size"
MarkupObject:Size(  ) 
 Description
Gets computed the width and height of the markupobject.

 Returns

 number


The computed width.

 Returns

 number


The computed height.


"math/asin"
math.asin( number normal ) 
 Description
Returns the arc sine of the given number.

 Arguments

 number normal


Sine value in the range of -1 to 1.

 Returns

 number


An angle in radians, in the range -pi/2 to pi/2, which has the given sine value.

nan if the argument is out of range.


"math/AngleDifference"
math.AngleDifference( number a, number b ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Calculates the difference between two angles.

 Arguments

 number a


The first angle.

 Arguments

 number b


The second angle.

 Returns

 number


The difference between the angles between -180 and 180

 Examples
 Example
Find the angle difference between various angles

print( Angle difference between 159 and 240 is  .. math.AngleDifference( 159, 240 ) )
print( Angle difference between 240 and 159 is  .. math.AngleDifference( 240, 159 ) )
print( Angle difference between 58 and 145 is  .. math.AngleDifference( 58, 145 ) )
Output:

Angle difference between 159 and 240 is -81
Angle difference between 240 and 159 is 81

Angle difference between 58 and 145 is -87


"math/acos"
math.acos( number cos ) 
 Description
Returns the arc cosine of the given number.

 Arguments

 number cos


Cosine value in range of -1 to 1.

 Returns

 number


An angle in radians, between 0 and pi, which has the given cos value.

nan if the argument is out of range.


"math/atan"
math.atan( number normal ) 
 Description
Returns the arc tangent of the given number.

 Arguments

 number normal


Tangent value.

 Returns

 number


An angle in radians, in the range -pi/2 to pi/2, which has the given tangent.


"math/ceil"
math.ceil( number number ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Ceils or rounds a number up.

 Arguments

 number number


The number to be rounded up.

 Returns

 number


ceiled numbers

 Examples
 Example
Round pi.

print( math.ceil( math.pi ) )
Output:

4


"math/BSplinePoint"
math.BSplinePoint( number tDiff, table tPoints, number tMax ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Basic code for Bzier-Spline algorithm.

 Arguments

 number tDiff


From 0 to 1, where alongside the spline the point will be.

 Arguments

 table tPoints


A table of Vectors. The amount cannot be less than 4.

 Arguments

 number tMax


Just leave this at 1.

 Returns

 Vector


Point on Bezier curve, related to tDiff.

 Examples
 Example
Example usage of the function, makes a black box moving along the beizer curve made out of 4 points

local points = { Vector( 100, 100, 0 ), Vector( 200, 200, 0 ), Vector( 300, 100, 0 ), Vector( 400, 200, 0 ) }

hook.Add( HUDPaint, BSplinePointExample, function()
	-- Draw the points
	for id, p in pairs( points ) do
		draw.RoundedBox( 0, p.x - 2, p.y - 2, 4, 4, color_white )
	end

	-- Draw the spline
	local pos = math.BSplinePoint( ( math.cos( CurTime() ) + 1 ) / 2, e, 1 )
	draw.RoundedBox( 0, pos.x - 2, pos.y - 2, 4, 4, Color( 0, 0, 0 ) )
end )


"math/abs"
math.abs( number x ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Calculates the absolute value of a number (effectively removes any negative sign).

 Arguments

 number x


The number to get the absolute value of.

 Returns

 number


absolute_value

 Examples
 Example
Demonstrates what this function does.

print( math.abs( 15 ) )
print( math.abs( -15 ) )
Output:

1515


"math/atan2"
math.atan2( number y, number x ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
atan2 functions like math.atan(y / x), except it also takes into account the quadrant of the angle and so doesnt have a limited range of output.



NOTE


The Y argument comes first!


 Arguments

 number y


Y coordinate.

 Arguments

 number x


X coordinate.

 Returns

 number


The angle of the line from (0, 0) to (x, y) in radians, in the range -pi to pi.

 Examples
 Example
atan( 1 ) and atan2( 1, 1 ) are both math.pi / 4
atan2( -1, -1 ) equals to ( (-3) * math.pi ) / 4

print( atan( 1 ) )
print( ata2( 1, 1 ) )
print( atan2( -1, -1 ) )
Output:

0.7853981633974483
0.7853981633974483

-2.356194490192345


"math/cos"
math.cos( number number ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the cosine of given angle.

 Arguments

 number number


Angle in radians

 Returns

 number


Cosine of given angle

 Examples
 Example
Prints the cosine of 3.14159265 (Pi)

print( math.cos( 3.14159265 ) )
Output:

-1


"math/cosh"
math.cosh( number number ) 
 Description
Returns the hyperbolic cosine of the given angle.

 Arguments

 number number


Angle in radians.

 Returns

 number


The hyperbolic cosine of the given angle.


"math/floor"
math.floor( number number ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Floors or rounds a number down.

 Arguments

 number number


The number to be rounded down.

 Returns

 number


floored numbers

 Examples
 Example
Round pi.

print( math.floor( math.pi ) )
Output:

3
 Examples
 Example
Demonstrates the difference between math.Round and math.floor.

local value = 3.6

print( math.Round( value ), math.floor( value ) )
Output:

4 3


"math/frexp"
math.frexp( number x ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns


 Description
Used to split the number value into a normalized fraction and an exponent. Two values are returned: the first is a multiplier in the range 1/2 (inclusive) to 1 (exclusive) and the second is an integer exponent.
The result is such that x = m*2^e.

 Arguments

 number x


The value to get the normalized fraction and the exponent from.

 Returns

 number


m, multiplier - between 0.5 and 1

 Returns

 number


e, exponent - always an integer


"math/EaseInOut"
math.EaseInOut( number progress, number easeIn, number easeOut ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Calculates the progress of a value fraction, taking in to account given easing fractions

 Arguments

 number progress


Fraction of the progress to ease

 Arguments

 number easeIn


Fraction of how much easing to begin with

 Arguments

 number easeOut


Fraction of how much easing to end with

 Returns

 number


Eased Value

 Examples
 Example
Calculates the easing of three situations

print( math.EaseInOut( 0.1, 0.1, 0.1 ) )
print( math.EaseInOut( 0.2, 0.1, 0.1 ) )
print( math.EaseInOut( 0.3, 0.1, 0.1 ) )
Output:

0.055555...
0.166666...

0.277777...


"math/Distance"
math.Distance( number x1, number y1, number x2, number y2 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example




 Description
Returns the difference between two points in 2D space.

 Arguments

 number x1


X position of first point

 Arguments

 number y1


Y position of first point

 Arguments

 number x2


X position of second point

 Arguments

 number y2


Y position of second point

 Returns

 number


Distance between the two points

 Examples
 Example
Demonstrates the use of this function.

print( math.Distance( 1, 2, 5, 6 ) ) -- distance bet
Output:

5.6568542494924


"math/calcBSplineN"
math.calcBSplineN( number i, number k, number t, number tinc ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.

Use math.BSplinePoint instead.
Basic code for Bezier-Spline algorithm, helper function for math.BSplinePoint.

 Arguments

 number i


 Arguments

 number k




BUG


Sending in a value &lt; 1 will result in an infinite loop.




 Arguments

 number t


 Arguments

 number tinc


 Returns

 number


"math/fmod"
math.fmod( number base, number modulator ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns the modulus of the specified values.
While this is similar to the% operator, it will return a negative value if the first argument is negative, whereas the% operator will return a positive value even if the first operand is negative.

 Arguments

 number base


The base value.

 Arguments

 number modulator


The modulator.

 Returns

 number


The calculated modulus.


"math/deg"
math.deg( number radians ) 
 Description
Converts radians to degrees.

 Arguments

 number radians


Value to be converted to degrees.

 Returns

 number


degrees


"math/Approach"
math.Approach( number current, number target, number change ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Gradually approaches the target value by the specified amount.

 Arguments

 number current


The value were currently at.

 Arguments

 number target


The target value. This function will never overshoot this value.

 Arguments

 number change


The amount that the current value is allowed to change by to approach the target. (It makes no difference whether this is positive or negative.)

 Returns

 number


New current value, closer to the target than it was previously.

 Examples
 Example
Demonstrates what this function does

print( math.Approach( 0, 5, 1 ) ) -- attempts to increment 0 by 1, 0 + 1 is less than 5 so returns 1
print( math.Approach( 4, 5, 3 ) ) -- attempts to increment 4 by 3, 4 + 3 = 7 is greater than 5 so returns 5
Output:

1
5
 Examples
 Example
Common usage example of this function with a control variable.

local MyNumber = 0
local Target = 0
local LastThink = 0
local ChangeRate = 1

hook.Add( Think, math.Approach Example, function()
	local now = CurTime()
	local timepassed = now - LastThink
	LastThink = now

	MyNumber = math.Approach( MyNumber, Target, ChangeRate * timepassed )

	-- Normally, you would use MyNumber in code that appears here.
end )

-- The following functions are for example only:
function GetMyNumber()
	return MyNumber
end

function SetMyNumberTarget( newtarget )
	Target = newtarget
end

function SetMyNumberChangeRate( newrate )
	ChangeRate = newrate
end


"math/Dist"
math.Dist( number x1, number y1, number x2, number y2 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example




 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use math.Distance instead
Returns the difference between two points in 2D space. Alias of math.Distance.

 Arguments

 number x1


X position of first point

 Arguments

 number y1


Y position of first point

 Arguments

 number x2


X position of second point

 Arguments

 number y2


Y position of second point

 Returns

 number


Distance between the two points.

 Examples
 Example
Demonstrates the use of this function.

print( math.Distance( 1, 2, 5, 6 ) ) -- distance bet
Output:

5.6568542494924


"math/ApproachAngle"
math.ApproachAngle( number currentAngle, number targetAngle, number rate ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Increments an angle towards another by specified rate.



NOTE


This function is for numbers representing angles (0-360), NOT Angle objects!


 Arguments

 number currentAngle


The current angle to increase

 Arguments

 number targetAngle


The angle to increase towards

 Arguments

 number rate


The amount to approach the target angle by

 Returns

 number


Modified angle


"math/Clamp"
math.Clamp( number input, number min, number max ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Clamps a number between a minimum and maximum value

 Arguments

 number input


The number to clamp.

 Arguments

 number min


The minimum value, this function will never return a number less than this.

 Arguments

 number max


The maximum value, this function will never return a number greater than this.

 Returns

 number


The clamped value.

 Examples
 Example
Demonstrates what this function does.

print( math.Clamp( 10, 0, 5 ) ) -- 10 is greater than 5 so returns 5
print( math.Clamp( 3, 0, 5 ) ) -- 3 is greater than 0 and less than 5, so returns 3
print( math.Clamp( -1, 0, 5 ) ) -- -1 is less than 0, so returns 0
Output:

5
3

0
 Examples
 Example
Heals player ply by 10 health, but wont let their health go above 100.

ply:SetHealth( math.Clamp( ply:Health() + 10, 0, 100 ) )


"math/BinToInt"
math.BinToInt( string string ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Converts a binary string into a number.

 Arguments

 string string


Binary string to convert

 Returns

 number


Base 10 number.

 Examples
 Example
Will print the string 101010101 as a number in console.

print( math.BinToInt( 101010101 ) )
Output:

341


"math/IntToBin"
math.IntToBin( number int ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Converts an integer to a binary (base-2) string.

 Arguments

 number int


Number to be converted.

 Returns

 string


Binary number string. The length of this will always be a multiple of 3.

 Examples
 Example
Prints the binary representation of 4

print( math.IntToBin( 4 ) )
Output:

100


"math/log"
math.log( number x, number base=e ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
With one argument, return the natural logarithm of x (to base e).
With two arguments, return the logarithm of x to the given base, calculated as log(x)/log(base).

 Arguments

 number x


The value to get the base from exponent from.

 Arguments

 number base=e


The logarithmic base.

 Returns

 number


Logarithm of x to the given base


"math/ldexp"
math.ldexp( number normalizedFraction, number exponent ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Takes a normalised number and returns the floating point representation.

 Arguments

 number normalizedFraction


The value to get the normalized fraction and the exponent from.

 Arguments

 number exponent


The value to get the normalized fraction and the exponent from.

 Returns

 number


result


"math/huge"
Not a function
This is NOT a function, its a variable that effectively represents infinity, in the sense that in any numerical comparison every number will be less than this.
For example, if x is a number, x &gt; math.huge will NEVER be true except in the case of overflow (see below).


"math/exp"
math.exp( number exponent ) 
 Description
Returns the x power of the Euler constant e.

 Arguments

 number exponent


The exponent for the function.

 Returns

 number


e to the specified power


"math/log10"
math.log10( number x ) 
 Description
Returns the base-10 logarithm of x. This is usually more accurate than math.log(x, 10).

 Arguments

 number x


The value to get the base from exponent from.


"math/max"
math.max( vararg numbers ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Returns the largest value of all arguments.

 Arguments

 vararg numbers


Numbers to get the largest from

 Returns

 number


The largest number

 Examples
 Example
Get the largest number of a group.

print( math.max( 464, 654698468, 1, 3, 2 ) )
Output:

654698468
 Examples
 Example
Prevent a value from falling under a certain minimum. A one-sided version of math.Clamp.

local minimumValue = 5

function lowClamp( num )

     return math.max( minimumValue, num )

end

print( lowClamp( 0.1 ) )
print( lowClamp( -6 ) )
print( lowClamp( 5 ) )
print( lowClamp( 8 ) )
print( lowClamp( 24 ) )
Output:

5
5
5
8
24


"math/min"
math.min( vararg numbers ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the smallest value of all arguments.

 Arguments

 vararg numbers


Numbers to get the smallest from.

 Returns

 number


The smallest number

 Examples
 Example
Get the smallest number of a group.

print( math.min( 1, 2, -3, 464, 654698468 ) )
Output:

-3


"math/mod"
math.mod( number base, number modulator ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

This is removed in Lua versions later than what GMod is currently using. You should use the% operator or math.fmod instead.
Returns the modulus of the specified values. Same as math.fmod.

 Arguments

 number base


The base value

 Arguments

 number modulator


Modulator

 Returns

 number


The calculated modulus


"math/pi"
Not a function
This is NOT a function, its a variable containing the mathematical constant pi.
For example: math.sin( math.pi ) will return 0.


"math/modf"
math.modf( number base ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns
5 Examples

5.1 Example




 Description
Returns the integral and fractional component of the modulo operation.

 Arguments

 number base


The base value.

 Returns

 number


The integral component.

 Returns

 number


The fractional component.

 Examples
 Example
Finds the integral and fractional components of 5.6.

print( math.modf( 5.6 ) )
Output:

5&#x2003;&#x2003;&#x2003;0.6


"math/Rand"
math.Rand( number min, number max ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns a random float between min and max.
See also math.random

 Arguments

 number min


The minimum value.

 Arguments

 number max


The maximum value.

 Returns

 number


Random float between min and max.


"math/randomseed"
math.randomseed( number seed ) 
 Description
Seeds the random number generator. The same seed will guarantee the same sequence of numbers each time with math.random.
For shared random values across predicted realms, use util.SharedRandom.



WARNING


Incorrect usage of this function will affect all random numbers in the game.


 Arguments

 number seed


The new seed


"math/pow"
math.pow( number x, number y ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns x raised to the power y.
In particular, math.pow(1.0, x) and math.pow(x, 0.0) always return 1.0, even when x is a zero or a NaN. If both x and y are finite, x is negative, and y is not an integer then math.pow(x, y) is undefined.

 Arguments

 number x


Base.

 Arguments

 number y


Exponent.

 Returns

 number


y power of x


"math/Round"
math.Round( number value, number decimals=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Rounds the given value to the nearest whole number or to the given decimal places.

 Arguments

 number value


The value to round.

 Arguments

 number decimals=0


The decimal places to round to.

 Returns

 number


The rounded value.

 Examples
 Example
Rounds a number to the nearest whole number.

print( math.Round( 104.6256712 ) )
Output:

105
 Examples
 Example
Rounds the number to two decimal places.

print( math.Round( 104.6256712, 2 ) )
Output:

104.63


"math/tan"
math.tan( number value ) 
 Description
Returns the tangent of the given angle.

 Arguments

 number value


Angle in radians

 Returns

 number


The tangent of the given angle.


"math/sin"
math.sin( number number ) 
 Description
Returns the sine of given angle.

 Arguments

 number number


Angle in radians

 Returns

 number


Sine for given angle


"math/tanh"
math.tanh( number number ) 
 Description
Returns the hyperbolic tangents of the given number.

 Arguments

 number number


Angle in radians.

 Returns

 number


The hyperbolic tangent of the given angle.


"math/NormalizeAngle"
math.NormalizeAngle( number angle ) 
 Description
Normalizes angle, so it returns value between -180 and 180.

 Arguments

 number angle


The angle to normalize, in degrees.

 Returns

 number


The normalized angle, in the range of -180 to 180 degrees.


"math/rad"
math.rad( number degrees ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Converts an angle in degrees to its equivalent in radians.

 Arguments

 number degrees


The angle measured in degrees.

 Returns

 number


radians

 Examples
 Example
Convert various angles in degrees to their equivalent in radians.

print( Degrees: 360, Radians:  .. math.rad( 360 ) ) -- 2*pi
print( Degrees: 180, Radians:  .. math.rad( 180 ) ) -- pi
print( Degrees: 90, Radians:  .. math.rad( 90 ) ) -- pi/2
print( Degrees: 1, Radians:  .. math.rad( 1 ) ) -- pi/180
Output:

Degrees: 360, Radians: 6.2831853071796
Degrees: 180, Radians: 3.1415926535898
Degrees: 90, Radians: 1.5707963267949

Degrees: 1, Radians: 0.017453292519943


"math/sqrt"
math.sqrt( number value ) 
 Description
Returns the square root of the number.

 Arguments

 number value


Value to get the square root of.

 Returns

 number


squareRoot


"math/TimeFraction"
math.TimeFraction( number start, number end, number current ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Returns the fraction of where the current time is relative to the start and end times

 Arguments

 number start


Start time in seconds

 Arguments

 number end


End time in seconds

 Arguments

 number current


Current time in seconds

 Returns

 number


Fraction

 Examples
 Example
Prints the time fraction of 5 between 0 and 10

print( math.TimeFraction( 0, 10, 5 ) )
Output:

0.5


"matproxy/Add"
matproxy.Add( table MatProxyData ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Adds a material proxy.

 Arguments

 table MatProxyData


The information about the proxy. See MatProxyData structure

 Examples
 Example
Adds PlayerColor proxy. Example taken from lua/matproxy/player_color.lua.

matproxy.Add( {
    name = PlayerColor, 
    init = function( self, mat, values )
        -- Store the name of the variable we want to set
        self.ResultTo = values.resultvar
    end,
    bind = function( self, mat, ent )
        -- If the target ent has a function called GetPlayerColor ) then use that
        -- The function SHOULD return a Vector with the chosen players colour.

        -- In sandbox this function is created as a network function, 
        -- in player_sandbox.lua in SetupDataTables
       if ( ent.GetPlayerColor ) then
           mat:SetVector( self.ResultTo, ent:GetPlayerColor() )
       end
   end 
} )
Output:

Adds PlayerColor proxy.
 Examples
 Example
Material proxy values are stored like this:

 In the .vmt:

Proxies {
    PlayerColor {
       resultVar $color2
       myVariable $color
    }

}
 In Lua ( The Init function of MatProxyData structure )

values =
{
    resultvar = $color2
    myvariable = $color
}


"math/Remap"
math.Remap( number value, number inMin, number inMax, number outMin, number outMax ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Returns
8 Examples

8.1 Example




 Description
Remaps the value from one range to another

 Arguments

 number value


The value

 Arguments

 number inMin


The minimum of the initial range

 Arguments

 number inMax


The maximum of the initial range

 Arguments

 number outMin


The minimum of new range

 Arguments

 number outMax


The maximum of new range

 Returns

 number


The number in the new range

 Examples
 Example
Example usage, converts a value from range 0-1, to range 0-255.

print( math.Remap( 0.5, 0, 1, 0, 255 ) )
Output:

127.5


"menubar/Init"
menubar.Init(  ) 
 Description
Creates the menu bar ( The bar at the top of the screen when holding C or Q in sandbox ) and docks it to the top of the screen. It will not appear.
Calling this multiple times will NOT remove previous panel.


"menu/RecordFrame"
menu.RecordFrame(  ) 
 Description
Used by Demo to Video to record the frame.


"math/sinh"
math.sinh( number number ) 
 Description
Returns the hyperbolic sine of the given angle.

 Arguments

 number number


Angle in radians.

 Returns

 number


The hyperbolic sine of the given angle.


"math/Truncate"
math.Truncate( number num, number digits=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Rounds towards zero.

 Arguments

 number num


The number to truncate

 Arguments

 number digits=0


The amount of digits to keep after the point.

 Examples
 Example
Demonstrates the use of this function.

local num = 54.59874

print( math.Truncate( num, 2 ) ) -- 54.59
print( math.Round( num, 2 ) ) -- 54.6
Output:

54.59
54.6


"matproxy/Call"
matproxy.Call( string uname, IMaterial mat, Entity ent ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Called by the engine from OnBind

 Arguments

 string uname


 Arguments

 IMaterial mat


 Arguments

 Entity ent


"mesh/Begin"
mesh.Begin( IMesh mesh=nil, number primitiveType, number primiteCount ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Starts a new dynamic mesh. If an IMesh is passed, it will use that mesh instead.

 Arguments

 IMesh mesh=nil


Mesh to build. This argument can be removed if you wish to build a dynamic mesh. See examples below.

 Arguments

 number primitiveType


Primitive type, see MATERIAL_ Enums.

 Arguments

 number primiteCount


The amount of primitives.

 Examples
 Example
Draws a triangle near Vector( 0, 0, 0 ) in the map using a dynamic mesh.

local mat = Material( editor/wireframe ) -- The material ( a wireframe )

local verts = { -- A table of 3 vertices that form a triangle
	{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, -- Vertex 1
	{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, -- Vertex 2
	{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, -- Vertex 3
}


hook.Add( PostDrawOpaqueRenderables, MeshLibTest, function()

	render.SetMaterial( mat ) -- Apply the material
	mesh.Begin( MATERIAL_TRIANGLES, 1 ) -- Begin writing to the dynamic mesh
	for i = 1, #verts do
		mesh.Position( verts[i].pos ) -- Set the position
		mesh.TexCoord( 0, verts[i].u, verts[i].v ) -- Set the texture UV coordinates
		mesh.AdvanceVertex() -- Write the vertex
	end
	mesh.End() -- Finish writing the mesh and draw it
end )


 Examples
 Example
Draws a triangle near Vector( 0, 0, 0 ) in the map using a static mesh.

local mat = Material( editor/wireframe ) -- The material ( a wireframe )
local obj = Mesh() -- Create the IMesh object

local verts = { -- A table of 3 vertices that form a triangle
	{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, -- Vertex 1
	{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, -- Vertex 2
	{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, -- Vertex 3
}


mesh.Begin( obj, MATERIAL_TRIANGLES, 1 ) -- Begin writing to the static mesh
for i = 1, #verts do
	mesh.Position( verts[i].pos ) -- Set the position
	mesh.TexCoord( 0, verts[i].u, verts[i].v ) -- Set the texture UV coordinates
	mesh.AdvanceVertex() -- Write the vertex
end
mesh.End() -- Finish writing to the IMesh

hook.Add( PostDrawOpaqueRenderables, MeshLibTest, function()

	render.SetMaterial( mat ) -- Apply the material
	obj:Draw() -- Draw the mesh
end )


"math/random"
math.random( number m=nil, number n=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
When called without arguments, returns a uniform pseudo-random real number in the range 0 to 1 which includes 0 but excludes 1.
When called with an integer number m, returns a uniform pseudo-random integer in the range 1 to m inclusive.
When called with two integer numbers m and n, returns a uniform pseudo-random integer in the range m to n inclusive.
See also math.Rand

 Arguments

 number m=nil


If m is the only parameter: upper limit.
If n is also provided: lower limit.

If provided, this must be an integer.

 Arguments

 number n=nil


Upper limit.

If provided, this must be an integer.

 Returns

 number


Random value

 Examples
 Example
Generate a random number between 1 and 400 with both math.random and math.Rand.

print( math.random( 1,400 ) )

print( math.Rand( 1,400 ) )
Output:

317
1.0162317198768
 Examples
 Example
Select a random key from a table, where the keys have a different probability of being selected.

function GetWeightedRandomKey( tab )
	local sum = 0

	for _, chance in pairs( tab ) do
		sum = sum + chance
	end

	local select = math.random() * sum

	for key, chance in pairs( tab ) do
		select = select - chance
		if ( select &lt; 0 ) then return key end
	end
end

-- Example usage:
local fruit =
{
	Grape = 4.5,
	Orange = 20,
	Banana = 3.14
}


for i = 1, 5 do
	print( GetWeightedRandomKey( fruit ) )
end
Output:

Banana
Grape
Banana
Orange
Orange


"matproxy/ShouldOverrideProxy"
matproxy.ShouldOverrideProxy( string name ) 
 Description
Called by engine, returns true if were overriding a proxy

 Arguments

 string name


The name of proxy in question

 Returns

 boolean


Are we overriding it?


"matproxy/Init"
matproxy.Init( string name, string uname, IMaterial mat, table values ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Called by the engine from OnBind

 Arguments

 string name


 Arguments

 string uname


 Arguments

 IMaterial mat


 Arguments

 table values


"menubar/ParentTo"
menubar.ParentTo( Panel pnl ) 
 Description
Parents the menubar to the panel and displays the menubar.

 Arguments

 Panel pnl


The panel to parent to


"menubar/IsParent"
menubar.IsParent( Panel pnl ) 
 Description
Checks if the supplied panel is parent to the menubar

 Arguments

 Panel pnl


The panel to check

 Returns

 boolean


Is parent or not


"File/ReadULong"
File:ReadULong(  ) 
 Description
Reads a unsigned 32-bit integer from the file.

 Returns

 number


An unsigned 32-bit integer


"mesh/AdvanceVertex"
mesh.AdvanceVertex(  ) 
 Description
Pushes the new vertex data onto the render stack.


"mesh/Position"
mesh.Position( Vector position ) 
 Description
Sets the position to be used for the next vertex.

 Arguments

 Vector position


The position of the vertex.


"mesh/End"
mesh.End(  ) 
 Description
Ends the mesh and renders it.


"mesh/Color"
mesh.Color( number r, number g, number b, number a ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Sets the color to be used for the next vertex.

 Arguments

 number r


Red component.

 Arguments

 number g


Green component.

 Arguments

 number b


Blue component.

 Arguments

 number a


Alpha component.


"mesh/Normal"
mesh.Normal( Vector normal ) 
 Description
Sets the normal to be used for the next vertex.

 Arguments

 Vector normal


The normal of the vertex.


"motionsensor/BuildSkeleton"
motionsensor.BuildSkeleton( table translator, Player player, Angle rotation ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Returns
7 Returns


 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 table translator


 Arguments

 Player player


 Arguments

 Angle rotation


 Returns

 Vector


Pos

 Returns

 Angle


ang

 Returns

 sensor


sensor


"mesh/Quad"
mesh.Quad( Vector vertex1, Vector vertex2, Vector vertex3, Vector vertex4 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Draws a quad using 4 vertices.

 Arguments

 Vector vertex1


The first vertex.

 Arguments

 Vector vertex2


The second vertex.

 Arguments

 Vector vertex3


The third vertex.

 Arguments

 Vector vertex4


The fourth vertex.


"motionsensor/IsActive"
motionsensor.IsActive(  ) 
 Description
Return whether a kinect is connected - and active (ie - Start has been called).

 Returns

 boolean


Connected and active or not


"mesh/Specular"
mesh.Specular( number r, number g, number b, number a ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Sets the specular map values.
This function actually does nothing.

 Arguments

 number r


The red channel multiplier of the specular map.

 Arguments

 number g


The green channel multiplier of the specular map.

 Arguments

 number b


The blue channel multiplier of the specular map.

 Arguments

 number a


The alpha channel multiplier of the specular map.


"mesh/UserData"
mesh.UserData( number tangentX, number tangentY, number tangentZ, number tangentHandedness ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description


NOTE


It is recommended to use IMesh:BuildFromTriangles instead of the mesh library.


A table of four numbers. This is used by most shaders in Source to hold tangent information of the vertex ( tangentX, tangentY, tangentZ, tangentHandedness ).

 Arguments

 number tangentX


 Arguments

 number tangentY


 Arguments

 number tangentZ


 Arguments

 number tangentHandedness


"motionsensor/GetColourMaterial"
motionsensor.GetColourMaterial(  ) 
 Description
Returns the depth map material.

 Returns

 IMaterial


The material


"mesh/QuadEasy"
mesh.QuadEasy( Vector position, Vector normal, number sizeX, number sizeY ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Draws a quad using a position, a normal and the size.

 Arguments

 Vector position


The center of the quad.

 Arguments

 Vector normal


The normal of the quad.

 Arguments

 number sizeX


X size in pixels.

 Arguments

 number sizeY


Y size in pixels.


"motionsensor/ChooseBuilderFromEntity"
motionsensor.ChooseBuilderFromEntity( Entity ent ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 Entity ent


Entity to choose builder for

 Returns

 string


Chosen builder


"mesh/TexCoord"
mesh.TexCoord( number stage, number u, number v ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Sets the texture coordinates for the next vertex.
Non-zero values of stage require the currently bound material to support it. For example, any LightmappedGeneric material supports stages 1 and 2 (lightmap texture coordinates).

 Arguments

 number stage


The stage of the texture coordinate.

 Arguments

 number u


U coordinate.

 Arguments

 number v


V coordinate.


"motionsensor/IsAvailable"
motionsensor.IsAvailable(  ) 
 Description
Returns true if we have detected that theres a kinect connected to the PC

 Returns

 boolean


Connected or not


"motionsensor/GetSkeleton"
motionsensor.GetSkeleton(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"mesh/TangentS"
mesh.TangentS( Vector sTanger ) 
 Description
Sets the s tangent to be used.
This function actually does nothing.

 Arguments

 Vector sTanger


The s tangent.


"mesh/VertexCount"
mesh.VertexCount(  ) 
 Description
Returns the amount of vertex that have yet been pushed.

 Returns

 number


vertexCount


"motionsensor/ProcessAnglesTable"
motionsensor.ProcessAnglesTable( table translator, table sensor, Vector pos, Angle rotation ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 table translator


 Arguments

 table sensor


 Arguments

 Vector pos


 Arguments

 Angle rotation


 Returns

 Angle


Ang. If!translator.AnglesTable then return - {}


"navmesh/AddWalkableSeed"
navmesh.AddWalkableSeed( Vector pos, Vector dir ) 
 Description
Add this position and normal to the list of walkable positions, used before map generation with navmesh.BeginGeneration

 Arguments

 Vector pos


The terrain position.

 Arguments

 Vector dir


The normal of this terrain position.


"motionsensor/ProcessPositionTable"
motionsensor.ProcessPositionTable( table translator, table sensor ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 table translator


 Arguments

 table sensor


 Returns

 Vector


Pos. if!translator.PositionTable then return - {}


"motionsensor/Start"
motionsensor.Start(  ) 
 Description
This starts access to the kinect sensor. Note that this usually freezes the game for a couple of seconds.


"navmesh/BeginGeneration"
navmesh.BeginGeneration(  ) 
 Description
Starts the generation of a new navmesh.



NOTE


This process is highly resource intensive and its not wise to use during normal gameplay


"motionsensor/Stop"
motionsensor.Stop(  ) 
 Description
Stops the motion capture.


"navmesh/ClearWalkableSeeds"
navmesh.ClearWalkableSeeds(  ) 
 Description
Clears all the walkable positions, used before calling navmesh.BeginGeneration.


"mesh/TangentT"
mesh.TangentT( Vector tTanger ) 
 Description
Sets the T tangent to be used.
This function actually does nothing.

 Arguments

 Vector tTanger


The t tangent.


"navmesh/GetAllNavAreas"
navmesh.GetAllNavAreas(  ) 
 Description
Returns an integer indexed table of all CNavAreas on the current map. If the map doesnt have a navmesh generated then this will return an empty table.

 Returns

 table


A table of all the CNavAreas on the current map.


"navmesh/GetMarkedArea"
navmesh.GetMarkedArea(  ) 
 Description
Returns the currently marked CNavArea, for use with editing console commands.

 Returns

 CNavArea


The currently marked CNavArea.


"motionsensor/ProcessAngle"
motionsensor.ProcessAngle( table translator, table sensor, Vector pos, Angle ang, table special_vectors, number boneid, table v ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Returns


 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 table translator


 Arguments

 table sensor


 Arguments

 Vector pos


 Arguments

 Angle ang


 Arguments

 table special_vectors


 Arguments

 number boneid


 Arguments

 table v


 Returns

 boolean


Return nil on failure


"navmesh/CreateNavArea"
navmesh.CreateNavArea( Vector corner, Vector opposite_corner ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Creates a new CNavArea.

 Arguments

 Vector corner


The first corner of the new CNavArea

 Arguments

 Vector opposite_corner


The opposite (diagonally) corner of the new CNavArea

 Returns

 CNavArea


The new CNavArea or nil if we failed for some reason.


"navmesh/GetEditCursorPosition"
navmesh.GetEditCursorPosition(  ) 
 Description
Returns the position of the edit cursor when nav_edit is set to 1.

 Returns

 Vector


The position of the edit cursor.


"navmesh/GetGroundHeight"
navmesh.GetGroundHeight( Vector pos ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns


 Description
Finds the closest standable ground at, above, or below the provided position.



NOTE


The ground must have at least 32 units of empty space above it to be considered by this function, unless 16 layers are tested without finding valid ground.


 Arguments

 Vector pos


Position to find the closest ground for.

 Returns

 number


The height of the ground layer.

 Returns

 Vector


The normal of the ground layer.


"navmesh/GetMarkedLadder"
navmesh.GetMarkedLadder(  ) 
 Description
Returns the currently marked CNavLadder, for use with editing console commands.

 Returns

 CNavLadder


The currently marked CNavLadder.


"navmesh/Find"
navmesh.Find( Vector pos, number radius, number stepdown, number stepup ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Returns a bunch of areas within distance, used to find hiding spots by NextBots for example.

 Arguments

 Vector pos


The position to search around

 Arguments

 number radius


Radius to search within

 Arguments

 number stepdown


Maximum stepdown( fall distance ) allowed

 Arguments

 number stepup


Maximum stepup( jump height ) allowed

 Returns

 table


A table of CNavAreas


"navmesh/GetNavAreaByID"
navmesh.GetNavAreaByID( number id ) 
 Description
Returns a CNavArea by the given ID.



NOTE


Avoid calling this function every frame, as internally it does a lookup trough all the CNavAreas, call this once and store the result


 Arguments

 number id


ID of the CNavArea to get. Starts with 1.

 Returns

 CNavArea


The CNavArea with given ID.


"navmesh/GetNavArea"
navmesh.GetNavArea( Vector pos, number beneathLimit ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns the Nav Area contained in this position that also satisfies the elevation limit.

 Arguments

 Vector pos


The position to search for.

 Arguments

 number beneathLimit


The elevation limit at which the Nav Area will be searched.

 Returns

 CNavArea


The nav area.


"navmesh/GetNavAreaCount"
navmesh.GetNavAreaCount(  ) 
 Description
Returns the highest ID of all nav areas on the map. While this can be used to get all nav areas, this number may not actually be the actual number of nav areas on the map.

 Returns

 number


The highest ID of all nav areas on the map.


"navmesh/GetPlayerSpawnName"
navmesh.GetPlayerSpawnName(  ) 
 Description
Returns the classname of the player spawn entity.

 Returns

 string


The classname of the spawn point entity. By default returns info_player_start


"navmesh/GetNavLadderByID"
navmesh.GetNavLadderByID( number id ) 
 Description
Returns a CNavLadder by the given ID.

 Arguments

 number id


ID of the CNavLadder to get. Starts with 1.

 Returns

 CNavLadder


The CNavLadder with given ID.


"navmesh/Load"
navmesh.Load(  ) 
 Description
Loads a new navmesh from the .nav file for current map discarding any changes made to the navmesh previously.


"navmesh/Save"
navmesh.Save(  ) 
 Description
Saves any changes made to navmesh to the .nav file.


"navmesh/IsGenerating"
navmesh.IsGenerating(  ) 
 Description
Whether were currently generating a new navmesh with navmesh.BeginGeneration.

 Returns

 boolean


Whether were generating a nav mesh or not.


"navmesh/SetMarkedLadder"
navmesh.SetMarkedLadder( CNavLadder area ) 
 Description
Sets the CNavLadder as marked, so it can be used with editing console commands.

 Arguments

 CNavLadder area


The CNavLadder to set as the marked ladder.


"navmesh/SetMarkedArea"
navmesh.SetMarkedArea( CNavArea area ) 
 Description
Sets the CNavArea as marked, so it can be used with editing console commands.

 Arguments

 CNavArea area


The CNavArea to set as the marked area.


"navmesh/SetPlayerSpawnName"
navmesh.SetPlayerSpawnName( string spawnPointClass ) 
 Description
Sets the classname of the default spawn point entity, used before generating a new navmesh with navmesh.BeginGeneration.

 Arguments

 string spawnPointClass


The classname of what the player uses to spawn, automatically adds it to the walkable positions during map generation.


"net/Broadcast"
net.Broadcast(  ) 
 Description
Sends the currently built net message to all connected players.
More information can be found in Net Library Usage.

 Examples
 Example
Sends a packet to all players.

net.Start( NETHOOK )
    net.WriteString( some text )
net.Broadcast()


"net/ReadAngle"
net.ReadAngle(  ) 
 Description
Reads an angle from the received net message.



WARNING


You must read information in same order as you write it.


 Returns

 Angle


The read angle, or Angle(0,0,0) if no angle could be read


"net/ReadBit"
net.ReadBit(  ) 
 Description
Reads a bit from the received net message.



WARNING


You must read information in same order as you write it.


 Returns

 number


0 or 1, or 0 if the bit could not be read.


"net/Incoming"
net.Incoming( number length, Player client ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.

You may be looking for net.Receive.
Function called by the engine to tell the lua state a message arrived.

 Arguments

 number length


The message length, in bits.

 Arguments

 Player client


The player that sent the message. This will be nil in the client state.


"navmesh/IsLoaded"
navmesh.IsLoaded(  ) 
 Description
Returns true if a navmesh has been loaded when loading the map.

 Returns

 boolean


Whether a navmesh has been loaded when loading the map.


"navmesh/Reset"
navmesh.Reset(  ) 
 Description
Deletes every CNavArea and CNavLadder on the map without saving the changes.


"net/ReadDouble"
net.ReadDouble(  ) 
 Description
Reads a double-precision number from the received net message.



WARNING


You must read information in same order as you write it.


 Returns

 number


The double-precision number, or 0 if no number could be read.


"net/ReadBool"
net.ReadBool(  ) 
 Description
Reads a boolean from the received net message.



WARNING


You must read information in same order as you write it.


 Returns

 boolean


true or false, or false if the bool could not be read.


"net/BytesWritten"
net.BytesWritten(  ) 
 Description
Returns the size of the current message in bytes.

 Returns

 number


The amount of bytes written to the current net message.

Returns nil if no net message has been started.


"navmesh/GetNearestNavArea"
navmesh.GetNearestNavArea( Vector pos, boolean anyZ=false, number maxDist=10000, boolean checkLOS=false, boolean checkGround=true, number team=TEAM_ANY=-2 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Returns


 Description
Returns the closest CNavArea to given position at the same height, or beneath it.

 Arguments

 Vector pos


The position to look from

 Arguments

 boolean anyZ=false


This argument is ignored and has no effect

 Arguments

 number maxDist=10000


This is the maximum distance from the given position that the function will look for a CNavArea

 Arguments

 boolean checkLOS=false


If this is set to true then the function will internally do a util.TraceLine from the starting position to each potential CNavArea with a MASK_NPCSOLID_BRUSHONLY MASK_ Enums. If the trace fails then the CNavArea is ignored.

If this is set to false then the function will find the closest CNavArea through anything, including the world.

 Arguments

 boolean checkGround=true


If checkGround is true then this function will internally call navmesh.GetNavArea to check if there is a CNavArea directly below the position, and return it if so, before checking anywhere else.

 Arguments

 number team=TEAM_ANY=-2


This will internally call CNavArea:IsBlocked to check if the target CNavArea is not to be navigated by the given team. Currently this appears to do nothing.

 Returns

 CNavArea


The closest CNavArea found with the given parameters.


"net/ReadData"
net.ReadData( number length ) 
 Description
Reads pure binary data from the message.



WARNING


You must read information in same order as you write it.


 Arguments

 number length


The length of the data to be read, in bytes.

 Returns

 string


The binary data read, or a string containing one character with a byte of 0 if no data could be read.


"net/ReadInt"
net.ReadInt( number bitCount ) 
 Description
Reads an integer from the received net message.



WARNING


You must read information in same order as you write it.


 Arguments

 number bitCount


The amount of bits to be read.

This must be set to what you set to net.WriteInt. Read more information at net.WriteInt.

 Returns

 number


The read integer number, or 0 if no integer could be read.


"net/ReadMatrix"
net.ReadMatrix(  ) 
 Description
Reads a VMatrix from the received net message.



WARNING


You must read information in same order as you write it.


 Returns

 VMatrix


The matrix, or an empty matrix if no matrix could be read.


"net/ReadEntity"
net.ReadEntity(  ) 
 Description
Reads an entity from the received net message. You should always check if the specified entity exists as it may have been removed and therefor NULL if it is outside of the players PVS or was already removed.



WARNING


You must read information in same order as you write it.


 Returns

 Entity


The entity, or Entity(0) if no entity could be read.


"net/ReadColor"
net.ReadColor(  ) 
 Description
Reads a Color structure from the current net message.



WARNING


You must read information in same order as you write it.


 Returns

 table


The Color structure read from the current net message, or Color(0,0,0,0) if the color could not be read.


"net/ReadFloat"
net.ReadFloat(  ) 
 Description
Reads a floating point number from the received net message.



WARNING


You must read information in same order as you write it.


 Returns

 number


The floating point number, or 0 if no number could be read.


"net/ReadNormal"
net.ReadNormal(  ) 
 Description
Reads a normal vector from the net message.



WARNING


You must read information in same order as you write it.


 Returns

 Vector


The normalized vector ( length = 1 ), or Vector(0,0,1) if no normal could be read.


"net/ReadString"
net.ReadString(  ) 
 Description
Reads a null terminated string from the net stream. The size of the string is 8 bits plus 8 bits for every ASCII character in the string.



WARNING


You must read information in same order as you write it.


 Returns

 string


The read string, or a string with 0 length if no string could be read.


"net/ReadHeader"
net.ReadHeader(  ) 
 Description
Returns the header of the message which contains a short which can be converted to the corresponding message name via util.NetworkIDToString.

 Returns

 number


The header number


"net/ReadTable"
net.ReadTable(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Reads a table from the received net message.



NOTE


Sometimes when sending a table through the net library, the order of the keys may be switched. So be cautious when comparing (See Example 1).




WARNING


You must read information in same order as you write it.


 Returns

 table


Table recieved via the net message, or a blank table if no table could be read.

 Examples
 Example
This is an example of how the keys order may be switched:

--Client:
function SendTable()
     local Table = {}

     Table.Type = Dining
     Table.Legs = 4
     Table.Material = Wood
     net.Start( TableSend )
      net.WriteTable( Table )
     net.SendToServer()
     PrintTable( Table ) -- Prints the order client side
end

--Server:
function GotTable( len, Player )
     PrintTable( net.ReadTable() ) -- Prints the order server side
end
net.Receive( TableSend, GotTable )
Output:

Client:
Type = Dining
Legs = 4
Material = Wood

Server:
Legs = 4
Material = Wood
Type = Dining


"net/ReadVector"
net.ReadVector(  ) 
 Description
Reads a vector from the received net message. Vectors sent by this function are compressed, which may result in precision loss. See net.WriteVector for more information.



WARNING


You must read information in same order as you write it.


 Returns

 Vector


The read vector, or Vector(0,0,0) if no vector could be read.


"net/ReadType"
net.ReadType( number typeID=net.ReadUInt(8) ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.

Used internally by net.ReadTable.
Reads a value from the net message with the specified type, written by net.WriteType.



WARNING


You must read information in same order as you write it.


 Arguments

 number typeID=net.ReadUInt(8)


The type of value to be read, using TYPE_ Enums.

 Returns

 any


The value, or the respective blank value based on the type youre reading if the value could not be read.


"net/ReadUInt"
net.ReadUInt( number numberOfBits ) 
 Description
Reads an unsigned integer with the specified number of bits from the received net message.



WARNING


You must read information in same order as you write it.


 Arguments

 number numberOfBits


The size of the integer to be read, in bits.

 Returns

 number


The unsigned integer read, or 0 if the integer could not be read.


"net/SendPAS"
net.SendPAS( Vector position ) 
 Description
Sends the message to all players that are in the same potentially audible set(PAS) as the position, or simply said, it adds all players that can potentially hear sounds from this position.

 Arguments

 Vector position


PAS position.


"net/Receive"
net.Receive( string messageName, function callback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Adds a net message handler. Only one receiver can be used to receive the net message.



NOTE


The message-name is converted to lower-case so the message-names BigBlue and bigblue would be equal.




WARNING


You must put this function outside of any other function or hook for it to work properly unless you know what you are doing!




WARNING


You must read information in the same order as you write it.




WARNING


Each net message has a length limit of 64KB!


 Arguments

 string messageName


The message name to hook to.

 Arguments

 function callback


The function to be called if the specified message was received. Arguments are:
number len - Length of the message, in bits

Player ply - The player that sent the message, works only serverside

 Examples
 Example
A simple callback

net.Receive( my_message, function( len, pl )
	if ( IsValid( pl ) and pl:IsPlayer() ) then
		print( Message from  .. pl:Nick() ..  received. Its length is  .. len .. . )
	else
		print( Message from server received. Its length is  .. len .. . )
	end
end )
Output:

When run server-side:
Message from John received. Its length is 4.
And client-side:

Message from server received. Its length is 4.


"net/Send"
net.Send( Player ply ) 
 Description
Sends the current message to the specified player, or to all players listed in the table.

 Arguments

 Player ply


The player(s) to send the message to. Can be a table of players or a CRecipientFilter.


"net/SendPVS"
net.SendPVS( Vector position ) 
 Description
Sends the message to all players the position is in the PVS of or, more simply said, sends the message to players that can potentially see this position.

 Arguments

 Vector position


Position that must be in players visibility set.


"net/WriteData"
net.WriteData( string binaryData, number length ) 
 Description
Writes a chunk of binary data to the message.

 Arguments

 string binaryData


The binary data to be sent.

 Arguments

 number length


The length of the binary data to be sent, in bytes.


"net/WriteAngle"
net.WriteAngle( Angle angle ) 
 Description
Writes an angle to the current net message.

 Arguments

 Angle angle


The angle to be sent.


"net/WriteBit"
net.WriteBit( boolean boolean ) 
 Description
Appends a boolean (as 1 or 0) to the current net message.
Please note that the bit is written here from a boolean (true/false) but net.ReadBit returns a number.

 Arguments

 boolean boolean


Bit status (false = 0, true = 1)


"net/SendToServer"
net.SendToServer(  ) 
 Description
Sends the current message to the server.

 Examples
 Example
Sends a simple hello_world message with the string Hi to the server

net.Start( hello_world )
	net.WriteString( Hi )
net.SendToServer()
Output:

The netmessage hello_world is sent to the server. The server can handle this with net.Receive.
Remember that any client has the potential to send any net message at any time. On your server-side net.Receive, make sure to verify the message senders permissions whenever you can and prevent expensive functions from being run too often.


"net/Start"
net.Start( string messageName, boolean unreliable=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Begins a new net message. If another net message is already started and hasnt been sent yet, it will be discarded.



WARNING


Each net message has a length limit of 64KB!




WARNING


The message name must be pooled with util.AddNetworkString beforehand!


 Arguments

 string messageName


The name of the message to send

 Arguments

 boolean unreliable=false


If set to true, the message is not guaranteed to reach its destination

 Returns

 boolean


True if the message has been started.


"net/WriteBool"
net.WriteBool( boolean boolean ) 
 Description
Appends a boolean to the current net message. Alias of net.WriteBit

 Arguments

 boolean boolean


Boolean value to write


"net/SendOmit"
net.SendOmit( Player ply ) 
 Description
Sends the current message to all except the specified, or to all except all players in the table.

 Arguments

 Player ply


The player(s) to NOT send the message to. Can be a table of players


"net/WriteDouble"
net.WriteDouble( number double ) 
 Description
Appends a double-precision number to the current net message.

 Arguments

 number double


The double to be sent


"net/WriteFloat"
net.WriteFloat( number float ) 
 Description
Appends a float (number with decimals) to the current net message.

 Arguments

 number float


The float to be sent.


"net/WriteInt"
net.WriteInt( number integer, number bitCount ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Appends an integer - a whole number - to the current net message. Can be read back with net.ReadInt on the receiving end.
Use net.WriteUInt to send an unsigned number (that you know will never be negative). Use net.WriteFloat for a non-whole number (e.g. 2.25).

 Arguments

 number integer


The integer to be sent.

 Arguments

 number bitCount


The amount of bits the number consists of. This must be 32 or less.
If you are unsure what to set, just set it to 32.


Consult the table below to determine the bit count you need.


 Bit Count

 Minimum value

 Maximum value


 2

 -2

 1


 3

 -4

 3


 4

 -8

 7


 5

 -16

 15


 6

 -32

 31


 7

 -64

 63


 8

 -128

 127


 9

 -256

 255


 10

 -512

 511


 11

 -1024

 1023


 12

 -2048

 2047


 13

 -4096

 4095


 14

 -8192

 8191


 15

 -16384

 16383


 16

 -32768

 32767


 17

 -65536

 65535


 18

 -131072

 131071


 19

 -262144

 262143


 20

 -524288

 524287


 21

 -1048576

 1048575


 22

 -2097152

 2097151


 23

 -4194304

 4194303


 24

 -8388608

 8388607


 25

 -16777216

 16777215


 26

 -33554432

 33554431


 27

 -67108864

 67108863


 28

 -134217728

 134217727


 29

 -268435456

 268435455


 30

 -536870912

 536870911


 31

 -1073741824

 1073741823


 32

 -2147483648

 2147483647


 Examples
 Example
Sends the server the clients age.

--Client
function SendAge()
     net.Start( SendAge )
     net.WriteInt( 3, 3 )  -- Only 2 bits are needed to store the number 3, but we add one because of the rule.
     net.SendToServer()
end

--Server
util.AddNetworkString( SendAge )

local function GetAge( len, ply )
     local age = net.ReadInt( 3 ) -- use the same number of bits that were written
     print( Player  .. ply:Nick() ..  is  .. age ..  years old.
end
net.Receive( SendAge, GetAge )
Output:

Player &lt;name&gt; is 3 years old.


"net/WriteMatrix"
net.WriteMatrix( VMatrix matrix ) 
 Description
Writes a VMatrix to the current net message.

 Arguments

 VMatrix matrix


The matrix to be sent.


"net/WriteUInt"
net.WriteUInt( number unsignedInteger, number numberOfBits ) 
 Description
Appends an unsigned integer with the specified number of bits to the current net message.

 Arguments

 number unsignedInteger


The unsigned integer to be sent.

 Arguments

 number numberOfBits


The size of the integer to be sent, in bits. Acceptable values range from any number 1 to 32 inclusive. For reference, 1 = bit, 4 = nibble, 8 = byte, 16 = short, 32 = long.


"net/WriteTable"
net.WriteTable( table table ) 
 Description
Appends a table to the current net message. Adds 16 extra bits per key/value pair so youre better off writing each individual key/value as the exact type if possible.



WARNING


All net messages have a 64kb buffer. This function will not check or error when that buffer is overflown. You might want to consider using util.TableToJSON and util.Compress and send the resulting string in 60kb chunks, doing the opposite on the receiving end.


 Arguments

 table table


The table to be sent.



WARNING


If the table contains a nil key the table may not be read correctly.


"net/WriteString"
net.WriteString( string string ) 
 Description
Appends a string to the current net message. The size of the string is 8 bits plus 8 bits for every ASCII character in the string. The maximum allowed length of a single written string is 65533 characters.

 Arguments

 string string


The string to be sent.


"NextBot/BodyMoveXY"
NextBot:BodyMoveXY(  ) 
 Description
Should only be called in BodyUpdate. This sets the move_x and move_y pose parameters of the bot to fit how theyre currently moving, sets the animation speed to suit the ground speed, and calls FrameAdvance.



BUG


This function might cause crashes with some activities.


"net/WriteNormal"
net.WriteNormal( Vector normal ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Writes a normalized/direction vector ( Vector with length of 1 ) to the net message.
This function uses less bandwidth compared to net.WriteVector and will not send vectors with length of &gt; 1 properly.

 Arguments

 Vector normal


The normalized/direction vector to be send.

 Examples
 Example
Showcases the difference between this function and net.WriteVector.

if ( SERVER ) then
	util.AddNetworkString( test1 )
	util.AddNetworkString( test2 )
	
	timer.Simple( 1, function()
		net.Start( test1 )
			net.WriteVector( Vector( 1.23456789, 2.3456789, 3.456789 ) )
		net.Broadcast()
	
		net.Start( test2 )
			net.WriteNormal( Vector( 1.23456789, 2.3456789, 3.456789 ) )
		net.Broadcast()

		net.Start( test2 )
			net.WriteNormal( Vector( 1.23456789, 2.3456789, 3.456789 ):GetNormalized() )
		net.Broadcast()
	
		net.Start( test2 )
			net.WriteNormal( Vector( 0.5, -0.5, 0.23 ) )
		net.Broadcast()
	end )
else
	net.Receive( test1, function( ... )
		print( ... ) 
		print( net.ReadVector() ) 
	end )
	
	net.Receive( test2, function( ... )
		print( ... ) 
		print( net.ReadNormal() ) 
	end )
end
Output:

69	nil
1.218750 2.343750 3.437500
27	nil
1.000000 1.000000 0.000000
27	nil
0.283341 0.538349 0.793661
27	nil
0.499756 -0.499756 0.707452


"net/WriteVector"
net.WriteVector( Vector vector ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Appends a vector to the current net message.
Vectors sent by this function are compressed, which may result in precision loss. XYZ components greater than 16384 or less than -16384 are irrecoverably altered (most significant bits are trimmed) and precision after the decimal point is low.

 Arguments

 Vector vector


The vector to be sent.

 Examples
 Example
Create a serverside command to send a vector to all clients, and a function to receive the vector on the clientside. This example displays the vector compression discussed above.

if ( SERVER ) then

    util.AddNetworkString( testingvecs )
    function testvecs_sv()
        net.Start( testingvecs )
        net.WriteVector( Vector( 10000, 20000, -20000.123456789 ) )
        net.Broadcast()
    end
    concommand.Add( dovectest, testvecs_sv )

elseif ( CLIENT ) then

    function testvecs_cl( len )
        print( RECV: vec =  .. tostring( net.ReadVector() ) .. \n )
    end
    net.Receive( testingvecs, testvecs_cl )

end
Output:

RECV: vec = 10000.000000 3616.000000 -3616.093750


"net/WriteEntity"
net.WriteEntity( Entity entity ) 
 Description
Appends an entity to the current net message.

 Arguments

 Entity entity


The entity to be sent.


"NextBot/FindSpot"
NextBot:FindSpot( string type, table options ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Like NextBot:FindSpots but only returns a vector.

 Arguments

 string type


Either random, near, far

 Arguments

 table options


This table should contain the search info.

string type - The type (Onlyhiding for now)Vector pos - the position to search.number radius - the radius to search.number stepup - the highest step to step up.number stepdown - the highest we can step down without being hurt.

 Returns

 Vector


If it finds a spot it will return a vector. If not it will return nil.


"net/WriteColor"
net.WriteColor( table Color ) 
 Description
Appends a Color structure to the current net message.

 Arguments

 table Color


The Color structure you want to append to the net message.


"NextBot/BecomeRagdoll"
NextBot:BecomeRagdoll( CTakeDamageInfo info ) 
 Description
Become a ragdoll and remove the entity.

 Arguments

 CTakeDamageInfo info


Damage info passed from an onkilled event


"net/WriteType"
net.WriteType( any Data ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.

Used internally by net.WriteTable.
Appends any type of value to the current net message.



NOTE


An additional 8-bit unsigned integer indicating the type will automatically be written to the packet before the value, in order to facilitate reading with net.ReadType. If you know the data type you are writing, use a function meant for that specific data type to reduce amount of data sent.


 Arguments

 any Data


The data to be sent


"NextBot/GetRangeSquaredTo"
NextBot:GetRangeSquaredTo( Vector to ) 
 Description
Returns squared distance to an entity or a position.
See also NextBot:GetRangeTo.

 Arguments

 Vector to


The position to measure distance to. Can be an entity.

 Returns

 number


The squared distance


"NextBot/GetActivity"
NextBot:GetActivity(  ) 
 Description
Returns the currently running activity

 Returns

 number


The current activity


"NextBot/FindSpots"
NextBot:FindSpots( table specs ) 
 Description
Returns a table of hiding spots.

 Arguments

 table specs


This table should contain the search info.

string type - The type (either hiding)Vector pos - the position to search.number radius - the radius to search.number stepup - the highest step to step up.number stepdown - the highest we can step down without being hurt.

 Returns

 table


An unsorted table of tables containing:

Vector vector - The position of the hiding spotnumber distance - the distance to that position


"NextBot/MoveToPos"
NextBot:MoveToPos( Vector pos, table options ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
To be called in the behaviour coroutine only! Will yield until the bot has reached the goal or is stuck

 Arguments

 Vector pos


The position we want to get to

 Arguments

 table options


A table containing a bunch of tweakable options.
number lookahead - Minimum look ahead distance.
number tolerance - How close we must be to the goal before it can be considered complete.
boolean draw - Draw the path. Only visible on listen servers and single player.
number maxage - Maximum age of the path before it times out.

number repath - Rebuilds the path after this number of seconds.

 Returns

 string


Either failed, stuck, timeout or ok - depending on how the NPC got on


"NextBot/GetSolidMask"
NextBot:GetSolidMask(  ) 
 Description
Returns the solid mask for given NextBot.

 Returns

 number


The solid mask, see CONTENTS_ Enums and MASK_ Enums


"NextBot/GetRangeTo"
NextBot:GetRangeTo( Vector to ) 
 Description
Returns the distance to an entity or position.
See also NextBot:GetRangeSquaredTo.

 Arguments

 Vector to


The position to measure distance to. Can be an entity.

 Returns

 number


The distance


"NextBot/SetSolidMask"
NextBot:SetSolidMask( number mask ) 
 Description
Sets the solid mask for given NextBot.
The default solid mask of a NextBot is MASK_NPCSOLID.

 Arguments

 number mask


The new mask, see CONTENTS_ Enums and MASK_ Enums


"NextBot/StartActivity"
NextBot:StartActivity( number activity ) 
 Description
Start doing an activity (animation)

 Arguments

 number activity


One of the ACT_ Enums


"NextBot/PlaySequenceAndWait"
NextBot:PlaySequenceAndWait( string name, number speed=1 ) 
 Description
To be called in the behaviour coroutine only! Plays an animation sequence and waits for it to end before returning.

 Arguments

 string name


The sequence name

 Arguments

 number speed=1


Playback Rate of that sequence


"notification/AddLegacy"
notification.AddLegacy( string Text, number Type, number Length ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Adds a standard notification to your screen.

 Arguments

 string Text


The string to display

 Arguments

 number Type


Determines the method for displaying the notification. See the NOTIFY_ Enums

 Arguments

 number Length


The number of seconds to display the notification for

 Examples
 Example
Adds a prop undo notification to the screen, like in Sandbox.

notification.AddLegacy( Undone Prop, NOTIFY_UNDO, 2 )
surface.PlaySound( buttons/button15.wav )
Msg( Prop undone\n )
Output:

Adds a notice that says Undone Prop, plays the undo sound, and adds a message to the console.


"NPC/AddEntityRelationship"
NPC:AddEntityRelationship( Entity target, number disposition, number priority ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Makes the NPC like, hate, feel neutral towards, or fear the entity in question. If you want to setup relationship towards a certain entity class, use NPC:AddRelationship.

 Arguments

 Entity target


The entity for the relationship to be applied to.

 Arguments

 number disposition


A D_ Enums representing the relationship type.

 Arguments

 number priority


How strong the relationship is.

 Examples
 Example
Spawns a manhack and makes it fear player 1.

local hack = ents.Create( npc_manhack )
hack:Spawn()
hack:AddEntityRelationship( player.GetByID( 1 ), D_FR, 99 )


 Examples
 Example
Find wanted NPC class name and make them hate the entity.

function ENT:Think()
local enemy = ents.FindByClass( npc_* ) --Find any spawned entity in map with class beginning at npc
    for _, x in pairs( enemy ) do --for every found entity do
       if!x:IsNPC() then return end -- if ( found entity is not NPC ) then do nothing 
       if ( x:GetClass()!= self:GetClass() then -- if ( found entity is not self entity ) then continue
        x:AddEntityRelationship( self, D_HT, 99 ) -- found entity will hate self entity
        self:AddEntityRelationship( x, D_HT, 99 ) -- self entity will hate found entity          
       end
    end 
end


"notification/Kill"
notification.Kill( any uid ) 
 Description
Removes the notification after 0.8 seconds.

 Arguments

 any uid


The unique ID of the notification


"notification/AddProgress"
notification.AddProgress( any id, string strText ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Adds a notification with an animated progress bar.

 Arguments

 any id


Can be any type. Its used as an index.

 Arguments

 string strText


The text to show

 Examples
 Example
Add a notification that says Downloading file..., and remove after three seconds.

notification.AddProgress( FileDownload, Downloading file... )
timer.Simple( 3, function()
	notification.Kill( FileDownload )
end )


"NextBot/HandleStuck"
NextBot:HandleStuck(  ) 
 Description
Called from Lua when the NPC is stuck. This should only be called from the behaviour coroutine - so if you want to override this function and do something special that yields - then go for it.
You should always call self.loco:ClearStuck() in this function to reset the stuck status - so it knows its unstuck. See CLuaLocomotion:ClearStuck.


"NPC/CapabilitiesClear"
NPC:CapabilitiesClear(  ) 
 Description
Removes all of Capabilities the NPC has.

 Examples
 Example
Removes all of the Capabilities that the NPC has.

self:CapabilitiesClear()


"NPC/AddRelationship"
NPC:AddRelationship( string relationstring ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Changes how an NPC feels towards another NPC. If you want to setup relationship towards a certain entity, use NPC:AddEntityRelationship.

 Arguments

 string relationstring


A string representing how the relationship should be set up.

Should be formatted as npc_class D_ Enums numberPriority.

 Examples
 Example
Spawns a manhack and makes it hate floor turrets.

local hack = ents.Create( npc_manhack )
hack:Spawn()
hack:AddRelationship( npc_turret_floor D_HT 99 )


"NPC/CapabilitiesAdd"
NPC:CapabilitiesAdd( number capabilities ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Adds a capability to the NPC.

 Arguments

 number capabilities


Capabilities to add, see CAP_ Enums

 Examples
 Example
Adds the CAP_USE_SHOT_REGULATOR to the NPCs capabilities.

self:CapabilitiesAdd( CAP_USE_SHOT_REGULATOR )


"NPC/CapabilitiesGet"
NPC:CapabilitiesGet(  ) 
 Description
Returns the NPCs capabilities along the ones defined on its weapon.

 Returns

 number


The capabilities as a bitflag.

See CAP_ Enums


"NPC/AlertSound"
NPC:AlertSound(  ) 
 Description
Force an NPC to play his Alert sound.


"NPC/ClearCondition"
NPC:ClearCondition( number condition ) 
 Description
Clears out the specified COND_ Enums on this NPC.

 Arguments

 number condition


The COND_ Enums to clear out.


"NPC/Classify"
NPC:Classify(  ) 
 Description
Returns the NPC class. Do not confuse with Entity:GetClass!

 Returns

 number


See CLASS_ Enums


"NPC/ClearGoal"
NPC:ClearGoal(  ) 
 Description
Clears the current NPC goal or target.


"NPC/ConditionName"
NPC:ConditionName( number cond ) 
 Description
Translates condition ID to a string.

 Arguments

 number cond


The NPCs condition ID, see COND_ Enums

 Returns

 string


A human understandable string equivalent of that condition.


"NPC/ClearSchedule"
NPC:ClearSchedule(  ) 
 Description
Stops the current schedule that the NPC is doing.


"NPC/ClearEnemyMemory"
NPC:ClearEnemyMemory(  ) 
 Description
Clears the Enemy from the NPCs memory, effectively forgetting it until met again with either the NPC vision or with NPC:UpdateEnemyMemory.


"NPC/FoundEnemySound"
NPC:FoundEnemySound(  ) 
 Description
Force an NPC to play its FoundEnemy sound.


"NPC/ClearExpression"
NPC:ClearExpression(  ) 
 Description
Clears the NPCs current expression which can be set with NPC:SetExpression.


"NPC/ExitScriptedSequence"
NPC:ExitScriptedSequence(  ) 
 Description
Makes an NPC exit a scripted sequence, if one is playing.


"NPC/CapabilitiesRemove"
NPC:CapabilitiesRemove( number capabilities ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Remove a certain capability.

 Arguments

 number capabilities


Capabilities to remove, see CAP_ Enums

 Examples
 Example
Removes the CAP_USE_SHOT_REGULATOR capability, if the NPC has it.

self:CapabilitiesRemove( CAP_USE_SHOT_REGULATOR )


"NPC/FearSound"
NPC:FearSound(  ) 
 Description
Force an NPC to play his Fear sound.


"NPC/Disposition"
NPC:Disposition( Entity ent ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the way the NPC feels about the entity.

 Arguments

 Entity ent


The entity to get the disposition from.

 Returns

 number


The NPCs disposition, see D_ Enums.

 Examples
 Example
If a player is hurt by a friendly NPC, announce it.

function FriendlyFireAnnouncement( ply, atk )
   if ( atk:IsNPC() and atk:Disposition( ply ) == D_LI ) then --like
      PrintMessage( A ..atk:GetClass().. attacked ..ply:Nick()..!, HUD_PRINTTALK )
   end
end

hook.Add( PlayerHurt, FriendlyFire, FriendlyFireAnnouncement )
Output:

Prints A ____ attacked ____! to everyones chat.


"NPC/GetActivity"
NPC:GetActivity(  ) 
 Description
Returns the NPCs current activity.

 Returns

 number


Current activity, see ACT_ Enums.


"NPC/GetAimVector"
NPC:GetAimVector(  ) 
 Description
Returns the aim vector of the NPC. NPC alternative of Player:GetAimVector.

 Returns

 Vector


The aim direction of the NPC.


"NPC/GetCurrentSchedule"
NPC:GetCurrentSchedule(  ) 
 Description
Returns the NPCs current schedule.

 Returns

 number


The NPCs schedule, see SCHED_ Enums or -1 if we failed for some reason


"NPC/GetActiveWeapon"
NPC:GetActiveWeapon(  ) 
 Description

 Returns

 Entity


The NPCs current weapon


"NPC/GetArrivalSequence"
NPC:GetArrivalSequence(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 number


"NPC/GetExpression"
NPC:GetExpression(  ) 
 Description
Returns the expression file the NPC is currently playing.

 Returns

 string


The file path of the expression.


"NPC/GetCurrentWeaponProficiency"
NPC:GetCurrentWeaponProficiency(  ) 
 Description
Returns how proficient (skilled) an NPC is with its current weapon.

 Returns

 number


NPCs proficiency for current weapon. See WEAPON_PROFICIENCY_ Enums.


"NPC/GetArrivalActivity"
NPC:GetArrivalActivity(  ) 
 Description
Returns the activity to be played when the NPC arrives at its goal

 Returns

 number


"NPC/GetEnemy"
NPC:GetEnemy(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the entity that this NPC is trying to fight.



BUG


This returns nil if the NPC has no enemy. You should use IsValid (which accounts for nil and NULL) on the return to verify validity of the enemy.



 Returns

 NPC


Enemy NPC.

 Examples
 Example
Kill any npc that sets the first player as its enemy.

local function Think()
	for k, v in pairs( ents.GetAll() ) do
		if ( v:IsNPC() and v:GetEnemy() == Entity( 1 ) then
			v:TakeDamage( 999 )
		end
	end
end

hook.Add( Think, Kill My Enemies, Think )
Output:

Any npc that sets their enemy to Entity( 1 ) dies.


"NPC/GetMovementActivity"
NPC:GetMovementActivity(  ) 
 Description
Returns the NPCs current movement activity.

 Returns

 number


Current NPC movement activity, see ACT_ Enums.


"NPC/GetHullType"
NPC:GetHullType(  ) 
 Description
Returns NPCs hull type set by NPC:SetHullType.

 Returns

 number


Hull type, see HULL_ Enums


"NPC/GetNPCState"
NPC:GetNPCState(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the NPCs state.

 Returns

 number


The NPCs current state, see NPC_STATE_ Enums.

 Examples
 Example
Function which prints out a list of idle NPCs to the server console.

function ReportIdleNPCs()

	for _, npc in pairs( ents.FindByClass( npc_* ) ) do
	
		if( IsValid( npc ) &amp;&amp; npc:IsNPC() &amp;&amp;
			npc:GetNPCState() == NPC_STATE_IDLE ) then
		
			print( Ent #..npc:EntIndex()..: ..npc:GetClass().. is idle. )
			
		end
		
	end

end
Output:

(To server console)
Ent #111: npc_citizen is idle.
Ent #120: npc_citizen is idle.
Ent #122: npc_citizen is idle.

Ent #124: npc_citizen is idle.


"NPC/GetPathDistanceToGoal"
NPC:GetPathDistanceToGoal(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 number


"NPC/GetBlockingEntity"
NPC:GetBlockingEntity(  ) 
 Description
Returns the entity blocking the NPC along its path.

 Returns

 Entity


Blocking entity


"NPC/GetMovementSequence"
NPC:GetMovementSequence(  ) 
 Description
Returns the index of the sequence the NPC uses to move.

 Returns

 number


The movement sequence index


"NPC/GetTarget"
NPC:GetTarget(  ) 
 Description
Returns the NPCs current target set by NPC:SetTarget.



BUG


This returns nil if the NPC has no target. You should use IsValid (which accounts for nil and NULL) on the return to verify validity of the target.



 Returns

 Entity


Target entity


"NPC/Give"
NPC:Give( string weapon ) 
 Description
Used to give a weapon to an already spawned NPC.

 Arguments

 string weapon


Class name of the weapon to equip to the NPC.

 Returns

 Weapon


The weapon entity given to the NPC.


"NPC/GetShootPos"
NPC:GetShootPos(  ) 
 Description
Returns the shooting position of the NPC.



NOTE


This only works properly when called on an NPC that can hold weapons, otherwise it will return the same value as Entity:GetPos.


 Returns

 Vector


The NPCs shooting position.


"NPC/GetPathTimeToGoal"
NPC:GetPathTimeToGoal(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 number


"NPC/HasCondition"
NPC:HasCondition( number condition ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns whether or not the NPC has the given condition.

 Arguments

 number condition


The condition index, see COND_ Enums.

 Returns

 boolean


True if the NPC has the given condition, false otherwise.

 Examples
 Example
Function that prints a list of conditions an NPC has.

function ListConditions( npc )
	
	if( !IsValid( npc ) ) then return end
	
	print( npc:GetClass().. ( ..npc:EntIndex().. ) has conditions: )
	
	for c = 0, 100 do
	
		if( npc:HasCondition( c ) ) then
		
			print( npc:ConditionName( c ) )
			
		end
		
	end
	
end
Output:

(To server console):
npc_antlion (120) has conditions:
COND_IN_PVS
COND_NO_WEAPON
COND_HAVE_ENEMY_LOS
COND_TOO_FAR_TO_ATTACK
COND_NO_HEAR_DANGER

COND_FLOATING_OFF_GROUND


"NPC/IsUnreachable"
NPC:IsUnreachable( Entity testEntity ) 
 Description
Returns whether the entity given can be reached by this NPC.

 Arguments

 Entity testEntity


The entity to test.

 Returns

 boolean


If the entity is reachable or not.


"NPC/LostEnemySound"
NPC:LostEnemySound(  ) 
 Description
Force an NPC to play his LostEnemy sound.


"NPC/IdleSound"
NPC:IdleSound(  ) 
 Description
Force an NPC to play his Idle sound.


"NPC/MaintainActivity"
NPC:MaintainActivity(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"NPC/IsCurrentSchedule"
NPC:IsCurrentSchedule( number schedule ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns whether or not the NPC is performing the given schedule.

 Arguments

 number schedule


The schedule number, see SCHED_ Enums.

 Returns

 boolean


True if the NPC is performing the given schedule, false otherwise.

 Examples
 Example
Function which returns the schedule an NPC is performing.

function GetNPCSchedule( npc )

	if( !IsValid( npc ) ) then return end
	
	for s = 0, LAST_SHARED_SCHEDULE-1 do
		if( npc:IsCurrentSchedule( s ) ) then return s end
	end
	
	return 0
	
end


"NPC/IsMoving"
NPC:IsMoving(  ) 
 Description
Returns whether the NPC is moving or not.

 Returns

 boolean


Whether the NPC is moving or not.


"NPC/MarkEnemyAsEluded"
NPC:MarkEnemyAsEluded(  ) 
 Description
Causes the NPC to temporarily forget the current enemy and switch on to a better one.


"NPC/IsRunningBehavior"
NPC:IsRunningBehavior(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 boolean


"NPC/MoveOrder"
NPC:MoveOrder(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"NPC/NavSetGoal"
NPC:NavSetGoal( Vector position ) 
 Description
Sets the goal position for the NPC.

 Arguments

 Vector position


The position to set as the goal


"NPC/NavSetRandomGoal"
NPC:NavSetRandomGoal( number minPathLength, Vector dir ) 
 Description
Creates a random path of specified minimum length between a closest start node and random node in the specified direction.

 Arguments

 number minPathLength


Minimum length of path in units

 Arguments

 Vector dir


Unit vector pointing in the direction of the target random node


"NPC/NavSetWanderGoal"
NPC:NavSetWanderGoal( number xoffset, number yoffset ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets a goal in x, y offsets for the npc to wander to

 Arguments

 number xoffset


X offset

 Arguments

 number yoffset


Y offset

 Examples
 Example
Given an npc makes them wander to a location 100 units in both the x and y directions

if ( npc:IsValid() then
    npc:NavSetWanderGoal( 100, 100 )
    npc:SetSchedule( SCHED_IDLE_WANDER )
end


"NPC/NavSetGoalTarget"
NPC:NavSetGoalTarget( Entity target, Vector offset ) 
 Description
Set the goal target for an NPC.

 Arguments

 Entity target


The targeted entity to set the goal to.

 Arguments

 Vector offset


The offset to apply to the targeted entitys position.


"NPC/RunEngineTask"
NPC:RunEngineTask( number taskID, number taskData ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 number taskID



 Arguments

 number taskData


The task data.


"NPC/SetArrivalDistance"
NPC:SetArrivalDistance(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"NPC/SetArrivalDirection"
NPC:SetArrivalDirection(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"NPC/SetArrivalSpeed"
NPC:SetArrivalSpeed(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"NPC/SetCondition"
NPC:SetCondition( number condition ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets an NPC condition.

 Arguments

 number condition


The condition index, see COND_ Enums.

 Examples
 Example
Freezes an NPC for a period of time.

COND_NPC_UNFREEZE = 68	-- Delete this line when COND_ enums are added

function FreezeNPCTemporarily( npc, delay )
	
	if( !IsValid( npc ) ) then return end
	
	delay = delay or 1
	
	npc:SetSchedule( SCHED_NPC_FREEZE )

	timer.Simple( delay, function()
		if( IsValid( npc ) ) then npc:SetCondition( COND_NPC_UNFREEZE ) end
	end )
	
end


"NPC/RemoveMemory"
NPC:RemoveMemory(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.
This function crashes the game no matter how it is used and will be removed in a future update.
Use NPC:ClearEnemyMemory instead.


"NPC/SetArrivalActivity"
NPC:SetArrivalActivity( number act ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 number act


"NPC/PlaySentence"
NPC:PlaySentence( string sentence, number delay, number volume ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Forces the NPC to play a sentence from scripts/sentences.txt

 Arguments

 string sentence


The sentence string to speak.

 Arguments

 number delay


Delay in seconds until the sentence starts playing.

 Arguments

 number volume


The volume of the sentence, from 0 to 1.

 Returns

 number


Returns the sentence index, -1 if the sentence couldnt be played.


"NPC/SetCurrentWeaponProficiency"
NPC:SetCurrentWeaponProficiency( number proficiency ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the weapon proficiency of an NPC (how skilled an NPC is with its current weapon).

 Arguments

 number proficiency


The proficiency for the NPCs current weapon. See WEAPON_PROFICIENCY_ Enums.

 Examples
 Example
Makes all NPCs suck at using their current weapons.

for _, v in pairs( ents.FindByClass( npc_* ) ) do
    v:SetCurrentWeaponProficiency( WEAPON_PROFICIENCY_POOR )
end


"NPC/SetEnemy"
NPC:SetEnemy( Entity enemy, boolean newenemy=true ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets the target for an NPC.

 Arguments

 Entity enemy


The enemy that the NPC should target

 Arguments

 boolean newenemy=true


Calls NPC:SetCondition(COND_NEW_ENEMY) if the new enemy is valid and not equal to the last enemy.

 Examples
 Example
If any NPC has no specific target, it will go towards the nearest enemy. Place this in a think function in init.lua

for k, v in ipairs( ents.FindByClass( npc_* ) ) do
	if ( v:IsNPC() ) then
		if ( !IsValid( v:GetEnemy() ) ) then
			local nearest_ply
			local dist = 0
			for i, j in ipairs( player.GetAll() ) do
				local dist2 = j:GetPos():Distance( v:GetPos() )
				if ( dist2 &lt; dist ) then
					dist = dist2
					nearest_ply = j
				end
			end
            v:SetEnemy( nearest_ply )
		end
	end
end


"NPC/SetHullType"
NPC:SetHullType( number hullType ) 
 Description
Sets the hull type for the NPC.

 Arguments

 number hullType


Hull type. See HULL_ Enums


"NPC/SetArrivalSequence"
NPC:SetArrivalSequence(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"NPC/SentenceStop"
NPC:SentenceStop(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"NPC/SetExpression"
NPC:SetExpression( string expression ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Sets the NPCs .vcd expression. Similar to Entity:PlayScene except the scene is looped until its interrupted by default NPC behavior or NPC:ClearExpression.

 Arguments

 string expression


The expression filepath.

 Returns

 number


 Examples
 Example
Function which makes the NPC whom the player is looking at repeat an annoying scene.

function GrenadesScene( ply )

	if( !IsValid( ply ) ) then return end
	
	local npc = ply:GetEyeTrace().Entity
	
	if( IsValid( npc ) &amp;&amp; npc:IsNPC() ) then
		npc:SetExpression( scenes/streetwar/sniper/ba_nag_grenade0..math.random( 1, 5 )...vcd )
	end
	
end


"NPC/SetHullSizeNormal"
NPC:SetHullSizeNormal(  ) 
 Description
Updates the NPCs hull and physics hull in order to match its model scale. Entity:SetModelScale seems to take care of this regardless.


"NPC/SetMaxRouteRebuildTime"
NPC:SetMaxRouteRebuildTime(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"NPC/SetSchedule"
NPC:SetSchedule( number schedule ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the NPCs current schedule.

 Arguments

 number schedule


The NPC schedule, see SCHED_ Enums.

 Examples
 Example
Function which forces an NPC to walk to an entity.

function NPCMoveTo( npc, ent )

	if( !IsValid( npc ) or!IsValid( ent ) ) then return end
		
	npc:SetSaveValue( m_vecLastPosition, ent:GetPos() )
	npc:SetSchedule( SCHED_FORCED_GO )
	
end


"NPC/SetLastPosition"
NPC:SetLastPosition( Vector Position ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the last registered or memorized position for an npc. When using scheduling, the NPC will focus on navigating to the last position via nodes.



NOTE


The navigation requires ground nodes to function properly, otherwise the NPC could only navigate in a small area. (https://developer.valvesoftware.com/wiki/Info_node)


 Arguments

 Vector Position


Where the NPCs last position will be set.

 Examples
 Example
Make an NPC chase a player

function NPCGoGoRun( npc, ply )
	npc:SetLastPosition( ply:GetPos() )
	npc:SetSchedule( SCHED_FORCED_GO_RUN )
end
Output:

The NPC will chase the player.


"NPC/SetNPCState"
NPC:SetNPCState( number state ) 
 Description
Sets the state the NPC is in to help it decide on a ideal schedule.

 Arguments

 number state


New NPC state, see NPC_STATE_ Enums


"NPC/SetMovementSequence"
NPC:SetMovementSequence( number sequenceId ) 
 Description
Sets the sequence the NPC navigation path uses for speed calculation. Doesnt seem to have any visible effect on NPC movement.

 Arguments

 number sequenceId


The movement sequence index


"NPC/SetMovementActivity"
NPC:SetMovementActivity( number activity ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the activity the NPC uses when it moves.

 Arguments

 number activity


The movement activity, see ACT_ Enums.

 Examples
 Example
Makes all NPCs walk instead of run.

function GM:Think()
	
	for _, npc in pairs( ents.FindByClass( npc_* ) ) do

		if( IsValid( npc ) &amp;&amp; npc:IsNPC() &amp;&amp; npc:GetMovementActivity()!= ACT_WALK ) then
			npc:SetMovementActivity( ACT_WALK )
		end

	end
	
end


"NPC/SetTarget"
NPC:SetTarget( Entity entity ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the NPCs target. This is used in some engine schedules.

 Arguments

 Entity entity


The target of the NPC.

 Examples
 Example
Sets the NPCs target to first player.

npc:SetTarget( Entity( 1 ) )


"NPC/TaskFail"
NPC:TaskFail( string task ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 string task


A string most likely defined as a Source Task, for more information on Tasks go to https://developer.valvesoftware.com/wiki/Task


"NPC/TaskComplete"
NPC:TaskComplete(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"NPC/StopMoving"
NPC:StopMoving(  ) 
 Description
Resets the NPCs movement animation and velocity. Does not actually stop the NPC from moving.


"NPC/UpdateEnemyMemory"
NPC:UpdateEnemyMemory( Entity enemy, Vector pos ) 
 Description
Force the NPC to update information on the supplied enemy, as if it had line of sight to it.

 Arguments

 Entity enemy


The enemy to update.

 Arguments

 Vector pos


The last known position of the enemy.


"NPC/TargetOrder"
NPC:TargetOrder(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"NPC/UseActBusyBehavior"
NPC:UseActBusyBehavior(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 boolean


"NPC/StartEngineTask"
NPC:StartEngineTask( number task, number taskData ) 
 Description
Forces the NPC to start an engine task, this has different results for every NPC.

 Arguments

 number task



 Arguments

 number taskData


The task data as a float, not all tasks make use of it.


"NPC/UseNoBehavior"
NPC:UseNoBehavior(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"NPC/UseAssaultBehavior"
NPC:UseAssaultBehavior(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 boolean


"numpad/FromButton"
numpad.FromButton(  ) 
 Description
Returns true during a function added with  numpad.Register when the third argument to numpad.Activate is true.
This is caused when a numpad function is triggered by a button SENT being used.

 Returns

 boolean


wasButton


"numpad/OnUp"
numpad.OnUp( Player ply, number key, string name, vararg ... ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Calls a function registered with numpad.Register when a player releases specified key.
See for key pressed action: numpad.OnDown

 Arguments

 Player ply


The player whose numpad should be watched

 Arguments

 number key


The key, corresponding to KEY_ Enums

 Arguments

 string name


The name of the function to run, corresponding with the one used in numpad.Register

 Arguments

 vararg ...


Arguments to pass to the function passed to numpad.Register.

 Returns

 number


The impulse ID


"numpad/Deactivate"
numpad.Deactivate( Player ply, number key, boolean isButton ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Deactivates numpad key owned by the player

 Arguments

 Player ply


The player whose numpad should be simulated

 Arguments

 number key


The key to press, corresponding to KEY_ Enums

 Arguments

 boolean isButton


Should this keypress pretend to be a from a gmod_button? (causes numpad.FromButton to return true)


"numpad/Remove"
numpad.Remove( number ID ) 
 Description
Removes a function added by either numpad.OnUp or numpad.OnDown

 Arguments

 number ID


The impulse ID returned by numpad.OnUp or numpad.OnDown


"os/clock"
os.clock(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the approximate cpu time the application ran.

 Returns

 number


runtime

 Examples
 Example
Prints the amount of time since Garrys Mod has been open to the console.

print( os.clock() )
Output:

runtime


"numpad/Toggle"
numpad.Toggle( Player ply, number key ) 
 Description
Either runs numpad.Activate or numpad.Deactivate depending on the keys current state

 Arguments

 Player ply


The player whose numpad should be simulated

 Arguments

 number key


The key to press, corresponding to KEY_ Enums


"os/difftime"
os.difftime( number timeA, number timeB ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Subtracts the second of the first value and rounds the result.

 Arguments

 number timeA


The first value.

 Arguments

 number timeB


The value to subtract.

 Returns

 number


diffTime


"os/date"
os.date( string format, number time ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns the date/time as a formatted string or in a table.

 Arguments

 string format


The format string.
If this is equal to *t or !*t then this function will return a DateData structure, otherwise it will return a string.
If this starts with an !, the returned data will use the UTC timezone rather than the local timezone.
See http://www.mkssoftware.com/docs/man3/strftime.3.asp for available format flags.



BUG


Not all flags are available on all operating systems and the result of using an invalid flag is undefined. This currently crashes the game on Windows. Most or all flags are available on OS X and Linux but considerably fewer are available on Windows. See http://msdn.microsoft.com/en-us/library/fe06s4ak.aspx for a list of available flags on Windows. Note that the # flags also crashes the game on Windows.




 Arguments

 number time


Time to use for the format.

 Returns

 string


Formatted date



NOTE


This will be a DateData structure if the first argument equals to *t or !*t



 Examples
 Example
This will use the os.time() function, and return it in a friendly way.
os.time() is useful for storing as a date stamp but needs this to make it readable.

local Timestamp = os.time()
local TimeString = os.date( %H:%M:%S -%d/%m/%Y , Timestamp )
print( Timestamp:, Timestamp )
print( TimeString:, TimeString )
Output:

Timestamp:	1544869456
TimeString:	10:24:16 - 15/12/2018


"NPC/UseFuncTankBehavior"
NPC:UseFuncTankBehavior(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 boolean


"NPC/UseFollowBehavior"
NPC:UseFollowBehavior(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 boolean


"os/time"
os.time( table dateData=nil ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the system time in seconds past the unix epoch. If a table is supplied, the function attempts to build a system time with the specified table members.

 Arguments

 table dateData=nil


Table to generate the time from. This tables data is interpreted as being in the local timezone. See DateData structure

 Returns

 number


Seconds passed since Unix epoch

 Examples
 Example
Prints out the current time, in seconds past the unix epoch.

print( os.time() )
Output:

1544890044


"NPC/UseLeadBehavior"
NPC:UseLeadBehavior(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 boolean


"numpad/Register"
numpad.Register( string id, function func ) 
 Description
Registers a numpad library action for use with numpad.OnDown and numpad.OnUp

 Arguments

 string id


The unique id of your action.

 Arguments

 function func


The function to be executed.
Arguments are:
Player ply - The player who pressed the button
vararg ... - The 4th and all subsequent arguments passed from numpad.OnDown and/or numpad.OnUp


Returning false in this function will remove the listener which triggered this function (example: return false if one of your varargs is an entity which is no longer valid)


"package/seeall"
package.seeall( table module ) 
 Description
Sets a metatable for module with its __index field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to module.

 Arguments

 table module


The module table to be given a metatable


"Panel/Add"
Panel:Add( Panel object ) 
 Description
Adds the specified object to the panel.

 Arguments

 Panel object


The panel to be added (parented). Can also be:

 string Class Name - creates panel with the specified name and adds it to the panel.
 table PANEL table - creates a panel from table and adds it to the panel.


 Returns

 Panel


New panel


"Panel/AlignRight"
Panel:AlignRight( number offset=0 ) 
 Description
Aligns the panel on the right of its parent with the specified offset.

 Arguments

 number offset=0


The align offset.


"numpad/Activate"
numpad.Activate( Player ply, number key, boolean isButton ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Activates numpad key owned by the player

 Arguments

 Player ply


The player whose numpad should be simulated

 Arguments

 number key


The key to press, see KEY_ Enums

 Arguments

 boolean isButton


Should this keypress pretend to be a from a gmod_button? (causes numpad.FromButton to return true)


"Panel/AlignTop"
Panel:AlignTop( number offset=0 ) 
 Description
Aligns the panel on the top of its parent with the specified offset.

 Arguments

 number offset=0


The align offset.


"Panel/AlignBottom"
Panel:AlignBottom( number offset=0 ) 
 Description
Aligns the panel on the bottom of its parent with the specified offset.

 Arguments

 number offset=0


The align offset.


"Panel/AnimTail"
Panel:AnimTail(  ) 
 Description
Returns the SysTime value when all animations for this panel object will end.

 Returns

 number


The system time value when all animations will end for this panel.


"numpad/OnDown"
numpad.OnDown( Player ply, number key, string name, vararg ... ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Calls a function registered with numpad.Register when a player presses specified key.
See for key released action: numpad.OnUp

 Arguments

 Player ply


The player whose numpad should be watched

 Arguments

 number key


The key, corresponding to KEY_ Enums

 Arguments

 string name


The name of the function to run, corresponding with the one used in numpad.Register

 Arguments

 vararg ...


Arguments to pass to the function passed to numpad.Register.

 Returns

 number


The impulse ID


"Panel/AlphaTo"
Panel:AlphaTo( number alpha, number duration, number delay=0, function callback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Uses animation to transition the current alpha value of a panel to a new alpha, over a set period of time and after a specified delay.

 Arguments

 number alpha


The alpha value (0-255) to approach.

 Arguments

 number duration


The time in seconds it should take to reach the alpha.

 Arguments

 number delay=0


The delay before the animation starts.

 Arguments

 function callback


The function to be called once the animation finishes. Arguments are:

 table animData - The AnimationData structure that was used.
 Panel pnl - The panel object whose alpha was changed.


"Panel/AddText"
Panel:AddText(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Does nothing
This function does nothing.


"Panel/AppendText"
Panel:AppendText( string txt ) 
 Description
Appends text to a RichText element. This does not automatically add a new line.

 Arguments

 string txt


The text to append (add on).


"Panel/ApplyGWEN"
Panel:ApplyGWEN( table GWENTable ) 
 Description
Used by Panel:LoadGWENFile and Panel:LoadGWENString to apply a GWEN controls table to a panel object.
You can do this manually using file.Read and util.JSONToTable to import and create a GWEN table structure from a .gwen file. This method can then be called, passing the GWEN tables Controls member.

 Arguments

 table GWENTable


The GWEN controls table to apply to the panel.


"Panel/AnimationThinkInternal"
Panel:AnimationThinkInternal(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Performs the per-frame operations required for panel animations.
This is called every frame by PANEL:AnimationThink.


"Panel/AlignLeft"
Panel:AlignLeft( number offset=0 ) 
 Description
Aligns the panel on the left of its parent with the specified offset.

 Arguments

 number offset=0


The align offset.


"Panel/Center"
Panel:Center(  ) 
 Description
Centers the panel on its parent.


"Panel/CenterVertical"
Panel:CenterVertical( number fraction=0.5 ) 
 Description
Centers the panel vertically with specified fraction.

 Arguments

 number fraction=0.5


The center fraction.


"Panel/CenterHorizontal"
Panel:CenterHorizontal( number fraction=0.5 ) 
 Description
Centers the panel horizontally with specified fraction.

 Arguments

 number fraction=0.5


The center fraction.


"Panel/ChildCount"
Panel:ChildCount(  ) 
 Description
Returns the amount of children of the of panel.

 Returns

 number


childCount


"Panel/Clear"
Panel:Clear(  ) 
 Description
Marks all of the panels children for deletion.


"Panel/ChildrenSize"
Panel:ChildrenSize(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Examples

4.1 Example




 Description
Returns the width and height of the space between the position of the panel (upper-left corner) and the max bound of the children panels (farthest reaching lower-right corner).

 Returns

 number


The children size width.

 Returns

 number


The children size height.

 Examples
 Example
Creates a recursively generated box of panels where the size of each panel is determined by the parent panels children size + 10x10 pixels.
Also they flash bluish colors, just for good measure.

-- Parent panel
BGPanel = vgui.Create( DPanel )
BGPanel:SetSize( 200, 200 )
BGPanel:Center()

local panel, child_size_w, child_size_h = nil, 0, 0

-- Create increasingly large blocks until children size exceeds the size of the panel
while( BGPanel:ChildrenSize() &lt; BGPanel:GetSize() ) do

	child_w, child_h = BGPanel:ChildrenSize()

	panel = vgui.Create( DPanel, BGPanel )
	panel:SetPos( 0, 0 )
	
	-- Increase size based on the children size
	panel:SetSize( child_w+10, child_h+10 )
	
	-- Random bluish color every frame
	function panel:PerformLayout()
		self:InvalidateLayout()	-- Call this again next frame
		self:SetBackgroundColor( Color( math.random( 0, 255 ), 255, math.random( 0, 255 ) ) )
	end
	
	-- Move to back so we can see the effect
	panel:MoveToBack()
	
end
Output:


"Panel/ConVarChanged"
Panel:ConVarChanged( string newValue ) 
 Description
Updates a panel objects associated console variable. This must first be set up with Derma_Install_Convar_Functions, and have a ConVar set using Panel:SetConVar.

 Arguments

 string newValue


The new value to set the associated console variable to.


"Panel/ColorTo"
Panel:ColorTo( table color, number length, number delay, function callback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Fades panels color to specified one. It wont work unless panel has SetColor function.

 Arguments

 table color


The color to fade to

 Arguments

 number length


Length of the animation

 Arguments

 number delay


Delay before start fading

 Arguments

 function callback


Function to execute when finished


"Panel/ConVarStringThink"
Panel:ConVarStringThink(  ) 
 Description
A think hook for panels using ConVars as a value. Call it in the Think hook. Sets the panels value should the convar change.
This function is best for: text inputs, read-only inputs, dropdown selects
For a number alternative, see Panel.ConVarNumberThink.
Important: Make sure your Panel has a SetValue function, else you may get errors.

 Examples
 Example
How it should be implemented into your input.

function PANEL:Think()
	ConVarStringThink()
end
Output:

Panels value is changed when the convar changes.


"Panel/CopyBase"
Panel:CopyBase( Panel srcPanel ) 
 Description
Gets the size, position and dock state of the passed panel object, and applies it to this one.

 Arguments

 Panel srcPanel


The panel to copy the boundary and dock settings from.


"Panel/CopyPos"
Panel:CopyPos( Panel base ) 
 Description
Copies the position of the panel.

 Arguments

 Panel base


Panel to position the width from.


"Panel/CopyBounds"
Panel:CopyBounds( Panel base ) 
 Description
Copies position and size of the panel.

 Arguments

 Panel base


The panel to copy size and position from.


"Panel/CopyHeight"
Panel:CopyHeight( Panel base ) 
 Description
Copies the height of the panel.

 Arguments

 Panel base


Panel to copy the height from.


"Panel/CopyWidth"
Panel:CopyWidth( Panel base ) 
 Description
Copies the width of the panel.

 Arguments

 Panel base


Panel to copy the width from.


"Panel/ConVarNumberThink"
Panel:ConVarNumberThink(  ) 
 Description
A think hook for Panels using ConVars as a value. Call it in the Think hook. Sets the panels value should the convar change.
This function is best for: checkboxes, sliders, number wangs
For a string alternative, see Panel.ConVarStringThink.
Important: Make sure your Panel has a SetValue function, else you may get errors.

 Examples
 Example
How it should be implemented into your input.

function PANEL:Think()
	self:ConVarNumberThink()
end
Output:

Panels value is changed when the convar changes.


"Panel/DeleteCookie"
Panel:DeleteCookie( string cookieName ) 
 Description
Deletes a cookie value using the panels cookie name ( Panel:GetCookieName ) and the passed extension.

 Arguments

 string cookieName


The unique cookie name to delete.


"Panel/CutSelected"
Panel:CutSelected(  ) 
 Description
Performs the CONTROL + X ( delete text and copy it to clipboard buffer ) action on selected text.


"Panel/CopySelected"
Panel:CopySelected(  ) 
 Description
Performs the CONTROL + C key combination effect ( Copy selection to clipboard ) on selected text.


"Panel/CursorPos"
Panel:CursorPos(  ) 
 Description
Returns the cursor position relative to the top left of the panel.
This is equivalent to calling gui.MousePos and then Panel:ScreenToLocal.



WARNING


This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass.
ie. inaccurate results may be returned if the panel or any of its ancestors have been repositioned outside of PANEL:Think or PANEL:PerformLayout within the last frame.


 Returns

 number


X coordinate of the cursor, relative to the top left of the panel.

 Returns

 number


Y coordinate of the cursor, relative to the top left of the panel.


"Panel/Distance"
Panel:Distance( Panel tgtPanel ) 
 Description
Returns the linear distance from the centre of this panel object and another.

 Arguments

 Panel tgtPanel


The target object with which to compare position.

 Returns

 number


The linear (straight-line) distance between the centres of the two objects.


"Panel/Command"
Panel:Command( string command ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sends an action command signal to the panel. The response is handled by PANEL:ActionSignal.

 Arguments

 string command


The command to send to the panel.

 Examples
 Example
Defines a function which displays a dialog box that asks the player if they want to leave the server. Clicking the buttons fire panel commands that call the PANEL:ActionSignal which handles what action should be taken.

function DisconnectDialog()

	-- Remove existing dialog box
	if( DialogBox ) then DialogBox:Remove() end
	
	-- Font and message
	local font = ChatFont
	local msg = Would you like to disconnect?
	
	-- Get the size of the text
	surface.SetFont( font )
	local msg_w, msg_h = surface.GetTextSize( msg )
	
	-- Padding and button size
	local padding = 15
	local btn_w, btn_h = 35, 25
	
	-- Calculate dialog box size
	local dialog_w = msg_w+( padding*2 )
	local dialog_h = msg_h+( padding*3 )+btn_h
	
	-- Create the dialog box
	DialogBox = vgui.Create( DPanel )
	DialogBox:SetSize( dialog_w, dialog_h )
	DialogBox:Center()
	DialogBox:SetBackgroundColor( Color( 64, 64, 92, 255 ) )
	
	-- Message
	local lbl = vgui.Create( DLabel, DialogBox )
	lbl:SetPos( padding, padding )
	lbl:SetSize( msg_w, msg_h )
	lbl:SetText( msg )
	lbl:SetFont( font )
	
	-- Yes button
	local yes = vgui.Create( DButton, DialogBox )
	yes:SetPos( ( dialog_w/2 )-btn_w-20, msg_h+padding*2 )
	yes:SetSize( btn_w, btn_h )
	yes:SetText( Yes )
	yes:SetFont( font )
	yes.DoClick = function() DialogBox:Command( yes ) end
	
	-- No button
	local no = vgui.Create( DButton, DialogBox )
	no:SetPos( ( dialog_w/2 )+20, msg_h+padding*2 )
	no:SetSize( btn_w, btn_h )
	no:SetText( No )
	no:SetFont( font )
	no.DoClick = function() DialogBox:Command( no ) end
	
	-- Force mouse input
	DialogBox:MakePopup()
	
	-- Hook fired when DialogBox:Command is used
	function DialogBox:ActionSignal( signalName, signalValue )
	
		-- Thank the player and disconnect after 2 seconds
		if( signalName == yes ) then
		
			chat.AddText( Color( 192, 192, 224 ), Thanks for playing ..LocalPlayer():Nick().., come back soon! )
			
			timer.Simple( 2.0, function()
				RunConsoleCommand( disconnect )
			end )
			
			self:Remove()
		
		-- Remove the dialog box
		elseif( signalName == no ) then
		
			self:Remove()
		
		end
	
	end
	
end
Output:


"Panel/DisableLerp"
Panel:DisableLerp(  ) 
 Description
Resets the panel objects Panel:SetPos method and removes its animation table (Panel.LerpAnim). This effectively undoes the changes made by Panel:LerpPositions.
In order to use Lerp animation again, you must call Panel:Stop before setting its SetPosReal property to nil. See the example below.

 Examples
 Example
Creates a function for changing the Lerp animation speed of a panel.

function ChangeLerpSpeed( pnl, newSpeed, ease )
	
	if!ispanel( pnl ) or!IsValid( pnl ) then return end -- Make sure panel is valid
	
	pnl:DisableLerp()
	pnl:Stop()
	pnl.SetPosReal = nil
	
	pnl:LerpPositions( newSpeed, ease )
	
end


"Panel/DragClick"
Panel:DragClick(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Called by Panel:DragMouseRelease when a user clicks one mouse button whilst dragging with another.
 Returns

 boolean


Always returns true.


"Panel/DistanceFrom"
Panel:DistanceFrom( number posX, number posY ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns the distance between the centre of this panel object and a specified point (local to the parent panel).

 Arguments

 number posX


The horizontal (x) position in pixels of the point to compare with. Local to the parent panel, or container.

 Arguments

 number posY


The vertical (y) position in pixels of the point to compare with. Local to the parent panel, or container.

 Returns

 number


The linear (straight-line) distance between the specified point and the centre of the panel object.


"Panel/Dock"
Panel:Dock( number dockType ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Sets the dock type of the panel.



NOTE


After using this function, if you want to get the correct panels bounds (position, size), use Panel:InvalidateParent (use true as argument if you need to update immediately)


 Arguments

 number dockType


Dock type using DOCK_ Enums.

 Examples
 Example

local f = vgui.Create( DFrame )
f:SetTitle( Dock Test )
f:SetSize( 256, 256 )
f:Center()
f:MakePopup()

local p = vgui.Create( DPanel, f )
p:Dock( FILL )
p:DockMargin( 0, 0, 0, 0 )

for i = 0, 10, 1 do
	local l = vgui.Create( DLabel, p )
	l:Dock( TOP )
	l:DockMargin( 4, 0, 0, 0 ) -- shift to the right
	l:SetColor( color_black )
	l:SetText( Hi! Im a label! )
end
Output:


 Examples
 Example
Example showing how multiple docked elements behave.

local frame = vgui.Create( DFrame )
frame:SetSize( 600, 300 )
frame:SetTitle( Docking Demonstration )
frame:Center()
frame:MakePopup( true )

local panel = vgui.Create( DPanel, frame ) --Create a panel on the left
panel:SetSize( 300, 0 ) --Height doesnt matter since were docking it to the left anyways
panel:Dock( LEFT )
local fill = vgui.Create( DButton, panel ) --Create a button and dock it
fill:SetText( FILL )
fill:Dock( FILL )
local left = vgui.Create( DButton, panel )
left:SetText( LEFT )
left:Dock( LEFT )
local right = vgui.Create( DButton, panel )
right:SetText( RIGHT )
right:Dock( RIGHT )
local top = vgui.Create( DButton, panel )
top:SetText( TOP )
top:Dock( TOP )
local bottom = vgui.Create( DButton, panel )
bottom:SetText( BOTTOM )
bottom:Dock( BOTTOM )

local panel = vgui.Create( DPanel, frame ) --Do the same thing on the right, but this time with top and bottom before left and right
panel:SetSize( 300, 0 )
panel:Dock( RIGHT )
local fill = vgui.Create( DButton, panel )
fill:SetText( FILL )
fill:Dock( FILL )
local top = vgui.Create( DButton, panel )
top:SetText( TOP )
top:Dock( TOP )
local bottom = vgui.Create( DButton, panel )
bottom:SetText( BOTTOM )
bottom:Dock( BOTTOM )
local left = vgui.Create( DButton, panel )
left:SetText( LEFT )
left:Dock( LEFT )
local right = vgui.Create( DButton, panel )
right:SetText( RIGHT )
right:Dock( RIGHT )
Output:


"Panel/DockMargin"
Panel:DockMargin( number marginLeft, number marginTop, number marginRight, number marginBottom ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Sets the dock margin of the panel.
The dock margin is the extra space that will be left around the edge when this element is docked inside its parent element.

 Arguments

 number marginLeft


The left margin to the parent.

 Arguments

 number marginTop


The top margin to the parent.

 Arguments

 number marginRight


The right margin to the parent.

 Arguments

 number marginBottom


The bottom margin to the parent.

 Examples
 Example
Example showing the effects of DockMargin and DockPadding

local frame = vgui.Create( DFrame )
frame:SetSize( 600, 300 )
frame:SetTitle( Docking Demonstration )
frame:Center()
frame:MakePopup( true )

local panel = vgui.Create( DPanel, frame )
panel:DockMargin( 10, 20, 30, 40 )
panel:DockPadding( 40, 30, 20, 10 )
panel:Dock( FILL )

local button = vgui.Create( DButton, panel )
button:SetText( Lopsided proportions! )
button:Dock( FILL )
Output:


"Panel/DockPadding"
Panel:DockPadding( number paddingLeft, number paddingTop, number paddingRight, number paddingBottom ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Sets the dock padding of the panel.
The dock padding is the extra space that will be left around the edge when child elements are docked inside this element.

 Arguments

 number paddingLeft


The left padding to the parent.

 Arguments

 number paddingTop


The top padding to the parent.

 Arguments

 number paddingRight


The right padding to the parent.

 Arguments

 number paddingBottom


The bottom padding to the parent.

 Examples
 Example
Example showing the effects of DockMargin and DockPadding

local frame = vgui.Create( DFrame )
frame:SetSize( 600, 300 )
frame:SetTitle( Docking Demonstration )
frame:Center()
frame:MakePopup( true )

local panel = vgui.Create( DPanel, frame )
panel:DockMargin( 10, 20, 30, 40 )
panel:DockPadding( 40, 30, 20, 10 )
panel:Dock( FILL )

local button = vgui.Create( DButton, panel )
button:SetText( Lopsided proportions! )
button:Dock( FILL )
Output:


"Panel/DragHoverEnd"
Panel:DragHoverEnd(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Called to end a drag and hover action. This resets the panels PANEL:PaintOver method, and is primarily used by dragndrop.StopDragging.


"Panel/DragMouseRelease"
Panel:DragMouseRelease( number mouseCode ) 
 Description
Called to inform the dragndrop library that a mouse button has been depressed on a panel object.

 Arguments

 number mouseCode


The code for the mouse button pressed, passed by, for example, PANEL:OnMouseReleased. See the MOUSE_ Enums.

 Returns

 boolean


true if an object was being dragged, otherwise false.


"Panel/DragHover"
Panel:DragHover( number HoverTime ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Called by dragndrop.HoverThink to perform actions on an object that is dragged and hovered over another.
 Arguments

 number HoverTime


If this time is greater than 0.1, Panel:DragHoverClick, passing it as an argument.


"Panel/DoModal"
Panel:DoModal(  ) 
 Description
Makes the panel lock the screen until it is removed. It will silently fail if used while cursor is not visible. Call Panel:MakePopup before calling this function.



BUG


You can still click in the world even if locked.


"Panel/DrawDragHover"
Panel:DrawDragHover( number x, number y, number width, number height ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Called to draw the drop target when an object is being dragged across another. See Panel:SetDropTarget.
 Arguments

 number x


The x coordinate of the top-left corner of the drop area.

 Arguments

 number y


The y coordinate of the top-left corner of the drop area.

 Arguments

 number width


The width of the drop area.

 Arguments

 number height


The height of the drop area.


"Panel/DragMousePress"
Panel:DragMousePress( number mouseCode ) 
 Description
Called to inform the dragndrop library that a mouse button is being held down on a panel object.

 Arguments

 number mouseCode


The code for the mouse button pressed, passed by, for example, PANEL:OnMousePressed. See the MOUSE_ Enums.


"Panel/DrawSelections"
Panel:DrawSelections(  ) 
 Description
Used to draw the magenta highlight colour of a panel object when it is selected. This should be called in the objects PANEL:PaintOver hook. Once this is implemented, the highlight colour will be displayed only when the object is selectable and selected. This is achieved using Panel:SetSelectable and Panel:SetSelected respectively.


"Panel/DrawFilledRect"
Panel:DrawFilledRect(  ) 
 Description
Draws a coloured rectangle to fill the panel object this method is called on. The colour is set using surface.SetDrawColor. This should only be called within the objects PANEL:Paint or PANEL:PaintOver hooks, as a shortcut for surface.DrawRect.


"Panel/DrawTexturedRect"
Panel:DrawTexturedRect(  ) 
 Description
Draws a textured rectangle to fill the panel object this method is called on. The texture is set using surface.SetTexture or surface.SetMaterial. This should only be called within the objects PANEL:Paint or PANEL:PaintOver hooks, as a shortcut for surface.DrawTexturedRect.


"Panel/EndBoxSelection"
Panel:EndBoxSelection(  ) 
 Description
Completes a box selection. If the end point of the selection box is within the selection canvas, mouse capture is disabled for the panel object, and the selected state of each child object within the selection box is toggled.

 Returns

 boolean


Whether the end point of the selection box was within the selection canvas.


"Panel/DrawOutlinedRect"
Panel:DrawOutlinedRect(  ) 
 Description
Draws a hollow rectangle the size of the panel object this method is called on, with a border width of 1 px. The border colour is set using surface.SetDrawColor. This should only be called within the objects PANEL:Paint or PANEL:PaintOver hooks, as a shortcut for surface.DrawOutlinedRect.


"Panel/GetAlpha"
Panel:GetAlpha(  ) 
 Description
Returns the alpha multiplier for this panel.

 Returns

 number


alphaMul


"Panel/GetChild"
Panel:GetChild( number childIndex ) 
 Description
Gets a child by its index.

 Arguments

 number childIndex


The index of the child to get.



NOTE


This index starts at 0, except when you use this on a DMenu.


"Panel/FocusPrevious"
Panel:FocusPrevious(  ) 
 Description
Focuses the previous panel in the focus queue.


"Panel/GetChildren"
Panel:GetChildren(  ) 
 Description
Returns a table with all the child panels of the panel.

 Returns

 table


children


"Panel/FocusNext"
Panel:FocusNext(  ) 
 Description
Focuses the next panel in the focus queue.


"Panel/GetCaretPos"
Panel:GetCaretPos(  ) 
 Description
Returns the position/offset of the caret (or text cursor) in a text-based panel object.

 Returns

 number


The caret position/offset from the start of the text. A value of 0 means the caret sits before the first character.


"Panel/Droppable"
Panel:Droppable( string name ) 
 Description
Makes this panel droppable. This is used with Panel:Receiver to create drag and drop events.
Can be called multiple times with different names allowing to be dropped onto different receivers.

 Arguments

 string name


Name of your droppable panel

 Returns

 table


Blank table stored on the panel itself under pnl.m_DragSlot[ name ]. Is reset every time this function is called and does not appear to be used or exposed anywhere else.


"Panel/GetClassName"
Panel:GetClassName(  ) 
 Description
Returns the class name of the panel.

 Returns

 string


className


"Panel/GetChildPosition"
Panel:GetChildPosition( Panel pnl ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns


 Description
Gets a child objects position relative to this panel object. The number of levels is not relevant; the child may have many parents between itself and the object on which the method is called.

 Arguments

 Panel pnl


The panel to get the position of.

 Returns

 number


The horizontal (x) position of the child relative to this panel object.

 Returns

 number


The vertical (y) position of the child relative to this panel object.


"Panel/GetBounds"
Panel:GetBounds(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Returns
5 Returns


 Description
Returns the position and size of the panel.
This is equivalent to calling Panel:GetPos and Panel:GetSize together.

 Returns

 number


The x coordinate of the panel, relative to its parents top left.

 Returns

 number


The y coordinate of the panel, relative to its parents top left.

 Returns

 number


The width of the panel.

 Returns

 number


The height of the panel.


"Panel/Find"
Panel:Find( string panelName ) 
 Description
Finds a panel in its children(and sub children) with the given name.

 Arguments

 string panelName


The name of the panel that should be found.

 Returns

 Panel


foundPanel


"Panel/GetChildrenInRect"
Panel:GetChildrenInRect( number x, number y, number w, number h ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Returns a table of all visible, selectable children of the panel object that lie at least partially within the specified rectangle.

 Arguments

 number x


The horizontal (x) position of the top-left corner of the rectangle, relative to the panel object.

 Arguments

 number y


The vertical (y) position of the top-left corner of the rectangle, relative to the panel object.

 Arguments

 number w


The width of the rectangle.

 Arguments

 number h


The height of the rectangle.

 Returns

 table


A table of panel objects that lie at least partially within the specified rectangle.


"Panel/DrawTextEntryText"
Panel:DrawTextEntryText( table textCol, table highlightCol, table cursorCol ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Used to draw the text in a DTextEntry within a derma skin. This should be called within the SKIN:PaintTextEntry skin hook.

 Arguments

 table textCol


The colour of the main text.

 Arguments

 table highlightCol


The colour of the selection highlight (when selecting text).

 Arguments

 table cursorCol


The colour of the text cursor (or caret).

 Examples
 Example
The paint function used in the default derma skin.

function SKIN:PaintTextEntry( panel, w, h )

	if ( panel.m_bBackground ) then
	
		if ( panel:GetDisabled() ) then
			self.tex.TextBox_Disabled( 0, 0, w, h )
		elseif ( panel:HasFocus() ) then
			self.tex.TextBox_Focus( 0, 0, w, h )
		else
			self.tex.TextBox( 0, 0, w, h )
		end
	
	end
	
	panel:DrawTextEntryText( panel.m_colText, panel.m_colHighlight, panel.m_colCursor )
	
end


"Panel/GetDockMargin"
Panel:GetDockMargin(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Returns
5 Returns


 Description
Returns the docked margins of the panel. (set by Panel:DockMargin)

 Returns

 number


Left margin.

 Returns

 number


Top margin.

 Returns

 number


Right margin.

 Returns

 number


Bottom margin.


"Panel/GetDock"
Panel:GetDock(  ) 
 Description
Returns a dock enum for the panels current docking type.

 Returns

 number


The dock enum for the panel. See DOCK_ Enums.


"Panel/GetContentSize"
Panel:GetContentSize(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Examples

4.1 Example




 Description
Gets the size of the content/children within a panel object.
Only works with Label derived panels by default such as DLabel.
Will also work on any panel that manually implements this method.

 Returns

 number


The content width of the object.

 Returns

 number


The content height of the object.

 Examples
 Example
Demonstrates how to implement this function in your own panel.

local PANEL = {}


function PANEL:GetContentSize()
	surface.SetFont( self:GetFont() )
	return surface.GetTextSize( self:GetText() )
end

vgui.Register( DTextEntry_Edit, PANEL, DTextEntry )

-- Somewhere else, to test the newly created panel
local frame = vgui.Create( DFrame )
frame:SetSize( 500, 200 )
frame:Center()
frame:MakePopup()

local txt = vgui.Create( DTextEntry_Edit, frame )
txt:SetPos( 5, 25 )
txt:SetSize( 100, 10 )
txt:SetText( Really long string that is bigger than 100 pixels )
txt:SizeToContentsX( 5 ) -- Must be called after setting the text
txt:SizeToContentsY( 5 ) -- These two functions will not have effect on a normal DTextEntry


"Panel/Exec"
Panel:Exec( string cmd ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Used to run commands within a DHTML window.
 Arguments

 string cmd


The command to be run.


"Panel/GetDockPadding"
Panel:GetDockPadding(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Returns
5 Returns


 Description
Returns the docked padding of the panel. (set by Panel:DockPadding)

 Returns

 number


Left padding.

 Returns

 number


Top padding.

 Returns

 number


Right padding.

 Returns

 number


Bottom padding.


"Panel/GetFont"
Panel:GetFont(  ) 
 Description
Returns the name of the font that the panel renders its text with.
This is the same font name set with Panel:SetFontInternal.

 Returns

 string


fontName


"Panel/GetCookie"
Panel:GetCookie( string cookieName, string default ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Gets the value of a cookie stored by the panel object. This can also be done with cookie.GetString, using the panels cookie name, a fullstop, and then the actual name of the cookie.
Make sure the panels cookie name has not changed since writing, or the cookie will not be accessible. This can be done with Panel:GetCookieName and Panel:SetCookieName.

 Arguments

 string cookieName


The name of the cookie from which to retrieve the value.

 Arguments

 string default


The default value to return if the cookie does not exist.

 Returns

 string


The value of the stored cookie, or the default value should the cookie not exist.


"Panel/GetClosestChild"
Panel:GetClosestChild( number x, number y ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns


 Description
Returns the child of this panel object that is closest to the specified point. The point is relative to the object on which the method is called. The distance the child is from this point is also returned.

 Arguments

 number x


The horizontal (x) position of the point.

 Arguments

 number y


The vertical (y) position of the point.

 Returns

 Panel


The child object that was closest to the specified point.

 Returns

 number


The distance that this child was from the point.


"Panel/GetCookieNumber"
Panel:GetCookieNumber( string cookieName, number default ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Gets the value of a cookie stored by the panel object, as a number. This can also be done with cookie.GetNumber, using the panels cookie name, a fullstop, and then the actual name of the cookie.
Make sure the panels cookie name has not changed since writing, or the cookie will not be accessible. This can be done with Panel:GetCookieName and Panel:SetCookieName.

 Arguments

 string cookieName


The name of the cookie from which to retrieve the value.

 Arguments

 number default


The default value to return if the cookie does not exist.

 Returns

 number


The number value of the stored cookie, or the default value should the cookie not exist.


"Panel/GetName"
Panel:GetName(  ) 
 Description
Returns the internal name of the panel.

 Returns

 string


name


"Panel/GetCookieName"
Panel:GetCookieName(  ) 
 Description
Gets the name the panel uses to store cookies. This is set with Panel:SetCookieName.

 Returns

 string


The name the panel uses when reading or writing cookies. The format used is as follows: panelCookieName.individualCookieName


"Panel/GetHTMLMaterial"
Panel:GetHTMLMaterial(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the panels HTML material. Only works with Awesomium, HTML and DHTML panels that have been fully loaded.

 Returns

 IMaterial


The HTML material used by the panel. Typically starts with __vgui_texture_ followed by an incremental number.

 Examples
 Example
Defines a new entity which can display a web page on a TV screen.

AddCSLuaFile()

ENT.Type = anim
ENT.Base = base_entity

ENT.PrintName = Web Screen
ENT.Author = Microflash
ENT.Spawnable = true

if ( CLIENT ) then
	ENT.Mat = nil
	ENT.Panel = nil
end

function ENT:Initialize()

	if ( SERVER ) then
		
		self:SetModel( models/props_phx/rt_screen.mdl )
		self:SetMoveType( MOVETYPE_VPHYSICS )
		self:SetSolid( SOLID_VPHYSICS )
		
		self:PhysicsInit( SOLID_VPHYSICS )
		
		self:Freeze()
		
	else
	
		-- Reset material and panel and load DHTML panel
		self.Mat = nil
		self.Panel = nil
		self:OpenPage()
		
	end
	
end

function ENT:Freeze()
	local phys = self:GetPhysicsObject()
	if ( IsValid( phys ) ) then phys:EnableMotion( false ) end
end

-- Load the DHTML reference panel
function ENT:OpenPage()

	-- Iff for some reason a panel is already loaded, delete it
	if( self.Panel ) then
	
		self.Panel:Remove()
		self.Panel = nil
	
	end

	-- Create a web page panel and fill the entire screen
	self.Panel = vgui.Create( DHTML )
	self.Panel:Dock( FILL )
	
	-- Wiki page URL
	local url = http://wiki.garrysmod.com/page/Category:Material
	
	-- Load the wiki page
	self.Panel:OpenURL( url )
	
	-- Hide the panel
	self.Panel:SetAlpha( 0 )
	self.Panel:SetMouseInputEnabled( false )
	
	-- Disable HTML messages
	function self.Panel:ConsoleMessage( msg ) end

end

function ENT:Draw()

	-- Iff the material has already been grabbed from the panel
	if( self.Mat ) then
		
		-- Apply it to the screen/model
		if( render.MaterialOverrideByIndex ) then
			render.MaterialOverrideByIndex( 1, self.Mat )
		else
			render.ModelMaterialOverride( self.Mat )
		end
		
	-- Otherwise, check that the panel is valid and the HTML material is finished loading
	elseif( self.Panel &amp;&amp; self.Panel:GetHTMLMaterial() ) then

		-- Get the html material
		local html_mat = self.Panel:GetHTMLMaterial()
		
		-- Used to make the material fit the model screen
		-- May need to be changed iff using a different model
		-- For the multiplication number it goes in segments of 512
		-- Based off the players screen resolution
		local scale_x, scale_y = ScrW()/2048, ScrH()/1024
		
		-- Create a new material with the proper scaling and shader
		local matdata =
		{
			[$basetexture]=html_mat:GetName(),
			[$basetexturetransform]=center 0 0 scale ..scale_x.. ..scale_y.. rotate 0 translate 0 0,
			[$model]=1
		}

		-- Unique ID used for material name
		local uid = string.Replace( html_mat:GetName(), __vgui_texture_,  )
		
		-- Create the model material
		self.Mat = CreateMaterial( WebMaterial_..uid, VertexLitGeneric, matdata )
	
	end

	-- Render the model
	self:DrawModel()
	
	-- Reset the material override or else everything will have a HTML material!
	render.ModelMaterialOverride( nil )

end

function ENT:OnRemove()
	-- Make sure the panel is removed too
	if( self.Panel ) then self.Panel:Remove() end
end
Output:


"Panel/GetSelectedChildren"
Panel:GetSelectedChildren(  ) 
 Description
Returns a table of all children of the panel object that are selected. This is recursive, and the returned table will include tables for any child objects that also have children. This means that not all first-level members in the returned table will be of type Panel.

 Returns

 table


A table of any child objects that are selected, including tables for children of the child objects (These tables may also contain table members, as the method is recursive).


"Panel/GetParent"
Panel:GetParent(  ) 
 Description
Returns the parent of the panel, returns nil if there is no parent.

 Returns

 Panel


The parent of given panel


"Panel/GetPos"
Panel:GetPos(  ) 
 Description
Returns the position of the panel relative to its Panel:GetParent.
If you require the panels position and size, consider using Panel:GetBounds instead.
If you need the position in screen space, see Panel:LocalToScreen.

 Returns

 number


X coordinate, relative to this panels parents top left corner.

 Returns

 number


Y coordinate, relative to this panels parents top left corner.


"Panel/GetSelectionCanvas"
Panel:GetSelectionCanvas(  ) 
 Description
Returns the panel object (self) if it has been enabled as a selection canvas. This is achieved using Panel:SetSelectionCanvas.

 Returns

 Panel


The panel object this method was called on if enabled as a selection canvas, otherwise nil.


"Panel/GetTextSize"
Panel:GetTextSize(  ) 
 Description
Gets the size of the text within a Label derived panel.



BUG


This can return 0 incorrectly.



 Returns

 number


The width of the text in the DLabel.

 Returns

 number


The height of the text in the DLabel.


"Panel/GetNumLines"
Panel:GetNumLines(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the number of lines in a RichText. You must wait a couple frames before calling this after using Panel:AppendText or Panel:SetText, otherwise it will return the number of text lines before the text change.



NOTE


Even though this function can be called on any panel, it will only work with RichText


 Returns

 number


The number of lines.

 Examples
 Example
Creates a rich text panel with a block of text and prints out the number of text lines before and after PerformLayout is called.

-- Create a window frame
TextFrame = vgui.Create( DFrame )
TextFrame:SetSize( 200, 224 )
TextFrame:Center()
TextFrame:SetTitle( Generic Frame )

-- RichText panel
local richtext = vgui.Create( RichText, TextFrame )
richtext:Dock( FILL )

-- Throw some text in the panel
richtext:SetText( This is a block of text demonstrating how line wrapping and panel size relates to the number of lines shown inside of a RichText panel. )

-- Keep track of PerformLayout calls
richtext.layoutCount = 0

-- Custom function for this example
function richtext:NumLinesExample()
	print( PerformLayout called ..self.layoutCount.. times: ..richtext:GetNumLines().. line( s ) returned )	
end

-- Print # of lines before any layouts
richtext:NumLinesExample()

-- Render update
function richtext:PerformLayout()

	self.layoutCount = self.layoutCount + 1
	self:NumLinesExample()	-- Print current # of lines

end
Output:

The panel shows 5 lines of text, but the number 5 isnt returned until PerformLayout has been called 2 times.
PerformLayout called 0 times: 1 line( s ) returned
PerformLayout called 1 times: 1 line( s ) returned
PerformLayout called 2 times: 5 line( s ) returned


"Panel/GetValidReceiverSlot"
Panel:GetValidReceiverSlot(  ) 
 Description
Gets valid receiver slot of currently dragged panel.

 Returns

 Panel


The panel this was called on if a valid receiver slot exists, otherwise false.

 Returns

 table


The slot table.


"Panel/GetSkin"
Panel:GetSkin(  ) 
 Description
Returns the table for the derma skin currently being used by this panel object.

 Returns

 table


The derma skin table currently being used by this object.


"Panel/GetTable"
Panel:GetTable(  ) 
 Description
Returns the internal Lua table of the panel.

 Returns

 table


A table containing all the members of given panel object.


"Panel/GetSize"
Panel:GetSize(  ) 
 Description
Returns the size of the panel.
If you require both the panels position and size, consider using Panel:GetBounds instead.

 Returns

 number


width

 Returns

 number


height


"Panel/GetTall"
Panel:GetTall(  ) 
 Description
Returns the height of the panel.

 Returns

 number


height


"Panel/GetText"
Panel:GetText(  ) 
 Description
Returns the panels text (where applicable).
This method returns a maximum of 1023 bytes, except for DTextEntry.

 Returns

 string


The panels text.


"Panel/GetValue"
Panel:GetValue(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the value the panel holds.
In engine is only implemented for CheckButton, Label and TextEntry as a string and for those elements has a hard coded limit of 8092 characters.

 Returns

 any


The value the panel holds.

 Examples
 Example
Returns the string typed in a TextEntry.

local TextEntry = vgui.Create( TextEntry )
TextEntry:SetText( Hello world! )
print( TextEntry:GetValue() )
Output:

Hello world!


"Panel/GetTextInset"
Panel:GetTextInset(  ) 
 Description
Gets the left and top text margins of a text-based panel object, such as a DButton or DLabel. This is set with Panel:SetTextInset.

 Returns

 number


The left margin of the text, in pixels.

 Returns

 number


The top margin of the text, in pixels.


"Panel/GotoTextStart"
Panel:GotoTextStart(  ) 
 Description
Causes a RichText element to scroll to the top of its text.



BUG


This does not work on the same frame as Panel:SetText.



 Examples
 Example
Creates a RichText panel with a Back to Top button which scrolls the text to the start.

-- Create a window frame
TextFrame = vgui.Create( DFrame )
TextFrame:SetSize( 250, 200 )
TextFrame:Center()
TextFrame:SetTitle( #ServerBrowser_ServerWarningTitle )
TextFrame:MakePopup()

-- RichText panel
local richtext = vgui.Create( RichText, TextFrame )
richtext:Dock( FILL )

-- Yellow colored localized text about player capacity
richtext:InsertColorChange( 255, 255, 192, 255 )
richtext:AppendText( #ServerBrowser_ServerWarning_MaxPlayers )

-- Create a button that moves the text back to the start
local topbutton = vgui.Create( DButton, richtext )
topbutton:SetSize( 60, 20 )
topbutton:SetPos( 160, 146 )
topbutton:SetText( Back to Top )

-- When clicked, go to the start of the text
topbutton.DoClick = function() richtext:GotoTextStart()	end

-- Apply background color and font
function richtext:PerformLayout()
	
	self:SetFontInternal( Trebuchet18 )
	self:SetBGColor( Color( 64, 64, 84 ) )
	
end
Output:


"Panel/GWEN_SetCheckboxText"
Panel:GWEN_SetCheckboxText( string txt ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Used by Panel:ApplyGWEN to apply the CheckboxText property to a DCheckBoxLabel. This does exactly the same as Panel:GWEN_SetText, but exists to cater for the seperate GWEN properties.
 Arguments

 string txt


The text to be applied to the DCheckBoxLabel.


"Panel/GoBack"
Panel:GoBack(  ) 
 Description
Goes back one page in the HTML panels history if available.


"Panel/GWEN_SetDock"
Panel:GWEN_SetDock( string dockState ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Used by Panel:ApplyGWEN to apply the Dock property to a panel object. This calls Panel:Dock.
 Arguments

 string dockState


The dock mode to pass to the panels Dock method. This reads a string and applies the approriate DOCK_ Enums.

 Right: Dock right.
 Left: Dock left.
 Bottom: Dock at the bottom.
 Top: Dock at the top.
 Fill: Fill the parent panel.


"Panel/GetWide"
Panel:GetWide(  ) 
 Description
Returns the width of the panel.

 Returns

 number


width


"Panel/GetZPos"
Panel:GetZPos(  ) 
 Description
Returns the Z position of the panel.

 Returns

 number


The Z order position of the panel.


"Panel/GWEN_SetMargin"
Panel:GWEN_SetMargin( table margins ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Used by Panel:ApplyGWEN to apply the Margin property to a panel object. This calls Panel:DockMargin.
 Arguments

 table margins


A four-membered table containing the margins as numbers:

 number left - The left margin.
 number top - The top margin.
 number right - The right margin.
 number bottom - The bottom margin.


"Panel/HasFocus"
Panel:HasFocus(  ) 
 Description
Returns if the panel is focused.

 Returns

 boolean


hasFocus


"Panel/GWEN_SetMin"
Panel:GWEN_SetMin( number minValue ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Used by Panel:ApplyGWEN to apply the Min property to a DNumberWang, Slider, DNumSlider or DNumberScratch. This calls SetMin on one of the previously listed methods.
 Arguments

 number minValue


The minimum value the element is to permit.


"Panel/GoToHistoryOffset"
Panel:GoToHistoryOffset( number offset ) 
 Description
Goes to the page in the HTML panels history at the specified relative offset.

 Arguments

 number offset


The offset in the panels back/forward history, relative to the current page, that you would like to skip to. Because this is relative, 0 = current page while negative goes back and positive goes forward. For example, -2 will go back 2 pages in the history.


"Panel/GWEN_SetControlName"
Panel:GWEN_SetControlName( string name ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Used by Panel:ApplyGWEN to apply the ControlName property to a panel. This calls Panel:SetName.
 Arguments

 string name


The new name to apply to the panel.


"Panel/GWEN_SetMax"
Panel:GWEN_SetMax( number maxValue ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Used by Panel:ApplyGWEN to apply the Max property to a DNumberWang, Slider, DNumSlider or DNumberScratch. This calls SetMax on one of the previously listed methods.
 Arguments

 number maxValue


The maximum value the element is to permit.


"Panel/GotoTextEnd"
Panel:GotoTextEnd(  ) 
 Description
Causes a RichText element to scroll to the bottom of its text.


"Panel/GWEN_SetPosition"
Panel:GWEN_SetPosition( table pos ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Used by Panel:ApplyGWEN to apply the Position property to a panel object. This calls Panel:SetPos.
 Arguments

 table pos


A two-membered table containing the x and y coordinates as numbers:

 number x - The x coordinate.
 number y - The y coordinate.


"Panel/HasChildren"
Panel:HasChildren(  ) 
 Description
Returns whenever the panel has child panels.

 Returns

 boolean


hasChilds


"Panel/GoForward"
Panel:GoForward(  ) 
 Description
Goes forward one page in the HTML panels history if available.


"Panel/HasHierarchicalFocus"
Panel:HasHierarchicalFocus(  ) 
 Description
Returns if the panel or any of its children(sub children and so on) has the focus.

 Returns

 boolean


hasHierarchicalFocus


"Panel/GWEN_SetHorizontalAlign"
Panel:GWEN_SetHorizontalAlign( string hAlign ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Used by Panel:ApplyGWEN to apply the HorizontalAlign property to a panel object. This calls Panel:SetContentAlignment.
 Arguments

 string hAlign


The alignment, as a string, to pass to Panel:SetContentAlignment. Accepts:

 Right: Align mid-right.
 Left: Align mid-left.
 Center: Align mid-center.


"Panel/GWEN_SetText"
Panel:GWEN_SetText( string txt ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Used by Panel:ApplyGWEN to apply the Text property to a panel.
 Arguments

 string txt


The text to be applied to the panel.


"Panel/GWEN_SetSize"
Panel:GWEN_SetSize( table size ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Used by Panel:ApplyGWEN to apply the Size property to a panel object. This calls Panel:SetSize.
 Arguments

 table size


A two-membered table containing the width and heights as numbers:

 number w - The width.
 number h - The height.


"Panel/InsertFade"
Panel:InsertFade( number sustain, number length ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Begins a text fade for a RichText element where the last appended text segment is fully faded out after a specific amount of time, at a specific speed.
The alpha of the text at any given time is determined by the texts base alpha * ((sustain - CurTime) / length) where CurTime is added to sustain when this method is called.

 Arguments

 number sustain


The number of seconds the text remains visible.

 Arguments

 number length


The number of seconds it takes the text to fade out.
If set lower than sustain, the text will not begin fading out until (sustain - length) seconds have passed.
If set higher than sustain, the text will begin fading out immediately at a fraction of the base alpha.

If set to -1, the text doesnt fade out.

 Examples
 Example
Creates a Rich Text panel that sustains visibility for 6 seconds with a 2 second long fade-out.

-- Create a window frame
TextFrame = vgui.Create( DFrame )
TextFrame:SetSize( 200, 200 )
TextFrame:Center()
TextFrame:SetTitle( Fading Text )
TextFrame:MakePopup()

-- RichText panel
local richtext = vgui.Create( RichText, TextFrame )
richtext:Dock( FILL )

-- Sample text
richtext:SetText( This is an example of a Rich Text panel using a fade-out with:\n\n6 seconds of sustain\n\n2 second fade-out length )
	
-- When the panel is ready for layout, begin the fade
function richtext:PerformLayout()
	
	self:SetFontInternal( Trebuchet18 )
	self:SetBGColor( Color( 64, 64, 92 ) )
	
	-- Wait 6 seconds, ) then fade out in 2 seconds
	self:InsertFade( 6, 2 )
	
end
Output:

Some identical example outputs are shown below, only with different length values swapped in.

 Examples
 Example
Create a Rich Text panel where Dr. Kleiner reads a fading message in sync with text.

-- Create a window frame
TextFrame = vgui.Create( DFrame )
TextFrame:SetSize( 350, 100 )
TextFrame:Center()
TextFrame:SetTitle( Kleiner says: )
TextFrame:MakePopup()

-- RichText panel
local richtext = vgui.Create( RichText, TextFrame )
richtext:Dock( FILL )	

-- Red text
richtext:InsertColorChange( 200, 60, 32, 255 )
richtext:SetVerticalScrollbarEnabled( false )
	
local words = {Theres, only, one, hedy...}

local delay = 0

-- Display each word in half second interval
for w, txt in pairs( words ) do

	if( w == 1 ) then delay = 0.2
	else delay = ( w-1 )*0.45 end

	timer.Simple( delay, function()
	
		richtext:AppendText( txt..  )
		richtext:InsertFade( 2, 1 )	-- Sustain for 2 seconds while fading out after 1 second
		
		richtext:SetBGColor( Color( 0, 0, 0 ) )
		richtext:SetFontInternal( DermaLarge )
	
	end )

end

-- Kleiner read along
LocalPlayer():EmitSound( vo/k_lab2/kl_onehedy.wav )
Output:


"Panel/InvalidateChildren"
Panel:InvalidateChildren( boolean recursive=false ) 
 Description
Invalidates the layout of this panel object and all its children. This will cause these objects to re-layout immediately, calling PANEL:PerformLayout. If you want to perform the layout in the next frame, you will have loop manually through all children, and call Panel:InvalidateLayout on each.

 Arguments

 boolean recursive=false


If true, the method will recursively invalidate the layout of all children. Otherwise, only immediate children are affected.


"Panel/HasParent"
Panel:HasParent( Panel parentPanel ) 
 Description
Returns whether the panel is a descendent of the given panel.

 Arguments

 Panel parentPanel


 Returns

 boolean


True if the panel is contained within parentPanel.


"Panel/InvalidateLayout"
Panel:InvalidateLayout( boolean layoutNow=false ) 
 Description
Causes the panel to re-layout in the next frame. During the layout process PANEL:PerformLayout will be called on the target panel.
You should avoid calling this function every frame.



BUG


Using this on a panel after clicking on a docked element will cause docked elements to reorient themselves incorrectly. This can be fixed by assigning a unique Panel.SetZPos to each docked element.



 Arguments

 boolean layoutNow=false


If true the panel will re-layout instantly and not wait for the next frame.


"Panel/Hide"
Panel:Hide(  ) 
 Description
Makes a panel invisible.


"Panel/InvalidateParent"
Panel:InvalidateParent( boolean layoutNow=false ) 
 Description
Invalidates the layout of the parent of this panel object. This will cause it to re-layout, calling PANEL:PerformLayout.

 Arguments

 boolean layoutNow=false


If true, the re-layout will occur immediately, otherwise it will be performed in the next frame.


"Panel/InsertColorChange"
Panel:InsertColorChange( number r, number g, number b, number a ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Inserts a color change in a RichText element, which affects the color of all text added with Panel:AppendText until another color change is applied.

 Arguments

 number r


The red value (0 - 255).

 Arguments

 number g


The green value (0 - 255).

 Arguments

 number b


The blue value (0 - 255).

 Arguments

 number a


The alpha value (0 - 255).

 Examples
 Example
Creates a RichText panel with color coding on certain segments of text.

-- Create a window frame
TextFrame = vgui.Create( DFrame )
TextFrame:SetSize( 200, 200 )
TextFrame:Center()
TextFrame:SetTitle( Colored text )
TextFrame:MakePopup()

-- RichText panel
local richtext = vgui.Create( RichText, TextFrame )
richtext:Dock( FILL )
richtext:SetVerticalScrollbarEnabled( false )

-- Text blocks
richtext:InsertColorChange( 255, 255, 192, 255 )
richtext:AppendText( This is an example of  )

richtext:InsertColorChange( 0, 255, 0, 255 )
richtext:AppendText( color coding  )

richtext:InsertColorChange( 255, 255, 192, 255 )
richtext:AppendText( different segments of text throughout a  )

richtext:InsertColorChange( 255, 200, 0, 255 )
richtext:AppendText( Rich Text panel.\n\n )

richtext:InsertColorChange( 64, 0, 255, 255 )
richtext:AppendText( Here is another line of text shown in the color  )

richtext:InsertColorChange( 128, 0, 255, 255 )
richtext:AppendText( purple. )

-- When the panel is ready for layout, apply font and background color
function richtext:PerformLayout()
	
	self:SetFontInternal( Trebuchet18 )
	self:SetBGColor( Color( 0, 16, 32 ) )
	
end
Output:



 Examples
 Example
Word by word coloring using string.Explode and random colors.

-- Create a window frame
TextFrame = vgui.Create( DFrame )
TextFrame:SetSize( 300, 200 )
TextFrame:Center()
TextFrame:SetTitle( Randomly Colored Words )
TextFrame:MakePopup()

-- RichText panel
local richtext = vgui.Create( RichText, TextFrame )
richtext:Dock( FILL )
richtext:SetVerticalScrollbarEnabled( false )

local txt = Heres a fun example involving word by word text coloring. ..
Each word is separated by a space, colored, and appended to the Rich Text panel individually. ..
The colors are randomly generated shades of red, orange, yellow, and pink.

local txt_tbl = string.Explode(  , txt, false )

for _, word in pairs( txt_tbl ) do

	richtext:InsertColorChange( 255, math.random( 0, 255 ), math.random( 0, 255 ), 255 )
	richtext:AppendText( word..  )

end

function richtext:PerformLayout()
	
	self:SetFontInternal( GModNotify )
	self:SetBGColor( Color( 32, 16, 0 ) )
	
end
Output:


"Panel/IsChildHovered"
Panel:IsChildHovered( boolean immediate=false ) 
 Description
Determines whether the mouse cursor is hovered over one of this panel objects children. This is a reverse process using vgui.GetHoveredPanel, and looks upward to find the parent.

 Arguments

 boolean immediate=false


Set to true to check only the immediate children of given panel ( first level )

 Returns

 boolean


Whether or not one of this panel objects children is being hovered over.


"Panel/IsDraggable"
Panel:IsDraggable(  ) 
 Description
Returns whether this panel is draggable ( if user is able to drag it ) or not.

 Returns

 boolean


Whether this panel is draggable ( if user is able to drag it ) or not.


"Panel/IsDragging"
Panel:IsDragging(  ) 
 Description
Returns whether this panel is currently being dragged or not.

 Returns

 boolean


Whether this panel is currently being dragged or not.


"Panel/IsEnabled"
Panel:IsEnabled(  ) 
 Description
Returns whether the the panel is enabled or disabled.
See Panel:SetEnabled for a function that makes the panel enabled or disabled.

 Returns

 boolean


Whether the panel is enabled or disabled.


"Panel/InsertClickableTextEnd"
Panel:InsertClickableTextEnd(  ) 
 Description
Marks the end of a clickable text segment in a RichText element, started with Panel:InsertClickableTextStart.

 Examples
 Example
Creates a panel with some information on RichText panels along with a click-able link to the RichText page.

-- Create a window frame
TextFrame = vgui.Create( DFrame )
TextFrame:SetSize( 250, 150 )
TextFrame:Center()
TextFrame:SetTitle( RichText )
TextFrame:MakePopup()

-- RichText panel
local richtext = vgui.Create( RichText, TextFrame )
richtext:Dock( FILL )

-- First segment
richtext:InsertColorChange( 255, 255, 255, 255 )
richtext:AppendText( This is a Rich Text panel &#x2014; a panel used in Source MPs default chat box and developer console.\n\nSee the  )

-- Second segment
richtext:InsertColorChange( 192, 192, 255, 255 )
richtext:InsertClickableTextStart( OpenWiki )	-- Make incoming text fire the OpenWiki value when clicked
richtext:AppendText( Garrys Mod Wiki )
richtext:InsertClickableTextEnd()	-- End clickable text here

-- Third segment
richtext:InsertColorChange( 255, 255, 255, 255 )
richtext:AppendText(  for information on how to use a Rich Text panel. )

-- Background color
function richtext:PerformLayout() self:SetBGColor( Color( 32, 32, 46 ) ) end

-- Handle any commands we get from the panel
function richtext:ActionSignal( signalName, signalValue )

	-- Some clickable text was clicked
	if( signalName == TextClicked ) then
	
		-- Open the wiki
		if( signalValue == OpenWiki ) then
		
			gui.OpenURL( http://wiki.garrysmod.com/page/Category:RichText )
		
		end
	
	end

end
Output:


"Panel/IsHovered"
Panel:IsHovered(  ) 
 Description
Returns whether the mouse cursor is hovering over this panel or not
Uses vgui.GetHoveredPanel internally.
Requires Panel:SetMouseInputEnabled to be set to true.

 Returns

 boolean


true if the panel is hovered


"Panel/IsKeyboardInputEnabled"
Panel:IsKeyboardInputEnabled(  ) 
 Description
Returns true if the panel can receive keyboard input.

 Returns

 boolean


keyboardInputEnabled


"Panel/IsLoading"
Panel:IsLoading(  ) 
 Description
Determines whether or not a HTML or DHTML element is currently loading a page.

 Returns

 boolean


Whether or not the (D)HTML object is loading.


"Panel/IsMarkedForDeletion"
Panel:IsMarkedForDeletion(  ) 
 Description
Returns if the panel is going to be deleted in the next frame.

 Returns

 boolean


markedForDeletion


"Panel/IsMouseInputEnabled"
Panel:IsMouseInputEnabled(  ) 
 Description
Returns true if the panel can receive mouse input.

 Returns

 boolean


mouseInputEnabled


"Panel/IsMultiline"
Panel:IsMultiline(  ) 
 Description
Determines whether or not a text-based panel object, such as a DTextEntry, is in multi-line mode. This is set with Panel:SetMultiline.

 Returns

 boolean


Whether the object is in multi-line mode or not.


"Panel/IsSelectionCanvas"
Panel:IsSelectionCanvas(  ) 
 Description
Determines if the panel object is a selection canvas or not. This is set with Panel:SetSelectionCanvas.

 Returns

 any


The value (if any) set by Panel:SetSelectionCanvas.


"Panel/InsertClickableTextStart"
Panel:InsertClickableTextStart( string signalValue ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Starts the insertion of clickable text for a RichText element. Any text appended with Panel:AppendText between this call and Panel:InsertClickableTextEnd will become clickable text.
The hook PANEL:ActionSignal is called when the text is clicked, with TextClicked as the signal name and signalValue as the signal value.



NOTE


The clickable text is a separate Derma panel which will not inherit the current font from the RichText.


 Arguments

 string signalValue


The text passed as the action signals value.

 Examples
 Example
Creates a panel with some information on Rich Text panels along with a click-able link to the RichText page.

-- Create a window frame
TextFrame = vgui.Create( DFrame )
TextFrame:SetSize( 250, 150 )
TextFrame:Center()
TextFrame:SetTitle( RichText )
TextFrame:MakePopup()

-- RichText panel
local richtext = vgui.Create( RichText, TextFrame )
richtext:Dock( FILL )

-- First segment
richtext:InsertColorChange( 255, 255, 255, 255 )
richtext:AppendText( This is a Rich Text panel &#x2014; a panel used in Source MPs default chat box and developer console.\n\nSee the  )

-- Second segment
richtext:InsertColorChange( 192, 192, 255, 255 )
richtext:InsertClickableTextStart( OpenWiki )	-- Make incoming text fire the OpenWiki value when clicked
richtext:AppendText( Garrys Mod Wiki )
richtext:InsertClickableTextEnd()	-- End clickable text here

-- Third segment
richtext:InsertColorChange( 255, 255, 255, 255 )
richtext:AppendText(  for information on how to use a Rich Text panel. )

-- Background color
function richtext:PerformLayout() self:SetBGColor( Color( 32, 32, 46 ) ) end

-- Handle any commands we get from the panel
function richtext:ActionSignal( signalName, signalValue )

	-- Some clickable text was clicked
	if ( signalName == TextClicked ) then
	
		-- Open the wiki
		if ( signalValue == OpenWiki ) then
		
			gui.OpenURL( http://wiki.garrysmod.com/page/Category:RichText )
		
		end
	
	end

end
Output:


"Panel/IsOurChild"
Panel:IsOurChild( Panel childPanel ) 
 Description
Returns whether the panel contains the given panel, recursively.

 Arguments

 Panel childPanel


 Returns

 boolean


True if the panel contains childPanel.


"Panel/IsValid"
Panel:IsValid(  ) 
 Description
Returns if the panel is valid and not marked for deletion.

 Returns

 boolean


True if the object is valid.


"Panel/IsVisible"
Panel:IsVisible(  ) 
 Description
Returns if the panel is visible.

 Returns

 boolean


isVisible


"Panel/IsSelected"
Panel:IsSelected(  ) 
 Description
Returns if the panel object is selected (like icons in the Spawn Menu, holding &#x21E7; Shift). This can be set in Lua using Panel:SetSelected.

 Returns

 boolean


Whether the panel object is selected or not. Always returns false if the object is not selectable. This can be modified using Panel:SetSelectable.


"Panel/LocalToScreen"
Panel:LocalToScreen( number posX, number posY ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns


 Description
Gets the absolute screen position of the position specified relative to the panel.
See also Panel:ScreenToLocal.



WARNING


This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass.
ie. inaccurate results may be returned if the panel or any of its ancestors have been repositioned outside of PANEL:Think or PANEL:PerformLayout within the last frame.




NOTE


If the panel uses Panel:Dock, this function will return 0, 0 when the panel was created. The position will be updated in the next frame.


 Arguments

 number posX


The X coordinate of the position on the panel to translate.

 Arguments

 number posY


The Y coordinate of the position on the panel to translate.

 Returns

 number


The X coordinate relative to the screen.

 Returns

 number


The Y coordinate relative to the screen.


"Panel/LocalCursorPos"
Panel:LocalCursorPos(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Examples

4.1 Example




 Description
Returns the cursor position local to the position of the panel (usually the upper-left corner).

 Returns

 number


The x coordinate

 Returns

 number


The y coordinate

 Examples
 Example
Create and center a label panel and update its text with the local cursor position.

TestLabel = vgui.Create( DLabel )
TestLabel:SetSize( 100, 20 )
TestLabel:Center()
TestLabel:SetPaintBackgroundEnabled( true )
TestLabel:SetColor( Color( 255, 0, 0 ) )

local x, y = 0, 0

function TestLabel:PerformLayout()

	x, y = self:LocalCursorPos()

	self:SetText(  X: ..x.. , Y: ..y )
	
end
Output:


"Panel/IsSelectable"
Panel:IsSelectable(  ) 
 Description
Determines if the panel object is selectable (like icons in the Spawn Menu, holding &#x21E7; Shift). This is set with Panel:SetSelectable.

 Returns

 boolean


Whether the panel is selectable or not.


"Panel/LoadControlsFromFile"
Panel:LoadControlsFromFile( string path ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Similar to Panel:LoadControlsFromString but loads controls from a file.

 Arguments

 string path


The path to load the controls from.


"Panel/LoadGWENFile"
Panel:LoadGWENFile( string filename, string path=GAME ) 
 Description
Loads a .gwen file (created by GWEN Designer) and calls Panel:LoadGWENString with the contents of the loaded file.
Used to load panel controls from a file.

 Arguments

 string filename


The file to open. The path is relative to garrysmod/garrysmod/.

 Arguments

 string path=GAME


The path used to look up the file.

 GAME Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)
 LUA or lsv - All Lua folders (lua/) including gamesmodes and addons
 DATA Data folder (garrysmod/data)
 MOD Strictly the game folder (garrysmod/), ignores mounting.


"Panel/LerpPositions"
Panel:LerpPositions( number speed, boolean easeOut ) 
 Description
Redefines the panel objects Panel:SetPos method to operate using frame-by-frame linear interpolation (Lerp). When the panels position is changed, it will move to the target position at the speed defined. You can undo this with Panel:DisableLerp.
Unlike the other panel animation functions, such as Panel:MoveTo, this animation method will not operate whilst the game is paused. This is because it relies on FrameTime.

 Arguments

 number speed


The speed at which to move the panel. This is affected by the value of easeOut. Recommended values are:

 0.1 - 10 when easeOut is false.
 0.1 - 1 when easeOut is true.


 Arguments

 boolean easeOut


This causes the panel object to jump at the target, slowing as it approaches. This affects the speed value significantly, see above.


"Panel/LoadGWENString"
Panel:LoadGWENString( string str ) 
 Description
Loads controls for the panel from a JSON string.

 Arguments

 string str


JSON string containing information about controls to create.


"Panel/MoveBy"
Panel:MoveBy( number moveX, number moveY, number time, number delay=0, number ease=-1, function callback=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments


 Description
Moves the panel by the specified coordinates using animation.

 Arguments

 number moveX


The number of pixels to move by in the horizontal (x) direction.

 Arguments

 number moveY


The number of pixels to move by in the vertical (y) direction.

 Arguments

 number time


The time (in seconds) in which to perform the animation.

 Arguments

 number delay=0


The delay (in seconds) before the animation begins.

 Arguments

 number ease=-1


The easing of the start and/or end speed of the animation. See Panel:NewAnimation for how this works.

 Arguments

 function callback=nil


The function to be called once the animation is complete. Arguments are:

 table animData - The AnimationData structure that was used.
 Panel pnl - The panel object that was moved.


"Panel/MoveAbove"
Panel:MoveAbove( Panel panel, number offset=0 ) 
 Description
Places the panel above the passed panel with the specified offset.

 Arguments

 Panel panel


Panel to position relatively to.

 Arguments

 number offset=0


The align offset.


"Panel/MouseCapture"
Panel:MouseCapture( boolean doCapture ) 
 Description
Allows the panel to receive mouse input even if the mouse cursor is outside the bounds of the panel.

 Arguments

 boolean doCapture


Set to true to enable, set to false to disable.


"Panel/LoadControlsFromString"
Panel:LoadControlsFromString( string data ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Loads controls(positions, etc) from given data. This is what the default options menu uses.

 Arguments

 string data


The data to load controls from. Format unknown.


"Panel/MoveRightOf"
Panel:MoveRightOf( Panel panel, number offset=0 ) 
 Description
Places the panel right to the passed panel with the specified offset.

 Arguments

 Panel panel


Panel to position relatively to.

 Arguments

 number offset=0


The align offset.


"Panel/MakePopup"
Panel:MakePopup(  ) 
 Description
Focuses the panel and enables it to receive input.
This automatically calls Panel:SetMouseInputEnabled and Panel:SetKeyboardInputEnabled and sets them to true.



NOTE


Panels derived from Panel will not work properly with this function. Due to this, any children will not be intractable with keyboard. Derive from EditablePanel instead.


"Panel/MoveLeftOf"
Panel:MoveLeftOf( Panel panel, number offset=0 ) 
 Description
Places the panel left to the passed panel with the specified offset.

 Arguments

 Panel panel


Panel to position relatively to.

 Arguments

 number offset=0


The align offset.


"Panel/MoveBelow"
Panel:MoveBelow( Panel panel, number offset=0 ) 
 Description
Places the panel below the passed panel with the specified offset.

 Arguments

 Panel panel


Panel to position relatively to.

 Arguments

 number offset=0


The align offset.


"Panel/KillFocus"
Panel:KillFocus(  ) 
 Description
Remove the focus from the panel.


"Panel/MoveToAfter"
Panel:MoveToAfter( Panel siblingPanel ) 
 Description
Moves this panel object in front of the specified sibling (child of the same parent) in the render order, and shuffles up the Z-positions of siblings now behind.

 Arguments

 Panel siblingPanel


The panel to move this one in front of. Must be a child of the same parent panel.

 Returns

 boolean


false if the passed panel is not a sibling, otherwise nil.


"Panel/MoveTo"
Panel:MoveTo( number posX, number posY, number time, number delay=0, number ease=-1, function callback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments


 Description
Moves the panel to the specified position using animation.

 Arguments

 number posX


The target x coordinate of the panel.

 Arguments

 number posY


The target y coordinate of the panel.

 Arguments

 number time


The time to perform the animation within.

 Arguments

 number delay=0


The delay before the animation starts.

 Arguments

 number ease=-1


The easing of the start and/or end speed of the animation. See Panel:NewAnimation for how this works.

 Arguments

 function callback


The function to be called once the animation finishes. Arguments are:

 table animData - The AnimationData structure that was used.
 Panel pnl - The panel object that was moved.


"Panel/MoveToBefore"
Panel:MoveToBefore( Panel siblingPanel ) 
 Description
Moves this panel object behind the specified sibling (child of the same parent) in the render order, and shuffles up the Panel:SetZPos of siblings now in front.

 Arguments

 Panel siblingPanel


The panel to move this one behind. Must be a child of the same parent panel.

 Returns

 boolean


false if the passed panel is not a sibling, otherwise nil.


"Panel/NewAnimation"
Panel:NewAnimation( number length, number delay=0, number ease=-1, function callback=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example




 Description
Creates a new animation for the panel object.
Methods that use this function:

 Panel:MoveTo
 Panel:SizeTo
 Panel:SlideUp
 Panel:SlideDown
 Panel:ColorTo
 Panel:AlphaTo
 Panel:MoveBy
 Panel:LerpPositions

 Arguments

 number length


The length of the animation in seconds.

 Arguments

 number delay=0


The delay before the animation starts.

 Arguments

 number ease=-1


The power/index to use for easing.

Positive values greater than 1 will ease in; the higher the number, the sharper the curves gradient (less linear).
A value of 1 removes all easing.
Positive values between 0 and 1 ease out; values closer to 0 increase the curves gradient (less linear).
A value of 0 will break the animation and should be avoided.
Any value less than zero will ease in/out; the value has no effect on the gradient.


 Arguments

 function callback=nil


The function to be called when the animation ends. Arguments passed are:

 table animTable - The AnimationData structure that was used.
 Panel tgtPanel - The panel object that was animated.


 Returns

 table


Partially filled AnimationData structure with members:

number EndTime - Equal to length and delay arguments added together, plus either the SysTime if there is no other animation queued or the end time of the last animation in the queue.
number StartTime - Equal to the delay argument, plus either the SysTime if there is no other animation queued or the end time of the last animation in the queue.
number Ease - Equal to the ease argument.
function OnEnd - Equal to the callback argument.


 Examples
 Example
Example on how to use this function, makes a button go around in a circle in a DFrame.

local frame = vgui.Create( DFrame )
frame:SetSize( 500, 500 )
frame:Center()
frame:MakePopup()

local butt = frame:Add( DButton )
butt:SetPos( 5, 30 )
butt:SetSize( 100, 40 )

function butt:doAnim()
	local anim = self:NewAnimation( 10, 0, 1, function( anim, pnl )
		self:doAnim()
	end )

	anim.Think = function( anim, pnl, fraction )
		local radius = 200
		pnl:SetPos( 250 + math.sin( Lerp( fraction, -math.pi, math.pi ) ) * radius - pnl:GetWide() / 2,
					250 + math.cos( Lerp( fraction, -math.pi, math.pi ) ) * radius - pnl:GetTall() / 2 )

		pnl:SetText( Frac:  .. fraction .. \nTime:  .. ( SysTime() - anim.StartTime ) )
	end
end
butt:doAnim()


"Panel/OpenURL"
Panel:OpenURL( string URL ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 DescriptionInstructs a HTML control to download and parse a HTML script using the passed URL.
 Arguments

 string URL


URL to open

 Examples
 Example
Displays the Garrys Mod wiki page.

local frame = vgui.Create( DFrame )
frame:SetTitle( HTML Example )
frame:SetSize( ScrW() * 0.75, ScrH() * 0.75 )
frame:Center()
frame:MakePopup()

local html = vgui.Create( HTML, frame )
html:Dock( FILL )
html:OpenURL( wiki.garrysmod.com )


 Examples
 Example
Displays the default loading screen from the html folder.

local frame = vgui.Create( DFrame )
frame:SetTitle( HTML Example )
frame:SetSize( ScrW() * 0.75, ScrH() * 0.75 )
frame:Center()
frame:MakePopup()

local html = vgui.Create( HTML, frame )
html:Dock( FILL )
html:OpenURL( asset://garrysmod/html/loading.html )
Output:


"Panel/MoveToBack"
Panel:MoveToBack(  ) 
 Description
Moves the panel object behind all other panels on screen. If the panel has been made a pop-up with Panel:MakePopup, it will still draw in front of any panels that havent.


"Panel/NoClipping"
Panel:NoClipping( boolean clip ) 
 Description
Sets whether this panels drawings should be clipped within the parent panels bounds.
See also DisableClipping and surface.DisableClipping.

 Arguments

 boolean clip


Whether to clip or not.


"Panel/NewObject"
Panel:NewObject( string objectName ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
 Arguments

 string objectName


"Panel/NewObjectCallback"
Panel:NewObjectCallback( string objectName, string callbackName ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
 Arguments

 string objectName


 Arguments

 string callbackName


"Panel/PaintAt"
Panel:PaintAt( number posX, number posY ) 
 Description
Paints a ghost copy of the panel at the given position.

 Arguments

 number posX


The x coordinate to draw the panel from.

 Arguments

 number posY


The y coordinate to draw the panel from.


"Panel/MoveToFront"
Panel:MoveToFront(  ) 
 Description
Moves the panel in front of all other panels on screen. Unless the panel has been made a pop-up using Panel:MakePopup, it will still draw behind any that have.

 Examples
 Example
Creates two frame panels where one acts normal and the other acts as a persistent warning window that will move in front of all other panels until it is closed.

-- Regular message
local popup1 = vgui.Create( DFrame )
popup1:SetSize( 400, 300 )
popup1:Center()
popup1:MakePopup()
popup1:SetTitle( This is a normal window. )

-- Warning message
local popup2 = vgui.Create( DFrame )
popup2:SetSize( 300, 100 )
popup2:Center()
popup2:MakePopup()
popup2:SetTitle( Warning! )

-- Warning label
local warning = vgui.Create( DLabel, popup2 )
warning:SetSize( 280, 80 )
warning:Center()
warning:SetText( The server will be shutting down in 5 minutes! )
warning:SetFont( GModNotify )
warning:SetWrap( true )

-- Move the warning message to front constantly
function popup2:Think()
	self:MoveToFront()
end
Output:


"Panel/NumSelectedChildren"
Panel:NumSelectedChildren(  ) 
 Description
Returns the number of children of the panel object that are selected. This is equivalent to calling Panel:IsSelected on all child objects and counting the number of returns that are true.

 Returns

 number


The number of child objects that are currently selected. This does not include the parent object you are calling the method from.


"Panel/ParentToHUD"
Panel:ParentToHUD(  ) 
 Description
Parents the panel to the HUD.
Makes it invisible on the escape-menu and disables controls.

 Examples
 Example
Panel:ParentToHUD()


"Panel/PositionLabel"
Panel:PositionLabel( number lblWidth, number x, number y, Panel lbl, Panel panelObj ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Returns


 Description
Sets the width and position of a DLabel and places the passed panel object directly to the right of it. Returns the y value of the bottom of the tallest object. The panel on which this method is run is not relevant; only the passed objects are affected.

 Arguments

 number lblWidth


The width to set the label to.

 Arguments

 number x


The horizontal (x) position at which to place the label.

 Arguments

 number y


The vertical (y) position at which to place the label.

 Arguments

 Panel lbl


The label to resize and position.

 Arguments

 Panel panelObj


The panel object to place to the right of the label.

 Returns

 number


The distance from the top of the parent panel to the bottom of the tallest object (the y position plus the height of the label or passed panel, depending on which is tallest).


"Panel/PostMessage"
Panel:PostMessage( string messageName, string valueType, string value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Only used in deprecated Derma controls.Sends a command to the panel.
 Arguments

 string messageName


The name of the message.

 Arguments

 string valueType


The type of the variable to post.

 Arguments

 string value


The value to post.


"Panel/Prepare"
Panel:Prepare(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Installs Lua defined functions into the panel.


"Panel/Queue"
Panel:Queue(  ) 
 Description
Enables the queue for panel animations. If enabled, the next new animation will begin after all current animations have ended. This must be called before Panel:NewAnimation to work, and only applies to the next new animation. If you want to queue many, you must call this before each.


"Panel/Paste"
Panel:Paste(  ) 
 Description


WARNING


Due to privacy concerns, this function has been disabled


Only works for TextEntries.
Pastes the contents of the clipboard into the TextEntry.



NOTE


Tab characters will be dropped from the pasted text


"Panel/RequestFocus"
Panel:RequestFocus(  ) 
 Description
Attempts to obtain focus for this panel.


"Panel/RebuildSpawnIconEx"
Panel:RebuildSpawnIconEx( table data ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Re-renders a spawn icon with customized cam data.



NOTE


This function does not accept the standard CamData structure.


 Arguments

 table data


A four-membered table containing the information needed to re-render:

 Vector cam_pos - The relative camera position the model is viewed from.
 Angle cam_ang - The camera angle the model is viewed from.
 number cam_fov - The cameras field of view (FOV).
 Entity ent - The entity object of the model.

See the example below for how to retrieve these values.

 Examples
 Example
The RenderIcon method used by IconEditor. SpawnIcon is a SpawnIcon and ModelPanel is a DAdjustableModelPanel.

function PANEL:RenderIcon()
	
	local ent = self.ModelPanel:GetEntity()
	
	local tab = {}

	tab.ent		= ent
	tab.cam_pos = self.ModelPanel:GetCamPos()
	tab.cam_ang = self.ModelPanel:GetLookAng()
	tab.cam_fov = self.ModelPanel:GetFOV()

	self.SpawnIcon:RebuildSpawnIconEx( tab )
end


"Panel/PaintManual"
Panel:PaintManual(  ) 
 Description
Paints the panel at its current position. To use this you must call Panel:SetPaintedManually(true).

 Examples
 Example
Paints a simple panel inside a 3D rendering context.

local frame = vgui.Create( DFrame )
frame:SetTitle( PaintManual Test )
frame:SetSize( 500, 500 )
frame:SetPaintedManually( true )

hook.Add( PostDrawTranslucentRenderables, PaintManual Test, function()
	if ( IsValid( frame ) then
		local eyePos = Entity( 1 ):EyePos()
		local forward = Entity( 1 ):GetForward()
		local forwardAngle = forward:Angle()

		cam.Start3D2D( eyePos + ( forward * 250 ), Angle( 0, forwardAngle.y - 90, forwardAngle.r + 90 ), 0.2 )
			frame:PaintManual()
		cam.End3D2D()
	end
end )
Output:

The panel will be drawn facing the player located on the players crosshair.
 
(click for higher resolution)


"Panel/ScreenToLocal"
Panel:ScreenToLocal( number screenX, number screenY ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns


 Description
Translates global screen coordinate to coordinates relative to the panel.
See also Panel:LocalToScreen.



WARNING


This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass.
ie. inaccurate results may be returned if the panel or any of its ancestors have been repositioned outside of PANEL:Think or PANEL:PerformLayout within the last frame.


 Arguments

 number screenX


The x coordinate of the screen position to be translated.

 Arguments

 number screenY


The y coordinate of the screed position be to translated.

 Returns

 number


Relativeposition X

 Returns

 number


Relativeposition Y


"Panel/Receiver"
Panel:Receiver( string name, function func, table menu ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Allows the panel to receive drag and drop events. Can be called multiple times with different names to receive multiple different draggable panel events.

 Arguments

 string name


Name of DnD panels to receive. This is set on the dragndrop-able panels via Panel:Droppable

 Arguments

 function func


This function is called whenever a panel with valid name is hovering above and dropped on this panel. It has next arguments:

 Panel pnl - The receiver panel
 table tbl - A table of panels dropped onto receiver panel
 boolean dropped - False if hovering over, true if dropped onto
 number menuIndex - Index of clicked menu item from third argument of Panel:Receiver
 number x - Cursor pos, relative to the receiver
 number y - Cursor pos, relative to the receiver


 Arguments

 table menu


A table of strings that will act as a menu if dragndrop was performed with a right click

 Examples
 Example
A very simple dragndrop example without using DDragBase.

local function DoDrop( self, panels, bDoDrop, Command, x, y )
	if ( bDoDrop ) then
		for k, v in pairs( panels ) do
			self:AddItem( v )
		end
	end
end

concommand.Add( test2, function()

	local frame = vgui.Create( DFrame )
	frame:SetSize( 500, 300 )
	frame:SetTitle( Frame )
	frame:MakePopup()
	frame:Center()

	local left = vgui.Create( DScrollPanel, frame )
	left:Dock( LEFT )
	left:SetWidth( frame:GetWide() / 2 - 7 )
	left:SetPaintBackground( true )
	left:DockMargin( 0, 0, 4, 0 )
	left:Receiver( myDNDname, DoDrop ) -- Make the panel a receiver for drag and drop events

	local right = vgui.Create( DScrollPanel, frame )
	right:Dock( FILL )
	right:SetPaintBackground( true )
	right:Receiver( myDNDname, DoDrop )

	for i = 1, 30 do
		local but = vgui.Create( DButton )
		but:SetText( i )
		but:SetSize( 36, 24 )
		but:Dock( TOP )
		but:Droppable( myDNDname ) -- make the panel be able to be dragndropped onto other panels
		right:AddItem( but )
	end

end )


"Panel/RebuildSpawnIcon"
Panel:RebuildSpawnIcon(  ) 
 Description
Causes a SpawnIcon to rebuild its model image.


"Panel/RunJavascript"
Panel:RunJavascript( string js ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Runs/Executes a string as JavaScript code in DHTML panel.



NOTE


This function does NOT evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).Because a return value is nil/no value (a.k.a. void).If you wish to pass/return values from JS to Lua, you may want to use DHTML.AddFunction function to accomplish that job.


 Arguments

 string js


Specify JavaScript code to be executed.

 Examples
 Example

-- First we create a container, in this case it is a full-screen Derma Frame window.
local dframe = vgui.Create( DFrame )
dframe:SetSize( ScrW(), ScrH() )
dframe:SetTitle( Garrys Mod Wiki )
dframe:Center()
dframe:MakePopup() -- Enable keyboard and mouse interaction for DFrame panel.

-- Create a new DHTML panel as a child of dframe, and dock-fill it.
local dhtml = vgui.Create( DHTML, dframe )
dhtml:Dock( FILL )
-- Navigate to Garrys Mod wikipedia website.
dhtml:OpenURL( https://wiki.garrysmod.com/index.php )
-- Run JavaScript code.
dhtml:RunJavascript( [[document.body.innerHTML = HTML changed from Lua using JavaScript!;]] )

-- This does not throw an error/exception, but instead returns nil/no value.
-- That means you cant pass/return values from JavaScript back to Lua context using this function.
local number = dhtml:Call( 22; )
print( number )
Output:

Inner HTML of document body in DHTML panel is now set to HTML changed from Lua using JavaScript!.


"Panel/SelectAll"
Panel:SelectAll(  ) 
 Description
Selects all items within a panel or object. For text-based objects, selects all text.


"Panel/SelectAllOnFocus"
Panel:SelectAllOnFocus(  ) 
 Description
If called on a text entry, clicking the text entry for the first time will automatically select all of the text ready to be copied by the user.


"Panel/SaveUndoState"
Panel:SaveUndoState(  ) 
 Description
Saves the current state (caret position and the text inside) of a TextEntry as an undo state.
See also Panel:Undo.


"Panel/Remove"
Panel:Remove(  ) 
 Description
Marks a panel for deletion so it will be deleted on the next frame.
Will automatically call Panel:InvalidateParent.


"Panel/Refresh"
Panel:Refresh( boolean ignoreCache=false ) 
 Description
Refreshes the HTML panels current page.

 Arguments

 boolean ignoreCache=false


If true, the refresh will ignore cached content similar to ctrl+f5 in most browsers.


"Panel/ResetAllFades"
Panel:ResetAllFades( boolean hold, boolean expiredOnly, number newSustain ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Resets all text fades in a RichText element made with Panel:InsertFade.

 Arguments

 boolean hold


True to reset fades, false otherwise.

 Arguments

 boolean expiredOnly


Any value equating to true will reset fades only on text segments that are completely faded out.

 Arguments

 number newSustain


The new sustain value of each faded text segment. Set to -1 to keep the old sustain value.

 Examples
 Example
Creates a RichText panel where two text segments slowly fade out and get reset to full alpha 5 seconds after being created.

-- Window frame
TextFrame = vgui.Create( DFrame )
TextFrame:SetSize( 200, 100 )
TextFrame:Center()
TextFrame:SetTitle( ResetAllFades )
TextFrame:MakePopup()

-- Rich Text panel
local richtext = vgui.Create( RichText, TextFrame )
richtext:Dock( FILL )

-- Append text and start fading a few frames after creation ( wont work otherwise )
timer.Simple( 0.05, function()

	richtext:SetBGColor( Color( 32, 32, 32 ) )
	richtext:SetFontInternal( GModNotify )

	richtext:AppendText( This is  )
	richtext:InsertFade( 5, 2 )
	
	richtext:AppendText( a test... )
	richtext:InsertFade( 5, 1 )
	
end )

-- 5 seconds after creation, reset all the fades
timer.Simple( 5, function()

	richtext:ResetAllFades( true, false, -1 )

end )
Output:


"Panel/SetAchievement"
Panel:SetAchievement( number id ) 
 Description
Sets the achievement to be displayed by AchievementIcon.

 Arguments

 number id


Achievement number ID


"Panel/SetActionFunction"
Panel:SetActionFunction( function func ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Only used in deprecated Derma controls.
Used in Button to call a function when the button is clicked and in Slider when the value changes.

 Arguments

 function func


Function to call when the Button is clicked or the Slider value is changed.
Arguments given are:

 Panel self - The panel itself
 string action - Command on button press, SliderMoved on slider move.
 number val - The new value of the Slider. Will always equal 0 for buttons.
 number - Always equals 0.


"Panel/SetBGColor"
Panel:SetBGColor( number r or color, number g, number b, number a ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Sets the background color of a panel such as a RichText, Label or DColorCube.



NOTE


This doesnt apply to all VGUI elements and its function varies between them


For DLabel elements, you must use Panel:SetPaintBackgroundEnabled( true ) before applying the color.
This will not work on setup of the panel - you should use this function in a hook like PANEL:ApplySchemeSettings or PANEL:PerformLayout.

 Arguments

 number r or color


The red channel of the color, or a Color structure. If you pass the latter, the following three arguments are ignored.

 Arguments

 number g


The green channel of the color.

 Arguments

 number b


The blue channel of the color.

 Arguments

 number a


The alpha channel of the color.

 Examples
 Example

-- Create a window frame
TextFrame = vgui.Create( DFrame )
TextFrame:SetSize( 300, 100 )
TextFrame:Center()
TextFrame:SetTitle( Windows XP Blue Screen )
TextFrame:MakePopup()

-- RichText panel
local richtext = vgui.Create( RichText, TextFrame )
richtext:Dock( FILL )

-- Sample text
richtext:SetText( A problem has been detected and Windows has been shut down to prevent damage to your computer.\n\nMOTHERBOARD_FRIED )

-- When the panel is ready for layout, set the background color to blue
function richtext:PerformLayout()
	
	self:SetBGColor( Color( 0, 0, 255 ) )
	
end
Output:


"Panel/SetAllowNonAsciiCharacters"
Panel:SetAllowNonAsciiCharacters( boolean allowed ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Configures a text input to allow user to type characters that are not included in the US-ASCII (7-bit ASCII) character set.
Characters not included in US-ASCII are multi-byte characters in UTF-8. They can be accented characters, non-Latin characters and special characters.

 Arguments

 boolean allowed


Set to true in order not to restrict input characters.

 Examples
 Example
Replaces the default vgui.Create() function to always allow non US-ASCII characters for text inputs.

if ( vgui.CreateStdRestrict == nil ) then
	vgui.CreateStdRestrict = vgui.Create
end
function vgui.Create( classname, parent, name )
	local vgui_elt = vgui.CreateStdRestrict( classname, parent, name )
	if ( classname == DTextEntry or classname == RichText or classname == TextEntry ) then
		vgui_elt:SetAllowNonAsciiCharacters( true )
	end
	return vgui_elt
end


"Panel/SelectAllText"
Panel:SelectAllText(  ) 
 Description
Selects all the text in a panel object. Will not select non-text items; for this, use Panel:SelectAll.


"Panel/SetAlpha"
Panel:SetAlpha( number alpha ) 
 Description
Sets the alpha multiplier for the panel

 Arguments

 number alpha


The alpha value in the range of 0-255.


"Panel/SetAutoDelete"
Panel:SetAutoDelete( boolean autoDelete ) 
 Description
Sets whenever the panel should be removed if the parent was removed.

 Arguments

 boolean autoDelete


Whenever to delete if the parent was removed or not.


"Panel/SelectNone"
Panel:SelectNone(  ) 
 Description
Deselects all items in a panel object. For text-based objects, this will deselect all text.


"Panel/SetContentAlignment"
Panel:SetContentAlignment( number alignment ) 
 Description
Sets the alignment of the contents.

 Arguments

 number alignment


The direction of the content, based on the number pad.


7: top-left8: top-center9: top-right
4: middle-left5: center6: middle-right
1: bottom-left2: bottom-center3: bottom-right


"Panel/SetCaretPos"
Panel:SetCaretPos( number offset ) 
 Description
Sets the position of the caret (or text cursor) in a text-based panel object.

 Arguments

 number offset


Caret position/offset from the start of text. A value of 0 places the caret before the first character.


"Panel/SetCookie"
Panel:SetCookie( string cookieName, string value ) 
 Description
Stores a string in the named cookie using Panel:GetCookieName as prefix.
You can also retrieve and modify this cookie by using the cookie library. Cookies are stored in this format:
panelCookieName.cookieName



WARNING


The panels cookie name MUST be set for this function to work. See Panel:SetCookieName.


 Arguments

 string cookieName


The unique name used to retrieve the cookie later.

 Arguments

 string value


The value to store in the cookie. This can be retrieved later as a string or number.


"Panel/SetCommand"
Panel:SetCommand(  ) 
 Description
Sets the action signal command thats fired when a Button is clicked. The hook PANEL:ActionSignal is called as the click response.
This has no effect on buttons unless it has had its AddActionSignalTarget method called (an internal function not available by default in Garrys Mod LUA).
A better alternative is calling Panel:Command when a DButton is clicked.

 Examples
 Example
Creates an engine-based Frame panel and changes the command thats fired when you click the white close button (by default the command is set to Close).

-- Create a regular Frame panel
TestFrame = vgui.Create( Frame )
TestFrame:SetSize( 200, 200 )
TestFrame:Center()
TestFrame:MakePopup()
TestFrame:SetVisible( true )

local lbl = vgui.Create( DLabel, TestFrame )
lbl:Dock( FILL )
lbl:DockMargin( 10, 10, 10, 10 )
lbl:SetText( Click the white button in the upper right corner of this window. )
lbl:SetFont( ChatFont )
lbl:SetWrap( true )

-- Create a background panel so we can see the Frames internal buttons
local bg = vgui.Create( DPanel, TestFrame )
bg:Dock( FILL )
bg:SetBackgroundColor( Color( 64, 64, 64, 192 ) )
bg:MoveToBack()

-- Loop through Frames internal components
for _, child in pairs( TestFrame:GetChildren() ) do

	-- Disable frame sizing
	if( string.find( child:GetName(), Grip ) ) then
	
		child:SetMouseInputEnabled( false )
		
	-- Fire the Testing command when we click the white button
	elseif( child:GetName() == frame_close ) then
	
		child:SetCommand( Testing )
		
	end
	
end

function TestFrame:ActionSignal( signalName, signalValue )
	
	-- Show the signal name
	lbl:SetText( Received command: \..signalName..\ )

end
Output:


"Panel/SetAnimationEnabled"
Panel:SetAnimationEnabled( boolean enable ) 
 Description
Enables or disables animations for the panel object by overriding the PANEL:AnimationThink hook to nil and back.

 Arguments

 boolean enable


Whether to enable or disable animations.


"Panel/SetConVar"
Panel:SetConVar( string convar ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description


WARNING


This function does not exist on all panels


Sets this panels convar. When the convar changes this panel will update automatically.
For developer implementation, see Derma_Install_Convar_Functions.

 Arguments

 string convar


The console variable to check.

 Examples
 Example
Makes a checkbox linked to the sv_cheats convar.

local checkbox = vgui.Create( DCheckBoxLabel, myFrame )
checkbox:SetConVar( sv_cheats )
checkbox:SetText( Enable cheats? )
checkbox:SetPos( 5, 25 )
checkbox:SizeToContents()
Output:

A checkbox which adapts to the value of the sv_cheats convar value.


"Panel/SetBGColorEx"
Panel:SetBGColorEx( number r, number g, number b, number a ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Sets the background color of the panel.
 Arguments

 number r


The red channel of the color.

 Arguments

 number g


The green channel of the color.

 Arguments

 number b


The blue channel of the color.

 Arguments

 number a


The alpha channel of the color.


"Panel/SetCookieName"
Panel:SetCookieName( string name ) 
 Description
Sets the panels cookie name. Calls PANEL:LoadCookies if defined.

 Arguments

 string name


The panels cookie name. Used as prefix for Panel:SetCookie


"Panel/SetCursor"
Panel:SetCursor( string cursor ) 
 Description
Sets the appearance of the cursor.

 Arguments

 string cursor


The cursor to be set. Can be one of the following:

 arrow
 beam
 hourglass
 waitarrow
 crosshair
 up
 sizenwse
 sizenesw
 sizewe
 sizens
 sizeall
 no
 hand
 blank

Set to anything else to set it to none, the default fallback. Do note that a value of none does not, as one might assume, result in no cursor being drawn - hiding the cursor requires a value of blank instead.


"Panel/SetEnabled"
Panel:SetEnabled( boolean enable ) 
 Description
Sets the enabled state of a disable-able panel object, such as a DButton or DTextEntry.
See Panel:IsEnabled for a function that retrieves the enabled state of a panel.

 Arguments

 boolean enable


Whether to enable or disable the panel object.


"Panel/SetExpensiveShadow"
Panel:SetExpensiveShadow( number distance, table Color ) 
 Description
Adds a shadow falling to the bottom right corner of the panels text. This has no effect on panels that do not derive from Label.

 Arguments

 number distance


The distance of the shadow from the panel.

 Arguments

 table Color


The color of the shadow. Uses the Color structure.


"Panel/SetDrawLanguageID"
Panel:SetDrawLanguageID( boolean visible ) 
 Description
Sets the visibility of the language selection box in a TextEntry when typing in non-English mode.
See Panel:SetDrawLanguageIDAtLeft for a function that changes the position of the language selection box.

 Arguments

 boolean visible


true to make it visible, false to hide it.


"Panel/SetDrawLanguageIDAtLeft"
Panel:SetDrawLanguageIDAtLeft( boolean left ) 
 Description
Sets where to draw the language selection box.
See Panel:SetDrawLanguageID for a function that hides or shows the language selection box.

 Arguments

 boolean left


true = left, false = right


"Panel/SetFGColor"
Panel:SetFGColor( number r or color, number g, number b, number a ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Sets the foreground color of a panel.
For a Label or RichText, this is the color of its text.
This function calls Panel:SetFGColorEx internally.



NOTE


This doesnt apply to all VGUI elements (such as DLabel) and its function varies between them


 Arguments

 number r or color


The red channel of the color, or a Color structure. If you pass the latter, the following three arguments are ignored.

 Arguments

 number g


The green channel of the color.

 Arguments

 number b


The blue channel of the color.

 Arguments

 number a


The alpha channel of the color.

 Examples
 Example
Creates a Label and sets its text color to white.

local label = vgui.Create( Label )

label:SetFGColor( Color( 255, 255, 255, 255 ) )


 Examples
 Example
Sets the foreground color of a RichText to match the chat box format.

-- Create a window frame
TextFrame = vgui.Create( DFrame )
TextFrame:SetSize( 200, 50 )
TextFrame:Center()
TextFrame:SetTitle( This is a color test )
TextFrame:MakePopup()

-- RichText panel
local richtext = vgui.Create( RichText, TextFrame )
richtext:Dock( FILL )

-- Sample text
richtext:SetText( Here is some light green text. )

-- When the panel is ready for layout, make the text light green
function richtext:PerformLayout()
	self:SetFGColor( Color( 153, 255, 153 ) )
end
Output:


"Panel/SetDropTarget"
Panel:SetDropTarget( number x, number y, number width, number height ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Sets the target area for dropping when an object is being dragged around this panel using the dragndrop library.
This draws a target box of the specified size and position, until Panel:DragHoverEnd is called. It uses Panel:DrawDragHover to draw this area.

 Arguments

 number x


The x coordinate of the top-left corner of the drop area.

 Arguments

 number y


The y coordinate of the top-left corner of the drop area.

 Arguments

 number width


The width of the drop area.

 Arguments

 number height


The height of the drop area.


"Panel/SetFGColorEx"
Panel:SetFGColorEx( number r, number g, number b, number a ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Sets the foreground color of the panel.
For labels, this is the color of their text.

 Arguments

 number r


The red channel of the color.

 Arguments

 number g


The green channel of the color.

 Arguments

 number b


The blue channel of the color.

 Arguments

 number a


The alpha channel of the color.


"Panel/SetFocusTopLevel"
Panel:SetFocusTopLevel( boolean state ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
Sets the panel that owns this FocusNavGroup to be the root in the focus traversal hierarchy.

 Arguments

 boolean state


"Panel/SetDragParent"
Panel:SetDragParent( Panel parent ) 
 Description
Sets the drag parent.
Drag parent means that when we start to drag this panel, well really start dragging the defined parent.

 Arguments

 Panel parent


The panel to set as drag parent.


"Panel/SetFontInternal"
Panel:SetFontInternal( string fontName ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the font used to render this panels text.
To retrieve the font used by a panel, call Panel:GetFont.

 Arguments

 string fontName


The name of the font.
See here for a list of existing fonts.

Alternatively, use surface.CreateFont to create your own custom font.

 Examples
 Example
Sets the font of a RichText element to match the chat box font.

-- Create a window frame
TextFrame = vgui.Create( DFrame )
TextFrame:SetSize( 200, 100 )
TextFrame:Center()
TextFrame:SetTitle( This is a font test )
TextFrame:MakePopup()

-- RichText panel
local richtext = vgui.Create( RichText, TextFrame )
richtext:Dock( FILL )

-- Sample text
richtext:SetText( This is a sample of text using the chat box font. )

-- Ensure font and text color changes are applied
function richtext:PerformLayout()

	self:SetFontInternal( ChatFont )
	self:SetFGColor( Color( 255, 255, 255 ) )
	
end
Output:


"Panel/SetDrawOnTop"
Panel:SetDrawOnTop( boolean drawOnTop=false ) 
 Description
Makes the panel render in front of all others, including the spawn menu and main menu.
Priority is given based on the last call, so of two panels that call this method, the second will draw in front of the first.



NOTE


This only makes the panel draw above other panels. If theres another panel that would have otherwise covered it, users will not be able to interact with it.


 Arguments

 boolean drawOnTop=false


Whether or not to draw the panel in front of all others.


"Panel/SetMinimumSize"
Panel:SetMinimumSize( number minW=nil, number minH=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets the minimum dimensions of the panel or object.
You can restrict either or both values.
Calling the function without arguments will remove the minimum size.

 Arguments

 number minW=nil


The minimum width of the object.

 Arguments

 number minH=nil


The minimum height of the object.

 Examples
 Example
Restricting height but not width

local frame = vgui.Create( DFrame )
frame:SetSize( 800, 600 )
frame:SetSizable( true )
frame:SetMinimumSize( nil, 300 )
frame:MakePopup()


"Panel/SetPaintBackgroundEnabled"
Panel:SetPaintBackgroundEnabled( boolean paintBackground ) 
 Description
Sets whenever all the default background of the panel should be drawn or not.

 Arguments

 boolean paintBackground


Whenever to draw the background or not.


"Panel/SetHTML"
Panel:SetHTML( string HTML code ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 DescriptionAllows you to set HTML code within a panel.
 Arguments

 string HTML code


The code to set.

 Examples
 Example
local HTML = vgui.Create( HTML, DPanel )
HTML:SetHTML( &lt;p&gt;Put HTML code here&lt;/p&gt; )
HTML:SetSize( 390, 400 )


"Panel/SetMultiline"
Panel:SetMultiline( boolean multiline ) 
 Description
Enables or disables the multi-line functionality of a text object, such as a DTextEntry.

 Arguments

 boolean multiline


Whether to enable multiline or not.


"Panel/SetName"
Panel:SetName( string name ) 
 Description
Sets the internal name of the panel.

 Arguments

 string name


The new name of the panel.


"Panel/SetHeight"
Panel:SetHeight( number height ) 
 Description
Sets the height of the panel.
Calls PANEL:OnSizeChanged and marks this panel for layout (Panel:InvalidateLayout).
See also Panel:SetSize.

 Arguments

 number height


The height to be set.


"Panel/SetPaintFunction"
Panel:SetPaintFunction(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

This function does nothing.
This function does nothing.


"Panel/SetPaintBorderEnabled"
Panel:SetPaintBorderEnabled( boolean paintBorder ) 
 Description
Sets whenever all the default border of the panel should be drawn or not.

 Arguments

 boolean paintBorder


Whenever to draw the border or not.


"Panel/SetParent"
Panel:SetParent( Panel parent ) 
 Description
Sets the parent of the panel.

 Arguments

 Panel parent


The new parent of the panel.


"Panel/SetKeyBoardInputEnabled"
Panel:SetKeyBoardInputEnabled( boolean keyboardInput ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Alias of Panel:SetKeyboardInputEnabledEnables or disables the keyboard input for the panel.
 Arguments

 boolean keyboardInput


Whether to enable or disable keyboard input.


"Panel/SetModel"
Panel:SetModel( string ModelPath, number skin=0, string bodygroups= ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 DescriptionSets the model to be displayed by SpawnIcon.


NOTE


This must be called after setting size if you wish to use a different size spawnicon


 Arguments

 string ModelPath


The path of the model to set

 Arguments

 number skin=0


The skin to set

 Arguments

 string bodygroups=


The body groups to set. Each single-digit number in the string represents a separate bodygroup, up to 9 in total.


"Panel/SetPaintedManually"
Panel:SetPaintedManually( boolean paintedManually ) 
 Description
Enables or disables painting of the panel manually with Panel:PaintManual.

 Arguments

 boolean paintedManually


True if the panel should be painted manually.


"Panel/SetPos"
Panel:SetPos( number posX, number posY ) 
 Description
Sets the position of the panel.
This will trigger PANEL:PerformLayout. You should avoid calling this function in PANEL:PerformLayout to avoid infinite loops.



NOTE


If you wish to position and re-size panels without much guesswork and have them look good on different screen resolutions, you may find Panel:Dock useful


 Arguments

 number posX


The x coordinate of the position.

 Arguments

 number posY


The y coordinate of the position.


"Panel/SetMouseInputEnabled"
Panel:SetMouseInputEnabled( boolean mouseInput ) 
 Description
Enables or disables the mouse input for the panel.

 Arguments

 boolean mouseInput


Whenever to enable or disable mouse input.


"Panel/SetPopupStayAtBack"
Panel:SetPopupStayAtBack( boolean stayAtBack ) 
 Description
If this panel object has been made a popup with Panel:MakePopup, this method will prevent it from drawing in front of other panels when it receives input focus.

 Arguments

 boolean stayAtBack


If true, the popup panel will not draw in front of others when it gets focus, for example when it is clicked.


"Panel/SetSelectable"
Panel:SetSelectable( boolean selectable ) 
 Description
Sets whether the panel object can be selected or not (like icons in the Spawn Menu, holding &#x21E7; Shift). If enabled, this will affect the function of a DButton whilst &#x21E7; Shift is pressed. Panel:SetSelected can be used to select/deselect the object.

 Arguments

 boolean selectable


Whether the panel object should be selectable or not.


"Panel/SetKeyboardInputEnabled"
Panel:SetKeyboardInputEnabled( boolean enable ) 
 Description
Allows or disallows the panel to receive keyboard focus and input. This is recursively applied to all children.

 Arguments

 boolean enable


Whether keyboard input should be enabled for this panel.


"Panel/SetRenderInScreenshots"
Panel:SetRenderInScreenshots( boolean renderInScreenshot ) 
 Description
Sets whenever the panel should be rendered in the next screenshot.

 Arguments

 boolean renderInScreenshot


Whenever to render or not.


"Panel/SetPlayer"
Panel:SetPlayer( Player player, number size ) 
 Description
Used by AvatarImage to load an avatar for given player.

 Arguments

 Player player


The player to use avatar of.

 Arguments

 number size


The size of the avatar to use. Acceptable sizes are 32, 64, 184.


"Panel/SetSelected"
Panel:SetSelected( boolean selected=false ) 
 Description
Sets the selected state of a selectable panel object. This functionality is set with Panel:SetSelectable and checked with Panel:IsSelectable.

 Arguments

 boolean selected=false


Whether the object should be selected or deselected. Panel:IsSelected can be used to determine the selected state of the object.


"Panel/SetSize"
Panel:SetSize( number width, number height ) 
 Description
Sets the size of the panel.
Calls PANEL:OnSizeChanged and marks this panel for layout (Panel:InvalidateLayout).
See also Panel:SetWidth and Panel:SetHeight.



NOTE


If you wish to position and re-size panels without much guesswork and have them look good on different screen resolutions, you may find Panel:Dock useful


 Arguments

 number width


The width of the panel.

 Arguments

 number height


The height of the panel.


"Panel/SetSelectionCanvas"
Panel:SetSelectionCanvas( any selCanvas ) 
 Description
Enables the panel object for selection (much like the spawn menu).

 Arguments

 any selCanvas


Any value other than nil or false will enable the panel object for selection. It is recommended to pass true.


"Panel/SetSpawnIcon"
Panel:SetSpawnIcon( string icon ) 
 DescriptionSets the .png image to be displayed on a SpawnIcon or the panel it is based on ModelImage.
Only .png images can be used with this function.

 Arguments

 string icon


A path to the .png material, for example one of the Silkicons shipped with the game.


"Panel/SetSteamID"
Panel:SetSteamID( string steamid, number size ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Used by AvatarImage panels to load an avatar by its 64-bit Steam ID (community ID).

 Arguments

 string steamid


The 64bit SteamID of the player to load avatar of

 Arguments

 number size


The size of the avatar to use. Acceptable sizes are 32, 64, 184.

 Examples
 Example
Creates a grid of randomly generated Steam avatars which link to their corresponding Steam user pages.

-- Returns a random 64-bit Steam ID between STEAM_0:0:1 and STEAM_0:1:100000000
function GetRandomSteamID()
	return 7656119..tostring( 7960265728+math.random( 1, 200000000 ) )
end

-- Create the Steam User Grid
-- Arg1: the size of each avatar
-- Arg2: the size to load each avatar ( 16, 32, 64, 84, 128, 184 )
function CreateSteamUserGrid( av_size, av_res )

	-- Remove this block of code if ( you do not mind loading thousands of avatars
	if( av_size &lt; 64 ) then
		Error( Avatar size cannot be less than 64 square pixels.\n )
		return
	end
	
	-- Delete existing grid
	if( SteamUserGrid ) then SteamUserGrid:Remove() end
	
	-- The amount of avatars we can fit width-wise and height-wise
	local w_count = math.floor( ScrW()/av_size )
	local h_count = math.floor( ( ScrH()-25 )/av_size )	-- 25 = frame header size
		
	-- Container panel
	SteamUserGrid = vgui.Create( DFrame )
	SteamUserGrid:SetSize( w_count*av_size, ( h_count*av_size )+25 )
	SteamUserGrid:Center()
	SteamUserGrid:SetTitle( Randomly Generated Grid of Steam Users )
	SteamUserGrid:MakePopup()
	
	-- Loop variables
	local avatar, random_id
	
	-- Create enough avatars to fill up screen without overflowing
	for i = 0, ( w_count*h_count )-1 do
	
		random_id = GetRandomSteamID()
		
		-- Add avatar to container panel
		avatar = vgui.Create( AvatarImage, SteamUserGrid )
		
		-- Layout the avatars in a grid
		avatar:SetPos( ( i%w_count )*av_size, 25+math.floor( i/w_count )*av_size )
		
		-- Load the avatar image
		avatar:SetSteamID( random_id, av_res )

		avatar:SetSize( av_size, av_size )
		
		-- Open users Steam page on avatar click
		avatar.OnMousePressed = function( self )
			
			local url = http://steamcommunity.com/profiles/..random_id
			
			gui.OpenURL( url )
			
		end
		
	end
	
end
Output:

CreateSteamUserGrid(64, 64)


The white question mark avatars mean no custom icon used or the user hasnt set up a community profile. The blue question mark avatars mean the user doesnt exist.


"Panel/SetTabPosition"
Panel:SetTabPosition( number position ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
Possibly related to in which order pressing TAB should select/highlight the panels, presumably used on text entries and buttons.

 Arguments

 number position


"Panel/SetTextInset"
Panel:SetTextInset( number insetX, number insetY ) 
 Description
Sets the left and top text margins of a text-based panel object, such as a DButton or DLabel.

 Arguments

 number insetX


The left margin for the text, in pixels. This will only affect centered text if the margin is greater than its x-coordinate.

 Arguments

 number insetY


The top margin for the text, in pixels.


"Panel/SetTerm"
Panel:SetTerm( number delay ) 
 Description
Removes the panel after given time in seconds.



NOTE


This function will not work if PANEL:AnimationThink is overridden, unless Panel:AnimationThinkInternal is called every frame.


 Arguments

 number delay


Delay in seconds after which the panel should be removed.


"Panel/SetText"
Panel:SetText( string text ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the text value of a panel object containing text, such as a Label, TextEntry or RichText and their derivatives, such as DLabel, DTextEntry or DButton.



WARNING


When used on a Label or its derivatives ( DLabel and DButton ), it will automatically call Panel:InvalidateLayout, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.


 Arguments

 string text


The text value to set.

 Examples
 Example
Creates a RichText element and sets the text to a localized string; the default VAC rejection message.

-- Window frame for the RichText
TextFrame = vgui.Create( DFrame )
TextFrame:SetSize( 250, 150 )
TextFrame:Center()
TextFrame:SetTitle( #VAC_ConnectionRefusedTitle ) -- Results in Connection Refused - VAC

-- RichText panel
local richtext = vgui.Create( RichText, TextFrame )
richtext:Dock( FILL )

-- Set the text to the message you get when VAC banned
richtext:SetText( #VAC_ConnectionRefusedDetail )
Output:


"Panel/SetSkin"
Panel:SetSkin( string skinName ) 
 Description
Sets the derma skin that the panel object will use, and refreshes all panels with derma.RefreshSkins.

 Arguments

 string skinName


The name of the skin to use. The default derma skin is Default.


"Panel/SetTall"
Panel:SetTall( number height ) 
 Description
Sets height of a panel. An alias of Panel:SetHeight.

 Arguments

 number height


Desired height to set


"Panel/SetToFullHeight"
Panel:SetToFullHeight(  ) 
 Description
Sets the height of a RichText element to accommodate the text inside.



NOTE


This function internally relies on Panel:GetNumLines, so it should be called at least a couple frames after modifying the text using Panel:AppendText


 Examples
 Example
Creates a RichText panel with no set height. The proper height is applied 2 seconds after being created in order to show the difference.

-- Create a window frame
TextFrame = vgui.Create( DFrame )
TextFrame:SetSize( 250, 210 )
TextFrame:Center()
TextFrame:SetTitle( No set height )
TextFrame:MakePopup()

-- RichText panel
local richtext = vgui.Create( RichText, TextFrame )
richtext:SetPos( 10, 30 )
richtext:SetWidth( 230 )

-- Block of text
richtext:AppendText( #ServerBrowser_ServerWarning_MaxPlayers )

function richtext:PerformLayout() self:SetBGColor( Color( 0, 0, 0 ) ) end

-- Set to full height after 2 seconds
timer.Simple( 2, function()

	richtext:SetToFullHeight()
	
	TextFrame:SetTitle( Full set height )
	
end )
Output:


"Panel/SetTooltip"
Panel:SetTooltip( string str ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the tooltip to be displayed when a player hovers over the panel object with their cursor.

 Arguments

 string str


The text to be displayed in the tooltip. Set false to disable it.

 Examples
 Example
To disable tooltip set first argument to false

local frame = vgui.Create( DFrame )
frame:SetSize( 96, 96 )
frame:Center()
frame:MakePopup( true )

local icon = frame:Add( SpawnIcon )
icon:SetPos( 0, 20 )
icon:SetSize( 64, 64 )
icon:SetModel( models/props_junk/watermelon01.mdl )
icon:SetTooltip( false ) -- disable tooltip for this panel


"Panel/SetToolTip"
Panel:SetToolTip(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Alias of Panel:SetTooltip.


"Panel/SetVisible"
Panel:SetVisible( boolean visible ) 
 Description
Sets the visibility of the panel.

 Arguments

 boolean visible


The visibility of the panel.


"Panel/SetToolTipPanel"
Panel:SetToolTipPanel(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Alias of Panel:SetTooltipPanel.


"Panel/SetWidth"
Panel:SetWidth( number width ) 
 Description
Sets the width of the panel.
Calls PANEL:OnSizeChanged and marks this panel for layout (Panel:InvalidateLayout).
See also Panel:SetSize.

 Arguments

 number width


The new width of the panel.


"Panel/SetTooltipPanel"
Panel:SetTooltipPanel( Panel tooltipPanel=nil ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the panel to be displayed as a tooltip when a player hovers over the panel object with their cursor. Note that it will not override the default DTooltip panel.



NOTE


Panel:SetTooltip will override this functionality.




WARNING


Calling this from PANEL:OnCursorEntered is too late! The tooltip will not be displayed or be updated.




WARNING


Given panel or the previously set one will NOT be automatically removed.


 Arguments

 Panel tooltipPanel=nil


The panel to use as the tooltip.

 Examples
 Example
Example usage of this function

local pnl = vgui.Create( DFrame )
pnl:SetSize( 500, 500 )
pnl:Center()
pnl:MakePopup()

local p = vgui.Create( Panel )
p:SetSize( 100, 100 )
p:SetVisible( false )
p.Paint = function( s, w, h ) draw.RoundedBox( 0, 0, 0, w, h, Color( 255, 0, 0 ) ) end

local c = vgui.Create( DButton, p )
c:SetText( test )
c:SetSize( 50, 50 )
c:SetPos( 5, 5 )

local b = pnl:Add( DButton )
b:Dock( TOP )
--b:SetTooltip( test ) -- This will stop SetTooltipPanel from working.
b:SetTooltipPanel( p )


"Panel/SizeTo"
Panel:SizeTo( number sizeW=0, number sizeH=0, number time, number delay=0, number ease=-1, function callback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments


 Description
Uses animation to resize the panel to the specified size.

 Arguments

 number sizeW=0


The target width of the panel. Use -1 to retain the current width.

 Arguments

 number sizeH=0


The target height of the panel. Use -1 to retain the current height.

 Arguments

 number time


The time to perform the animation within.

 Arguments

 number delay=0


The delay before the animation starts.

 Arguments

 number ease=-1


Easing of the start and/or end speed of the animation. See Panel:NewAnimation for how this works.

 Arguments

 function callback


The function to be called once the animation finishes. Arguments are:

 table animData - The AnimationData structure that was used.
 Panel pnl - The panel object that was resized.


"Panel/SetWide"
Panel:SetWide( number width ) 
 Description
Sets width of a panel. An alias of Panel:SetWidth.

 Arguments

 number width


Desired width to set


"Panel/SetURL"
Panel:SetURL( string url ) 
 DescriptionSets the URL of a link-based panel such as DLabelURL.
 Arguments

 string url


The URL to set. This must begin with http://.


"Panel/SetVerticalScrollbarEnabled"
Panel:SetVerticalScrollbarEnabled( boolean display=false ) 
 Description
Sets the visibility of the vertical scrollbar.
Works for RichText and TextEntry.

 Arguments

 boolean display=false


True to display the vertical text scroll bar, false to hide it.


"Panel/SetZPos"
Panel:SetZPos( number zIndex ) 
 Description
Sets the panels z position which determines the rendering order.
Panels with lower z positions appear behind panels with higher z positions.
This also controls in which order panels docked with Panel:Dock appears.

 Arguments

 number zIndex


The z position of the panel.

Cant be lower than -32768 or higher than 32767.


"Panel/SizeToContentsY"
Panel:SizeToContentsY( number addVal=0 ) 
 Description
Resizes the panel objects height to accommodate all child objects/contents.
Only works on Label derived panels such as DLabel by default, and on any panel that manually implemented Panel:GetContentSize method.



NOTE


You must call this function AFTER setting text/font or adjusting child panels.


 Arguments

 number addVal=0


The number of extra pixels to add to the height.


"Panel/SizeToContentsX"
Panel:SizeToContentsX( number addVal=0 ) 
 Description
Resizes the panel objects width to accommodate all child objects/contents.
Only works on Label derived panels such as DLabel by default, and on any panel that manually implemented Panel:GetContentSize method.



NOTE


You must call this function AFTER setting text/font or adjusting child panels.


 Arguments

 number addVal=0


The number of extra pixels to add to the width. Can be a negative number, to reduce the width.


"Panel/SlideUp"
Panel:SlideUp( number Length ) 
 Description
Slides the panel out to the top.

 Arguments

 number Length


Time to complete the animation.


"Panel/SlideDown"
Panel:SlideDown( number Length ) 
 Description
Slides the panel in from above.

 Arguments

 number Length


Time to complete the animation.


"Panel/StartBoxSelection"
Panel:StartBoxSelection(  ) 
 Description
Begins a box selection, enables mouse capture for the panel object, and sets the start point of the selection box to the mouse cursors position, relative to this object. For this to work, either the object or its parent must be enabled as a selection canvas. This is set using Panel:SetSelectionCanvas.


"Panel/StretchBottomTo"
Panel:StretchBottomTo( Panel tgtPanel, number offset=0 ) 
 Description
Resizes the panel objects height so that its bottom is aligned with the top of the passed panel. An offset greater than zero will reduce the panels height to leave a gap between it and the passed panel.

 Arguments

 Panel tgtPanel


The panel to align the bottom of this one with.

 Arguments

 number offset=0


The gap to leave between this and the passed panel. Negative values will cause the panels height to increase, forming an overlap.


"Panel/Show"
Panel:Show(  ) 
 Description
Makes a panel visible.


"Panel/StretchToParent"
Panel:StretchToParent( number offsetLeft, number offsetTop, number offsetRight, number offsetBottom ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Sets the dimensions of the panel to fill its parent. It will only stretch in directions that arent nil.

 Arguments

 number offsetLeft


The left offset to the parent.

 Arguments

 number offsetTop


The top offset to the parent.

 Arguments

 number offsetRight


The right offset to the parent.

 Arguments

 number offsetBottom


The bottom offset to the parent.


"Panel/StretchRightTo"
Panel:StretchRightTo( Panel tgtPanel, number offset=0 ) 
 Description
Resizes the panel objects width so that its right edge is aligned with the left of the passed panel. An offset greater than zero will reduce the panels width to leave a gap between it and the passed panel.

 Arguments

 Panel tgtPanel


The panel to align the right edge of this one with.

 Arguments

 number offset=0


The gap to leave between this and the passed panel. Negative values will cause the panels width to increase, forming an overlap.


"Panel/ToggleSelection"
Panel:ToggleSelection(  ) 
 Description
Toggles the selected state of a selectable panel object. This functionality is set with Panel:SetSelectable and checked with Panel:IsSelectable. To check whether the object is selected or not, Panel:IsSelected is used.


"Panel/Stop"
Panel:Stop(  ) 
 Description
Stops all panel animations by clearing its animation list. This also clears all delayed animations.


"Panel/SetWrap"
Panel:SetWrap( boolean wrap ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets whether text wrapping should be enabled or disabled on Label and DLabel panels.
Use DLabel:SetAutoStretchVertical to automatically correct vertical size; Panel:SizeToContents will not set the correct height.

 Arguments

 boolean wrap


True to enable text wrapping, false otherwise.

 Examples
 Example
Creates two labels in a panel and sets the text wrapping to false and true respectively.

-- Background panel
BGPanel = vgui.Create( DPanel )
BGPanel:SetSize( 300, 130 )
BGPanel:Center()
BGPanel:SetBackgroundColor( Color( 0, 0, 0 ) )
		
-- Label with no text wrapping
local lbl_nowrap = vgui.Create( DLabel, BGPanel )
lbl_nowrap:SetPos( 10, 10 )
lbl_nowrap:SetSize( 280, 50 )		
lbl_nowrap:SetFont( GModNotify )
lbl_nowrap:SetText( This is a label that has text wrapping disabled. )

lbl_nowrap:SetWrap( false )

-- Label with text wrapping
local lbl_wrap = vgui.Create( DLabel, BGPanel )
lbl_wrap:SetPos( 10, 70 )
lbl_wrap:SetSize( 280, 50 )
lbl_wrap:SetFont( GModNotify )
lbl_wrap:SetText( This is a label that has text wrapping enabled. )

lbl_wrap:SetWrap( true )
Output:


"Panel/ToggleVisible"
Panel:ToggleVisible(  ) 
 Description
Toggles the visibility of a panel and all its children.


"Panel/Undo"
Panel:Undo(  ) 
 Description
Restores the last saved state (caret position and the text inside) of a TextEntry. Should act identically to pressing CTRL+Z in a TextEntry.
See also Panel:SaveUndoState.


"Panel/SetWorldClicker"
Panel:SetWorldClicker( boolean enabled ) 
 Description
This makes it so that when youre hovering over this panel you can `click` on the world. Your viewmodel will aim etc.



BUG


This function doesnt scale with custom FOV specified by GM:CalcView or WEAPON:TranslateFOV.



 Arguments

 boolean enabled


"Panel/UnselectAll"
Panel:UnselectAll(  ) 
 Description
Recursively deselects this panel object and all of its children. This will cascade to all child objects at every level below the parent.


"Panel/SizeToContents"
Panel:SizeToContents(  ) 
 Description
Resizes the panel so that its width and height fit all of the content inside.



NOTE


Only works on Label derived panels such as DLabel by default, and on any panel that manually implemented the Panel:SizeToContents method, such as DNumberWang and DImage.




WARNING


You must call this function AFTER setting text/font, adjusting child panels or otherwise altering the panel.


"Panel/SizeToChildren"
Panel:SizeToChildren( boolean sizeW, boolean sizeH ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Resizes the panel to fit the bounds of its children.



NOTE


Your panel must have its layout updated (Panel:InvalidateLayout) for this function to work properly.


 Arguments

 boolean sizeW


Resize with width of the panel.

 Arguments

 boolean sizeH


Resize the height of the panel.

 Examples
 Example
Using Panel:InvalidateLayout

local Frame = vgui.Create( DFrame )
Frame:SetSize( 300, 400 )
Frame:Center()
Frame:MakePopup()
Frame:SetSizable( true )

-- with:InvalidateLayout( true )
local backgroundPanel = vgui.Create( DPanel, Frame )
backgroundPanel:Dock( TOP )
backgroundPanel:DockPadding( 4, 4, 4, 4 )
backgroundPanel:DockMargin( 0, 0, 0, 4 )

local button1 = vgui.Create( DButton, backgroundPanel )
button1:Dock( TOP )
button1:DockMargin( 0, 0, 0, 4 )
button1:SetTall( 60 )
button1:SetText( c1 )

local button2 = vgui.Create( DButton, backgroundPanel )
button2:Dock( TOP )
button2:SetTall( 60 )
button2:SetText( c2 )

backgroundPanel:InvalidateLayout( true )
backgroundPanel:SizeToChildren( false, true )


-- now w/o:InvalidateLayout
local backgroundPanel = vgui.Create( DPanel, Frame )
backgroundPanel:Dock( TOP )
backgroundPanel:DockPadding( 4, 4, 4, 4 )

local button1 = vgui.Create( DButton, backgroundPanel )
button1:Dock( TOP )
button1:DockMargin( 0, 0, 0, 4 )
button1:SetTall( 60 )
button1:SetText( c1 )

local button2 = vgui.Create( DButton, backgroundPanel )
button2:Dock( TOP )
button2:SetTall( 60 )
button2:SetText( c2 )

backgroundPanel:SizeToChildren( false, true )
Output:


"PathFollower/Chase"
PathFollower:Chase( NextBot bot, Entity ent ) 
 Description
If you created your path with type Chase this functions should be used in place of PathFollower:Update to cause the bot to chase the specified entity.

 Arguments

 NextBot bot


The bot to update along the path

 Arguments

 Entity ent


The entity we want to chase


"PathFollower/Draw"
PathFollower:Draw(  ) 
 Description
Draws the path. This is meant for debugging - and uses debug overlay.


"PathFollower/Compute"
PathFollower:Compute( NextBot from, Vector to, function generator=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Compute shortest path from bot to goal via A* algorithm.

 Arguments

 NextBot from


The nextbot were generating for

 Arguments

 Vector to


To point

 Arguments

 function generator=nil


A funtion that allows you to alter the path generation. See example below for the default function.

 Returns

 boolean




 If returns true, path was found to the goal position.
 If returns false, path may either be invalid (use IsValid() to check), or valid but doesnt reach all the way to the goal.


 Examples
 Example
The default path generator. You do not have to provide the PathFollower.Compute any generator functions if you want to use the default generator.

path:Compute( self, pos, function( area, fromArea, ladder, elevator, length )
	if ( !IsValid( fromArea ) ) then

		// first area in path, no cost
		return 0
	
	else
	
		if ( !self.loco:IsAreaTraversable( area ) ) then
			// our locomotor says we cant move here
			return -1
		end

		// compute distance traveled along path so far
		local dist = 0

		if ( IsValid( ladder ) ) then
			dist = ladder:GetLength()
		elseif ( length &gt; 0 ) then
			// optimization to avoid recomputing length
			dist = length
		else
			dist = ( area:GetCenter() - fromArea:GetCenter() ):GetLength()
		end

		local cost = dist + fromArea:GetCostSoFar()

		// check height change
		local deltaZ = fromArea:ComputeAdjacentConnectionHeightChange( area )
		if ( deltaZ &gt;= self.loco:GetStepHeight() ) then
			if ( deltaZ &gt;= self.loco:GetMaxJumpHeight() ) then
				// too high to reach
				return -1
			end

			// jumping is slower than flat ground
			local jumpPenalty = 5
			cost = cost + jumpPenalty * dist
		elseif ( deltaZ &lt; -self.loco:GetDeathDropHeight() ) then
			// too far to drop
			return -1
		end

		return cost
	end
end )


"PathFollower/FirstSegment"
PathFollower:FirstSegment(  ) 
 Description
Returns the first segment of the path.

 Returns

 table


A table with PathSegment structure.


"Panel/UpdateHTMLTexture"
Panel:UpdateHTMLTexture(  ) 
 Description
Forcibly updates the panels HTML Material, similar to when Paint is called on it.This is only useful if the panel is not normally visible, i.e the panel exists purely for its HTML Material.



NOTE


Only works on with panels that have a HTML Material. See Panel:GetHTMLMaterial for more details.




NOTE


A good place to call this is in the GM:PreRender hook


"PathFollower/GetPositionOnPath"
PathFollower:GetPositionOnPath( number distance ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the vector position of distance along path

 Arguments

 number distance


The distance along the path to query

 Returns

 Vector


The position

 Examples
 Example
Gets the current position on the path as a Vector.

path:GetPositionOnPath( path:GetCursorPosition() )


"PathFollower/GetAllSegments"
PathFollower:GetAllSegments(  ) 
 Description
Returns all of the segments of the given path.

 Returns

 table


A table of tables with PathSegment structure.


"Panel/Valid"
Panel:Valid(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Use Panel:IsValid instead.Returns if a given panel is valid or not.
 Returns

 boolean


Whether the panel is valid or not, true being it is, false being it isnt.


"PathFollower/GetHindrance"
PathFollower:GetHindrance(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 Entity


"PathFollower/GetAge"
PathFollower:GetAge(  ) 
 Description
Returns the age since the path was built

 Returns

 number


Path age


"PathFollower/MoveCursor"
PathFollower:MoveCursor( number distance ) 
 Description
Moves the cursor by give distance.
For a function that sets the distance, see PathFollower:MoveCursorTo.

 Arguments

 number distance


The distance to move the cursor (in relative world units)


"PathFollower/Invalidate"
PathFollower:Invalidate(  ) 
 Description
Invalidates the current path


"PathFollower/GetLength"
PathFollower:GetLength(  ) 
 Description
Returns the total length of the path

 Returns

 number


The length of the path


"PathFollower/LastSegment"
PathFollower:LastSegment(  ) 
 Description
Returns the last segment of the path.

 Returns

 table


A table with PathSegment structure.


"PathFollower/GetCursorPosition"
PathFollower:GetCursorPosition(  ) 
 Description
Returns the current progress along the path

 Returns

 number


The current progress


"PathFollower/GetCursorData"
PathFollower:GetCursorData(  ) 
 Description
Returns the cursor data

 Returns

 table


A table with 3 keys:
number curvature 
Vector forward 
Vector pos


"PathFollower/GetStart"
PathFollower:GetStart(  ) 
 Description
Returns the path start position

 Returns

 Vector


The start position


"PathFollower/IsValid"
PathFollower:IsValid(  ) 
 Description
Returns true if the path is valid

 Returns

 boolean


Wether the path is valid or not.


"PathFollower/GetEnd"
PathFollower:GetEnd(  ) 
 Description
Returns the path end position

 Returns

 Vector


The end position


"PathFollower/MoveCursorToEnd"
PathFollower:MoveCursorToEnd(  ) 
 Description
Moves the cursor to the end of the path


"PathFollower/MoveCursorToStart"
PathFollower:MoveCursorToStart(  ) 
 Description
Moves the cursor to the end of the path


"PathFollower/GetCurrentGoal"
PathFollower:GetCurrentGoal(  ) 
 Description
Returns the current goal data. Can return nil if the current goal is invalid, for example immediately after PathFollower:Update.

 Returns

 table


A table with PathSegment structure.


"PathFollower/MoveCursorTo"
PathFollower:MoveCursorTo( number distance ) 
 Description
Sets the cursor position to given distance.
For relative distance, see PathFollower:MoveCursor.

 Arguments

 number distance


The distance to move the cursor (in world units)


"PathFollower/SetMinLookAheadDistance"
PathFollower:SetMinLookAheadDistance( number mindist ) 
 Description
Sets minimum range movement goal must be along path

 Arguments

 number mindist


The minimum look ahead distance


"PathFollower/Update"
PathFollower:Update( NextBot bot ) 
 Description
Move the bot along the path.

 Arguments

 NextBot bot


The bot to update along the path


"PathFollower/SetGoalTolerance"
PathFollower:SetGoalTolerance( number distance ) 
 Description
How close we can get to the goal to call it done

 Arguments

 number distance


The distance were setting it to


"PathFollower/MoveCursorToClosestPosition"
PathFollower:MoveCursorToClosestPosition( Vector pos, number type=0, number alongLimit=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Moves the cursor of the path to the closest position compared to given vector.

 Arguments

 Vector pos


 Arguments

 number type=0


Seek type
0 = SEEK_ENTIRE_PATH - Search the entire path length
1 = SEEK_AHEAD - Search from current cursor position forward toward end of path
2 = SEEK_BEHIND - Search from current cursor position backward toward path start



 Arguments

 number alongLimit=0


"PhysCollide/Destroy"
PhysCollide:Destroy(  ) 
 Description
Destroys the PhysCollide object.


"PhysCollide/IsValid"
PhysCollide:IsValid(  ) 
 Description
Checks whether this PhysCollide object is valid or not.
You should just use IsValid instead.

 Returns

 boolean


Is valid or not.


"PathFollower/ResetAge"
PathFollower:ResetAge(  ) 
 Description
Resets the age which is retrieved by PathFollower:GetAge to 0.


"physenv/AddSurfaceData"
physenv.AddSurfaceData( string properties ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Adds surface properties to the games physics environment.



BUG





 Arguments

 string properties


The properties to add. Each one should include base or the game will crash due to some values being missing.

 Examples
 Example
Adds the  surface property from TF2.

physenv.AddSurfaceData( [[scout_baseball
{
	base		rubber

	bulletimpact	Weapon_Baseball.HitWorld
	scraperough	Grenade.ScrapeRough
	scrapesmooth	Grenade.ScrapeSmooth
	impacthard	Weapon_Baseball.HitWorld
	impactsoft	Weapon_Baseball.HitWorld
	rolling	Grenade.Roll
}]] )


"physenv/SetPerformanceSettings"
physenv.SetPerformanceSettings( table performanceSettings ) 
 Description
Sets the performance settings.

 Arguments

 table performanceSettings


The new performance settings. See PhysEnvPerformanceSettings structure


"physenv/GetAirDensity"
physenv.GetAirDensity(  ) 
 Description
Returns the air density.

 Returns

 number


airDensity


"PhysCollide/TraceBox"
PhysCollide:TraceBox( Vector origin, Angle angles, Vector rayStart, Vector rayEnd, Vector rayMins, Vector rayMaxs ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Returns
9 Returns
10 Returns


 Description
Performs a trace against this PhysCollide with the given parameters. This can be used for both line traces and box traces.

 Arguments

 Vector origin


The origin for the PhysCollide during the trace

 Arguments

 Angle angles


The angles for the PhysCollide during the trace

 Arguments

 Vector rayStart


The start position of the trace

 Arguments

 Vector rayEnd


The end position of the trace

 Arguments

 Vector rayMins


The mins of the traces bounds

 Arguments

 Vector rayMaxs


The maxs of the traces bounds

 Returns

 Vector


Hit position of the trace. This is false if the trace did not hit.

 Returns

 Vector


Hit normal of the trace

 Returns

 number


Fraction of the trace. This is calculated from the distance between startPos, hitPos, and endPos.


"PhysObj/AddGameFlag"
PhysObj:AddGameFlag( number flags ) 
 Description
Adds one or more bit flags.

 Arguments

 number flags


Bitflag, see FVPHYSICS_ Enums.


"PhysObj/CalculateForceOffset"
PhysObj:CalculateForceOffset( Vector force, Vector pos ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns


 Description
Calculates the force and torque on the center of mass for an offset force impulse. The outputs can be directly passed to PhysObj:ApplyForceCenter and PhysObj:ApplyTorqueCenter, respectively.

 Arguments

 Vector force


The initial force

 Arguments

 Vector pos


The location of the force in world coordinates

 Returns

 Vector


The calculated force on the physics objects center of mass

 Returns

 Vector


The calculated torque on the physics objects center of mass


"physenv/GetGravity"
physenv.GetGravity(  ) 
 Description
Gets the global gravity.

 Returns

 Vector


gravity


"PhysObj/ApplyTorqueCenter"
PhysObj:ApplyTorqueCenter( Vector torque ) 
 Description
Applies specified torque to the physics object.

 Arguments

 Vector torque


The torque to be applied in kg * degrees / s.


"physenv/SetGravity"
physenv.SetGravity( Vector gravity ) 
 Description
Sets the directional gravity, does not work on players.

 Arguments

 Vector gravity


The new gravity.


"PhysObj/EnableCollisions"
PhysObj:EnableCollisions( boolean enable ) 
 Description
Sets whether the physics object should collide with anything or not, including world.



WARNING


This function currently has major problems with player collisions, and as such should be avoided at all costs.A better alternative to this function would be using Entity:SetCollisionGroup( COLLISION_GROUP_WORLD ).


 Arguments

 boolean enable


True to enable, false to disable.


"PhysObj/EnableGravity"
PhysObj:EnableGravity( boolean enable ) 
 Description
Sets whether the PhysObject should be affected by gravity

 Arguments

 boolean enable


True to enable, false to disable.


"PhysObj/AddAngleVelocity"
PhysObj:AddAngleVelocity( Vector angularVelocity ) 
 Description
Adds the specified velocity to the current.

 Arguments

 Vector angularVelocity


Additional velocity.


"physenv/GetPerformanceSettings"
physenv.GetPerformanceSettings(  ) 
 Description
Gets the current performance settings in table form.

 Returns

 table


Performance settings. See PhysEnvPerformanceSettings structure


"PhysObj/AlignAngles"
PhysObj:AlignAngles( Angle from, Angle to ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.Rotates the object so that its angles are aligned to the ones inputted.
 Arguments

 Angle from


 Arguments

 Angle to


 Returns

 Angle


"PhysObj/ComputeShadowControl"
PhysObj:ComputeShadowControl( table shadowparams ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Allows you to move a PhysObj to a point and angle in 3D space.

 Arguments

 table shadowparams


The parameters for the shadow. See example code to see how its used.

 Examples
 Example
Move a PhysObj to vector 0 0 0 with angles 0 0 0.

function ENT:Initialize()
 
	self:StartMotionController()
	self.ShadowParams = {}

 
end
function ENT:PhysicsSimulate( phys, deltatime )
 
	phys:Wake()
 
	self.ShadowParams.secondstoarrive = 1 // How long it takes to move to pos and rotate accordingly - only if ( it could move as fast as it want - damping and max speed/angular will make this invalid ( Cannot be 0! Will give errors if ( you do )
	self.ShadowParams.pos = Vector( 0, 0, 0 ) // Where you want to move to
	self.ShadowParams.angle = Angle( 0, 0, 0 ) // Angle you want to move to
	self.ShadowParams.maxangular = 5000 //What should be the maximal angular force applied
	self.ShadowParams.maxangulardamp = 10000 // At which force/speed should it start damping the rotation
	self.ShadowParams.maxspeed = 1000000 // Maximal linear force applied
	self.ShadowParams.maxspeeddamp = 10000// Maximal linear force/speed before  damping
	self.ShadowParams.dampfactor = 0.8 // The percentage it should damp the linear/angular force if ( it reaches its max amount
	self.ShadowParams.teleportdistance = 200 // If its further away than this itll teleport ( Set to 0 to not teleport )
	self.ShadowParams.deltatime = deltatime // The deltatime it should use - just use the PhysicsSimulate one
 
	phys:ComputeShadowControl( self.ShadowParams )
 
end


"PhysObj/EnableMotion"
PhysObj:EnableMotion( boolean enable ) 
 Description
Sets whether the physobject should be able to move or not.
This is the exact method the Physics Gun uses to freeze props. If a motion-disabled physics object is grabbed with the physics gun, the object will be able to move again. To disallow this, use GM:PhysgunPickup.

 Arguments

 boolean enable


True to enable, false to disable.


"PhysObj/GetAABB"
PhysObj:GetAABB(  ) 
 Description
Returns the mins and max of the physics object.

 Returns

 Vector


Mins

 Returns

 Vector


Maxs


"PhysObj/GetContents"
PhysObj:GetContents(  ) 
 Description
Returns the contents flag of the PhysObj.

 Returns

 number


The CONTENTS_ Enums.


"PhysObj/CalculateVelocityOffset"
PhysObj:CalculateVelocityOffset( Vector force, Vector pos ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns


 Description
Calculates the linear and angular velocities on the center of mass for an offset force impulse. The outputs can be directly passed to PhysObj:AddVelocity and PhysObj:AddAngleVelocity, respectively.

 Arguments

 Vector force


The initial force

 Arguments

 Vector pos


The location of the force in world coordinates

 Returns

 Vector


The calculated linear velocity from the force on the physics objects center of mass

 Returns

 Vector


The calculated angular velocity from the force on the physics objects center of mass


"physenv/SetAirDensity"
physenv.SetAirDensity( number airDensity ) 
 Description
Sets the air density.

 Arguments

 number airDensity


The new air density.


"PhysObj/GetAngles"
PhysObj:GetAngles(  ) 
 Description
Returns the angles of the physics object.

 Returns

 Angle


The angles of the physics object.


"PhysObj/ClearGameFlag"
PhysObj:ClearGameFlag( number flags ) 
 Description
Removes one of more specified flags.

 Arguments

 number flags


Bitflag, see FVPHYSICS_ Enums.


"PhysObj/GetDamping"
PhysObj:GetDamping(  ) 
 Description
Returns the linear and angular damping of the physics object.

 Returns

 number


The linear damping

 Returns

 number


The angular damping


"PhysObj/GetAngleVelocity"
PhysObj:GetAngleVelocity(  ) 
 Description
Gets the angular velocity of the object in degrees per second.

 Returns

 Vector


The angular velocity


"PhysObj/ApplyForceOffset"
PhysObj:ApplyForceOffset( Vector force, Vector position ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Applies the specified force on the physics object at the specified position

 Arguments

 Vector force


The force to be applied.

 Arguments

 Vector position


The position in world coordinates where the force is applied to the physics object.

 Examples
 Example
Pull what the player is looking at towards him.

local tr = Entity( 1 ):GetEyeTrace()
if ( IsValid( tr.Entity ) then
	local phys = tr.Entity:GetPhysicsObjectNum( tr.PhysicsBone )
	
	local pushvec = tr.Normal * -100000
	local pushpos = tr.HitPos
	
	phys:ApplyForceOffset( pushvec, pushpos )
end


"PhysObj/AddVelocity"
PhysObj:AddVelocity( Vector velocity ) 
 Description
Adds the specified velocity to the current.

 Arguments

 Vector velocity


Additional velocity.


"PhysObj/EnableDrag"
PhysObj:EnableDrag( boolean enable ) 
 Description
Sets whenever the physics object should be affected by drag.

 Arguments

 boolean enable


True to enable, false to disable.


"PhysObj/ApplyForceCenter"
PhysObj:ApplyForceCenter( Vector force ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Applies the specified force to the physics object. (in Newtons)



NOTE


This will not work on players, use Entity:SetVelocity instead.


 Arguments

 Vector force


The force to be applied.

 Examples
 Example
An entity that Simulates its own gravity by applying a force downward on the entity based on the force equation.
(Force = mass * acceleration)
Since, by default, entities already have gravity. The default gravity must be turned off by adding phys:EnableGravity(false) in the entities Initialize function so that the default gravity doesnt interfere with our custom gravity.
NOTE: We can get the mass of the entity by using the GetMass() function.




NOTE


-9.80665 ( meters / second^2 )  Is the approximate acceleration of objects on Earth due to gravity. ( It is negative because gravity pushes things downwards. )


function ENT:Initialize()
    self:SetModel( models/hunter/blocks/cube1x1x1.mdl )
	self:PhysicsInit( SOLID_VPHYSICS )
	self:SetSolid( SOLID_VPHYSICS )
	self:SetMoveType( MOVETYPE_VPHYSICS )

    if ( phys:IsValid() then
        phys:EnableGravity( false ) -- This is required. Since we are creating our own gravity.
        phys:Wake()
    end
end

function ENT:PhysicsUpdate( phys )
    local phys = self:GetPhysicsObject()
    phys:ApplyForceCenter( Vector( 0,0,phys:GetMass()*-9.80665 ) )
end


"PhysObj/GetEnergy"
PhysObj:GetEnergy(  ) 
 Description
Returns the kinetic energy of the physobject.

 Returns

 number


The kinetic energy


"PhysObj/GetEntity"
PhysObj:GetEntity(  ) 
 Description
Returns the parent entity of the physics object.

 Returns

 Entity


parent


"PhysObj/GetInertia"
PhysObj:GetInertia(  ) 
 Description
Returns the directional inertia of the physics object.

 Returns

 Vector


directionalInertia


"PhysObj/GetMass"
PhysObj:GetMass(  ) 
 Description
Returns the mass of the physics object.

 Returns

 number


The mass in kilograms.


"PhysObj/GetInvInertia"
PhysObj:GetInvInertia(  ) 
 Description
Returns 1 divided by the inertia.

 Returns

 number


The inverted inertia


"PhysObj/GetMaterial"
PhysObj:GetMaterial(  ) 
 Description
Returns the physical material of the physics object.

 Returns

 string


The physical material


"PhysObj/GetInvMass"
PhysObj:GetInvMass(  ) 
 Description
Returns 1 divided by the physics objects mass.

 Returns

 number


The inverted mass.


"PhysObj/GetMassCenter"
PhysObj:GetMassCenter(  ) 
 Description
Returns the center of mass of the physics object as a local vector.

 Returns

 Vector


The center of mass of the physics object.


"PhysObj/GetName"
PhysObj:GetName(  ) 
 Description
Returns the name of the physics object.

 Returns

 string


The name of the physics object.


"PhysObj/GetMeshConvexes"
PhysObj:GetMeshConvexes(  ) 
 Description
Returns all convex physics meshes of the object. See Entity.PhysicsInitMultiConvex for more information.

 Returns

 table


Table of MeshVertex structures where each MeshVertex structure is an independent convex mesh and each three vertices represent a triangle. Returns nil if the physics object is a sphere.


"PhysObj/GetSpeedDamping"
PhysObj:GetSpeedDamping(  ) 
 Description
Returns the speed damping of the physics object.

 Returns

 number


speedDamping


"PhysObj/GetPositionMatrix"
PhysObj:GetPositionMatrix(  ) 
 Description

 Returns

 VMatrix


The position and angle matrix.


"PhysObj/GetSurfaceArea"
PhysObj:GetSurfaceArea(  ) 
 Description
Returns the surface area of the physics object in source-units.

 Returns

 number


The surface area


"PhysObj/GetShadowPos"
PhysObj:GetShadowPos(  ) 
 Description
Returns the position of the PhysObj shadow. See PhysObj:UpdateShadow.

 Returns

 Vector


The position of the PhysObj shadow.


"PhysObj/GetVelocityAtPoint"
PhysObj:GetVelocityAtPoint( Vector point ) 
 Description
Returns the world velocity of a point in world coordinates about the object.

 Arguments

 Vector point


 Returns

 Vector


"PhysObj/GetRotDamping"
PhysObj:GetRotDamping(  ) 
 Description
Returns the rotation damping of the physics object.

 Returns

 number


The rotation damping


"PhysObj/GetShadowAngles"
PhysObj:GetShadowAngles(  ) 
 Description
Returns the angles of the PhysObj shadow. See PhysObj:UpdateShadow.

 Returns

 Angle


The angles of the PhysObj shadow.


"PhysObj/IsAsleep"
PhysObj:IsAsleep(  ) 
 Description
Returns whether the physics object is sleeping.
See PhysObj:Sleep for more information.

 Returns

 boolean


Whether the physics object is sleeping.


"PhysObj/GetVolume"
PhysObj:GetVolume(  ) 
 Description
Returns the volume in source units.

 Returns

 number


volume


"PhysObj/GetVelocity"
PhysObj:GetVelocity(  ) 
 Description
Returns the absolute directional velocity of the physobject.

 Returns

 Vector


velocity


"PhysObj/IsCollisionEnabled"
PhysObj:IsCollisionEnabled(  ) 
 Description
Returns whenever the entity is able to collide or not.

 Returns

 boolean


isCollisionEnabled


"PhysObj/HasGameFlag"
PhysObj:HasGameFlag( number flags ) 
 Description
Returns whenever the specified flag(s) is/are set.

 Arguments

 number flags


Bitflag, see FVPHYSICS_ Enums.

 Returns

 boolean


If flag was set or not


"PhysObj/IsGravityEnabled"
PhysObj:IsGravityEnabled(  ) 
 Description
Returns whenever the entity is affected by gravity.

 Returns

 boolean


gravitated


"PhysObj/IsDragEnabled"
PhysObj:IsDragEnabled(  ) 
 Description
Returns whenever the entity is affected by drag.

 Returns

 boolean


dragEnabled


"PhysObj/IsMoveable"
PhysObj:IsMoveable(  ) 
 Description
Returns whenever the entity is able to move.

 Returns

 boolean


movable


"PhysObj/GetMesh"
PhysObj:GetMesh(  ) 
 Description
Returns the physics mesh of the object which is used for physobj-on-physobj collision.

 Returns

 table


Table of MeshVertex structures where each three vertices represent a triangle. Returns nil if the physics object is a sphere.


"PhysObj/GetPos"
PhysObj:GetPos(  ) 
 Description
Returns the position of the physics object.

 Returns

 Vector


The position


"PhysObj/GetStress"
PhysObj:GetStress(  ) 
 Description
Returns the stress of the entity.

 Returns

 number


exertedStress


"PhysObj/IsValid"
PhysObj:IsValid(  ) 
 Description
Returns if the physics object is valid/not NULL.

 Returns

 boolean


isValid


"PhysObj/IsMotionEnabled"
PhysObj:IsMotionEnabled(  ) 
 Description
Returns if the physics object can move itself (by velocity, acceleration)

 Returns

 boolean


motionEnabled


"PhysObj/LocalToWorldVector"
PhysObj:LocalToWorldVector( Vector LocalVec ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Rotate a vector from the local frame of the physics object to world frame.



NOTE


This function only rotates the vector, without any translation operation.


 Arguments

 Vector LocalVec


A vector in the physics objects local frame

 Returns

 Vector


The corresponding vector in world frame

 Examples
 Example
Given the angle of the physics object is angle ( 0.045, 89.952, 89.99 ) ( This can be derived by PhysObj:GetAngles() ), convert the vector ( 1 ,2, 3 ) in this physics objects local frame into world frame.

print( Angle of the PhysObj: , PhysObj:GetAngles() )
print( Vector in world frame: , PhysObj:LocalToWorld( Vector( 1, 2, 3 ) ) )
Output:

Angle of the PhysObj: 0.045 89.952 89.993;
Vector in world frame: 3.000585 0.999039 1.999603;


"PhysObj/RecheckCollisionFilter"
PhysObj:RecheckCollisionFilter(  ) 
 Description
Call this when the collision filter conditions change due to this objects state (e.g. changing solid type or collision group)


"PhysObj/IsPenetrating"
PhysObj:IsPenetrating(  ) 
 Description
Returns whenever the physics object is penetrating another physics object.

This is internally implemented as PhysObj:HasGameFlag( FVPHYSICS_PENETRATING ) and thus is only updated for non-static physics objects.
 Returns

 boolean


Whether the physics object is penetrating another object.


"PhysObj/LocalToWorld"
PhysObj:LocalToWorld( Vector LocalVec ) 
 Description
Mapping a vector in local frame of the physics object to world frame.



NOTE


this function does translation and rotation, with translation done first.


 Arguments

 Vector LocalVec


A vector in the physics objects local frame

 Returns

 Vector


The corresponding vector in world frame


"PhysObj/OutputDebugInfo"
PhysObj:OutputDebugInfo(  ) 
 Description
Prints debug info about the state of the physics object to the console.

 Examples
 Example
Outputs physics info about the entity the player is looking at to the console.

Entity( 1 ):GetEyeTrace().Entity:GetPhysicsObject():OutputDebugInfo()
Output:

-----------------
Object: models/props_borealis/bluebarrel001.mdl
Mass: 60.0 (inv 0.017)
Inertia: 8.69, 8.69, 2.46 (inv 0.115, 0.115, 0.406)
Velocity: 0.00, 0.00, -0.00
Ang Velocity: 0.00, 0.00, -0.00
Damping 0.00 linear, 0.00 angular
Linear Drag: 0.02, 0.01, 0.01 (factor 1.00)
Angular Drag: 0.01, 0.02, 0.01 (factor 1.00)
attached to 5 controllers
4) sys:friction
3) sys:friction
2) sys:friction
1) vphysics:drag
0) sys:gravity
State: Asleep, Collision Enabled, Motion Enabled, Flags 1127 (game 0000, index 0)
Material: plastic_barrel: density(500.0), thickness(0.25), friction(0.80), elasticity(0.01)
CollisionModel: Compact Surface: 1 convex pieces no outer hull


"PhysObj/SetAngleDragCoefficient"
PhysObj:SetAngleDragCoefficient( number coefficient ) 
 Description

 Arguments

 number coefficient


"PhysObj/RotateAroundAxis"
PhysObj:RotateAroundAxis( Vector dir, number ang ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
A convinience function for Angle:RotateAroundAxis.

 Arguments

 Vector dir


Direction, around which we will rotate

 Arguments

 number ang


Amount of rotation, in degrees

 Returns

 Angle


The resulting angle

 Examples
 Example
Shows that it is the same as Angle:RotateAroundAxis.

local phys = Entity( 1 ):GetEyeTrace().Entity:GetPhysicsObject() -- Our physics object

print( phys:RotateAroundAxis( Vector( 1, 0, 0 ), 20 ) )

local a = phys:GetAngles()
a:RotateAroundAxis( Vector( 1, 0, 0 ), 20 )
print( a )
Output:

Two exactly the same angles
-27.179 133.246 -23.236
-27.179 133.246 -23.236


"PhysObj/SetAngles"
PhysObj:SetAngles( Angle angles ) 
 Description
Sets the angles of the physobject.

 Arguments

 Angle angles


The new angles of the physobject.


"PhysObj/SetBuoyancyRatio"
PhysObj:SetBuoyancyRatio( number buoyancy ) 
 Description
Sets the buoyancy ratio of the physics object. (How well it floats in water)

 Arguments

 number buoyancy


Buoyancy ratio, where 0 is not buoyant at all (like a rock), and 1 is very buoyant (like wood)


"PhysObj/SetInertia"
PhysObj:SetInertia( Vector directionalInertia ) 
 Description
Sets the directional inertia.

 Arguments

 Vector directionalInertia


The directional inertia of the object.

A value of Vector(0,0,0) makes the physobject go invalid.


"PhysObj/SetVelocity"
PhysObj:SetVelocity( Vector velocity ) 
 Description
Sets the velocity of the physics object for the next iteration.

 Arguments

 Vector velocity


The new velocity of the phyiscs object.


"PhysObj/SetPos"
PhysObj:SetPos( Vector position, boolean teleport=false ) 
 Description
Sets the position of the physobject.

 Arguments

 Vector position


The new position of the physobject.

 Arguments

 boolean teleport=false


"PhysObj/Sleep"
PhysObj:Sleep(  ) 
 Description
Makes the physics object sleep.
The physics object will no longer be moving unless it is woken up by either a collision with another moving object, or by PhysObj:Wake. This is an optimization feature of the physics engine.


"PhysObj/UpdateShadow"
PhysObj:UpdateShadow( Vector targetPosition, Angle targetAngles, number frameTime ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Unlike PhysObj:SetPos and PhysObj:SetAngles, this allows the movement of a physobj while leaving physics interactions intact.
This is used internally by the motion controller of the Gravity Gun , the +use pickup and the Physics Gun, and entities such as the crane.



NOTE


This is the ideal function to move a physics shadow created with Entity:PhysicsInitShadow or Entity:MakePhysicsObjectAShadow.


 Arguments

 Vector targetPosition


The position we should move to.

 Arguments

 Angle targetAngles


The angle we should rotate towards.

 Arguments

 number frameTime


The frame time to use for this movement, can be generally filled with FrameTime or ENTITY:PhysicsSimulate with the deltaTime.

Can be set to 0 when you need to update the physics object just once.


"PhysObj/SetVelocityInstantaneous"
PhysObj:SetVelocityInstantaneous( Vector velocity ) 
 Description
Sets the velocity of the physics object.

 Arguments

 Vector velocity


The new velocity of the physics object.


"PhysObj/WorldToLocal"
PhysObj:WorldToLocal( Vector vec ) 
 Description
Converts a vector to a relative to the physics object coordinate system.

 Arguments

 Vector vec


The vector in world space coordinates.

 Returns

 Vector


The vector local to PhysObj:GetPos.


"PhysObj/SetContents"
PhysObj:SetContents( number contents ) 
 Description
Sets the contents flag of the PhysObj.

 Arguments

 number contents


The CONTENTS_ Enums.


"PhysObj/SetDamping"
PhysObj:SetDamping( number linearDamping, number angularDamping ) 
 Description
Sets the linear and angular damping of the physics object.

 Arguments

 number linearDamping


Linear damping.

 Arguments

 number angularDamping


Angular damping.


"player_manager/AddValidHands"
player_manager.AddValidHands( string name, string model, number skin, string bodygroups ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Assigns view model hands to player model.

 Arguments

 string name


Player model name

 Arguments

 string model


Hands model

 Arguments

 number skin


Skin to apply to the hands

 Arguments

 string bodygroups


Bodygroups to apply to the hands

 Examples
 Example
Adds CS:S hands for hostage playermodels

player_manager.AddValidHands( hostage01, models/weapons/c_arms_cstrike.mdl, 0, 10000000 )
player_manager.AddValidHands( hostage02, models/weapons/c_arms_cstrike.mdl, 0, 10000000 )
player_manager.AddValidHands( hostage03, models/weapons/c_arms_cstrike.mdl, 0, 10000000 )
player_manager.AddValidHands( hostage04, models/weapons/c_arms_cstrike.mdl, 0, 10000000 )


"PhysObj/SetDragCoefficient"
PhysObj:SetDragCoefficient( number drag ) 
 Description
Modifies how much drag (air resistance) affects the object.

 Arguments

 number drag


The drag coefficient

It can be positive or negative.


"PhysObj/Wake"
PhysObj:Wake(  ) 
 Description
Wakes the physics object.
See PhysObj:Sleep for more information.


"PhysObj/SetMass"
PhysObj:SetMass( number mass ) 
 Description
Sets the mass of the physics object.

 Arguments

 number mass


The mass in kilograms.


"player_manager/GetPlayerClass"
player_manager.GetPlayerClass( Player ply ) 
 Description
Gets a players class

 Arguments

 Player ply


Player to get class

 Returns

 string


The players class


"player_manager/AddValidModel"
player_manager.AddValidModel( string name, string model ) 
 Description
Associates a simplified name with a path to a valid player model.
Only used internally.

 Arguments

 string name


Simplified name

 Arguments

 string model


Valid PlayerModel path


"player_manager/AllValidModels"
player_manager.AllValidModels(  ) 
 Description
Returns the entire list of valid player models.

 Examples
 Example
Store the list of valid player models in a local variable, and print the valid model path for Alyx

local models = player_manager.AllValidModels()
print( models[alyx] )
Output:

Console outputs: models/player/alyx.mdl


"PhysObj/WorldToLocalVector"
PhysObj:WorldToLocalVector( Vector WorldVec ) 
 Description
Rotate a vector from the world frame to the local frame of the physics object.



NOTE


This function only rotates the vector, without any translation operation.


 Arguments

 Vector WorldVec


A vector in the world frame

 Returns

 Vector


The corresponding vector relative to the PhysObj


"player_manager/OnPlayerSpawn"
player_manager.OnPlayerSpawn( Player ply ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Applies basic class variables when the player spawns.
Called from GM:PlayerSpawn in the base gamemode.

 Arguments

 Player ply


Player to setup

 Examples
 Example
Source for player_manager.OnPlayerSpawn (from lua/includes/modules/player_manager.lua)

function OnPlayerSpawn( ply )

 local class = LookupPlayerClass( ply )
 if ( !class ) then return end

 ply:SetWalkSpeed( class.WalkSpeed )
 ply:SetRunSpeed( class.RunSpeed )
 ply:SetCrouchedWalkSpeed( class.CrouchedWalkSpeed )
 ply:SetDuckSpeed( class.DuckSpeed )
 ply:SetUnDuckSpeed( class.UnDuckSpeed )
 ply:SetJumpPower( class.JumpPower )
 ply:AllowFlashlight( class.CanUseFlashlight )
 ply:SetMaxHealth( class.MaxHealth )
 ply:SetHealth( class.StartHealth )
 ply:SetArmor( class.StartArmor )
 ply:ShouldDropWeapon( class.DropWeaponOnDie )
 ply:SetNoCollideWithTeammates( class.TeammateNoCollide )
 ply:SetAvoidPlayers( class.AvoidPlayers )

end


"PhysObj/SetMaterial"
PhysObj:SetMaterial( string materialName ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the material of the physobject.



NOTE


Impact sounds will only change if this is called on client


 Arguments

 string materialName



 Examples
 Example
Randomize the physical properties of an entity

local tbl =
{
	gmod_ice, -- Makes the entity slide around
	gmod_bouncy, -- Makes the entity bouncy
	gmod_silent, -- Makes the entity not play sounds on impact
	flesh -- Makes the entity play flesh sounds on impact
}


local phys = SomeEntity:GetPhysicsObject()

if ( IsValid( phys ) ) then

	phys:SetMaterial( table.Random( tbl ) )

end


"player_manager/ClearPlayerClass"
player_manager.ClearPlayerClass( Player ply ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Clears a players class association by setting their ClassID to 0

 Arguments

 Player ply


Player to clear class from

 Examples
 Example
Source for player_manager.ClearPlayerClass (from lua/includes/modules/player_manager.lua)

function ClearPlayerClass( ply )

	ply:SetClassID( 0 )

end


"player_manager/TranslatePlayerHands"
player_manager.TranslatePlayerHands( string name ) 
 Description
Retrieves correct hands for given player model. By default returns citizen hands.

 Arguments

 string name


Player model name

 Returns

 table


A table with following contents:

 string model - Model of hands
 number skin - Skin of hands
 string body - Bodygroups of hands


"player_manager/TranslatePlayerModel"
player_manager.TranslatePlayerModel( string shortName ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the valid model path for a simplified name.

 Arguments

 string shortName


The short name of the model.

 Returns

 string


The valid model path for the short name.

 Examples
 Example
Print the valid model path for Alyx.

print( player_manager.TranslatePlayerModel( alyx ) )
Output:

Console outputs: models/player/alyx.mdl


"player_manager/RegisterClass"
player_manager.RegisterClass( string name, table table, string base ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Register a class metatable to be assigned to players later

 Arguments

 string name


Class name

 Arguments

 table table


Class metatable

 Arguments

 string base


Base class name

 Examples
 Example
A quick look at registering a class table

local PLAYER = {}


PLAYER.DisplayName = Default Class

...

player_manager.RegisterClass( player_default, PLAYER, nil )


 Examples
 Example
You can retrieve the data youve set when registering the table using baseclass.Get( &lt;classname&gt; )

PrintTable( baseclass.Get( player_default ) )
Output:

Walkspeed = 300
RunSpeed = 500
CalcView = function: 0x00665988
UseVMHands = true

etc...


"Player/AddCleanup"
Player:AddCleanup( string type, Entity ent ) 
 Description
Adds an entity to the players clean up list.
NOTE: This function is only available in Sandbox and its derivatives.

 Arguments

 string type


Cleanup type

 Arguments

 Entity ent


Entity to add


"Player/AddPlayerOption"
Player:AddPlayerOption( string name, number timeout, function vote_callback, function draw_callback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Sets up the voting system for the player.
This is a really barebone system. By calling this a vote gets started, when the player presses 0-9 the callback function gets called along with the key the player pressed. Use the draw callback to draw the vote panel.

 Arguments

 string name


Name of the vote

 Arguments

 number timeout


Time until the vote expires

 Arguments

 function vote_callback


The function to be run when the player presses 0-9 while a vote is active.

 Arguments

 function draw_callback


Used to draw the vote panel.

 Examples
 Example
Simple example. Prints players choice in chat.

function AfterChoice( num ) -- This is callback after we press number ( Argument #3 )
	chat.AddText( Your rate is ..num... Thanks! ) 
	return true -- Return true to close vote
end

function VisualVote() -- This is drawing function ( Argument #4 )
    draw.RoundedBox( 4,ScrW()/2-300,ScrH()/2-25,600,50,Color( 0,0,0,200 ) )
    draw.SimpleText( Rate our server by scale of zero to nine. Use number line to vote.,Trebuchet24,ScrW()/2,ScrH()/2,Color( 255,255,255 ),1,1 )
end

LocalPlayer():AddPlayerOption( SelectWeapon,30,AfterChoice,VisualVote ) -- Creates new vote


"Player/AddFrags"
Player:AddFrags( number count ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Add a certain amount to the players frag count (or kills count)

 Arguments

 number count


number of frags to add

 Examples
 Example
Adds 2 frags to player with ID 1

player.GetByID( 1 ):AddFrags( 2 )
Output:

Player 1 has 2 extra frags on the scoreboard relative to his old score.


"player_manager/SetPlayerClass"
player_manager.SetPlayerClass( Player ply, string classname ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets a players class

 Arguments

 Player ply


Player to set class

 Arguments

 string classname


Name of class to set

 Examples
 Example
Sets the players class to player_default every time they spawn

function GM:PlayerSpawn( ply )
 player_manager.SetPlayerClass( ply, player_default )
end


"Player/AccountID"
Player:AccountID(  ) 
 Description
Returns the players AccountID aka 32bit SteamID.
For bots and in singleplayer, this will return no value.

 Returns

 number


Players 32bit SteamID aka AccountID.


"player_manager/RunClass"
player_manager.RunClass( Player ply, string funcName, vararg arguments ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Execute a named function within the players set class

 Arguments

 Player ply


Player to execute function on.

 Arguments

 string funcName


Name of function.

 Arguments

 vararg arguments


Optional arguments. Can be of any type.

 Returns

 vararg


The values returned by the called function.

 Examples
 Example
Run the players class Loadout function when PlayerLoadout is called

function GM:PlayerLoadout( ply )

	player_manager.RunClass( ply, Loadout )
 
end
Output:

The players class Loadout function is executed
 Examples
 Example
Call a greeting function within the playerclass system.

local PLAYER = {}

PLAYER.DisplayName = Hooman
PLAYER.WalkSpeed = 200
PLAYER.greet = function( tbl ) // create a function named greet
// the first argument passed is the source table
// which includes the classID, the player entity, and the function itself
	local ply = tbl.Player // here we extract the player entity from the table
    ply:ChatPrint( Hello ..ply:Nick()..! ) // tell the player
end

// link it to the spawn hook, so each time a player ( re- )spawns, he will be greeted with a hello
hook.Add( PlayerSpawn,greet,function( ply )
	player_manager.RunClass( ply, greet )
end )
Output:

Hello Flowx!


"Player/AddFrozenPhysicsObject"
Player:AddFrozenPhysicsObject( Entity ent, PhysObj physobj ) 
 Description
Adds a entity to the players list of frozen objects.

 Arguments

 Entity ent


Entity

 Arguments

 PhysObj physobj


Physics object belonging to ent


"Player/AddDeaths"
Player:AddDeaths( number count ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Add a certain amount to the players death count

 Arguments

 number count


number of deaths to add

 Examples
 Example
Adds 2 deaths to player with ID 1

player.GetByID( 1 ):AddDeaths( 2 )
Output:

Player 1 has 2 extra deaths on the scoreboard relative to his old score.


"Player/Armor"
Player:Armor(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the players armor.

 Returns

 number


The players armor.

 Examples
 Example
Loops through all the players and checks if they have any armor, if they do not, then sets their armor to 100.

for _, v in pairs( player.GetAll() ) do
    if ( v:Armor() == 0 ) then
         v:SetArmor( 100 )
    end
end


"Player/AllowImmediateDecalPainting"
Player:AllowImmediateDecalPainting( boolean allow ) 
 Description
Lets the player spray his decal without delay

 Arguments

 boolean allow


Allow or disallow


"Player/Alive"
Player:Alive(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Checks if the player is alive.

 Returns

 boolean


Whether the player is alive

 Examples
 Example
Loops through all the players and kills alive ones.

for k, v in pairs( player.GetAll() ) do
   if ( v:Alive() ) then
      v:Kill()
   end
end


"Player/AddCount"
Player:AddCount( string str, Entity ent ) 
 Description
Adds an entity to the total count of entities of same class.



NOTE


This function is only available in Sandbox and its derivatives


 Arguments

 string str


Entity type

 Arguments

 Entity ent


Entity


"Player/AnimRestartGesture"
Player:AnimRestartGesture( number slot, number activity, boolean autokill=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Restart a gesture on a player, within a gesture slot.



WARNING


This is not automatically networked. This function has to be called on the client to be seen by said client.


 Arguments

 number slot


Gesture slot using GESTURE_SLOT_ Enums

 Arguments

 number activity


The activity ( see ACT_ Enums ) or sequence that should be played

 Arguments

 boolean autokill=false


Whether the animation should be automatically stopped. true = stops the animation, false = the animation keeps playing/looping

 Examples
 Example
Defines part of a SWEP with pistol whipping functionality by using a pistol hold type and AnimRestartGesture for the melee attack animation.

function SWEP:Initialize()
	self:SetHoldType( pistol )
end

function SWEP:PrimaryAttack()

	-- Weapon attack delay
	self:SetNextPrimaryFire( CurTime()+0.5 )

	-- Get entity in front of us
	local tr = util.TraceLine( util.GetPlayerTrace( self.Owner ) )
	
	local ent = tr.Entity
	
	-- If theres an enemy under 50 units in front of us
	if( IsValid( ent ) &amp;&amp; self.Owner:GetShootPos():Distance( tr.HitPos ) &lt; 50 ) then
	
		-- Play the melee attack animation
		self.Owner:AnimRestartGesture( GESTURE_SLOT_ATTACK_AND_RELOAD, ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE, true )
		
		-- Create damage info ( server-side )
		if ( SERVER ) then
		
			local dmg = DamageInfo()		
			dmg:SetDamage( math.random( 5, 10 ) )
			dmg:SetAttacker( self.Owner )
			dmg:SetInflictor( self )
			dmg:SetDamageForce( self.Owner:GetAimVector()*300 )
			dmg:SetDamagePosition( tr.HitPos )
			dmg:SetDamageType( DMG_CLUB )
		
			-- Apply damage to enemy
			ent:TakeDamageInfo( dmg )
			
		end
		
		-- Play impact sound
		ent:EmitSound( physics/flesh/flesh_impact_bullet..math.random( 1, 5 )...wav )
		
		-- Make viewmodel pistol whip effect
		self.Owner:ViewPunch( Angle( 0, 45, 0 ) )
		
	else
	
		-- Typical pistol shot code goes here
		-- Some can be found in weapon_base/shared.lua
	
	end
	
end


"Player/AllowFlashlight"
Player:AllowFlashlight( boolean canFlashlight ) 
 Description
Sets if the player can toggle his flashlight. Function exists on both the server and client but has no effect when ran on the client.

 Arguments

 boolean canFlashlight


True allows flashlight toggling


"Player/Ban"
Player:Ban( number minutes, boolean kick=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Bans the player from the server for a certain amount of minutes.

 Arguments

 number minutes


Duration of the ban in minutes (0 is permanent)

 Arguments

 boolean kick=false


Whether to kick the player after banning then or not

 Examples
 Example
Kicks and bans the player for a day.

Entity( 1 ):Ban( 1440, true )


"player_manager/TranslateToPlayerModelName"
player_manager.TranslateToPlayerModelName( string model ) 
 Description
Returns the simplified name for a valid model path of a player model.
Opposite of player_manager.TranslatePlayerModel.

 Arguments

 string model


The model path to a player model

 Returns

 string


The simplified name for that model


"Player/AnimSetGestureSequence"
Player:AnimSetGestureSequence( number slot, number sequenceID ) 
 Description
Sets the sequence of the animation playing in the given gesture slot.

 Arguments

 number slot


The gesture slot. See GESTURE_SLOT_ Enums

 Arguments

 number sequenceID


Sequence ID to set.


"Player/AnimRestartMainSequence"
Player:AnimRestartMainSequence(  ) 
 Description
Restarts the main animation on the player, has the same effect as calling Entity:SetCycle( 0 ).


"Player/ChatPrint"
Player:ChatPrint( string message ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Prints a string to the chatbox of the client.



WARNING


Just like the usermessage library, this function is affected by the 255 byte limit!


 Arguments

 string message


String to be printed

 Examples
 Example
Prints Hello World to chat of all players

for k, ply in pairs( player.GetAll() ) do
	ply:ChatPrint( Hello World )
end
Output:

Hello World (In chatbox)


"Player/CheckLimit"
Player:CheckLimit( string limitType ) 
 Description
Checks if the limit is hit or not. If it is, it will throw a notification saying so.

 Arguments

 string limitType


Limit type. In unmodified Sandbox possible values are:

 props
 ragdolls
 vehicles
 effects
 balloons
 cameras
 npcs
 sents
 dynamite
 lamps
 lights
 wheels
 thrusters
 hoverballs
 buttons
 emitters


 Returns

 boolean


Returns true if limit is not hit, false if it is hit


"player/CreateNextBot"
player.CreateNextBot( string botName ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Similar to the serverside command bot, this function creates a new Player bot with the given name. This bot will not obey to the usual bot_* commands, and its the same bot base used in TF2 and CS:S.
The best way to control the behaviour of a Player bot right now is to use the GM:StartCommand hook and modify its input serverside.



NOTE


Despite this Player being fake, it has to be removed from the server by using Player:Kick and NOT Entity:Remove.
Also keep in mind that these bots still use player slots, so you wont be able to spawn them in singleplayer!




NOTE


Any Bot created using this method will be considered UnAuthed by Garrys Mod


 Arguments

 string botName


The name of the bot, using an already existing name will append brackets at the end of it with a number pertaining it.

Example: Bot name test, Bot name test(1).

 Returns

 Player


The newly created Player bot. Returns NULL if theres no Player slots available to host it.

 Examples
 Example
Create a bot if that is possible.

local listBots = {}


function CreateBot()

    if ( !game.SinglePlayer() &amp;&amp; #player.GetAll() &lt; game.MaxPlayers() ) then 

        local num = #listBots

        listBots[ num ] = player.CreateNextBot( Bot_ .. ( num + 1 ) )

	    return listBots[ num ]

    else

	    print( Cant create bot! )

    end

end


"Player/CreateRagdoll"
Player:CreateRagdoll(  ) 
 Description
Creates the players ragdoll entity.

This is normally used when a player dies, to create their death ragdoll.

The ragdoll will be created with the players properties such as Position, Angles, PlayerColor, Velocity and Model.

You can retrieve the entity this creates with Player:GetRagdollEntity.


"Player/ConCommand"
Player:ConCommand( string command ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Runs the concommand on the player. This does not work on bots.
If you wish to directly modify the movement input of bots, use GM:StartCommand instead.



NOTE


Some commands/convars are blocked from being ran/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see Blocked ConCommands.


 Arguments

 string command


command to run

 Examples
 Example
Kills the player using the concommand

ply:ConCommand( kill )
Output:

The player dies.


"Player/CanUseFlashlight"
Player:CanUseFlashlight(  ) 
 Description
Returns true if the players flashlight hasnt been disabled by  Player:AllowFlashlight

 Returns

 boolean


canFlashlight


"Player/AddVCDSequenceToGestureSlot"
Player:AddVCDSequenceToGestureSlot( number slot, number sequenceId, number cycle, boolean autokill=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Plays a sequence directly from a sequence number, similar to Player:AnimRestartGesture. This function has the advantage to play sequences that havent been bound to an existing ACT_ Enums

 Arguments

 number slot


Gesture slot using GESTURE_SLOT_ Enums

 Arguments

 number sequenceId


The sequence ID to play, can be retrieved with Entity:LookupSequence.

 Arguments

 number cycle


The cycle to start the animation at, ranges from 0 to 1.

 Arguments

 boolean autokill=false


If the animation should not loop. true = stops the animation, false = the animation keeps playing.


"Player/CrosshairDisable"
Player:CrosshairDisable(  ) 
 Description
Disables a players crosshair.

 Examples
 Example
Disables the players crosshair.

Player( 2 ):CrosshairDisable()


"Player/Crouching"
Player:Crouching(  ) 
 Description
Returns whether the player is crouching or not

 Returns

 boolean


Whether the player is crouching


"Player/CrosshairEnable"
Player:CrosshairEnable(  ) 
 Description
Enables crosshair of player.

 Examples
 Example
Enable crosshair of player 1.

Player( 1 ):CrosshairEnable()
Output:

If crosshair was disabled for player 1, it will be enabled.


"Player/AnimResetGestureSlot"
Player:AnimResetGestureSlot( number slot ) 
 Description
Resets player gesture in selected slot.

 Arguments

 number slot


Slot to reset. See the GESTURE_SLOT_ Enums.


"Player/DoCustomAnimEvent"
Player:DoCustomAnimEvent( number event, number data ) 
 Description
Sends a specified third person animation event to the player.
Calls GM:DoAnimationEvent with specified arguments.

 Arguments

 number event


The event to send. See PLAYERANIMEVENT_ Enums.

 Arguments

 number data


The data to send alongside the event.


"Player/DoReloadEvent"
Player:DoReloadEvent(  ) 
 Description
Sends a third person reload animation event to the player.
Similar to other animation event functions, calls GM:DoAnimationEvent with PLAYERANIMEVENT_RELOAD as the event and no extra data.


"Player/DebugInfo"
Player:DebugInfo(  ) 
 Description
Prints the players name and position to the console.


"Player/AnimSetGestureWeight"
Player:AnimSetGestureWeight( number slot, number weight ) 
 Description
Sets the weight of the animation playing in the given gesture slot.

 Arguments

 number slot


The gesture slot. See GESTURE_SLOT_ Enums

 Arguments

 number weight


The weight this slot should be set to. Value must be ranging from 0 to 1.


"Player/DoAnimationEvent"
Player:DoAnimationEvent( number data ) 
 Description
Sends a third person animation event to the player.
Calls GM:DoAnimationEvent with PLAYERANIMEVENT_CUSTOM_GESTURE as the event, data as the given data.

 Arguments

 number data


The data to send.


"Player/DetonateTripmines"
Player:DetonateTripmines(  ) 
 Description
Detonates all tripmines belonging to the player.


"Player/DrawWorldModel"
Player:DrawWorldModel( boolean draw ) 
 Description
Show/Hide the players weapons worldmodel.

 Arguments

 boolean draw


Should draw


"Player/DropNamedWeapon"
Player:DropNamedWeapon( string class ) 
 Description
Drops the players weapon of a specific class.

 Arguments

 string class


The class to drop.


"Player/DropWeapon"
Player:DropWeapon( Weapon weapon ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Forces the player to drop the specified weapon

 Arguments

 Weapon weapon


Weapon to be dropped

 Examples
 Example
Drops all the players weapons

local ply = Entity( 1 )
for k, v in pairs( ply:GetWeapons() ) do
	ply:DropWeapon( v )
end


"Player/DoSecondaryAttack"
Player:DoSecondaryAttack(  ) 
 Description
Sends a third person secondary fire animation event to the player.
Similar to other animation event functions, calls GM:DoAnimationEvent with PLAYERANIMEVENT_ATTACK_SECONDARY as the event and no extra data.


"Player/DrawViewModel"
Player:DrawViewModel( boolean draw, number vm=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Show/Hide the players weapons viewmodel.

 Arguments

 boolean draw


Should draw

 Arguments

 number vm=0


Which view model to show/hide, 0-2.

 Examples
 Example
Create a ConVar object on the client realm to enable/disable the viewmodel.

local cvarObject = CreateClientConVar( nogun, 1, true, false, Hide the current viewmodel. ) -- Create the ConVar object

hook.Add( HUDPaint, draw_viewmodel, function()
	LocalPlayer():DrawViewModel( cvarObject:GetBool() ) -- Call ConVar:GetBool() inside the parameters of DrawViewModel
end )


"Player/DoAttackEvent"
Player:DoAttackEvent(  ) 
 Description
Starts the players attack animation. The attack animation is determined by the weapons HoldType.
Similar to other animation event functions, calls GM:DoAnimationEvent with PLAYERANIMEVENT_ATTACK_PRIMARY as the event and no extra data.


"Player/EquipSuit"
Player:EquipSuit(  ) 
 Description
Equips the player with the HEV suit.
Allows the player to zoom, walk slowly, sprint, pickup armor batteries, use the health and armor stations and also shows the HUD.
The player also emits a flatline sound on death, which can be overridden with GM:PlayerDeathSound.
The player is automatically equipped with the suit on spawn, if you wish to stop that, use Player:RemoveSuit.


"Player/FlashlightIsOn"
Player:FlashlightIsOn(  ) 
 Description
Returns true if the players flashlight is on.

 Returns

 boolean


Whether the players flashlight is on.


"Player/EnterVehicle"
Player:EnterVehicle( Vehicle vehicle ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Enters the player into specified vehicle

 Arguments

 Vehicle vehicle


Vehicle the player will enter

 Examples
 Example
Enters the player into the vehicle theyre looking at

local jeep = ply:GetEyeTrace().Entity
ply:EnterVehicle( jeep )


"Player/DropObject"
Player:DropObject(  ) 
 Description
Drops any object the player is currently holding with either gravitygun or +Use (E key)


"Player/ExitVehicle"
Player:ExitVehicle(  ) 
 Description
Makes the player exit the vehicle if theyre in one.

 Examples
 Example
Make player 1 leave his vehicle if hes driving one.

Entity( 1 ):ExitVehicle()
Output:

Player 1 will exit the the vehicle hes currently in.


"Player/Flashlight"
Player:Flashlight( boolean isOn ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Enables/Disables the players flashlight

 Arguments

 boolean isOn


Turns the flashlight on/off

 Examples
 Example
Turns off and disables a players flashlight

ply:Flashlight( false )
ply:AllowFlashlight( false )


"Player/Deaths"
Player:Deaths(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the players death count

 Returns

 number


The number of deaths the player has had.

 Examples
 Example
If the players deaths are over 10, then they cannot spawn.

function GM:PlayerDeathThink( ply, ent, att )

	if ( ply:Deaths() &gt;= 10 ) then

		return false

	end

   return true

end
Output:

The player will not be able to spawn after theyve died 10 times.


"Player/GetActiveWeapon"
Player:GetActiveWeapon(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the players active weapon.

 Returns

 Weapon


The weapon the player is currently has equipped.

 Examples
 Example
Prints the players active weapons class name.

print( ply:GetActiveWeapon():GetClass() )
Output:

The active weapons class. For example, if you are holding the tool gun then this will be gmod_tool.


"Player/Freeze"
Player:Freeze( boolean frozen=false ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Freeze the player. Frozen players cannot move, look around, or attack. Key bindings are still called. Similar to Player:Lock but the player can still take damage.
Adds or removes the FL_FROZEN flag from the player.



NOTE


Frozen bots will still be able to turn with bot_mimic 1


 Arguments

 boolean frozen=false


Whether the player should be frozen.

 Examples
 Example
Freezes all players

for k, v in pairs( player.GetAll() ) do
    v:Freeze( true )
end


"Player/Frags"
Player:Frags(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the amount of kills a player has.

 Returns

 number


kills

 Examples
 Example
Prints the players frags in console.

print( Player2( 1 ):Frags() )
Output:

0


"Player/GetAimVector"
Player:GetAimVector(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the direction that the player is aiming.

 Returns

 Vector


The direction vector of players aim

 Examples
 Example
Launches the player in the direction theyre facing.

local pl = player.GetByID( 1 )
pl:SetVelocity( pl:GetAimVector() * 1000 )


"player/GetBots"
player.GetBots(  ) 
 Description
Returns a table of all bots on the server.

 Returns

 table


A table only containing bots ( AI / non human players )


"Player/GetAmmoCount"
Player:GetAmmoCount( any ammotype ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Gets the amount of ammo the player has.

 Arguments

 any ammotype


The ammunition type. Can be either number ammo ID or string ammo name.

 Returns

 number


The amount of ammo player has in reserve.

 Examples
 Example
A function that returns the ammo for the weapon the player is currently holding.

function GetAmmoForCurrentWeapon( ply )
	if ( !IsValid( ply ) ) then return -1 end

	local wep = ply:GetActiveWeapon()
	if ( !IsValid( wep ) ) then return -1 end
 
	return ply:GetAmmoCount( wep:GetPrimaryAmmoType() )
end
Output:

31
 Examples
 Example
Example usage. pistol ammo type has ID of 3.

print( Entity( 1 ):GetAmmoCount( 3 ) )
print( Entity( 1 ):GetAmmoCount( 3 ) )
print( Entity( 1 ):GetAmmoCount( pistol ) )
Output:

255
0
255


"player/GetAll"
player.GetAll(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Gets all the current players in the server (not including connecting clients).



NOTE


This function returns bots as well as human players. See player.GetBots and player.GetHumans.


 Returns

 table


All Players currently in the server.

 Examples
 Example
Prints all the players currently in the server.

PrintTable( player.GetAll() )
Output:

1 = [Player][1][Player1]
2 = [Player][2][Bot01]
3 = [Player][3][Bot02]
 Examples
 Example
Prints the number of players in the server. The same output can be achieved more efficiently with player.GetCount.

print( #player.GetAll() )
Output:

3


"Player/GetAvoidPlayers"
Player:GetAvoidPlayers(  ) 
 Description
Gets if the player will be pushed out of nocollided players.

 Returns

 boolean


pushed


"player/GetByAccountID"
player.GetByAccountID( string accountID ) 
 Description
Gets the player with the specified AccountID.

 Arguments

 string accountID


The Player:AccountID to find the player by.

 Returns

 Player


Player if one is found, false otherwise.


"player/GetByUniqueID"
player.GetByUniqueID( string uniqueID ) 
 Description
Gets the player with the specified uniqueID (not recommended way to identify players).



WARNING


It is highly recommended to use player.GetBySteamID or player.GetBySteamID64 instead as this function can have collisions ( be same for different people ) while SteamID is guaranteed to unique to each player.


 Arguments

 string uniqueID


The Player:UniqueID to find the player by.

 Returns

 Player


Player if one is found, false otherwise.


"Player/GetAllowFullRotation"
Player:GetAllowFullRotation(  ) 
 Description
Returns true if the players model is allowed to rotate around the pitch and roll axis.

 Returns

 boolean


Allowed


"player/GetByID"
player.GetByID( number connectionID ) 
 Description
Gets the player with the specified connection ID.
Connection ID can be retrieved via gameevent.Listen events.
For a function that returns a player based on their Entity:EntIndex, see Entity.
For a function that returns a player based on their Player:UserID, see Player.

 Arguments

 number connectionID


The connection ID to find the player by.

 Returns

 Player


Player if one is found, nil otherwise


"Player/GetAllowWeaponsInVehicle"
Player:GetAllowWeaponsInVehicle(  ) 
 Description
Returns whether the player is allowed to use his weapons in a vehicle or not.

 Returns

 boolean


Whether the player is allowed to use his weapons in a vehicle or not.


"Player/GetCanWalk"
Player:GetCanWalk(  ) 
 Description
Returns true if the player is able to walk using the (default) alt key.

 Returns

 boolean


AbleToWalk


"player/GetBySteamID"
player.GetBySteamID( string steamID ) 
 Description
Gets the player with the specified SteamID.

 Arguments

 string steamID


The Player:SteamID to find the player by.

 Returns

 Player


Player if one is found, false otherwise.


"Player/GetCanZoom"
Player:GetCanZoom(  ) 
 Description
Determines whenever the player is allowed to use the zoom functionality.

 Returns

 boolean


canZoom


"player/GetCount"
player.GetCount(  ) 
 Description
Gives you the player count.
Similar to #player.GetAll but with much better performance.

 Returns

 number


Number of players


"Player/GetCrouchedWalkSpeed"
Player:GetCrouchedWalkSpeed(  ) 
 Description
Returns the crouched walk speed multiplier.
See also Player:GetWalkSpeed and Player:SetCrouchedWalkSpeed.

 Returns

 number


The crouched walk speed multiplier.


"Player/GetCurrentViewOffset"
Player:GetCurrentViewOffset(  ) 
 Description
Gets the actual view offset which equals the difference between the players actual position and their view when standing.
Do not confuse with Player:GetViewOffset and Player:GetViewOffsetDucked

 Returns

 Vector


The actual view offset.


"Player/GetFriendStatus"
Player:GetFriendStatus(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the steam relationship towards the player.

 Returns

 string


Should return one of four different things depending on their status on your friends list: friend, blocked, none or requested.

 Examples
 Example
Prints the steam relationship towards another player

print( ply:GetFriendStatus() )
Output:

friend


"Player/GetEyeTrace"
Player:GetEyeTrace(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns a table with information of what the player is looking at.
The results of this function are cached every frame.
See also Player:GetEyeTraceNoCursor

 Returns

 table


Trace information, see TraceResult structure

 Examples
 Example
Prints the entity the player is looking at.

print( Entity( 1 ):GetEyeTrace().Entity )
Output:

Entity [0][worldspawn] in console, if you aim at world.


"player/GetBySteamID64"
player.GetBySteamID64( string steamID64 ) 
 Description
Gets the player with the specified SteamID64.

 Arguments

 string steamID64


The Player:SteamID64 to find the player by. Also accepts numbers.

 Returns

 Player


Player if one is found, false otherwise.


"Player/GetDrivingMode"
Player:GetDrivingMode(  ) 
 Description
Returns driving mode of the player. See Entity Driving.

 Returns

 number


The drive mode ID or 0 if player doesnt use the drive system.


"Player/GetDrivingEntity"
Player:GetDrivingEntity(  ) 
 Description
Gets the entity the player is currently driving.

 Returns

 Entity


DriveEntity


"Player/GetDuckSpeed"
Player:GetDuckSpeed(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns a players duck speed (in seconds)

 Returns

 number


duckspeed

 Examples
 Example
Gets player 1s duck speed in seconds, and prints it to console

print( player.GetByID( 1 ):GetDuckSpeed() )
Output:

0.3 in console (tested)


"Player/GetHoveredWidget"
Player:GetHoveredWidget(  ) 
 Description
Returns the widget the player is hovering with his mouse.

 Returns

 Entity


The hovered widget.


"Player/GetFOV"
Player:GetFOV(  ) 
 Description
Returns the FOV of the player.



BUG


This returns an int on the server and a float on the client.



 Returns

 number


FOV


"Player/GetClassID"
Player:GetClassID(  ) 
 Description
Returns the players class id.

 Returns

 number


The players class id.


"Player/GetHands"
Player:GetHands(  ) 
 Description
Gets the hands entity of a player

 Returns

 Entity


The hands entity if players has one


"Player/GetCurrentCommand"
Player:GetCurrentCommand(  ) 
 Description
Returns the last command which was sent by the specified player. Can only be used in a Predicted Hook.



NOTE


When called clientside in singleplayer during WEAPON:Think, it will return nothing as the hook is not technically predicted in that instance. See the note on the page.




BUG


This will fail in GM:StartCommand.



 Returns

 CUserCmd


Last user commands


"Player/GetCount"
Player:GetCount( string type, number minus=0 ) 
 Description
Gets total count of entities of same class.



NOTE


This function is only available in Sandbox and its derivatives


 Arguments

 string type


Entity type to get count of.

 Arguments

 number minus=0


If specified, it will reduce the counter by this value. Works only serverside.


"Player/GetEyeTraceNoCursor"
Player:GetEyeTraceNoCursor(  ) 
 Description
Returns the trace according to the players view direction, ignoring their mouse ( Holding C and moving the mouse in Sandbox ).
The results of this function are cached every frame.
See also Player:GetEyeTrace

 Returns

 table


Trace result. See TraceResult structure


"Player/GetHull"
Player:GetHull(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Examples

4.1 Example




 Description
Gets the bottom base and the top base size of the players hull.

 Returns

 Vector


Players hull bottom base size

 Returns

 Vector


Players hull top base size

 Examples
 Example
Prints bases size of the hull of all players.

for k,v in pairs( player.GetAll() ) do

	local bottom, top = v:GetHull()

	print( bottom )

	print( top )

end
Output:

-16.000000 -16.000000 0.000000
16.000000 16.000000 72.000000


"player/GetHumans"
player.GetHumans(  ) 
 Description
Returns a table of all human ( non bot/AI ) players.
Unlike player.GetAll, this does not include bots.

 Returns

 table


A table of all human ( non bot/AI ) players.


"Player/GetInfo"
Player:GetInfo( string cVarName ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Retrieves the value of a client-side ConVar. The ConVar must have a FCVAR_USERINFO flag for this to work.



WARNING


The returned value is truncated to 31 bytes.


 Arguments

 string cVarName


The name of the client-side ConVar

 Returns

 string


The value of the ConVar

 Examples
 Example
Creates clientside ConVar Apple and retrieves value of it.

if ( CLIENT ) then
	CreateConVar( Apple, ILikeApples, FCVAR_USERINFO )
else
	MsgN( Entity( 1 ):GetInfo( Apple ) )
end
Output:

ILikeApples


"Player/GetJumpPower"
Player:GetJumpPower(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the jump power of the player

 Returns

 number


Jump power

 Examples
 Example
Prints local players jump power

print( LocalPlayer():GetJumpPower() )
Output:

200


"Player/GetLaggedMovementValue"
Player:GetLaggedMovementValue(  ) 
 Description
Returns the timescale multiplier of the player movement.

 Returns

 number


The timescale multiplier, defaults to 1.


"Player/GetInfoNum"
Player:GetInfoNum( string cVarName, number default ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Retrieves the numeric value of a client-side convar, returns nil if value is not convertible to a number. The ConVar must have a FCVAR_USERINFO flag for this to work.

 Arguments

 string cVarName


The name of the ConVar to query the value of

 Arguments

 number default


Default value if we failed to retrieve the number.

 Returns

 number


The value of the ConVar or the default value

 Examples
 Example
Creates clientside ConVar Apple and retrieves value of it.

if ( CLIENT ) then
	CreateConVar( Apple, 1, FCVAR_USERINFO )
else
	MsgN( Entity( 1 ):GetInfoNum( Apple ) )
end
Output:

1
 Examples
 Example
Shows difference between Player:GetInfo and Player:GetInfoNum.

if ( CLIENT ) then
	CreateConVar( Apple, 1, FCVAR_USERINFO )
else
	MsgN( type( Entity( 1 ):GetInfoNum( Apple, 1 ) ) )
	MsgN( type( Entity( 1 ):GetInfo( Apple ) ) )
end
Output:

number
string


"Player/GetMaxSpeed"
Player:GetMaxSpeed(  ) 
 Description
Returns the players maximum movement speed.
See also Player:SetMaxSpeed, Player:GetWalkSpeed and Player:GetRunSpeed.

 Returns

 number


The maximum movement speed the player can go at.


"Player/GetHullDuck"
Player:GetHullDuck(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Examples

4.1 Example




 Description
Gets the bottom base and the top base size of the players crouch hull.

 Returns

 Vector


Players crouch hull bottom base size

 Returns

 Vector


Players crouch hull top base size

 Examples
 Example
Prints bases size of the crouch hull of all players.

for k,v in pairs( player.GetAll() ) do

	local bottom, top = v:GetHullDuck()

	print( bottom )

	print( top )

end
Output:

-16.000000 -16.000000 0.000000
16.000000 16.000000 36.000000


"Player/GetObserverTarget"
Player:GetObserverTarget(  ) 
 Description
Returns the entity the player is currently observing.
Set using Player:SpectateEntity.

 Returns

 Entity


The entity the player is currently spectating, or NULL if the player has no target.


"Player/GetObserverMode"
Player:GetObserverMode(  ) 
 Description
Returns the the observer mode of the player

 Returns

 number


Observe mode of that player, see OBS_MODE_ Enums.


"Player/GetPData"
Player:GetPData( string key, any default=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns a Player Data key-value pair from the SQL database. (sv.db when called on server, cl.db when called on client)
Internally uses the sql library.



WARNING


This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). Its recommended that you dont use it. See the related wiki page for more information.




NOTE


PData is not networked from servers to clients!


 Arguments

 string key


Name of the PData key

 Arguments

 any default=nil


Default value if PData key doesnt exist.

 Returns

 string


The data in the SQL database or the default value given.

 Examples
 Example
Reads the key money from player 1s PData

player.GetByID( 1 ):GetPData( money, 0 )


"Player/GetNoCollideWithTeammates"
Player:GetNoCollideWithTeammates(  ) 
 Description
Returns whenever the player is set not to collide with their teammates.

 Returns

 boolean


noCollideWithTeammates


"Player/GetPlayerInfo"
Player:GetPlayerInfo(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns a table containing player information.

 Returns

 table


A table containing player information.

 Examples
 Example
Example output for a bot and a player.

PrintTable( Entity( 1 ):GetPlayerInfo() ) -- A player
PrintTable( Entity( 2 ):GetPlayerInfo() ) -- A bot
Output:

Player:friendname	=	
customfiles:
		1	=	0912fb2c
		2	=	0912fb2c
		3	=	0912fb2c
		4	=	0912fb2c
fakeplayer	=	false
guid	=	STEAM_0:0:18313012
ishltv	=	false
filesdownloaded	=	0
friendid	=	36626024
name	=	Rubat
userid	=	2
Bot:friendname	=	
customfiles:
		1	=	00000000
		2	=	00000000
		3	=	00000000
		4	=	00000000
fakeplayer	=	true
guid	=	BOT
ishltv	=	false
filesdownloaded	=	0
friendid	=	0
name	=	Bot01
userid	=	3


"Player/GetPreferredCarryAngles"
Player:GetPreferredCarryAngles( Entity carryEnt ) 
 Description
Returns the preferred carry angles of an object, if any are set.
Calls GM:GetPreferredCarryAngles with the target entity and returns the carry angles.

 Arguments

 Entity carryEnt


Entity to retrieve the carry angles of.

 Returns

 Angle


Carry angles or nil if the entity has no preferred carry angles.


"Player/GetPlayerColor"
Player:GetPlayerColor(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns a player models color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is Vector(r,g,b), and each color should be between 0 and 1.

 Returns

 Vector


color

 Examples
 Example
Gets player 1s model color, and prints it to console

print( player.GetByID( 1 ):GetPlayerColor() )
Output:

Vector( 1, 1, 1 )


"Player/GetPressedWidget"
Player:GetPressedWidget(  ) 
 Description
Returns the widget entity the player is using.
Having a pressed widget stops the player from firing his weapon to allow input to be passed onto the widget.

 Returns

 Entity


The pressed widget.


"Player/GetName"
Player:GetName(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the players name, this is an alias of Player:Nick.



NOTE


This function overrides Entity:GetName (in the Lua metatable, not in c++), keep it in mind when dealing with ents.FindByName or any engine function which requires the mapping name.


 Returns

 string


The players name.



BUG


This is limited to 31 characters even though Steam names can have 32.




 Examples
 Example
Prints the players name

print( Entity( 1 ):GetName() )
Output:

Ninja101


"Player/GetRunSpeed"
Player:GetRunSpeed(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the players sprint speed.
See also Player:SetRunSpeed, Player:GetWalkSpeed and Player:GetMaxSpeed.

 Returns

 number


The sprint speed

 Examples
 Example
Prints the players run speed in the code.

print( Entity( 1 ):GetRunSpeed() )
Output:

500


"Player/GetShootPos"
Player:GetShootPos(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Returns the position of a Players view



NOTE


This is the same as calling Entity:EyePos on the player.


 Returns

 Vector


aim pos

 Examples
 Example
Gets player 1s shoot position, and prints it to console

print( player.GetByID( 1 ):GetShootPos() )
Output:

A vector of the players shooting position in the console.
 Examples
 Example
Prints the position of your players camera, but using 3 different functions.
This example demonstrates that it doesnt matter whichever of these functions you use, you will get the SAME result.

// run on client
print( LocalPlayer():GetEyeTrace().StartPos )
print( LocalPlayer():GetShootPos() )
print( LocalPlayer():EyePos() )
Output:

94.856689 -115.472549 -83.981430
94.856689 -115.472549 -83.981430
94.856689 -115.472549 -83.981430


"Player/GetStepSize"
Player:GetStepSize(  ) 
 Description
Returns the maximum height player can step onto.

 Returns

 number


The maximum height player can get up onto without jumping, in hammer units.


"Player/GetTimeoutSeconds"
Player:GetTimeoutSeconds(  ) 
 Description
Returns the number of seconds that the player has been timing out for. You can check if a player is timing out with Player:IsTimingOut.

 Returns

 number


Timeout seconds.


"Player/GetRenderAngles"
Player:GetRenderAngles(  ) 
 Description
Returns the render angles for the player.

 Returns

 Angle


The render angles of the player. Only yaw part of the angle seems to be present.


"Player/GetPunchAngle"
Player:GetPunchAngle(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use Player:GetViewPunchAngles instead.
Returns players screen punch effect angle.

 Returns

 Angle


The punch angle


"Player/GetTool"
Player:GetTool( string mode=nil ) 
 Description
Returns TOOL table of players current tool, or of the one specified.

 Arguments

 string mode=nil


Classname of the tool to retrieve. ( Filename of the tool in gmod_tool/stools/ )

 Returns

 table


TOOL table, or nil if the table wasnt found or the player doesnt have a tool gun.


"Player/GetUnDuckSpeed"
Player:GetUnDuckSpeed(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns a players unduck speed (in seconds)

 Returns

 number


unduck speed

 Examples
 Example
Gets player 1s unduck speed, and prints it to console

print( player.GetByID( 1 ):GetUnDuckSpeed() )
Output:

0.3 in console


"Player/GetUserGroup"
Player:GetUserGroup(  ) 
 Description
Returns the players user group.

 Returns

 string


The user group of the player.


"Player/GetRagdollEntity"
Player:GetRagdollEntity(  ) 
 Description
Returns players death ragdoll. The ragdoll is created by Player:CreateRagdoll.

 Returns

 Entity


The ragdoll.

Unlike normal clientside ragdolls (C_ClientRagdoll), this will be a C_HL2MPRagdoll on the client, and hl2mp_ragdoll on the server.


"Player/GetVehicle"
Player:GetVehicle(  ) 
 Description
Gets the vehicle the player is driving, returns NULL ENTITY if the player is not driving.

 Returns

 Vehicle


vehicle


"Player/GetViewEntity"
Player:GetViewEntity(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the entity the player is using to see from (such as the player itself, the camera, or another entity).

 Returns

 Entity


The entity the player is using to see from

 Examples
 Example
Will print what entity the first player uses to look through.

print( Entity( 1 ):GetViewEntity() )
Output:

Player [1][ExamplePlayer]


"Player/GetViewModel"
Player:GetViewModel( number index=0 ) 
 Description
Returns the players view model entity by the index.
Each player has 3 view models by default, but only the first one is used.
To use the other viewmodels in your SWEP, see Entity:SetWeaponModel.



NOTE


In the Client realm, other players viewmodels are not available unless they are being spectated.


 Arguments

 number index=0


optional index of the view model to return, can range from 0 to 2

 Returns

 Entity


The view model entity


"Player/GetViewOffset"
Player:GetViewOffset(  ) 
 Description
Returns the view offset of the player which equals the difference between the players actual position and their view.
See also Player:GetViewOffsetDucked.

 Returns

 Vector


New view offset, must be local vector to players Entity:GetPos


"Player/GetViewPunchAngles"
Player:GetViewPunchAngles(  ) 
 Description
Returns players screen punch effect angle.

 Returns

 Angle


The punch angle


"Player/GetWeapon"
Player:GetWeapon( string className ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the weapon for the specified class

 Arguments

 string className


Class name of weapon

 Returns

 Weapon


The weapon for the specified class.

 Examples
 Example
Prints the weapon if the player has the toolgun

print( Entity( 1 ):GetWeapon( gmod_tool ) )
Output:

Something like Weapon [77] in console.


"Player/GetWalkSpeed"
Player:GetWalkSpeed(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the players normal walking speed. Not sprinting, not slow walking. (+walk)
See also Player:SetWalkSpeed, Player:GetMaxSpeed and Player:GetRunSpeed.

 Returns

 number


The normal walking speed.

 Examples
 Example
Gets player 1s walk speed, and prints it to console

print( Entity( 1 ):GetWalkSpeed() )
Output:

200 in console by default


"Player/Give"
Player:Give( string weaponClassName, boolean bNoAmmo=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Gives the player a weapon.



NOTE


While this function is meant for weapons/pickupables only, it is not restricted to weapons. Any entity can be spawned using this function, including NPCs and SENTs.


 Arguments

 string weaponClassName


Class name of weapon to give the player

 Arguments

 boolean bNoAmmo=false


Set to true to not give any ammo on weapon spawn. (Reserve ammo set by DefaultClip)

 Returns

 Weapon


The weapon given to the player, if one was given. It will return NULL if the player already has the weapon, or the weapon entity (entity with given classname) doesnt exist.

 Examples
 Example
Gives the player a toolgun

Entity( 1 ):Give( gmod_tool )


 Examples
 Example
Removes all weapons and ammo from a player and gives a weapon_base SWEP with no ammo in it.

Entity( 1 ):StripWeapons()
Entity( 1 ):StripAmmo()

local w = Entity( 1 ):Give( weapon_base, true )


"Player/GetWeapons"
Player:GetWeapons(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns a table of the players weapons.



BUG


The table returned is not continuous so the # operator, ipairs, and a numeric-for loop shouldnt be used with it. Use table.Count to get the correct count, instead.



 Returns

 table


All the weapons the player currently has.

 Examples
 Example
Prints how many weapons the player has.

print( table.Count( Player( 1 ):GetWeapons() ) )
Output:

The number of weapons the player has (e.g. 5).


"Player/InVehicle"
Player:InVehicle(  ) 
 Description
Returns if the player is in a vehicle

 Returns

 boolean


Whether the player is in a vehicle.


"Player/GetViewOffsetDucked"
Player:GetViewOffsetDucked(  ) 
 Description
Returns the view offset of the player which equals the difference between the players actual position and their view when ducked.
See also Player:GetViewOffset.

 Returns

 Vector


New crouching view offset, must be local vector to players Entity:GetPos


"Player/GiveAmmo"
Player:GiveAmmo( number amount, string type, boolean hidePopup=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Gives ammo to a player

 Arguments

 number amount


Amount of ammo

 Arguments

 string type


Type of ammo.
This can also be a number for ammo ID, useful for custom ammo types.

You can find a list of default ammo types here.

 Arguments

 boolean hidePopup=false


Hide display popup when giving the ammo

 Returns

 number


Ammo given.

 Examples
 Example
Give the player 200 rounds for the pistol, hiding the popup.

player.GetByID( 1 ):GiveAmmo( 200, Pistol, true )


"Player/GodEnable"
Player:GodEnable(  ) 
 Description
Enables god mode on the player.

 Examples
 Example
Enable god mode on all players

for k, v in pairs( player.GetAll() ) do
    v:GodEnable()
end


"Player/IPAddress"
Player:IPAddress(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the players IP address and connection port in ip:port form

 Returns

 string


The players IP address and connection port

 Examples
 Example
Prints the players IP and port

print( Entity( 1 ):IPAddress() )
Output:

192.168.1.101:27005


"Player/HasGodMode"
Player:HasGodMode(  ) 
 Description
Returns whether the player has god mode or not, contolled by Player:GodEnable and Player:GodDisable.



BUG


This is not synced between the client and server. This will cause the client to always return false even in godmode.



 Returns

 boolean


Whether the player has god mode or not.


"Player/HasWeapon"
Player:HasWeapon( string className ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns if the player has the specified weapon

 Arguments

 string className


Class name of the weapon

 Returns

 boolean


True if the player has the weapon

 Examples
 Example
prints if the player has the physgun

print( player.GetByID( 1 ):HasWeapon( weapon_physgun ) )
Output:

true in console, if player 1 has Physics Gun.


"Player/GetWeaponColor"
Player:GetWeaponColor(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns a players weapon color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is Vector(r,g,b), and each color should be between 0 and 1.

 Returns

 Vector


color

 Examples
 Example
Gets player 1s weapon color, and prints it to console

print( player.GetByID( 1 ):GetWeaponColor() )
Output:

Vector( 1, 1, 1 )


"Player/IsConnected"
Player:IsConnected(  ) 
 Description
Returns true from the point when the player is sending client info but not fully in the game until they disconnect.

 Returns

 boolean


isConnected


"Player/IsBot"
Player:IsBot(  ) 
 Description
Returns if the player is an bot or not

 Returns

 boolean


True if the player is a bot.


"Player/GodDisable"
Player:GodDisable(  ) 
 Description
Disables god mode on the player.

 Examples
 Example
Disables god mode on all players.

for _, v in pairs( player.GetAll() ) do
    v:GodDisable()
end


"Player/IsFullyAuthenticated"
Player:IsFullyAuthenticated(  ) 
 Description
Returns whether the player identity was confirmed by the steam network.

 Returns

 boolean


Whether the player has been fully authenticated or not.
This will always be true for singleplayer and the listen server host.

This will always be false for bots.


"Player/IsMuted"
Player:IsMuted(  ) 
 Description
Returns whether or not the player is muted locally.

 Returns

 boolean


whether or not the player is muted locally.


"Player/IsSprinting"
Player:IsSprinting(  ) 
 Description
Returns whether the player is currently sprinting or not.

 Returns

 boolean


Is the player sprinting or not


"Player/IsFrozen"
Player:IsFrozen(  ) 
 Description
Returns whether the players movement is currently frozen, contolled by Player:Freeze.

 Returns

 boolean


Whether the players movement is currently frozen or not.


"Player/IsAdmin"
Player:IsAdmin(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns whether the player is an admin or not

 Returns

 boolean


True if the player is an admin

 Examples
 Example
Every time a player spawns, print in the console whether they are an admin.

hook.Add( PlayerSpawn, PrintIfAdmin, function( ply )
    if ( ply:IsAdmin() ) then 
       print( Its true,  .. ply:Nick() ..  is an admin )
    else
       print( Its false,  .. ply:Nick() ..  is not an admin )
    end
end )
Output:

Its true, Alice is an admin.
Its false, Bob is not an admin.


"Player/IsListenServerHost"
Player:IsListenServerHost(  ) 
 Description
Returns if a player is the host of the current session.

 Returns

 boolean


True if the player is the listen server host, false otherwise.

This will always be true in single player, and false on a dedicated server.


"Player/IsSuperAdmin"
Player:IsSuperAdmin(  ) 
 Description
Returns whether the player is a superadmin.

 Returns

 boolean


True if the player is a superadmin.


"Player/IsTyping"
Player:IsTyping(  ) 
 Description
Returns whether the player is typing in their chat.
This may not work properly if the server uses a custom chatbox.

 Returns

 boolean


Whether the player is typing in their chat or not.


"Player/IsSpeaking"
Player:IsSpeaking(  ) 
 Description
Returns whenever the player is heard by the local player.

 Returns

 boolean


isSpeaking


"Player/IsPlayingTaunt"
Player:IsPlayingTaunt(  ) 
 Description
Returns true if the player is playing a taunt.

 Returns

 boolean


Whether the player is playing a taunt.


"Player/IsSuitEquipped"
Player:IsSuitEquipped(  ) 
 Description
Returns whenever the player is equipped with the suit item.



BUG


This will only work for the local player clientside.



 Returns

 boolean


Is the suit equipped or not.


"Player/IsDrivingEntity"
Player:IsDrivingEntity(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Used to find out if a player is currently driving an entity (by which we mean right click &gt; drive ).

 Returns

 boolean


A value representing whether or not the player is driving an entity.

 Examples
 Example
Kills every player currently driving an entity.

local plys = player.GetAll()
for _, ply in pairs( plys ) do
    
    if ( ply:IsDrivingEntity() ) then
        ply:Kill()
    end
    
end
Output:

Every player driving an entity will die a painful death.


"Player/IsTimingOut"
Player:IsTimingOut(  ) 
 Description
Returns true if the player is timing out (i.e. is losing connection), false otherwise.

 Returns

 boolean


isTimingOut


"Player/KeyDown"
Player:KeyDown( number key ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Gets whether a key is down. This is not networked to other players, meaning only the local client can see the keys they are pressing.

 Arguments

 number key


The key, see IN_ Enums

 Returns

 boolean


isDown

 Examples
 Example
Prints whenever the first player is holding forward key

hook.Add( Tick, KeyDown_Test, function()
    if ( Entity( 1 ):KeyDown( IN_FORWARD ) ) then
        print( Player is pressing forward! )
    end
end )
Output:

Player is pressing forward!
Player is pressing forward!
Player is pressing forward!
Player is pressing forward!


"Player/IsUserGroup"
Player:IsUserGroup( string groupname ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns true/false if the player is in specified group or not.

 Arguments

 string groupname


Group to check the player for.

 Returns

 boolean


isInUserGroup

 Examples
 Example
Prints in the players chat yes, Im awesome! if hes in the superadmin group.

if ( Player( 2 ):IsUserGroup( superadmin ) ) then
    print( yes, Im awesome! )
end
Output:

yes, Im awesome! in console.


"Player/KeyDownLast"
Player:KeyDownLast( number key ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Gets whether a key was down one tick ago.

 Arguments

 number key


The key, see IN_ Enums

 Returns

 boolean


Is key down

 Examples
 Example
Prints whenever the first player stopped pressing W last tick

hook.Add( Tick, CheckPlayer1Forward, function()
   if ( !Entity( 1 ):KeyDown( IN_FORWARD ) ) and Entity( 1 ):KeyDownLast( IN_FORWARD ) then print( Ent1 is no longer holding W! ) end
end )


"Player/IsVoiceAudible"
Player:IsVoiceAudible(  ) 
 Description
Returns if the player can be heard by the local player.

 Returns

 boolean


isAudible


"Player/KeyPressed"
Player:KeyPressed( number key ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Gets whether a key was just pressed this tick

 Arguments

 number key


Corresponds to an IN_ Enums

 Returns

 boolean


Was pressed or not

 Examples
 Example
Prints whenever the first player first starts pressing W

hook.Add( Tick, CheckPlayer1Forward, function()
   if( Entity( 1 ):KeyPressed( IN_FORWARD ) ) then
        print( Ent1 just started moving forward! )
    end
end )


"Player/Kick"
Player:Kick( string reason=No reason given ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Kicks the player from the server.

 Arguments

 string reason=No reason given


Reason to show for disconnection.



WARNING


This will be shortened to ~512 chars, though this includes the command itself and the player index so will realistically be more around ~498. It is recommended to avoid going near the limit to avoid truncation.



 Examples
 Example
Kick a player with reason Goodbye

ply:Kick( Goodbye )


"Player/IsWorldClicking"
Player:IsWorldClicking(  ) 
 Description
Returns if the player is in the context menu.



NOTE


Although this is shared, it will only work properly on the CLIENT for the local player. Using this serverside or on other players will return false.


 Returns

 boolean


Is the player world clicking or not.


"Player/Kill"
Player:Kill(  ) 
 Description
Kills a player and calls GM:PlayerDeath.

 Examples
 Example
When the user types /respawn the user will be killed and then respawned.

hook.Add( PlayerSay, RespawnCommand, function( ply, text, public )
	if ( string.lower( text ) == /respawn ) then
		ply:Kill()
		ply:Spawn()
		return 
	end
end )


"Player/LastHitGroup"
Player:LastHitGroup(  ) 
 Description
Returns the hitgroup where the player was last hit.

 Returns

 number


Hitgroup, see HITGROUP_ Enums


"Player/MotionSensorPos"
Player:MotionSensorPos( number bone ) 
 Description
Returns the position of a Kinect bone.

 Arguments

 number bone


Bone to get the position of. Must be from 0 to 19.

 Returns

 Vector


Position of the bone.


"Player/LagCompensation"
Player:LagCompensation( boolean lagCompensation ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
This allows the server to mitigate the lag of the player by moving back all the entities that can be lag compensated to the time the player attacked with his weapon.
This technique is most commonly used on things that hit other entities instantaneously, such as traces.



NOTE


Entity:FireBullets calls this function internally.


Lag compensation only works for players and entities that have been enabled with Entity:SetLagCompensated
Despite being defined shared, it can only be used server side in a Predicted Hook.



WARNING


This function NEEDS to be disabled after youre done with it or it will break the movement of the entities affected!


 Arguments

 boolean lagCompensation


The state of the lag compensation, true to enable and false to disable.

 Examples
 Example
Do a crowbar-like melee trace, enabling lag compensation before doing so.

function SWEP:PrimaryAttack()

	local tracedata = {}

	tracedata.start = self.Owner:GetShootPos()
	tracedata.endpos = self.Owner:GetShootPos() + self.Owner:GetAimVector() * 75
	tracedata.filter = self.Owner
	tracedata.mins =  Vector( -8 , -8 , -8 )
	tracedata.maxs =  Vector( 8 , 8 , 8 )
	
	-- It is recommended to use an IsPlayer check in case the weapon is being used by an NPC.
	if ( self.Owner:IsPlayer() ) then
		self.Owner:LagCompensation( true )
	end
	
	local tr = util.TraceHull( tracedata )
	
	if ( self.Owner:IsPlayer() ) then
		self.Owner:LagCompensation( false )
	end
	
	if ( tr.Hit ) then
		print( tr.Entity )	--your code here
	end
	
	self:SetNextPrimaryFire( CurTime() + 0.5 )
end


"Player/LimitHit"
Player:LimitHit( string type ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Shows limit hit notification in sandbox.



NOTE


This function is only available in Sandbox and its derivatives


 Arguments

 string type


Type of hit limit

 Examples
 Example
Sends a fake limit hit notification

for id, ply in pairs( player.GetAll() ) do
       ply:LimitHit( test )
end
Output:

A notification pops up saying SBoxLimit_test


"Player/Ping"
Player:Ping(  ) 
 Description
Returns the players ping to server.

 Returns

 number


The players ping.


"Player/KillSilent"
Player:KillSilent(  ) 
 Description
Kills a player without notifying the rest of the server.
This will call GM:PlayerSilentDeath instead of GM:PlayerDeath.

 Examples
 Example
Silently kills the player.

Player( 2 ):KillSilent()


"Player/Lock"
Player:Lock(  ) 
 Description
Stops a player from using any inputs, such as moving, turning, or attacking. Key binds are still called. Similar to Player:Freeze but the player takes no damage.
Adds the FL_FROZEN and FL_GODMODE flags to the player.


"Player/KeyReleased"
Player:KeyReleased( number key ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Gets whether a key was just released this tick

 Arguments

 number key


The key, see IN_ Enums

 Returns

 boolean


Was released or not

 Examples
 Example
Prints whenever the first player first stops pressing W

hook.Add( Tick, CheckPlayer1Forward, function()
   if ( Entity( 1 ):KeyReleased( IN_FORWARD ) then print( Ent1 just stopped moving forward! ) end
end )


"Player/Name"
Player:Name(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the players name. Identical to Player:Nick and Player:GetName.

 Returns

 string


Players Steam name.



BUG


This is limited to 31 characters even though Steam names can have 32.




 Examples
 Example
Prints the players name in console.

print( Player( 1 ):Name() )
Output:

YourNameHere


"Player/PacketLoss"
Player:PacketLoss(  ) 
 Description
Returns the packet loss of the client. It is not networked so it only returns 0 when run clientside.

 Returns

 number


name=packetsLost


"Player/Nick"
Player:Nick(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the players nickname.

 Returns

 string


Players Steam name



BUG


This is limited to 31 characters even though Steam names can have 32.




 Examples
 Example
Prints the players nickname

print( Entity( 1 ):Nick() )
Output:

Ninja101


"Player/PickupObject"
Player:PickupObject( Entity entity ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
This makes the player hold ( same as pressing E on a small prop ) the provided entity.



NOTE


Dont get this confused with picking up items like ammo or health kits




NOTE


This picks up the passed entity regardless of its mass or distance from the player


 Arguments

 Entity entity


Entity to pick up.

 Examples
 Example
An extra function to make sure the object isnt held before being picked up.

function PlayerPickupObject( ply, obj )
	if ( obj:IsPlayerHolding() ) then return end
	ply:PickupObject( obj )
end


"Player/PhysgunUnfreeze"
Player:PhysgunUnfreeze(  ) 
 Description
Unfreezes the props player is looking at. This is essentially the same as pressing reload with the physics gun, including double press for unfreeze all.

 Returns

 number


Number of props unfrozen.


"Player/PrintMessage"
Player:PrintMessage( number type, string message ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Displays a message either in their chat, console, or center of the screen. See also PrintMessage.



NOTE


When called serverside, this uses the archaic user message system (the umsg library) and hence is limited to &#x2248;250 characters.




NOTE


HUD_PRINTCENTER will not work when this is called clientside.


 Arguments

 number type


Which type of message should be sent to the player (HUD_ Enums)

 Arguments

 string message


Message to be sent to the player

 Examples
 Example
Prints into the first players chat: Im new here.

Entity( 1 ):PrintMessage( HUD_PRINTTALK, Im new here. )
Output:

Im new here.


"Player/RemoveAmmo"
Player:RemoveAmmo( number ammoCount, string ammoName ) 
 Description
Removes the amount of the specified ammo from the player.

 Arguments

 number ammoCount


The amount of ammunition to remove.

 Arguments

 string ammoName


The name of the ammunition to remove from. This can also be a number ammoID.


"Player/PlayStepSound"
Player:PlayStepSound( number volume ) 
 Description
Plays the correct step sound according to what the player is staying on.

 Arguments

 number volume


Volume for the sound, in range from 0 to 1


"Player/RemoveSuit"
Player:RemoveSuit(  ) 
 Description
Strips the players suit item.


"Player/RemoveAllItems"
Player:RemoveAllItems(  ) 
 Description
Removes all weapons and ammo from the player.


"Player/RemoveAllAmmo"
Player:RemoveAllAmmo(  ) 
 Description
Removes all ammo from a certain player

 Examples
 Example
Removes all the ammo from the player with the ID 1

player.GetByID( 1 ):RemoveAllAmmo()
Output:

Player 1 has no ammo anymore


"Player/ResetHull"
Player:ResetHull(  ) 
 Description
Resets both normal and duck hulls to their default values.


"Player/ScreenFade"
Player:ScreenFade( number flags, number clr=color_white, number fadeTime, number fadeHold ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Fades the screen

 Arguments

 number flags


Fade flags defined with SCREENFADE_ Enums.

 Arguments

 number clr=color_white


The color of the screenfade

 Arguments

 number fadeTime


Fade(in/out) effect transition time ( From no fade to full fade and vice versa )

 Arguments

 number fadeHold


Fade effect hold time

 Examples
 Example
Flashes the screen red to nothing over 0.3 seconds when a player gets hurt.

hook.Add( PlayerHurt, hurt_effect_fade, function( ply )
	ply:ScreenFade( SCREENFADE.IN, Color( 255, 0, 0, 128 ), 0.3, 0 )
end )


"Player/SendLua"
Player:SendLua( string script ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Executes a simple Lua string on the player.
Note: The string is limited to 254 bytes. Consider using the net library for more advanced server-client interaction.

 Arguments

 string script


The script to execute.

 Examples
 Example
Sends Hello World to the clients console.

local pl = Entity( 1 )
pl:SendLua( print( Hello World ) )


"Player/SendHint"
Player:SendHint( string name, number delay ) 
 Description
Sends a hint to a player.



NOTE


This function is only available in Sandbox and its derivatives. Since this adds #Hint_ to the beginning of each message, you should only use it with default hint messages, or those cached with language.Add. For hints with custom text, look at notification.AddLegacy


 Arguments

 string name


Name/class/index of the hint. The text of the hint will contain this value. ( #Hint_ .. name ) An example is PhysgunFreeze.

 Arguments

 number delay


Delay in seconds before showing the hint


"Player/SetActiveWeapon"
Player:SetActiveWeapon( Weapon weapon ) 
 Description
Sets the players active weapon. You should use CUserCmd:SelectWeapon or Player:SelectWeapon, instead in most cases.



NOTE


This function will not trigger the weapon switch event or associated equip animations. You can achieve this using Player:SelectWeapon with Entity:GetClass.




NOTE


This will not call GM:PlayerSwitchWeapon.


 Arguments

 Weapon weapon


The weapon to equip.


"Player/SetAmmo"
Player:SetAmmo( number ammoCount, any ammoType ) 
 Description
Sets the amount of the specified ammo for the player.

 Arguments

 number ammoCount


The amount of ammunition to set.

 Arguments

 any ammoType


The ammunition type. Can be either number ammo ID or string ammo name.


"Player/Say"
Player:Say( string text, boolean teamOnly=false ) 
 Description
Forces the player to say whatever the first argument is. Works on bots too.



NOTE


This function ignores the default chat message cooldown


 Arguments

 string text


The text to force the player to say.

 Arguments

 boolean teamOnly=false


Whether to send this message to our own team only.


"Player/SetCanWalk"
Player:SetCanWalk( boolean abletowalk ) 
 Description
Set if the player should be allowed to walk using the (default) alt key.

 Arguments

 boolean abletowalk


True allows the player to walk.


"Player/SetArmor"
Player:SetArmor( number Amount ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the player armor to the argument.

 Arguments

 number Amount


The amount that the player armor is going to be set to.

 Examples
 Example
Sets the player armor to 100 when he types GiveArmor at the console.

concommand.Add( GiveArmor, function( ply )
 ply:SetArmor( 100 )
end )
Output:

Sets the player armor to 100


"Player/SetCurrentViewOffset"
Player:SetCurrentViewOffset( Vector viewOffset ) 
 Description
Sets the actual view offset which equals the difference between the players actual position and their view when standing.
Do not confuse with Player:SetViewOffset and Player:SetViewOffsetDucked

 Arguments

 Vector viewOffset


The new view offset.


"Player/SetCrouchedWalkSpeed"
Player:SetCrouchedWalkSpeed( number speed ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the crouched walk speed multiplier.
Doesnt work for values above 1.
See also Player:SetWalkSpeed and Player:GetCrouchedWalkSpeed.

 Arguments

 number speed


The walk speed multiplier that crouch speed should be.

 Examples
 Example
Set the crouch speed to be as fast as the players walk speed.

Entity( 1 ):SetCrouchedWalkSpeed( 1 )
Output:

The player will crouch-walk as fast as normal walking.


"Player/SetAvoidPlayers"
Player:SetAvoidPlayers( boolean avoidPlayers ) 
 Description
Pushes the player away from another player whenever its inside the other players bounding box.

 Arguments

 boolean avoidPlayers


Avoid or not avoid.


"Player/SetDrivingEntity"
Player:SetDrivingEntity( Entity drivingEntity=NULL, number drivingMode ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Sets the driving entity and driving mode.
Use drive.PlayerStartDriving instead, see Entity Driving.

 Arguments

 Entity drivingEntity=NULL


The entity the player should drive.

 Arguments

 number drivingMode


The driving mode index.


"Player/SelectWeapon"
Player:SelectWeapon( string className ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Sets the active weapon of the player by its class name.



WARNING


This will switch the weapon out of prediction, causing delay on the client and WEAPON:Deploy to be called out of prediction. Try using CUserCmd:SelectWeapon or input.SelectWeapon, instead.




NOTE


This will trigger the weapon switch event and associated animations. To switch weapons silently, use Player:SetActiveWeapon.


 Arguments

 string className


The class name of the weapon to switch to.The player must already have this weapon. You can use Player:Give if not.

 Examples
 Example
Force the player to switch to toolgun

Entity( 1 ):SelectWeapon( gmod_tool )


 Examples
 Example
Selects a random weapon from the players inventory and switches to it.

local weapons = Entity( 1 ):GetWeapons()
local weapon = weapons[ math.random( #weapons ) ]

Entity( 1 ):SelectWeapon( weapon:GetClass() )


"Player/SetDSP"
Player:SetDSP( number soundFilter, boolean fastReset ) 
 Description
Applies the specified sound filter to the player.

 Arguments

 number soundFilter



 Arguments

 boolean fastReset


If set to true the sound filter will be removed faster.


"Player/SetDeaths"
Player:SetDeaths( number deathcount ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets a players death count

 Arguments

 number deathcount


Number of deaths (positive or negative)

 Examples
 Example
Sets the deaths of player 1 to 5

player.GetByID( 1 ):SetDeaths( 5 )
Output:

None


"Player/SetDuckSpeed"
Player:SetDuckSpeed( number duckSpeed ) 
 Description
Sets how quickly a player ducks.



BUG


This will not work for values &gt;= 1.



 Arguments

 number duckSpeed


How quickly the player will duck.


"Player/RemovePData"
Player:RemovePData( string key ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Removes a Player Data key-value pair from the SQL database. (sv.db when called on server, cl.db when called on client)
Internally uses the sql library.



WARNING


This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). Its recommended that you dont use it. See the related wiki page for more information.


 Arguments

 string key


Key to remove

 Returns

 boolean


true is succeeded, false otherwise

 Examples
 Example
Deletes the key money from player 1

player.GetByID( 1 ):RemovePData( money )


"Player/SetCanZoom"
Player:SetCanZoom( boolean canZoom ) 
 Description
Sets whether the player can use the HL2 suit zoom (+zoom bind) or not.

 Arguments

 boolean canZoom


Whether to make the player able or unable to zoom.


"Player/SetAllowFullRotation"
Player:SetAllowFullRotation( boolean Allowed ) 
 Description
Set if the players model is allowed to rotate around the pitch and roll axis.

 Arguments

 boolean Allowed


Allowed to rotate


"Player/SetFOV"
Player:SetFOV( number fov, number time ) 
 Description
Set a players FOV (Field Of View) over a certain amount of time.

 Arguments

 number fov


the angle of perception (FOV). Set to 0 to return to default user FOV. ( Which is ranging from 75 to 90, depending on user settings )

 Arguments

 number time


the time it takes to transition to the FOV expressed in a floating point.


"Player/SetAllowWeaponsInVehicle"
Player:SetAllowWeaponsInVehicle( boolean allow ) 
 Description
Allows player to use his weapons in a vehicle. You need to call this before entering a vehicle.



BUG


Shooting in a vehicle fires two bullets.





BUG


Weapon viewpunch does not decay while in a vehicle, leading to incorrect aim angles.



 Arguments

 boolean allow


Show we allow player to use his weapons in a vehicle or not.


"Player/SetHoveredWidget"
Player:SetHoveredWidget( Entity widget=NULL ) 
 Description
Sets the widget that is currently hovered by the players mouse.

 Arguments

 Entity widget=NULL


The widget entity that the player is hovering.


"Player/SetHands"
Player:SetHands( Entity hands ) 
 Description
Sets the hands entity of a player.
The hands entity is an entity introduced in Garrys Mod 13 and its used to show the players hands attached to the viewmodel.
This is similar to the approach used in L4D and CS:GO, for more information on how to implement this system in your gamemode visit Using Viewmodel Hands.

 Arguments

 Entity hands


The hands entity to set


"Player/SetFrags"
Player:SetFrags( number fragcount ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets a players frags (kills)

 Arguments

 number fragcount


Number of frags (positive or negative)

 Examples
 Example
Sets the frags of player 1 to 9001

player.GetByID( 1 ):SetFrags( 9001 )


"Player/SetHull"
Player:SetHull( Vector hullMins, Vector hullMaxs ) 
 Description
Sets the mins and maxs of the AABB of the players collision.



BUG


Setting both the mins and maxs to Vector(0,0,0) will crash the game.



 Arguments

 Vector hullMins


The min coordinates of the hull.

 Arguments

 Vector hullMaxs


The max coordinates of the hull.


"Player/SetClassID"
Player:SetClassID( number classID ) 
 Description
Sets the players class id.

 Arguments

 number classID


The class id the player is being set with.


"Player/SetHullDuck"
Player:SetHullDuck( Vector hullMins, Vector hullMaxs ) 
 Description
Sets the mins and maxs of the AABB of the players collision when ducked.

 Arguments

 Vector hullMins


The min coordinates of the hull.

 Arguments

 Vector hullMaxs


The max coordinates of the hull.


"Player/SetEyeAngles"
Player:SetEyeAngles( Angle angle ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the angle of the players view (may rotate body too if angular difference is large)

 Arguments

 Angle angle


Angle to set the view to

 Examples
 Example
Points a player at Vector(0,0,0)

local ply = LocalPlayer() // Or any player
local vec1 = Vector( 0,0,0 ) -- Where were looking at
local vec2 = ply:GetShootPos() -- The players eye pos
ply:SetEyeAngles( ( vec1 - vec2 ):Angle() ) -- Sets to the angle between the two vectors
Output:

Local player will look at 0,0,0


"Player/SetLaggedMovementValue"
Player:SetLaggedMovementValue( number timescale ) 
 Description
Slows down the player movement simulation by the timescale, this is used internally in the HL2 weapon stripping sequence.
It achieves such behavior by multiplying the FrameTime by the specified timescale at the start of the movement simulation and then restoring it afterwards.



NOTE


This is reset to 1 on spawn




NOTE


There is no weapon counterpart to this, youll have to hardcode the multiplier in the weapon or call Weapon:SetNextPrimaryFire / Weapon:SetNextSecondaryFire manually from a Predicted Hook


 Arguments

 number timescale


The timescale multiplier.


"Player/SetMuted"
Player:SetMuted( boolean mute ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets if the player should be muted locally.



BUG


This only works correctly for the first 32 players. Using this function on players with a UserID 32 or above will apply the muting to the user with ID% 32. For example, Player(54):SetMuted(true) will actually mute player 22 since 54% 32 = 22.



 Arguments

 boolean mute


Mute or unmute.

 Examples
 Example
Mutes all players on the server

for k, v in pairs( player.GetAll() ) do
	v:SetMuted( true )
end


"Player/SetJumpPower"
Player:SetJumpPower( number jumpPower ) 
 Description
Sets the jump power, eg. the velocity the player will applied to when he jumps.

 Arguments

 number jumpPower


The new jump velocity.


"Player/SetMaxSpeed"
Player:SetMaxSpeed( number walkSpeed ) 
 Description
Sets the maximum speed which the player can move at.



NOTE


This is called automatically by the engine. If you wish to limit player speed without setting their run/sprint speeds, see CMoveData:SetMaxClientSpeed.


 Arguments

 number walkSpeed


The maximum speed.


"Player/SetNoTarget"
Player:SetNoTarget( boolean visibility ) 
 Description
Sets the players visibility towards NPCs.

 Arguments

 boolean visibility


The visibility.


"Player/SetPData"
Player:SetPData( string key, any value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Writes a Player Data key-value pair to the SQL database. (sv.db when called on server, cl.db when called on client)
Internally uses the sql library.



WARNING


This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). Its recommended that you dont use it. See the related wiki page for more information.




NOTE


PData is not networked from servers to clients!


 Arguments

 string key


Name of the PData key

 Arguments

 any value


Value to write to the key (must be an SQL valid data type, such as a string or integer)

 Returns

 boolean


Whether the operation was successful or not

 Examples
 Example
Sets the key money from player 1s PData to 100

player.GetByID( 1 ):SetPData( money, 100 )


"Player/SetNoCollideWithTeammates"
Player:SetNoCollideWithTeammates( boolean shouldNotCollide ) 
 Description
Sets whenever the player should not collide with their teammates.



BUG


This only works with Player:Team IDs 1-4. This also has major collision issues.



 Arguments

 boolean shouldNotCollide


True to disable, false to enable collision.


"Player/SetPlayerColor"
Player:SetPlayerColor( Vector Color ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Sets the player models color. The part of the model that is colored is determined by the model itself, and is different for each model.

 Arguments

 Vector Color


This is the color to be set. The format is Vector(r,g,b), and each color should be between 0 and 1.

 Examples
 Example
When a player spawns their color will be red.

function GM:PlayerSpawn( ply )
	ply:SetPlayerColor( Vector( 1,0,0 ) )
end


 Examples
 Example
A function you could use to set the players color to a Color rather than a Vector

local function SetColor( ply, color )
	ply:SetPlayerColor( Vector( color.r / 255, color.g / 255, color.b / 255 ) )
end


"Player/SetPressedWidget"
Player:SetPressedWidget( Entity pressedWidget=NULL ) 
 Description
Sets the widget that is currently in use by the players mouse.
Having a pressed widget stops the player from firing his weapon to allow input to be passed onto the widget.

 Arguments

 Entity pressedWidget=NULL


The widget the player is currently using.


"Player/SetRunSpeed"
Player:SetRunSpeed( number runSpeed ) 
 Description
Sets the players sprint speed.
See also Player:GetRunSpeed, Player:SetWalkSpeed and Player:SetMaxSpeed.

 Arguments

 number runSpeed


The new sprint speed when sv_friction is below 10. Higher sv_friction values will result in slower speed.

Has to be 7 or above or the player wont be able to move.


"Player/SetStepSize"
Player:SetStepSize( number stepHeight ) 
 Description
Sets the maximum height a player can step onto without jumping.

 Arguments

 number stepHeight


The new maximum height the player can step onto without jumping


"Player/SetSuppressPickupNotices"
Player:SetSuppressPickupNotices( boolean doSuppress ) 
 Description
Sets whenever to suppress the pickup notification for the player.

 Arguments

 boolean doSuppress


Whenever to suppress the notice or not.


"Player/SetTeam"
Player:SetTeam( number Team ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the player to the chosen team.

 Arguments

 number Team


The team that the player is being set to.

 Examples
 Example
Sets the players team to the first argument when writing set_team into the console and respawns the player afterwards, ex. set_team 1.

function ChangeMyTeam( ply, cmd, args )
    ply:SetTeam( args[1] )
    ply:Spawn()
end
concommand.Add( set_team, ChangeMyTeam )
Output:

Sets the player to team 1 and respawns him/her.


"Player/SetupHands"
Player:SetupHands( Entity ent ) 
 Description
Sets up the players view model hands. Calls GM:PlayerSetHandsModel to set the model of the hands.

 Arguments

 Entity ent


If the player is spectating an entity, this should be the entity the player is spectating, so we can use its hands model instead.


"Player/SetUnDuckSpeed"
Player:SetUnDuckSpeed( number UnDuckSpeed ) 
 Description
Sets how quickly a player un-ducks

 Arguments

 number UnDuckSpeed


How quickly the player will un-duck


"Player/SetViewOffset"
Player:SetViewOffset( Vector viewOffset ) 
 Description
Sets the desired view offset which equals the difference between the players actual position and their view when standing.
If you want to set actual view offset, use Player:SetCurrentViewOffset
See also Player:SetViewOffsetDucked for desired view offset when crouching.

 Arguments

 Vector viewOffset


The new desired view offset when standing.


"Player/SetViewEntity"
Player:SetViewEntity( Entity viewEntity ) 
 Description
Attaches the players view to the position and angles of the specified entity.

 Arguments

 Entity viewEntity


The entity to attach the player view to.


"Player/SetRenderAngles"
Player:SetRenderAngles( Angle ang ) 
 Description
Sets the render angles of a player.

 Arguments

 Angle ang


The new render angles to set


"Player/SetObserverMode"
Player:SetObserverMode( number mode ) 
 Description
Sets the players observer mode. You must start the spectating first with Player:Spectate.

 Arguments

 number mode


Spectator mode using OBS_MODE_ Enums.


"Player/SetViewOffsetDucked"
Player:SetViewOffsetDucked( Vector viewOffset ) 
 Description
Sets the desired view offset which equals the difference between the players actual position and their view when crouching.
If you want to set actual view offset, use Player:SetCurrentViewOffset
See also Player:SetViewOffset for desired view offset when standing.

 Arguments

 Vector viewOffset


The new desired view offset when crouching.


"Player/ShouldDropWeapon"
Player:ShouldDropWeapon( boolean drop ) 
 Description
Sets whether the players current weapon should drop on death.
NOTE! This seems to be reset to false when player dies.

 Arguments

 boolean drop


Whether to drop the players current weapon or not


"Player/SetWalkSpeed"
Player:SetWalkSpeed( number walkSpeed ) 
 Description
Sets the players normal walking speed. Not sprinting, not slow walking +walk.
There currently is no way to modify the slow walking +walk speed.
See also Player:GetWalkSpeed, Player:SetCrouchedWalkSpeed, Player:SetMaxSpeed and Player:SetRunSpeed.



BUG


Using a speed of 0 can lead to prediction errors.



 Arguments

 number walkSpeed


The new walk speed when sv_friction is below 10. Higher sv_friction values will result in slower speed.

Has to be 7 or above or the player wont be able to move.


"Player/SetWeaponColor"
Player:SetWeaponColor( Vector Color ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the player weapons color. The part of the model that is colored is determined by the model itself, and is different for each model.

 Arguments

 Vector Color


This is the color to be set. The format is Vector(r,g,b), and each color should be between 0 and 1.

 Examples
 Example
When a player spawns their weapons color will be red.

function GM:PlayerSpawn( ply )
 ply:SetWeaponColor( Vector( 1,0,0 ) )
end


"Player/SetViewPunchAngles"
Player:SetViewPunchAngles( Angle punchAngle ) 
 Description
Sets clients view punch. See Player:ViewPunch

 Arguments

 Angle punchAngle


The angle to set.


"Player/SetUserGroup"
Player:SetUserGroup( string groupName ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the usergroup of the player.

 Arguments

 string groupName


The user group of the player.

 Examples
 Example
Make the player superadmin and print their group.

Entity( 1 ):SetUserGroup( superadmin )
print( Entity( 1 ):GetUserGroup() )
Output:

superadmin


"Player/SimulateGravGunDrop"
Player:SimulateGravGunDrop( Entity ent ) 
 Description
Signals the entity that it was dropped by the gravity gun.

 Arguments

 Entity ent


Entity that was dropped.


"Player/Spectate"
Player:Spectate( number mode ) 
 Description
Starts spectate mode for given player. This will also affect the players movetype in some cases.

 Arguments

 number mode


Spectate mode, see OBS_MODE_ Enums.


"Player/ShouldDrawLocalPlayer"
Player:ShouldDrawLocalPlayer(  ) 
 Description
Polls the engine to request if the player should be drawn at the time the function is called.

 Returns

 boolean


shouldDraw


"Player/SimulateGravGunPickup"
Player:SimulateGravGunPickup( Entity ent ) 
 Description
Signals the entity that it was picked up by the gravity gun. This call is only required if you want to simulate the situation of picking up objects.

 Arguments

 Entity ent


The entity picked up


"Player/ShowProfile"
Player:ShowProfile(  ) 
 Description
Opens the player steam profile page in the steam overlay browser.


"Player/SprintDisable"
Player:SprintDisable(  ) 
 Description
Disables the sprint on the player.



BUG


Not working - use Player:SetRunSpeed or CMoveData:SetMaxSpeed in a GM:Move hook, instead.



 Examples
 Example
Stops and prevents player with ID 1 from sprinting

player.GetByID( 1 ):SprintDisable()
Output:

None, but Player 1s sprint is disabled.


"Player/SprintEnable"
Player:SprintEnable(  ) 
 Description
Enables the sprint on the player.



BUG


Not working - use Player:SetRunSpeed or CMoveData:SetMaxSpeed in a GM:Move hook, instead.



 Examples
 Example
Allows the player with ID 1 to use the sprint (&#x21E7; Shift by default) feature.

player.GetByID( 1 ):SprintEnable()
Output:

None, but Player 1s sprint is enabled.


"Player/SpectateEntity"
Player:SpectateEntity( Entity entity ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Makes the player spectate the entity
To get the applied spectated entity, use Player:GetObserverTarget().



BUG


The players position will not update while spectating, causing area portals and other map optimisations to not work properly. You can fix this by setting the players position to the spectated entitys each tick.



 Arguments

 Entity entity


Entity to spectate.

 Examples
 Example
Creates a entity, spectates it and after 5 seconds, stops spectating it.

local ent = ents.Create( prop_physics )
ent:SetModel( models/hunter/misc/sphere025x025.mdl )
ent:SetPos( Vector( 0, 0, 0 ) )
ent:Spawn()
 
for _, ply in pairs( player.GetAll() ) do
	ply:Spectate( OBS_MODE_CHASE )
	ply:SpectateEntity( ent )
	ply:StripWeapons()

	timer.Simple( 5, function()
		ply:UnSpectate()
		ply:Spawn()
	end )
end


"Player/SprayDecal"
Player:SprayDecal( Vector sprayOrigin, Vector sprayEndPos ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Makes a player spray their decal.

 Arguments

 Vector sprayOrigin


The location to spray from

 Arguments

 Vector sprayEndPos


The location to spray to

 Examples
 Example
Makes the player spray their decal 5000 units away.

ply:SprayDecal( ply:EyePos(),ply:EyePos() + ply:GetAimVector()*5000 )


"Player/StartSprinting"
Player:StartSprinting(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.
Doesnt appear to do anything.

 Examples
 Example
An example alternative to this function.

local vDelay = 0
local prevDown = 0
hook.Add( StartCommand, TestFunc, function( ply, cmd )
    if ( cmd:KeyDown( IN_FORWARD ) and prevDown == false ) then
        vDelay = CurTime() + 0.4
    elseif ( cmd:KeyDown( IN_FORWARD ) ) then
        if ( vDelay &lt; CurTime() )then
            cmd:SetButtons( bit.bor( cmd:GetButtons(), IN_SPEED ) )
        end
    end
	prevDown = cmd:KeyDown( IN_FORWARD )
end )


"Player/StopZooming"
Player:StopZooming(  ) 
 Description
Turns off the zoom mode of the player. (+zoom console command)
Basically equivalent of entering -zoom into players console.


"Player/SteamID64"
Player:SteamID64(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the players 64bit SteamID aka CommunityID.
In singleplayer, this will return no value serverside.
For bots, this will return 90071996842377216 (equivalent to STEAM_0:0:0) for the first bot to join.
For each additional bot, the number increases by 1. So the next bot will be 90071996842377217 (STEAM_0:1:0) then 90071996842377218 (STEAM_0:0:1) and so on.
On the client it returns no value for bots.

 Returns

 string


Players 64bit SteamID aka CommunityID.

 Examples
 Example
Prints the 64bit SteamID of player

print( ply:SteamID64() )
Output:

64bit SteamID (about 20 digits)


"Player/StopWalking"
Player:StopWalking(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.
When used in a GM:SetupMove hook, this function behaves unexpectedly by preventing the player from sprinting similar to Player:StopSprinting.

 Examples
 Example
Disables Sprinting, not Walking.

hook.Add( SetupMove, TestFunc, function( ply, mv, cmd )
	ply:StopWalking()
end )


"Player/StripAmmo"
Player:StripAmmo(  ) 
 Description
Removes all ammo from the player.


"Player/SteamID"
Player:SteamID(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the players SteamID. In singleplayer, this will be STEAM_ID_PENDING serverside.
For Bots this will return BOT on the server and on the client it returns NULL.

 Returns

 string


SteamID

 Examples
 Example
Prints the EntityID, Name and SteamID of all players

for k, v in pairs( player.GetAll() ) do
     print( [ .. v:EntIndex() .. ], v:Name(), v:SteamID() )
end
Output:

A list consisting of every players EntityID, Name &amp; SteamID on the server.


"Player/StripWeapons"
Player:StripWeapons(  ) 
 Description
Removes all weapons from a certain player

 Examples
 Example
Removes all the weapons from the player with the ID 1

player.GetByID( 1 ):StripWeapons()
Output:

Player 1 has no weapons anymore


"Player/StopSprinting"
Player:StopSprinting(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.
When used in a GM:SetupMove hook, this function will prevent the player from sprinting.
When +walk is engaged, the player will still be able to sprint to half speed (normal run speed) as opposed to full sprint speed without this function.

 Examples
 Example
Example usage, disables sprinting at all times.

hook.Add( SetupMove, TestFunc, function( ply, mv, cmd )
	ply:StopSprinting()
end )


"Player/StartWalking"
Player:StartWalking(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.
When used in a GM:SetupMove hook, this function will force the player to walk, as well as preventing the player from sprinting.

 Examples
 Example
Example usage, forces the player to walk. (+walk console command)

hook.Add( SetupMove, TestFunc, function( ply, mv, cmd )
	ply:StartWalking()
end )


"Player/SwitchToDefaultWeapon"
Player:SwitchToDefaultWeapon(  ) 
 Description
Attempts to switch the player weapon to the one specified in the cl_defaultweapon convar, if the player does not own the specified weapon nothing will happen.
If you want to switch to a specific weapon, use: Player:SetActiveWeapon


"Player/SuppressHint"
Player:SuppressHint( string name ) 
 Description
Prevents a hint from showing up.



NOTE


This function is only available in Sandbox and its derivatives


 Arguments

 string name


Hint name/class/index to prevent from showing up


"Player/TimeConnected"
Player:TimeConnected(  ) 
 Description
Returns the time in second since the player connected.

 Returns

 number


connectTime


"Player/Team"
Player:Team(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the players team ID.
Returns 0 clientside when the game is not fully loaded.

 Returns

 number


The players teams index number, as in the TEAM_ Enums or a custom team defined in team.SetUp.

 Examples
 Example
Prints the name of the players team

print( team.GetName( Entity( 1 ):Team() ) )
Output:

Something like Unassigned in console.


"Player/StripWeapon"
Player:StripWeapon( string weapon ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Removes the specified weapon class from a certain player

 Arguments

 string weapon


The weapon class to remove

 Examples
 Example
Removes the crowbar from the player with the ID 1

player.GetByID( 1 ):StripWeapon( weapon_crowbar )
Output:

Crowbar removed from player 1


"Player/TranslateWeaponActivity"
Player:TranslateWeaponActivity( number act ) 
 Description
Translates ACT_ Enums according to the holdtype of players currently held weapon.

 Arguments

 number act


The initial ACT_ Enums

 Returns

 number


Translated ACT_ Enums


"Player/TraceHullAttack"
Player:TraceHullAttack( Vector startPos, Vector endPos, Vector mins, Vector maxs, number damage, Vector damageFlags, number damageForce, boolean damageAllNPCs ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Returns


 Description
Performs a trace hull and applies damage to the entities hit, returns the first entity hit.

 Arguments

 Vector startPos


The start position of the hull trace.

 Arguments

 Vector endPos


The end position of the hull trace.

 Arguments

 Vector mins


The minimum coordinates of the hull.

 Arguments

 Vector maxs


The maximum coordinates of the hull.

 Arguments

 number damage


The damage to be applied.

 Arguments

 Vector damageFlags


Bitflag specifying the damage type, see DMG_ Enums.

 Arguments

 number damageForce


The force to be applied to the hit object.

 Arguments

 boolean damageAllNPCs


Whether to apply damage to all hit NPCs or not.

 Returns

 Entity


The hit entity


"Player/UniqueIDTable"
Player:UniqueIDTable( any key ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns a table that will stay allocated for the specific player between connects until the server shuts down. Note, that this table is not synchronized between client and server.

 Arguments

 any key


Unique table key.

 Returns

 table


The table that contains any info you have put in it.

 Examples
 Example
Example usage

local table = Entity( 1 ):UniqueIDTable( mytable )
table.MyValue = test

// Somewhere else
local table = Entity( 1 ):UniqueIDTable( mytable )
print( table.MyValue )
local table = Entity( 1 ):UniqueIDTable( mytable_other )
print( table.MyValue )
Output:

testnil


"Player/UniqueID"
Player:UniqueID(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description


WARNING


This function has collisions, where more than one player has the same UniqueID. It is highly recommended to use Player:AccountID, Player:SteamID or Player:SteamID64 instead, which are guaranteed to be unique to each player.


Returns a 32 bit integer that remains constant for a player across joins/leaves and across different servers. This can be used when a string is inappropriate - e.g. in a database primary key.



NOTE


In Singleplayer, this function will always return 1.


 Returns

 number


The players Unique ID

 Examples
 Example
Gets the Unique ID of a player.

Entity( 1 ):UniqueID()
Output:

Something like 1592073762
 Examples
 Example
Functional equivalent of this function.

local ply = Entity( 1 )
local uniqueid = util.CRC( gm_ .. ply:SteamID() .. _gm )
print( uniqueid )
Output:

Something like 1592073762


"Player/UnLock"
Player:UnLock(  ) 
 Description
Unlocks the player movement if locked previously. 
Will disable godmode for the player if locked previously.


"Player/UserID"
Player:UserID(  ) 
 Description
Returns the players ID.
You can use Player() to get the player by their ID.

 Returns

 number


The players user ID


"Player/UnfreezePhysicsObjects"
Player:UnfreezePhysicsObjects(  ) 
 Description
Unfreezes all objects the player has frozen with their Physics Gun. Same as double pressing R while holding Physics Gun.


"Player/UnSpectate"
Player:UnSpectate(  ) 
 Description
Stops the player from spectating another entity.


"Player/VoiceVolume"
Player:VoiceVolume(  ) 
 Description
Returns the players voice volume, how loud the players voice communication currently is, as a normal number. Doesnt work on local player unless the voice_loopback convar is set to 1.

 Returns

 number


The voice volume.


"Player/ViewPunch"
Player:ViewPunch( Angle PunchAngle ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Simulates a push on the clients screen.

 Arguments

 Angle PunchAngle


The angle in which to push the players screen.

 Examples
 Example
Knocks the players camera upward

player:ViewPunch( Angle( -10, 0, 0 ) )


"presets/GetTable"
presets.GetTable( string groupname ) 
 Description
Returns a table with preset names and values from a single preset group.

 Arguments

 string groupname


Preset group name.

 Returns

 table


All presets in specified group.


"Player/ViewPunchReset"
Player:ViewPunchReset( number tolerance=0 ) 
 Description
Resets the players view punch ( Player:ViewPunch ) effect back to normal.

 Arguments

 number tolerance=0


Reset all ViewPunch below this threshold.


"presets/BadNameAlert"
presets.BadNameAlert(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Used internally to tell the player that the name they tried to use in their preset is not acceptable.


"presets/Add"
presets.Add( string groupname, string name, table values ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Adds preset to a preset group.

 Arguments

 string groupname


The preset group name, usually its tool class name.

 Arguments

 string name


Preset name, must be unique.

 Arguments

 table values


A table of preset console commands.

 Examples
 Example
A simple faceposer preset.

presets.Add( face, Open Eyes, {
	faceposer_flex0	= 1,
	faceposer_flex1	= 1,
	faceposer_flex2	= 0,
	faceposer_flex3	= 0,
	faceposer_flex4	= 0,
	faceposer_flex5	= 0,
	faceposer_flex6	= 0,
	faceposer_flex7	= 0,
	faceposer_flex8	= 0,
	faceposer_flex9	= 0
} )


"presets/OverwritePresetPrompt"
presets.OverwritePresetPrompt( function callback ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Used internally to ask the player if they want to override an already existing preset.

 Arguments

 function callback


"presets/Rename"
presets.Rename( string groupname, string oldname, string newname ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Renames preset.

 Arguments

 string groupname


Preset group name

 Arguments

 string oldname


Old preset name

 Arguments

 string newname


New preset name


"presets/Exists"
presets.Exists( string type, string name ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns whether a preset with given name exists or not

 Arguments

 string type


The preset group name, usually its tool class name.

 Arguments

 string name


Name of the preset to test

 Returns

 boolean


true if the preset does exist


"ProjectedTexture/GetColor"
ProjectedTexture:GetColor(  ) 
 Description
Returns the color of the ProjectedTexture, which was previously set by ProjectedTexture:SetColor.



BUG


The returned color will not have the color metatable.



 Returns

 table


Color structure, the color of the ProjectedTexture.


"ProjectedTexture/GetConstantAttenuation"
ProjectedTexture:GetConstantAttenuation(  ) 
 Description
Returns the constant attenuation of the projected texture, which can also be set by ProjectedTexture:SetConstantAttenuation.

 Returns

 number


The constant attenuation


"presets/Remove"
presets.Remove( string groupname, string name ) 
 Description
Removes a preset entry from a preset group.

 Arguments

 string groupname


Preset group to remove from

 Arguments

 string name


Name of preset to remove


"ProjectedTexture/GetLinearAttenuation"
ProjectedTexture:GetLinearAttenuation(  ) 
 Description
Returns the linear attenuation of the projected texture, which can also be set by ProjectedTexture:SetLinearAttenuation.

 Returns

 number


The linear attenuation.


"ProjectedTexture/GetBrightness"
ProjectedTexture:GetBrightness(  ) 
 Description
Returns the brightness of the ProjectedTexture, which was previously set by ProjectedTexture:SetBrightness

 Returns

 number


The brightness of the ProjectedTexture.


"ProjectedTexture/GetEnableShadows"
ProjectedTexture:GetEnableShadows(  ) 
 Description
Returns whether shadows are enabled for this ProjectedTexture, which was previously set by ProjectedTexture:SetEnableShadows

 Returns

 boolean


Whether shadows are enabled.


"ProjectedTexture/GetAngles"
ProjectedTexture:GetAngles(  ) 
 Description
Returns the angle of the ProjectedTexture, which were previously set by ProjectedTexture:SetAngles

 Returns

 Angle


The angles of the ProjectedTexture.


"ProjectedTexture/GetPos"
ProjectedTexture:GetPos(  ) 
 Description
Returns the position of the ProjectedTexture, which was previously set by ProjectedTexture:SetPos

 Returns

 Vector


The position of the ProjectedTexture.


"ProjectedTexture/GetHorizontalFOV"
ProjectedTexture:GetHorizontalFOV(  ) 
 Description
Returns the horizontal FOV of the ProjectedTexture, which was previously set by ProjectedTexture:SetHorizontalFOV or ProjectedTexture:SetFOV

 Returns

 number


The horizontal FOV of the ProjectedTexture.


"ProjectedTexture/SetColor"
ProjectedTexture:SetColor( table color ) 
 Description
Sets the color of the projected texture.
You must call ProjectedTexture:Update after using this function for it to take effect.

 Arguments

 table color


Must be a Color structure.

Unlike other projected textures, this color can only go up to 255.


"ProjectedTexture/GetNearZ"
ProjectedTexture:GetNearZ(  ) 
 Description
Returns the NearZ value of the ProjectedTexture, which was previously set by ProjectedTexture:SetNearZ

 Returns

 number


NearZ of the ProjectedTexture.


"ProjectedTexture/GetFarZ"
ProjectedTexture:GetFarZ(  ) 
 Description
Returns the projection distance of the ProjectedTexture, which was previously set by ProjectedTexture:SetFarZ

 Returns

 number


The projection distance of the ProjectedTexture.


"ProjectedTexture/GetQuadraticAttenuation"
ProjectedTexture:GetQuadraticAttenuation(  ) 
 Description
Returns the quadratic attenuation of the projected texture, which can also be set by ProjectedTexture:SetQuadraticAttenuation.

 Returns

 number


The quadratic attenuation


"ProjectedTexture/GetVerticalFOV"
ProjectedTexture:GetVerticalFOV(  ) 
 Description
Returns the vertical FOV of the ProjectedTexture, which was previously set by ProjectedTexture:SetVerticalFOV or ProjectedTexture:SetFOV

 Returns

 number


The vertical FOV of the ProjectedTexture.


"ProjectedTexture/GetOrthographic"
ProjectedTexture:GetOrthographic(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Returns
5 Returns
6 Returns


 Description
Returns the current orthographic settings of the Projected Texture. To set these values, use ProjectedTexture:SetOrthographic.

 Returns

 boolean


Whether or not this projected texture is orthographic. When false, nothing else is returned.

 Returns

 number


left

 Returns

 number


top

 Returns

 number


right

 Returns

 number


bottom


"ProjectedTexture/GetTexture"
ProjectedTexture:GetTexture(  ) 
 Description
Returns the texture of the ProjectedTexture, which was previously set by ProjectedTexture:SetTexture

 Returns

 ITexture


The texture of the ProjectedTexture.


"ProjectedTexture/IsValid"
ProjectedTexture:IsValid(  ) 
 Description
Returns true if the projected texture is valid (i.e. has not been removed), false otherwise.
Instead of calling this directly its a good idea to call IsValid in case the variable is nil.

IsValid( ptexture )
This not only checks whether the projected texture is valid - but also checks whether its nil.

 Returns

 boolean


Whether the projected texture is valid.


"ProjectedTexture/GetTextureFrame"
ProjectedTexture:GetTextureFrame(  ) 
 Description
Returns the texture frame of the ProjectedTexture, which was previously set by ProjectedTexture:SetTextureFrame

 Returns

 number


The texture frame.


"ProjectedTexture/Remove"
ProjectedTexture:Remove(  ) 
 Description
Removes the projected texture. After calling this, ProjectedTexture:IsValid will return false, and any hooks with the projected texture as the identifier will be automatically deleted.


"ProjectedTexture/SetAngles"
ProjectedTexture:SetAngles( Angle angle ) 
 Description
Sets the angles (direction) of the projected texture.
You must call ProjectedTexture:Update after using this function for it to take effect.

 Arguments

 Angle angle


"ProjectedTexture/SetBrightness"
ProjectedTexture:SetBrightness( number brightness ) 
 Description
Sets the brightness of the projected texture.
You must call ProjectedTexture:Update after using this function for it to take effect.

 Arguments

 number brightness


The brightness to give the projected texture.


"ProjectedTexture/SetEnableShadows"
ProjectedTexture:SetEnableShadows( boolean newState ) 
 Description
Enable or disable shadows cast from the projected texture.



NOTE


as with all types of projected textures (including the players flashlight and env_projectedtexture), there can only be 8 projected textures with shadows enabled in total. This limit can be increased with the launch parameter:-numshadowtextures limitwhere limit is the new limit. Naturally, many projected lights with shadows enabled will drastically decrease framerate.


You must call ProjectedTexture:Update after using this function for it to take effect.

 Arguments

 boolean newState


"ProjectedTexture/SetPos"
ProjectedTexture:SetPos( Vector position ) 
 Description
Move the Projected Texture to the specified position.
You must call ProjectedTexture:Update after using this function for it to take effect.

 Arguments

 Vector position


"ProjectedTexture/SetHorizontalFOV"
ProjectedTexture:SetHorizontalFOV( number hFOV ) 
 Description
Sets the horizontal angle of projection without affecting the vertical angle.
You must call ProjectedTexture:Update after using this function for it to take effect.

 Arguments

 number hFOV


The new horizontal Field Of View for the projected texture. Must be in range between 0 and 180.


"ProjectedTexture/SetLinearAttenuation"
ProjectedTexture:SetLinearAttenuation( number linearAtten ) 
 Description
Sets the linear attenuation of the projected texture.
See also ProjectedTexture:SetConstantAttenuation and ProjectedTexture:SetQuadraticAttenuation.
The default value of linear attenuation when the projected texture is created is 100. (others are 0, as you are not supposed to mix them)
You must call ProjectedTexture:Update after using this function for it to take effect.

 Arguments

 number linearAtten


"ProjectedTexture/SetFOV"
ProjectedTexture:SetFOV( number fov ) 
 Description
Sets the angle of projection.
You must call ProjectedTexture:Update after using this function for it to take effect.

 Arguments

 number fov


Must be higher than 0 and lower than 180


"ProjectedTexture/SetFarZ"
ProjectedTexture:SetFarZ( number farZ ) 
 Description
Sets the distance at which the projected texture ends.
You must call ProjectedTexture:Update after using this function for it to take effect.

 Arguments

 number farZ


"ProjectedTexture/SetConstantAttenuation"
ProjectedTexture:SetConstantAttenuation( number constAtten ) 
 Description
Sets the constant attenuation of the projected texture.
See also ProjectedTexture:SetLinearAttenuation and ProjectedTexture:SetQuadraticAttenuation.
You must call ProjectedTexture:Update after using this function for it to take effect.

 Arguments

 number constAtten


"ProjectedTexture/SetVerticalFOV"
ProjectedTexture:SetVerticalFOV( number vFOV ) 
 Description
Sets the vertical angle of projection without affecting the horizontal angle.
You must call ProjectedTexture:Update after using this function for it to take effect.

 Arguments

 number vFOV


The new vertical Field Of View for the projected texture. Must be in range between 0 and 180.


"properties/GetHovered"
properties.GetHovered( Vector pos, Vector aimVec ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns an entity player is hovering over with his cursor.

 Arguments

 Vector pos


Eye position of local player, Entity:EyePos

 Arguments

 Vector aimVec


Aim vector of local player, Player:GetAimVector

 Returns

 Entity


The hovered entity


"ProjectedTexture/SetOrthographic"
ProjectedTexture:SetOrthographic( boolean orthographic, number left, number top, number right, number bottom ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example




 Description
Changes the current projected texture between orthographic and perspective projection.
You must call ProjectedTexture:Update after using this function for it to take effect.

 Arguments

 boolean orthographic


When false, all other arguments are ignored and the texture is reset to perspective projection.

 Arguments

 number left


The amount of units left from the projected textures origin to project.

 Arguments

 number top


The amount of units upwards from the projected textures origin to project.

 Arguments

 number right


The amount of units right from the projected textures origin to project.

 Arguments

 number bottom


The amount of units downwards from the projected textures origin to project.

 Examples
 Example
Set the projected texture back to perspective projection.

ProjectedTexture:SetOrthographic( false )
ProjectedTexture:Update()


"ProjectedTexture/SetQuadraticAttenuation"
ProjectedTexture:SetQuadraticAttenuation( number quadAtten ) 
 Description
Sets the quadratic attenuation of the projected texture.
See also ProjectedTexture:SetLinearAttenuation and ProjectedTexture:SetConstantAttenuation.
You must call ProjectedTexture:Update after using this function for it to take effect.

 Arguments

 number quadAtten


"ProjectedTexture/SetTexture"
ProjectedTexture:SetTexture( string texture ) 
 Description
Sets the texture to be projected.
You must call ProjectedTexture:Update after using this function for it to take effect.

 Arguments

 string texture


The name of the texture. Can also be an ITexture.


"ProjectedTexture/SetNearZ"
ProjectedTexture:SetNearZ( number nearZ ) 
 Description
Sets the distance at which the projected texture begins its projection.
You must call ProjectedTexture:Update after using this function for it to take effect.



NOTE


Setting this to 0 will disable the projected texture completely! This may be useful if you want to disable a projected texture without actually removing it




NOTE


This seems to affect the rendering of shadows - a higher Near Z value will have shadows begin to render closer to their casting object. Comparing a low Near Z value (like 1) with a normal one (12) or high one (1000) is the easiest way to understand this artifact


 Arguments

 number nearZ


"properties/CanBeTargeted"
properties.CanBeTargeted( Entity ent, Player ply ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns true if given entity can be targeted by the player via the properties system.
This should be used serverside in your properties to prevent abuse by clientside scripting.

 Arguments

 Entity ent


The entity to test

 Arguments

 Player ply


If given, will also perform a distance check based on the entitys Orientated Bounding Box.

 Returns

 boolean


True if entity can be targeted, false otherwise


"render/Capture"
render.Capture( table captureData ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Captures a part of the current render target and returns the data as a binary string in the given format.
Since the pixel buffer clears itself every frame, this will return a black screen outside of render hooks. To capture the users final view, use GM:PostRender. This will not capture the Steam overlay or third-party injections (such as the Discord overlay, Overwolf, and advanced cheats) on the users screen.



BUG


This sets the alpha channel incorrectly in PNG mode, causing the foreground to be rendered almost completely transparent.



 Arguments

 table captureData


Parameters of the capture. See RenderCaptureData structure.

 Returns

 string


binaryData

 Examples
 Example
How you could use this to save a picture of your screen.

local ScreenshotRequested = false
function RequestAScreenshot()
	ScreenshotRequested = true
end

-- For the sake of this example, we use a console command to request a screenshot
concommand.Add( make_screenshot, RequestAScreenshot )

hook.Add( PostRender, example_screenshot, function()
	if ( !ScreenshotRequested ) then return end
	ScreenshotRequested = false

	local data = render.Capture( {
		format = jpeg,
		quality = 70, //100 is max quality, but 70 is good enough.
		h = ScrH(),
		w = ScrW(),
		x = 0,
		y = 0,
	} )
	local f = file.Open( Image.jpg, wb, DATA )
	f:Write( data )
	f:Close()
end )
Output:

You should now have Image.jpg in your garrysmod/garrysmod/data folder, containing a screenshot.


"render/AddBeam"
render.AddBeam( Vector startPos, number width, number textureEnd, table color ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Adds a beam segment to the beam started by render.StartBeam.

 Arguments

 Vector startPos


Beam start position.

 Arguments

 number width


The width of the beam.

 Arguments

 number textureEnd


The end coordinate of the texture used.

 Arguments

 table color


The color to be used. Uses the Color structure.


"properties/OnScreenClick"
properties.OnScreenClick( Vector eyepos, Vector eyevec ) 
 Description
Checks if player hovers over any entities and open a properties menu for it.

 Arguments

 Vector eyepos


The eye pos of a player

 Arguments

 Vector eyevec


The aim vector of a player


"render/BrushMaterialOverride"
render.BrushMaterialOverride( IMaterial mat=nil ) 
 Description


WARNING


This function is broken and does absolutely nothing


 Arguments

 IMaterial mat=nil





"ProjectedTexture/SetTextureFrame"
ProjectedTexture:SetTextureFrame( number frame ) 
 Description
For animated textures, this will choose which frame in the animation will be projected.
You must call ProjectedTexture:Update after using this function for it to take effect.

 Arguments

 number frame


The frame index to use.


"render/BlurRenderTarget"
render.BlurRenderTarget( ITexture rendertarget, number blurx, number blury, number passes ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Blurs the render target ( or a given texture )

 Arguments

 ITexture rendertarget


The texture to blur

 Arguments

 number blurx


Horizontal amount of blur

 Arguments

 number blury


Vertical amount of blur

 Arguments

 number passes


Amount of passes to go through


"properties/OpenEntityMenu"
properties.OpenEntityMenu( Entity ent, table tr ) 
 Description
Opens properties menu for given entity.

 Arguments

 Entity ent


The entity to open menu for

 Arguments

 table tr


The trace that is passed as second argument to Action callback of a property


"ProjectedTexture/Update"
ProjectedTexture:Update(  ) 
 Description
Updates the Projected Light and applies all previously set parameters.


"render/Clear"
render.Clear( number r, number g, number b, number a, boolean clearDepth=false, boolean clearStencil=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments


 Description
Clears the current render target and the specified buffers.



BUG


This sets the alpha incorrectly for surface library draw calls for render targets.



 Arguments

 number r


Red component to clear to.

 Arguments

 number g


Green component to clear to.

 Arguments

 number b


Blue component to clear to.

 Arguments

 number a


Alpha component to clear to.

 Arguments

 boolean clearDepth=false


Clear the depth.

 Arguments

 boolean clearStencil=false


Clear the stencil.


"render/ClearRenderTarget"
render.ClearRenderTarget( ITexture texture, table color ) 
 Description
Clears a render target
It uses render.Clear then render.SetRenderTarget on the modified render target.

 Arguments

 ITexture texture


 Arguments

 table color


The color, see Color structure


"properties/Add"
properties.Add( string name, table propertyData ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Add properties to the properties module

 Arguments

 string name


A unique name used to identify the property

 Arguments

 table propertyData


A table that defines the property. Uses the PropertyAdd structure.

 Examples
 Example
Defines a property that can be used to ignite entities (from Sandbox)

properties.Add( ignite, {
	MenuLabel = #ignite, -- Name to display on the context menu
	Order = 999, -- The order to display this property relative to other properties
	MenuIcon = icon16/fire.png, -- The icon to display next to the property

	Filter = function( self, ent, ply ) -- A function that determines whether an entity is valid for this property
		if ( !IsValid( ent ) ) then return false end
		if ( ent:IsPlayer() ) then return false end
		if ( !CanEntityBeSetOnFire( ent ) ) then return false end
		if ( !gamemode.Call( CanProperty, ply, ignite, ent ) ) then return false end

		return!ent:IsOnFire() 
	end,
	Action = function( self, ent ) -- The action to perform upon using the property ( Clientside )

		self:MsgStart()
			net.WriteEntity( ent )
		self:MsgEnd()

	end,
	Receive = function( self, length, player ) -- The action to perform upon using the property ( Serverside )
		local ent = net.ReadEntity()
		if ( !self:Filter( ent, player ) ) then return end
		
		ent:Ignite( 360 )
	end 
} )


"render/ClearDepth"
render.ClearDepth(  ) 
 Description
Resets the depth buffer.



BUG


This function also clears the stencil buffer. Use render.Clear in the meantime.


"render/ClearStencilBufferRectangle"
render.ClearStencilBufferRectangle( number originX, number originY, number endX, number endY, number stencilValue ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example




 Description
Sets the stencil value in a specified rect.
This is not affected by render.SetStencilWriteMask

 Arguments

 number originX


X origin of the rectangle.

 Arguments

 number originY


Y origin of the rectangle.

 Arguments

 number endX


The end X coordinate of the rectangle.

 Arguments

 number endY


The end Y coordinate of the rectangle.

 Arguments

 number stencilValue


Value to set cleared stencil buffer to.

 Examples
 Example
A basic stencil operation that limits rendering to the centre of the screen

hook.Add( PostDrawOpaqueRenderables, Stencil Tutorial Example, function()

	-- Reset everything to known good
	render.SetStencilWriteMask( 0xFF )
	render.SetStencilTestMask( 0xFF )
	render.SetStencilReferenceValue( 0 )
	render.SetStencilCompareFunction( STENCIL_ALWAYS )
	render.SetStencilPassOperation( STENCIL_KEEP )
	render.SetStencilFailOperation( STENCIL_KEEP )
	render.SetStencilZFailOperation( STENCIL_KEEP )
	render.ClearStencil()

	-- Enable stencils
	render.SetStencilEnable( true )
	-- Set the reference value to 1. This is what the compare function tests against
	render.SetStencilReferenceValue( 1 )
	-- Refuse to write things to the screen unless that pixels value is 1
	render.SetStencilCompareFunction( STENCIL_EQUAL )
	-- Write a 1 to the centre third of the screen. Because we cleared it earlier, everything is currently 0
	local w, h = ScrW() / 3, ScrH() / 3
	local x_start, y_start = w, h
	local x_end, y_end = x_start + w, y_start + h
	render.ClearStencilBufferRectangle( x_start, y_start, x_end, y_end, 1 )

	-- Draw our entities. They will only draw in the area cleared above
	for _, ent in pairs( ents.FindByClass( sent_stencil_test ) ) do
		ent:DrawModel()
	end

	-- Let everything render normally again
	render.SetStencilEnable( false )
end )
Output:


"render/CapturePixels"
render.CapturePixels(  ) 
 Description
Dumps the current render target and allows the pixels to be accessed by render.ReadPixel.


"render/CopyRenderTargetToTexture"
render.CopyRenderTargetToTexture( ITexture Target ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Copies the currently active Render Target to the specified texture.

 Arguments

 ITexture Target


The texture to copy to

 Examples
 Example
This is how its used in render.CopyTexture

function render.CopyTexture( from, to )

	local OldRT = render.GetRenderTarget()

		render.SetRenderTarget( from )
		render.CopyRenderTargetToTexture( to )

	render.SetRenderTarget( OldRT )

end


"render/ClearStencil"
render.ClearStencil(  ) 
 Description
Resets all values in the stencil buffer to zero.

 Examples
 Example

hook.Add( PostDrawOpaqueRenderables, Stencil Tutorial Example, function()

	-- Reset everything to known good
	render.SetStencilWriteMask( 0xFF )
	render.SetStencilTestMask( 0xFF )
	render.SetStencilReferenceValue( 0 )
	render.SetStencilCompareFunction( STENCIL_ALWAYS )
	render.SetStencilPassOperation( STENCIL_KEEP )
	render.SetStencilFailOperation( STENCIL_KEEP )
	render.SetStencilZFailOperation( STENCIL_KEEP )

	-- Enable stencils
	render.SetStencilEnable( true )
	-- Set the reference value to 1. This is what the compare function tests against
	render.SetStencilReferenceValue( 1 )
	-- Refuse to write things to the screen unless that pixels value is 1
	render.SetStencilCompareFunction( STENCIL_EQUAL )
	-- Set the entire screen to 0
	render.ClearStencil()

	-- Attempt to draw our entities. Nothing will draw, because nothing in the buffer is 1.
	for _, ent in pairs( ents.FindByClass( sent_stencil_test ) ) do
		ent:DrawModel()
	end

	-- Let everything render normally again
	render.SetStencilEnable( false )
end )
Output:


"render/DepthRange"
render.DepthRange( number depthmin, number depthmax ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Sets the depth range of the upcoming render.

 Arguments

 number depthmin


The minimum depth of the upcoming render. 0.0 = render normally; 1.0 = render nothing

 Arguments

 number depthmax


The maximum depth of the upcoming render. 0.0 = render everything (through walls); 1.0 = render normally

 Examples
 Example
Perform a downward screen wipe effect on all opaque objects once the client connects.

local depthmin = 1.0

function GM:PreDrawOpaqueRenderables( bDrawingDepth, bDrawingSkybox )

	render.DepthRange( depthmin, 1.0 )
	
	if( depthmin &gt; 0.0 ) then
		depthmin = depthmin - 0.001
	end
	
end


 Examples
 Example
Same effect as above but with a dark shadow skin present where the model is being drawn.

local depthmin = 1.0
local spawn_copies = {}	-- The shadow copies

function GM:PreDrawOpaqueRenderables( bDrawingDepth, bDrawingSkybox )

	render.DepthRange( depthmin, 1.0 )
	
	if( !spawn_copies ) then return false end
	
	if( depthmin &gt; 0.0 ) then
		depthmin = depthmin - 0.001
	else
	
		local alpha = 0
		local valid_copies = 0
		
		-- Fade out the shadow copies and remove them
		for _, spawncopy in pairs( spawn_copies ) do
			if( IsValid( spawncopy ) ) then
				alpha = spawncopy:GetColor().a
				if( alpha &gt; 0 ) then
					spawncopy:SetColor( Color( 255, 255, 255, alpha-1 ) )
				else
					spawncopy:Remove()
				end
				valid_copies = valid_copies + 1
			end
		end
		
		-- Nullify table since we arent using it any more
		if( valid_copies == 0 ) then
			spawn_copies = nil
		end
			
	end
	
end

function GM:OnEntityCreated( ent )

	if( !spawn_copies ) then return end
	
	-- Prevents infinite loop and other errors
	if( ent:GetClass()!= class C_BaseFlex &amp;&amp;
		ent:GetRenderGroup() == RENDERGROUP_OPAQUE &amp;&amp;
		ent:GetClass()!= gmod_hands ) then
	
		local mdl = ent:GetModel()
		
		-- Check that the entity is a model and not a brush
		if( mdl &amp;&amp; string.find( mdl, .mdl ) ) then
		
			local spawncopy = ClientsideModel( mdl )
			
			-- A material with $ignorez set to 1 works best here
			spawncopy:SetMaterial( models/overlay_rendertarget )
			spawncopy:AddEffects( EF_BONEMERGE )
			spawncopy:SetParent( ent )
			spawncopy:SetRenderMode( RENDERMODE_TRANSALPHA )
			spawncopy:SetColor( Color( 255, 255, 255, 92 ) )
			table.insert( spawn_copies, spawncopy )
			
		end
		
	end
	
end
Output:

File:DepthRange example.webm


"render/ComputeLighting"
render.ComputeLighting( Vector position, Vector normal ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Calculates the light color of a certain surface.

 Arguments

 Vector position


The position of the surface to get the light from.

 Arguments

 Vector normal


The normal of the surface to get the light from.

 Returns

 Vector


A vector representing the light at that point.


"render/CopyTexture"
render.CopyTexture( ITexture texture_from, ITexture texture_to ) 
 Description
Copies the contents of one texture to another. Only works with rendertargets.

 Arguments

 ITexture texture_from


 Arguments

 ITexture texture_to


"render/ClearBuffersObeyStencil"
render.ClearBuffersObeyStencil( number r, number g, number b, number a, boolean depth ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example




 Description
Clears the current rendertarget for obeying the current stencil buffer conditions.

 Arguments

 number r


Value of the red channel to clear the current rt with.

 Arguments

 number g


Value of the green channel to clear the current rt with.

 Arguments

 number b


Value of the blue channel to clear the current rt with.

 Arguments

 number a


Value of the alpha channel to clear the current rt with.

 Arguments

 boolean depth


Clear the depth buffer.

 Examples
 Example
Clearing a section of the screen via the stencil buffer

hook.Add( PostDrawOpaqueRenderables, Stencil Tutorial Example, function()

	-- Reset everything to known good
	render.SetStencilWriteMask( 0xFF )
	render.SetStencilTestMask( 0xFF )
	render.SetStencilReferenceValue( 0 )
	render.SetStencilCompareFunction( STENCIL_ALWAYS )
	render.SetStencilPassOperation( STENCIL_KEEP )
	render.SetStencilFailOperation( STENCIL_KEEP )
	render.SetStencilZFailOperation( STENCIL_KEEP )
	render.ClearStencil()

	-- Enable stencils
	render.SetStencilEnable( true )
	-- Set the reference value to 1. This is what the compare function tests against
	render.SetStencilReferenceValue( 1 )
	-- Refuse to write things to the screen unless that pixels value is 1
	render.SetStencilCompareFunction( STENCIL_EQUAL )
	-- Write a 1 to the centre third of the screen. Because we cleared it earlier, everything is currently 0
	local w, h = ScrW() / 3, ScrH() / 3
	local x_start, y_start = w, h
	local x_end, y_end = x_start + w, y_start + h
	render.ClearStencilBufferRectangle( x_start, y_start, x_end, y_end, 1 )

	-- Tell the render library to clear the screen, but obeying the stencil test function.
	-- This means it will only clear the centre third.
	render.ClearBuffersObeyStencil( 0, 148, 133, 255, false );

	-- Let everything render normally again
	render.SetStencilEnable( false )
end )
Output:


"render/CullMode"
render.CullMode( number cullMode ) 
 Description
Changes the cull mode.

 Arguments

 number cullMode


Cullmode, see MATERIAL_CULLMODE_ Enums


"render/ComputeDynamicLighting"
render.ComputeDynamicLighting( Vector position, Vector normal ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Calculates the lighting caused by dynamic lights for the specified surface.

 Arguments

 Vector position


The position to sample from.

 Arguments

 Vector normal


The normal of the surface.

 Returns

 Vector


A vector representing the light at that point.


"render/DrawQuadEasy"
render.DrawQuadEasy( Vector position, Vector normal, number width, number height, table color, number rotation ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Examples

8.1 Example




 Description
Draws a quad.



NOTE


This is a rendering function that requires a 3D rendering context.This means that it will only work in hooks with a 3D rendering context.


 Arguments

 Vector position


Origin of the sprite.

 Arguments

 Vector normal


The face direction of the quad.

 Arguments

 number width


The width of the quad.

 Arguments

 number height


The height of the quad.

 Arguments

 table color


The color of the quad. Uses the Color structure.

 Arguments

 number rotation


The rotation of the quad in degrees.

 Examples
 Example
Example usage of this function.

local mat = Material( sprites/sent_ball )
local mat2 = Material( models/wireframe )
hook.Add( PostDrawTranslucentRenderables, DrawQuadEasyExample, function()

	-- Draw a rotating circle under local player
	render.SetMaterial( mat )
	local pos = LocalPlayer():GetPos()
	render.DrawQuadEasy( pos + Vector( 0, 0, 1 ), Vector( 0, 0, 1 ), 64, 64, Color( 255, 255, 255, 200 ), ( CurTime() * 50 )% 360 )

	-- Draw 3 rotating wireframe quads where local player is looking at
	render.SetMaterial( mat2 )
	local tr = LocalPlayer():GetEyeTrace()
	render.DrawQuadEasy( tr.HitPos + tr.HitNormal, tr.HitNormal, 64, 64, Color( 255, 255, 255 ), ( CurTime() * 50 )% 360 )

	local dir = tr.HitNormal:Angle()
	dir:RotateAroundAxis( tr.HitNormal, ( CurTime() * 50 )% 360 )
	dir = dir:Up()

	-- We need to call this function twice, once for each side
	render.DrawQuadEasy( tr.HitPos + tr.HitNormal * 32, dir, 64, 64, Color( 255, 255, 255 ), 0 )
	render.DrawQuadEasy( tr.HitPos + tr.HitNormal * 32, -dir, 64, 64, Color( 255, 255, 255 ), 0 )
end )


"render/DrawScreenQuadEx"
render.DrawScreenQuadEx( number startX, number startY, number width, number height ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Draws the the current material set by render.SetMaterial to the area specified.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 number startX


X start position of the rect.

 Arguments

 number startY


Y start position of the rect.

 Arguments

 number width


Width of the rect.

 Arguments

 number height


Height of the rect.


"render/DrawScreenQuad"
render.DrawScreenQuad(  ) 
 Description
Draws the the current material set by render.SetMaterial to the whole screen.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


"render/DrawBeam"
render.DrawBeam( Vector startPos, Vector endPos, number width, number textureStart, number textureEnd, table color ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments


 Description
Draws textured beam.



NOTE


This is a rendering function that requires a 3D rendering context.This means that it will only work in hooks with a 3D rendering context.


 Arguments

 Vector startPos


Beam start position.

 Arguments

 Vector endPos


Beam end position.

 Arguments

 number width


The width of the beam.

 Arguments

 number textureStart


The start coordinate of the texture used.

 Arguments

 number textureEnd


The end coordinate of the texture used.

 Arguments

 table color


The color to be used. Uses the Color structure.


"render/DrawQuad"
render.DrawQuad( Vector vert1, Vector vert2, Vector vert3, Vector vert4, table color=Color( 255, 255, 255 ) ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Draws 2 connected triangles.



NOTE


This is a rendering function that requires a 3D rendering context.This means that it will only work in hooks with a 3D rendering context.


 Arguments

 Vector vert1


First vertex.

 Arguments

 Vector vert2


The second vertex.

 Arguments

 Vector vert3


The third vertex.

 Arguments

 Vector vert4


The fourth vertex.

 Arguments

 table color=Color( 255, 255, 255 )


The color of the quad. See Color


"render/DrawLine"
render.DrawLine( Vector startPos, Vector endPos, table color, boolean writeZ=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Draws a line in 3D space.



NOTE


This is a rendering function that requires a 3D rendering context.This means that it will only work in hooks with a 3D rendering context.


 Arguments

 Vector startPos


Line start position in world coordinates.

 Arguments

 Vector endPos


Line end position in world coordinates.

 Arguments

 table color


The color to be used. Uses the Color structure.

 Arguments

 boolean writeZ=false


Whether or not to consider the Z buffer. If false, the line will be drawn over everything currently drawn, if true, the line will be drawn with depth considered, as if it were a regular object in 3D space.



BUG


Enabling this option will cause the line to ignore the colors alpha.


"render/DrawBox"
render.DrawBox( Vector position, Angle angles, Vector mins, Vector maxs, table color, boolean writeZ ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments


 Description
Draws a box in 3D space.



NOTE


This is a rendering function that requires a 3D rendering context.This means that it will only work in hooks with a 3D rendering context.


 Arguments

 Vector position


Origin of the box.

 Arguments

 Angle angles


Orientation of the box.

 Arguments

 Vector mins


Start position of the box, relative to origin.

 Arguments

 Vector maxs


End position of the box, relative to origin.

 Arguments

 table color


The color of the box. Uses the Color structure.

 Arguments

 boolean writeZ


Should this render call write to the depth buffer.


"render/FogColor"
render.FogColor( number red, number green, number blue ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Sets the color of the fog.

 Arguments

 number red


Red channel of the fog color, 0 - 255.

 Arguments

 number green


Green channel of the fog color, 0 - 255.

 Arguments

 number blue


Blue channel of the fog color, 0 - 255.


"render/EnableClipping"
render.EnableClipping( boolean state ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Sets the status of the clip renderer, returning previous state.



WARNING


To prevent unintended rendering behavior of other mods/the game, you must reset the clipping state to its previous value.




BUG


Reloading the map does not reset the previous value of this function.



 Arguments

 boolean state


New clipping state.

 Returns

 boolean


Previous clipping state.

 Examples
 Example
Properly using the function.

-- Inside some rendering hook

local oldclip = render.EnableClipping( true )

-- Your code here

render.EnableClipping( oldclip )


 Examples
 Example
Clips the lower half of your custom entity

function ENT:Draw()
    local normal = self:GetUp() -- Everything behind this normal will be clipped
    local position = normal:Dot( self:GetPos() ) -- self:GetPos() is the origin of the clipping plane

    local oldEC = render.EnableClipping( true )
    render.PushCustomClipPlane( normal, position )

    self:DrawModel()

    render.PopCustomClipPlane()
    render.EnableClipping( oldEC )
end


"render/DrawWireframeSphere"
render.DrawWireframeSphere( Vector position, number radius, number longitudeSteps, number latitudeSteps, table color=Color( 255, 255, 255 ), boolean writeZ=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Examples

8.1 Example




 Description
Draws a wireframe sphere in 3d space.



NOTE


This is a rendering function that requires a 3D rendering context.This means that it will only work in hooks with a 3D rendering context.


 Arguments

 Vector position


Position of the sphere.

 Arguments

 number radius


The size of the sphere.

 Arguments

 number longitudeSteps


The amount of longitude steps.

The larger this number is, the smoother the sphere is.

 Arguments

 number latitudeSteps


The amount of latitude steps.

The larger this number is, the smoother the sphere is.

 Arguments

 table color=Color( 255, 255, 255 )


The color of the wireframe. Uses the Color structure.

 Arguments

 boolean writeZ=false


Whether or not to consider the Z buffer. If false, the wireframe will be drawn over everything currently drawn. If true, it will be drawn with depth considered, as if it were a regular object in 3D space.

 Examples
 Example
Draws a wireframe sphere over a normal sphere for an artistic effect.

hook.Add( PostDrawTranslucentRenderables, test, function()

	-- Set the draw material to solid white
	render.SetColorMaterial()

	-- The position to render the sphere at, in this case, the looking position of the local player
	local pos = LocalPlayer():GetEyeTrace().HitPos

	local radius = 50
	local wideSteps = 10
	local tallSteps = 10

	-- Draw the sphere!
	render.DrawSphere( pos, radius, wideSteps, tallSteps, Color( 0, 175, 175, 100 ) )

	-- Draw the wireframe sphere!
	render.DrawWireframeSphere( pos, radius, wideSteps, tallSteps, Color( 255, 255, 255, 255 ) )

end )


"render/DrawSphere"
render.DrawSphere( Vector position, number radius, number longitudeSteps, number latitudeSteps, table color=Color( 255, 255, 255 ) ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example




 Description
Draws a sphere in 3D space. The material previously set with render.SetMaterial will be applied the spheres surface.
See also render.DrawWireframeSphere for a wireframe equivalent.



NOTE


This is a rendering function that requires a 3D rendering context.This means that it will only work in hooks with a 3D rendering context.


 Arguments

 Vector position


Position of the sphere.

 Arguments

 number radius


Radius of the sphere. Negative radius will make the sphere render inwards rather than outwards.

 Arguments

 number longitudeSteps


The number of longitude steps. This controls the quality of the sphere. Higher quality will lower performance significantly. 50 is a good number to start with.

 Arguments

 number latitudeSteps


The number of latitude steps. This controls the quality of the sphere. Higher quality will lower performance significantly. 50 is a good number to start with.

 Arguments

 table color=Color( 255, 255, 255 )


The color of the sphere. Uses the Color structure.

 Examples
 Example
This will draw a blue, half-translucent sphere (force field) at the position local player is looking.

hook.Add( PostDrawTranslucentRenderables, test, function()

	--[[
		when you draw a sphere, you have to specify what material the sphere is
		going to have before rendering it, render.SetColorMaterial()
		just sets it to a white material so we can recolor it easily.
	]]
	render.SetColorMaterial()

	-- The position to render the sphere at, in this case, the looking position of the local player
	local pos = LocalPlayer():GetEyeTrace().HitPos

	-- Draw the sphere!
	render.DrawSphere( pos, 50, 30, 30, Color( 0, 175, 175, 100 ) )

end )


"render/DrawSprite"
render.DrawSprite( Vector position, number width, number height, table color ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Draws a sprite in 3d space.



NOTE


This is a rendering function that requires a 3D rendering context.This means that it will only work in hooks with a 3D rendering context.


 Arguments

 Vector position


Position of the sprite.

 Arguments

 number width


Width of the sprite.

 Arguments

 number height


Height of the sprite.

 Arguments

 table color


Color of the sprite. Uses the Color structure.

 Examples
 Example
Draw a sprite at the center of the map

local pos,material,white = Vector( 0,0,0 ), Material( sprites/splodesprite ),Color( 255,255,255,255 ) --Define this sort of stuff outside of loops to make more efficient code.
hook.Add( HUDPaint, paintsprites, function()
	cam.Start3D() -- Start the 3D function so we can draw onto the screen.
		render.SetMaterial( material ) -- Tell render what material we want, in this case the flash from the gravgun
		render.DrawSprite( pos, 16, 16, white ) -- Draw the sprite in the middle of the map, at 16x16 in its original colour with full alpha.
	cam.End3D()
end )
Output:

An orange star appears at 0,0,0 on the map.
 Examples
 Example
Function that displays a sprite at the given position, without the need of a specific rendering context
draw.VectorSprite(Vector position, number size, Color structure color, boolean constantSize)

local toDraw3d = {}

local sprites3d = 0

local toDraw2d = {}

local sprites2d = 0

local material = Material( sprites/light_ignorez )

function draw.VectorSprite( position, size, color, constantSize )
	if ( not isvector( position ) ) then
		error( bad argument #1 to draw.DrawVectorSprite ( Vector expected, got  .. type( position ) ..  ) )
	end

	if ( not isnumber( size ) ) then
		error( bad argument #2 to draw.DrawVectorSprite ( number expected, got  .. type( size ) ..  ) )
	end

	if ( not IsColor( color ) ) then
		error( bad argument #3 to draw.DrawVectorSprite ( Color expected, got  .. type( color ) ..  ) )
	end

	local tbl = {position, size, color}


	if ( constantSize ) then
		sprites2d = sprites2d + 1
		toDraw2d[sprites2d] = tbl
	else
		sprites3d = sprites3d + 1
		toDraw3d[sprites3d] = tbl
	end
end

local render_SetMaterial = render.SetMaterial
local render_DrawSprite = render.DrawSprite
hook.Add( PreDrawEffects, draw.VectorSprite, function()
	if ( sprites3d ~= 0 ) then
		render_SetMaterial( material )

		for i = 1, sprites3d do
			local info = toDraw3d[i]
			toDraw3d[i] = nil -- Clear the table every frame

			render_DrawSprite( info[1], info[2], info[2], info[3] )
		end

		sprites3d = 0
	end
end )

local surface_SetMaterial = surface.SetMaterial
local surface_SetDrawColor = surface.SetDrawColor
local surface_DrawTexturedRect = surface.DrawTexturedRect
hook.Add( DrawOverlay, draw.VectorSprite, function()
	if ( sprites2d ~= 0 ) then
		surface_SetMaterial( material )

		for i = 1, sprites2d do
			local info = toDraw2d[i]
			toDraw2d[i] = nil

			local pos2d = info[1]:ToScreen()

			if ( pos2d.visible ) then
				surface_SetDrawColor( info[3] )
				surface_DrawTexturedRect( pos2d.x, pos2d.y, info[2], info[2] )
			end
		end

		sprites2d = 0
	end
end )


"render/FogEnd"
render.FogEnd( number distance ) 
 Description
Sets the at which the fog reaches its max density.

 Arguments

 number distance


The distance at which the fog reaches its max density.



NOTE


If used in GM:SetupSkyboxFog, this value must be scaled by the first argument of the hook


"render/DrawWireframeBox"
render.DrawWireframeBox( Vector position, Angle angle, Vector mins, Vector maxs, table color, boolean writeZ=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments


 Description
Draws a wireframe box in 3D space.



NOTE


This is a rendering function that requires a 3D rendering context.This means that it will only work in hooks with a 3D rendering context.


 Arguments

 Vector position


Position of the box.

 Arguments

 Angle angle


Angles of the box.

 Arguments

 Vector mins


The lowest corner of the box.

 Arguments

 Vector maxs


The highest corner of the box.

 Arguments

 table color


The color of the box. Uses the Color structure.

 Arguments

 boolean writeZ=false


Sets whenever to write to the zBuffer.


"render/DrawTextureToScreenRect"
render.DrawTextureToScreenRect( ITexture tex, number x, number y, number width, number height ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Draws a textured rectangle.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 ITexture tex


The texture to draw

 Arguments

 number x


The x coordinate of the rectangle to draw.

 Arguments

 number y


The y coordinate of the rectangle to draw.

 Arguments

 number width


The width of the rectangle to draw.

 Arguments

 number height


The height of the rectangle to draw.


"render/FogStart"
render.FogStart( number fogStart ) 
 Description
Sets the distance at which the fog starts showing up.

 Arguments

 number fogStart


The distance at which the fog starts showing up.




NOTE


If used in GM:SetupSkyboxFog, this value must be scaled by the first argument of the hook


"render/DrawTextureToScreen"
render.DrawTextureToScreen( ITexture tex ) 
 Description
Draws a texture over the whole screen.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 ITexture tex


The texture to draw


"render/EndBeam"
render.EndBeam(  ) 
 Description
Ends the beam mesh of a beam started with render.StartBeam.


"render/GetAmbientLightColor"
render.GetAmbientLightColor(  ) 
 Description
Returns the ambient color of the map.

 Returns

 Vector


color


"render/FogMaxDensity"
render.FogMaxDensity( number maxDensity ) 
 Description
Sets the maximum density of the fog.

 Arguments

 number maxDensity


The maximum density of the fog, 0-1.


"render/GetDXLevel"
render.GetDXLevel(  ) 
 Description
Returns the maximum available directX version.

 Returns

 number


dxLevel


"render/GetFogColor"
render.GetFogColor(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Returns


 Description
Returns the current fog color.

 Returns

 number


Red part of the color.

 Returns

 number


Green part of the color

 Returns

 number


Blue part of the color


"render/GetBlend"
render.GetBlend(  ) 
 Description
Returns the current alpha blending.

 Returns

 number


blend


"render/GetColorModulation"
render.GetColorModulation(  ) 
 Description
Returns the current color modulation values as normals.

 Returns

 number


r


"render/FogMode"
render.FogMode( number fogMode ) 
 Description
Sets the mode of fog.

 Arguments

 number fogMode


Fog mode, see MATERIAL_FOG_ Enums.


"render/GetFogMode"
render.GetFogMode(  ) 
 Description
Returns the fog mode.

 Returns

 number


Fog mode, see MATERIAL_FOG_ Enums


"render/GetBloomTex0"
render.GetBloomTex0(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 ITexture


The bloom texture


"render/GetFogDistances"
render.GetFogDistances(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Returns


 Description
Returns the fog start and end distance.

 Returns

 number


Fog start distance set by render.FogStart

 Returns

 number


For end distance set by render.FogEnd

 Returns

 number


Fog Z distance set by render.SetFogZ


"render/GetFullScreenDepthTexture"
render.GetFullScreenDepthTexture(  ) 
 Description
Returns the _rt_FullFrameDepth texture. Alias of _rt_PowerOfTwoFB

 Returns

 ITexture


"render/GetBloomTex1"
render.GetBloomTex1(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 ITexture


"render/GetLightColor"
render.GetLightColor( Vector position ) 
 Description
Gets the light exposure on the specified position.

 Arguments

 Vector position


The position of the surface to get the light from.

 Returns

 Vector


lightColor


"render/GetPowerOfTwoTexture"
render.GetPowerOfTwoTexture(  ) 
 Description
Returns the render targets power of two texture.

 Returns

 ITexture


The power of two texture, which is _rt_poweroftwofb by default.


"render/GetRenderTarget"
render.GetRenderTarget(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Returns the currently active render target.
Instead of saving the current render target using this function and restoring to it later, it is generally better practice to use render.PushRenderTarget and render.PopRenderTarget.

 Returns

 ITexture


The currently active Render Target

 Examples
 Example
Render something to a different render target, then restore the old render target

local oldRt = render.GetRenderTarget() -- well save the old screen and draw on a new one!
local w, h = ScrW(), ScrH()
local customRt = GetRenderTarget( some_unique_render_target_nameeeee, w, h, true )

render.SetRenderTarget( customRt )
render.Clear( 0, 0, 255, 255, true ) -- fill the background with blue!

-- draw all props on the blue background!
for key, prop in pairs( ents.FindByClass( prop_physics ) ) do
    prop:DrawModel()
end

-- save the picture to the garrysmod/data folder.  ~format=jpg will not work.
local data = render.Capture( { format = jpeg, quality = 70, x = 0, y = 0, h = h, w = w } )	
local pictureFile = file.Open( RenderTargetsAreAwesome.jpg, wb, DATA )	
pictureFile:Write( data )
pictureFile:Close()

render.SetRenderTarget( oldRt )


 Examples
 Example
Same as above, but using render.PushRenderTarget and render.PopRenderTarget instead of render.GetRenderTarget and render.SetRenderTarget

local w, h = ScrW(), ScrH()
local customRt = GetRenderTarget( some_unique_render_target_nameeeee, w, h, true )

render.PushRenderTarget( customRt )
    render.Clear( 0, 0, 255, 255, true ) -- fill the background with blue!

    -- draw all props on the blue background!
    for key, prop in pairs( ents.FindByClass( prop_physics ) ) do
        prop:DrawModel()
    end

    -- save the picture to the garrysmod/data folder.  ~format=jpg will not work.
    local data = render.Capture( { format = jpeg, quality = 70, x = 0, y = 0, h = h, w = w } )	
    local pictureFile = file.Open( RenderTargetsAreAwesome.jpg, wb, DATA )	
    pictureFile:Write( data )
    pictureFile:Close()
render.PopRenderTarget()


"render/GetRefractTexture"
render.GetRefractTexture(  ) 
 Description
Alias of render.GetPowerOfTwoTexture.

 Returns

 ITexture


"render/GetResolvedFullFrameDepth"
render.GetResolvedFullFrameDepth(  ) 
 Description
Returns the _rt_ResolvedFullFrameDepth texture for SSAO depth.

 Returns

 ITexture


"render/GetMoBlurTex0"
render.GetMoBlurTex0(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 ITexture


"render/GetMorphTex1"
render.GetMorphTex1(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 ITexture


"render/GetSmallTex0"
render.GetSmallTex0(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 ITexture


"render/GetMoBlurTex1"
render.GetMoBlurTex1(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 ITexture


"render/GetSuperFPTex"
render.GetSuperFPTex(  ) 
 Description
Returns a floating point texture the same resolution as the screen.



NOTE


The gmodscreenspace shader doesnt behave as expected when drawing a floating-point texture to an integer texture (e.g. the default render target). Use an UnlitGeneric material instead


 Returns

 ITexture


Render target named __rt_supertexture1


"render/MaterialOverrideByIndex"
render.MaterialOverrideByIndex( number index, IMaterial material ) 
 Description
Similar to render.MaterialOverride, but overrides the materials per index.
render.MaterialOverride overrides effects of this function.

 Arguments

 number index


Starts with 0, the index of the material to override

 Arguments

 IMaterial material


The material to override with


"render/GetSurfaceColor"
render.GetSurfaceColor( Vector startPos, Vector endPos ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Performs a render trace and returns the color of the surface hit, this uses a low res version of the texture.

 Arguments

 Vector startPos


The start position to trace from.

 Arguments

 Vector endPos


The end position of the trace.

 Returns

 Vector


color


"render/GetToneMappingScaleLinear"
render.GetToneMappingScaleLinear(  ) 
 Description
Returns a vector representing linear tone mapping scale.

 Returns

 Vector


The vector representing linear tone mapping scale.


"render/MaterialOverride"
render.MaterialOverride( IMaterial material ) 
 Description
Sets the render material override for all next calls of Entity:DrawModel. Also overrides render.MaterialOverrideByIndex.

 Arguments

 IMaterial material


The material to use as override, use nil to disable.


"render/GetMorphTex0"
render.GetMorphTex0(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 ITexture


"render/MaxTextureWidth"
render.MaxTextureWidth(  ) 
 Description
Returns the maximum texture width the renderer can handle.

 Returns

 number


maxTextureWidth


"render/GetScreenEffectTexture"
render.GetScreenEffectTexture( number textureIndex=0 ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Obtain an ITexture of the screen. You must call render.UpdateScreenEffectTexture in order to update this texture with the currently rendered scene.
This texture is mainly used within GM:RenderScreenspaceEffects

 Arguments

 number textureIndex=0


Max index is 3, but engine only creates the first two for you.

 Returns

 ITexture


 Examples
 Example
Print the texture name of the returned textures.

print( render.GetScreenEffectTexture( 0 ):GetName() )
print( render.GetScreenEffectTexture( 1 ):GetName() )
Output:

_rt_fullframefb
_rt_fullframefb1


"render/OverrideBlend"
render.OverrideBlend( boolean enabled, number srcBlend, number destBlend, number blendFunc, number srcBlendAlpha=none, number destBlendAlpha=none, number blendFuncAlpha=none ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments


 Description
Overrides the internal graphical functions used to determine the final color and alpha of a rendered texture.
See also render.OverrideAlphaWriteEnable.



NOTE


Doing surface library draw calls with alpha set to 0 is a no-op and wont have an effect.


 Arguments

 boolean enabled


true to enable, false to disable. No other arguments are required when disabling.

 Arguments

 number srcBlend


The source color blend function BLEND_ Enums. Determines how a rendered textures final color should be calculated.

 Arguments

 number destBlend


The destination color blend function BLEND_ Enums.

 Arguments

 number blendFunc


The blend mode used for drawing the color layer BLENDFUNC_ Enums.

 Arguments

 number srcBlendAlpha=none


The source alpha blend function BLEND_ Enums. Determines how a rendered textures final alpha should be calculated.

 Arguments

 number destBlendAlpha=none


The destination alpha blend function BLEND_ Enums.

 Arguments

 number blendFuncAlpha=none


The blend mode used for drawing the alpha layer BLENDFUNC_ Enums.


"render/GetSmallTex1"
render.GetSmallTex1(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Returns

 ITexture


"render/Model"
render.Model( table settings, CSEnt ent=nil ) 
 Description
Creates a new ClientsideModel, renders it at the specified pos/ang, and removes it. Can also be given an existing CSEnt to reuse instead.



NOTE


This function is only meant to be used in a single render pass kind of scenario, if you need to render a model continuously, use a cached ClientsideModel and provide it as a second argument.




BUG


Using this with a map model (game.GetWorld():GetModel()) crashes the game.



 Arguments

 table settings


Requires:

 string model - The model to draw
 Vector pos - The position to draw the model at
 Angle angle - The angles to draw the model at


 Arguments

 CSEnt ent=nil


If provided, this entity will be reused instead of creating a new one with ClientsideModel. Note that the ents model, position and angles will be changed, and Entity:SetNoDraw will be set to true.


"render/OverrideAlphaWriteEnable"
render.OverrideAlphaWriteEnable( boolean enable, boolean shouldWrite ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Overrides the write behaviour of all next rendering operations towards the alpha channel of the current render target.
See also render.OverrideBlend.



NOTE


Doing surface library draw calls with alpha set to 0 is a no-op and will never have any effect.


 Arguments

 boolean enable


Enable or disable the override.

 Arguments

 boolean shouldWrite


If the previous argument is true, sets whether the next rendering operations should write to the alpha channel or not. Has no effect if the previous argument is false.

 Examples
 Example
Shows how you can use alpha channel with render targets.

render.PushRenderTarget( texture )
render.OverrideAlphaWriteEnable( true, true )

render.ClearDepth()
render.Clear( 0, 0, 0, 0 )

render.OverrideAlphaWriteEnable( false )
render.PopRenderTarget()


"render/MaxTextureHeight"
render.MaxTextureHeight(  ) 
 Description
Returns the maximum texture height the renderer can handle.

 Returns

 number


maxTextureHeight


"render/GetSuperFPTex2"
render.GetSuperFPTex2(  ) 
 Description
Returns a floating point texture the same resolution as the screen.



NOTE


The gmodscreenspace shader doesnt behave as expected when drawing a floating-point texture to an integer texture (e.g. the default render target). Use an UnlitGeneric material instead


 Returns

 ITexture


Render target named __rt_supertexture2


"render/OverrideDepthEnable"
render.OverrideDepthEnable( boolean enable, boolean shouldWrite ) 
 Description
Overrides the write behaviour of all next rendering operations towards the depth buffer.

 Arguments

 boolean enable


Enable or disable the override.

 Arguments

 boolean shouldWrite


If the previous argument is true, sets whether the next rendering operations should write to the depth buffer or not. Has no effect if the previous argument is false.


"render/ModelMaterialOverride"
render.ModelMaterialOverride( IMaterial material ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets a material to override a models default material. Similar to Entity:SetMaterial except it uses an IMaterial argument and it can be used to change materials on models which are part of the world geometry.

 Arguments

 IMaterial material


The material override.

 Examples
 Example
Sets the material of all opaque models to the red flashing ERROR texture.

local error_mat = Material( models/error/new light1 )

function GM:PreDrawOpaqueRenderables( bDrawingDepth, bDrawingSkybox )

	render.ModelMaterialOverride( error_mat )
	
end


"render/PopCustomClipPlane"
render.PopCustomClipPlane(  ) 
 Description
Removes the current active clipping plane from the clip plane stack.


"render/PopFilterMag"
render.PopFilterMag(  ) 
 Description
Pops the current texture magnification filter from the filter stack.
See render.PushFilterMag


"render/PerformFullScreenStencilOperation"
render.PerformFullScreenStencilOperation(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"render/OverrideColorWriteEnable"
render.OverrideColorWriteEnable( boolean enable, boolean shouldWrite ) 
 Description
Overrides the write behaviour of all next rendering operations towards the color channel of the current render target.

 Arguments

 boolean enable


Enable or disable the override.

 Arguments

 boolean shouldWrite


If the previous argument is true, sets whether the next rendering operations should write to the color channel or not. Has no effect if the previous argument is false.


"render/PopFlashlightMode"
render.PopFlashlightMode(  ) 
 Description
Pops the current flashlight mode from the flashlight mode stack.


"render/PushFilterMag"
render.PushFilterMag( number texFilterType ) 
 Description
Pushes a texture filter onto the magnification texture filter stack.

 Arguments

 number texFilterType


The texture filter type, see TEXFILTER_ Enums


"render/ReadPixel"
render.ReadPixel( number x, number y ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Returns
6 Returns


 Description
Reads the color of the specified pixel from the RenderTarget sent by render.CapturePixels

 Arguments

 number x


The x coordinate.

 Arguments

 number y


The y coordinate.

 Returns

 number


r

 Returns

 number


g

 Returns

 number


b


"render/RenderHUD"
render.RenderHUD( number x, number y, number w, number h ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Renders the HUD on the screen.

 Arguments

 number x


X position for the HUD draw origin.

 Arguments

 number y


Y position for the HUD draw origin.

 Arguments

 number w


Width of the HUD draw.

 Arguments

 number h


Height of the HUD draw.


"render/PushRenderTarget"
render.PushRenderTarget( ITexture texture, number x=0, number y=0, number w=texture:Width(), number h=texture:Height() ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example




 Description
Pushes the current render target and viewport to the RT stack then sets a new current render target and viewport. If the viewport is not specified, the dimensions of the render target are used instead.
This is similar to a call to render.SetRenderTarget and render.SetViewPort where the current render target and viewport have been saved beforehand, except the viewport isnt clipped to screen bounds.
See also render.PopRenderTarget.



NOTE


If you want to render to the render target in 2d mode and it is not the same size as the screen, use cam.Start2D and cam.End2D.




NOTE


If the render target is bigger than the screen, rendering done with the surface library will be clipped to the screen bounds unless you call surface.DisableClipping


 Arguments

 ITexture texture


The new render target to be used.

 Arguments

 number x=0


X origin of the viewport.

 Arguments

 number y=0


Y origin of the viewport.

 Arguments

 number w=texture:Width()


Width of the viewport.

 Arguments

 number h=texture:Height()


Height of the viewport

 Examples
 Example
Shows how you can use alpha channel with render targets.

render.PushRenderTarget( texture )
render.OverrideAlphaWriteEnable( true, true )

render.ClearDepth()
render.Clear( 0, 0, 0, 0 )

render.OverrideAlphaWriteEnable( false )
render.PopRenderTarget()


"render/PopRenderTarget"
render.PopRenderTarget(  ) 
 Description
Pops the last render target and viewport from the RT stack and sets them as the current render target and viewport.
This is should be called to restore the previous render target and viewport after a call to render.PushRenderTarget.


"render/PopFilterMin"
render.PopFilterMin(  ) 
 Description
Pops the current texture minification filter from the filter stack.
See render.PushFilterMin


"render/OverrideBlendFunc"
render.OverrideBlendFunc( boolean enabled, number srcBlend, number destBlend, number srcBlendAlpha=nil, number destBlendAlpha=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example




 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Use render.OverrideBlend instead.
Overrides the internal graphical functions used to determine the final color and alpha of a rendered texture.
See also render.OverrideAlphaWriteEnable.



NOTE


Doing surface library draw calls with alpha set to 0 is a no-op and will never have any effect.


 Arguments

 boolean enabled


true to enable, false to disable. No other arguments are required when disabling.

 Arguments

 number srcBlend


The source color blend function BLEND_ Enums. Determines how a rendered textures final color should be calculated.

 Arguments

 number destBlend


 Arguments

 number srcBlendAlpha=nil


The source alpha blend function BLEND_ Enums. Determines how a rendered textures final alpha should be calculated.

 Arguments

 number destBlendAlpha=nil


 Examples
 Example
In this example we draw a lightning bolt over our players head.
We shouldnt really draw the lightning in the PreDrawTranslucentRenderables hook as this causes issues rendering transparent objects behind the lightning, but its a quick example of how the function works. Normally it should be drawn in a custom lua effects EFFECT:Render.

-- Our sprite texture to render. Rendering this texture without
-- render.OverrideBlendFunc will result in black borders around the lightning beam.
local lightningMaterial = Material( sprites/lgtning )

function GM:PreDrawTranslucentRenderables( isDrawingDepth, isDrawingSkybox )

	if ( isDrawingDepth or isDrawSkybox ) then return end

	local ply = Entity( 1 )

	if!IsValid( ply ) then return end

	-- Calculate a random UV to use for the lightning to give it some movement
	local uv = math.Rand( 0, 1 )

	-- Enable blend override to interpret the color and alpha from the texture.
	render.OverrideBlendFunc( true, BLEND_SRC_COLOR, BLEND_SRC_ALPHA, BLEND_ONE, BLEND_ZERO )

	render.SetMaterial( lightningMaterial )

	-- Render a lightning beam along points randomly offset from a line above the player.
	render.StartBeam( 5 )
	render.AddBeam( ply:GetPos() + Vector( 0,0,035 ), 20, uv, Color( 255,255,255,255 ) )
	render.AddBeam( ply:GetPos() + Vector( 0,0,135 ) + Vector( math.Rand( -20,20 ),math.Rand( -20,20 ),0 ), 20, uv*2, Color( 255,255,255,255 ) )
	render.AddBeam( ply:GetPos() + Vector( 0,0,235 ) + Vector( math.Rand( -20,20 ),math.Rand( -20,20 ),0 ), 20, uv*3, Color( 255,255,255,255 ) )
	render.AddBeam( ply:GetPos() + Vector( 0,0,335 ) + Vector( math.Rand( -20,20 ),math.Rand( -20,20 ),0 ), 20, uv*4, Color( 255,255,255,255 ) )
	render.AddBeam( ply:GetPos() + Vector( 0,0,435 ) + Vector( math.Rand( -20,20 ),math.Rand( -20,20 ),0 ), 20, uv*5, Color( 255,255,255,255 ) )
	render.EndBeam()

	 -- Disable blend override
	render.OverrideBlendFunc( false )

end
Output:


"render/PushFlashlightMode"
render.PushFlashlightMode( boolean enable=false ) 
 Description
Enables the flashlight projection for the upcoming rendering.



BUG


This will leave models lit under specific conditions.



 Arguments

 boolean enable=false


Whether the flashlight mode should be enabled or disabled.


"render/RenderView"
render.RenderView( table view=nil ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Renders the scene with the specified viewData to the current active render target.



BUG


Static props and LODs are rendered improperly due to incorrectly perceived distance.



 Arguments

 table view=nil


The view data to be used in the rendering. See ViewData structure. Any missing value is assumed to be that of the current view. Similarly, you can make a normal render by simply not passing this table at all.

 Examples
 Example
How you could use this to draw the view on a derma panel.

local frame = vgui.Create( DFrame )
frame:SetSize( ScrW() - 100, ScrH() - 100 )
frame:Center()
frame:MakePopup()

function frame:Paint( w, h )

	local x, y = self:GetPos()

	render.RenderView( {
		origin = Vector( 0, 0, 0 ),
		angles = Angle( 0, 0, 0 ),
		x = x, y = y,
		w = w, h = h
	} )

end
Output:


"render/PushFilterMin"
render.PushFilterMin( number texFilterType ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Pushes a texture filter onto the minification texture filter stack.

 Arguments

 number texFilterType


The texture filter type, see TEXFILTER_ Enums

 Examples
 Example
Anisotropic Filtering (This is not antialiasing)

render.PushFilterMag( TEXFILTER.ANISOTROPIC )
render.PushFilterMin( TEXFILTER.ANISOTROPIC )

-- Render stuff here

render.PopFilterMag()
render.PopFilterMin()


"render/ResetModelLighting"
render.ResetModelLighting( number r, number g, number b ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Resets the model lighting to the specified color.
Calls render.SetModelLighting for every direction with given color.

 Arguments

 number r


The red part of the color, 0-1

 Arguments

 number g


The green part of the color, 0-1

 Arguments

 number b


The blue part of the color, 0-1


"render/RedownloadAllLightmaps"
render.RedownloadAllLightmaps( boolean DoStaticProps=false ) 
 Description
This applies the changes made to map lighting using engine.LightStyle.

 Arguments

 boolean DoStaticProps=false


When true, this will also apply lighting changes to static props. This is really slow on large maps.


"render/PushCustomClipPlane"
render.PushCustomClipPlane( Vector normal, number distance ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Pushes a new clipping plane of the clip plane stack and sets it as active.



NOTE


A max of 2 clip planes are supported on Linux/POSIX, and 6 on Windows.


 Arguments

 Vector normal


The normal of the clipping plane.

 Arguments

 number distance


The distance of the plane from the world origin. You can use Vector:Dot between the normal and any point on the plane to find this, see Example 1.

 Examples
 Example
Clips the lower half of your custom entity

function ENT:Draw()
    local normal = self:GetUp() -- Everything behind this normal will be clipped
    local position = normal:Dot( self:GetPos() ) -- self:GetPos() is the origin of the clipping plane

    local oldEC = render.EnableClipping( true )
    render.PushCustomClipPlane( normal, position )

    self:DrawModel()

    render.PopCustomClipPlane()
    render.EnableClipping( oldEC )
end


"render/ResetToneMappingScale"
render.ResetToneMappingScale( number scale ) 
 Description
Resets the HDR tone multiplier to the specified value.
This will only work on HDR maps, and the value will automatically fade to what it was ( or whatever render.SetGoalToneMappingScale is ) if called only once.

 Arguments

 number scale


The value which should be used as multiplier.


"render/SetColorMaterial"
render.SetColorMaterial(  ) 
 Description
Sets the current drawing material to color.
The material is defined as:

UnlitGeneric
{
	$basetexture color/white
	$model 		1
	$translucent 	1
	$vertexalpha 	1
	$vertexcolor 	1
}


 Examples
 Example
Equivalent of this function

render.SetMaterial( Material( color ) )


"render/SetColorMaterialIgnoreZ"
render.SetColorMaterialIgnoreZ(  ) 
 Description
Sets the current drawing material to color_ignorez.
The material is defined as:

UnlitGeneric
{
	$basetexture color/white
 	$model 		1
	$translucent 	1
	$vertexalpha 	1
	$vertexcolor 	1
	$ignorez		1
}


 Examples
 Example
Equivalent of this function

render.SetMaterial( Material( color_ignorez ) )


"render/SetBlend"
render.SetBlend( number blending ) 
 Description
Sets the alpha blending for every upcoming render operation.



BUG


This does not affect non-model render.Draw* functions.



 Arguments

 number blending


Blending value from 0-1.


"render/SetGoalToneMappingScale"
render.SetGoalToneMappingScale( number scale ) 
 Description
Sets the goal HDR tone mapping scale.
Use this in a rendering/think hook as it is reset every frame.

 Arguments

 number scale


The target scale.


"render/SetColorModulation"
render.SetColorModulation( number r, number g, number b ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Sets the color modulation.

 Arguments

 number r


The red channel multiplier normal ranging from 0-1.

 Arguments

 number g


The green channel multiplier normal ranging from 0-1.

 Arguments

 number b


The blue channel multiplier normal ranging from 0-1.


"render/SetFogZ"
render.SetFogZ( number fogZ ) 
 Description
If the fog mode is set to MATERIAL_FOG_LINEAR_BELOW_FOG_Z, the fog will only be rendered below the specified height.

 Arguments

 number fogZ


The fog Z.


"render/SetAmbientLight"
render.SetAmbientLight( number r, number g, number b ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Sets the ambient lighting for any upcoming render operation.

 Arguments

 number r


The red part of the color, 0-1.

 Arguments

 number g


The green part of the color, 0-1.

 Arguments

 number b


The blue part of the color, 0-1.


"render/SetLightmapTexture"
render.SetLightmapTexture( ITexture tex ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the texture to be used as the lightmap in upcoming rendering operations. This is required when rendering meshes using a material with a lightmapped shader such as LightmappedGeneric.



NOTE


This is a rendering function that requires a 3D rendering context.This means that it will only work in hooks with a 3D rendering context.




NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 ITexture tex


The texture to be used as the lightmap.

 Examples
 Example
Creates a mesh with LightmappedGeneric material on it

-- LightmappedGeneric material that well use for our mesh
local meshMat = Material( concrete/concretefloor001a )

-- Mesh vertices ( notice that its not MeshVertex structure format, just something similar )
-- Notice that we have 2 UV coordinates channels, one for texture, one for lightmap
local meshVertices =
{

	{ pos = Vector( 0, 0, 0 ), u0 = 0, v0 = 0, u1 = 0, v1 = 0, n = Vector( 1, 0, 0 ) },
	{ pos = Vector( 0, 100, 0 ), u0 = 1, v0 = 0, u1 = 3, v1 = 0, n = Vector( 1, 0, 0 ) },
	{ pos = Vector( 0, 100, -100 ), u0 = 1, v0 = 1, u1 = 3, v1 = 3, n = Vector( 1, 0, 0 ) },
	{ pos = Vector( 0, 0, -100 ), u0 = 0, v0 = 1, u1 = 0, v1 = 3, n = Vector( 1, 0, 0 ) },
}


-- Run this command while ingame to create the mesh at map origin
concommand.Add( meshtest, function()

	-- Creating a render target to be used as lightmap texture
	meshLightmap = GetRenderTarget( test_mesh_lightmap, 128, 128, false )

	-- Filling the lightmap texture with some stuff for visualization
	render.PushRenderTarget( meshLightmap )

		cam.Start2D()

			-- Resetting lightmap to be monotone gray
			render.Clear( 128, 128, 128, 255 )

			-- Drawing a dark rectangle
			render.SetColorMaterial()
			surface.SetDrawColor( 80, 80, 80, 255 )
			surface.DrawRect( 32, 32, 64, 64 )

			-- And some color text, why not! Lightmaps support RGB color
			draw.SimpleText( This is lightmap, DermaDefault, 64, 64, Color( 255, 0, 0, 255 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

		cam.End2D()

	render.PopRenderTarget()

	-- Creating the mesh. Dont forget to pass the material youre gonna use with it!
	-- Shader of the material defines some features of the mesh, vertex structure
	-- specifically ( LightmappedGeneric requires each vertex to store 2 UV channels,
	-- for instance. This is important in this case )
	myTestMesh = Mesh( meshMat )

	-- Creating the mesh
	mesh.Begin( myTestMesh, MATERIAL_QUADS, 1 )

		for i, vertex in pairs( meshVertices ) do

			mesh.Position( vertex.pos )

			-- Texture coordinates go to channel 0
			mesh.TexCoord( 0, vertex.u0, vertex.v0 )

			-- Lightmap texture coordinates go to channel 1
			mesh.TexCoord( 1, vertex.u1, vertex.v1 )

			mesh.Normal( vertex.n )
			mesh.AdvanceVertex()
		end

	mesh.End()
end )

hook.Add( PostDrawOpaqueRenderables, LightmappedMeshTest, function()

	if ( myTestMesh and myTestMesh ~= NULL ) then

		render.SetMaterial( meshMat )
		render.SetLightmapTexture( meshLightmap )

		myTestMesh:Draw()
	end
end )
Output:


"render/SetLightingOrigin"
render.SetLightingOrigin( Vector lightingOrigin ) 
 Description
Sets the lighting origin.



BUG


This does not work for prop_physics.



 Arguments

 Vector lightingOrigin


The position from which the light should be emitted.


"render/SetLightingMode"
render.SetLightingMode( number Mode ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Sets lighting mode when rendering something.



NOTE


Do not forget to restore the default value to avoid unexpected behavior, like the world and the HUD/UI being affected


 Arguments

 number Mode


Lighting render mode
Possible values are:

 0 - Default
 1 - Total fullbright, similar to mat_fullbright 1 but excluding some weapon view models
 2 - Increased brightness(?), models look fullbright


 Examples
 Example
Draws a fullbright quad on 2D skybox

local MATERIAL = Material( skybox/trainup )

hook.Add( PostDraw2DSkyBox, Quaddrawer, function()
	render.OverrideDepthEnable( true, false )
	render.SetLightingMode( 2 )

	cam.Start3D( Vector( 0, 0, 0 ), EyeAngles() )
		render.SetMaterial( MATERIAL )
		render.DrawQuadEasy( Vector( 200,0,0 ), Vector( -1,0,0 ), 64, 64, Color( 255,255,255 ), 180 )
	cam.End3D()

	render.OverrideDepthEnable( false, false )
	render.SetLightingMode( 0 )
end )


 Examples
 Example
Display everything the same way as when you set mat_fullbright to 1.

local LightingModeChanged = false
hook.Add( PreRender, fullbright, function()
	render.SetLightingMode( 1 )
	LightingModeChanged = true
end )

local function EndOfLightingMod()
	if ( LightingModeChanged ) then
		render.SetLightingMode( 0 )
		LightingModeChanged = false
	end
end
hook.Add( PostRender, fullbright, EndOfLightingMod )
hook.Add( PreDrawHUD, fullbright, EndOfLightingMod )


"render/SetMaterial"
render.SetMaterial( IMaterial mat ) 
 Description
Sets the material to be used in any upcoming render operation using the render library.
Not to be confused with surface.SetMaterial.



NOTE


This is a rendering function that requires a 3D rendering context.This means that it will only work in hooks with a 3D rendering context.




NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 IMaterial mat


The material to be used.


"render/SetRenderTargetEx"
render.SetRenderTargetEx( number rtIndex, ITexture texture ) 
 Description
Sets the render target with the specified index to the specified rt.

 Arguments

 number rtIndex


The index of the rt to set.

 Arguments

 ITexture texture


The new render target to be used.


"render/SetModelLighting"
render.SetModelLighting( number lightDirection, number red, number green, number blue ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Sets up the ambient lighting for any upcoming render operation. Ambient lighting can be seen as a cube enclosing the object to be drawn, each of its faces representing a directional light source that shines towards the object. Thus, there is a total of six different light sources that can be configured separately.
Light color components are not restricted to a specific range (i.e. 0-255), instead, higher values will result in a brighter light.

 Arguments

 number lightDirection


The light source to edit, see BOX_ Enums.

 Arguments

 number red


The red component of the light color.

 Arguments

 number green


The green component of the light color.

 Arguments

 number blue


The blue component of the light color.


"render/SetShadowDirection"
render.SetShadowDirection( Vector shadowDirections ) 
 Description
Sets the shadow projection direction.

 Arguments

 Vector shadowDirections


The new shadow direction.


"render/SetRenderTarget"
render.SetRenderTarget( ITexture texture ) 
 Description
Sets the render target to the specified rt.

 Arguments

 ITexture texture


The new render target to be used.


"render/SetScissorRect"
render.SetScissorRect( number startX, number startY, number endX, number endY, boolean enable ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example




 Description
Sets a scissoring rect which limits the drawing area.

 Arguments

 number startX


X start coordinate of the scissor rect.

 Arguments

 number startY


Y start coordinate of the scissor rect.

 Arguments

 number endX


X end coordinate of the scissor rect.

 Arguments

 number endY


Y end coordinate of the scissor rect.

 Arguments

 boolean enable


Enable or disable the scissor rect.

 Examples
 Example
Shows how to use this function. This will cut the white rectangle from full screen to 512x512 box in top left corner

render.SetScissorRect( 0, 0, 512, 512, true ) -- Enable the rect
	draw.RoundedBox( 4, 0, 0, ScrW(), ScrH(), color_white ) -- Draw a white rectangle over the whole screen
render.SetScissorRect( 0, 0, 0, 0, false ) -- Disable after you are done


"render/SetShadowsDisabled"
render.SetShadowsDisabled( boolean newState ) 
 Description
Sets whether any future render operations will ignore shadow drawing.

 Arguments

 boolean newState


"render/SetStencilEnable"
render.SetStencilEnable( boolean newState ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets whether stencil tests are carried out for each rendered pixel.
Only pixels passing the stencil test are written to the render target.

 Arguments

 boolean newState


The new state.

 Examples
 Example
A basic stencil operation that limits rendering to the centre of the screen

hook.Add( PostDrawOpaqueRenderables, Stencil Tutorial Example, function()

	-- Reset everything to known good
	render.SetStencilWriteMask( 0xFF )
	render.SetStencilTestMask( 0xFF )
	render.SetStencilReferenceValue( 0 )
	render.SetStencilCompareFunction( STENCIL_ALWAYS )
	render.SetStencilPassOperation( STENCIL_KEEP )
	render.SetStencilFailOperation( STENCIL_KEEP )
	render.SetStencilZFailOperation( STENCIL_KEEP )
	render.ClearStencil()

	-- Enable stencils
	render.SetStencilEnable( true )
	-- Set the reference value to 1. This is what the compare function tests against
	render.SetStencilReferenceValue( 1 )
	-- Refuse to write things to the screen unless that pixels value is 1
	render.SetStencilCompareFunction( STENCIL_EQUAL )
	-- Write a 1 to the centre third of the screen. Because we cleared it earlier, everything is currently 0
	local w, h = ScrW() / 3, ScrH() / 3
	local x_start, y_start = w, h
	local x_end, y_end = x_start + w, y_start + h
	render.ClearStencilBufferRectangle( x_start, y_start, x_end, y_end, 1 )

	-- Draw our entities. They will only draw in the area cleared above
	for _, ent in pairs( ents.FindByClass( sent_stencil_test ) ) do
		ent:DrawModel()
	end

	-- Let everything render normally again
	render.SetStencilEnable( false )
end )
Output:


"render/SetShadowDistance"
render.SetShadowDistance( number shadowDistance ) 
 Description
Sets the maximum shadow projection range.

 Arguments

 number shadowDistance


The new maximum shadow distance.


"render/SetStencilCompareFunction"
render.SetStencilCompareFunction( number compareFunction ) 
 Description
Sets the compare function of the stencil.
Pixels which fail the stencil comparison function are not written to the render target. The operation to be performed on the stencil buffer values for these pixels can be set using render.SetStencilFailOperation.
Pixels which pass the stencil comparison function are written to the render target unless they fail the depth buffer test (where applicable). The operation to perform on the stencil buffer values for these pixels can be set using render.SetStencilPassOperation and render.SetStencilZFailOperation.

 Arguments

 number compareFunction


Compare function, see STENCILCOMPARISONFUNCTION_ Enums, and STENCIL_ Enums for short.


"render/SetLocalModelLights"
render.SetLocalModelLights( table lights={} ) 
 Description
Sets up the local lighting for any upcoming render operation. Up to 4 local lights can be defined, with one of three different types (point, directional, spot).
Disables all local lights if called with no arguments.

 Arguments

 table lights={}


A table containing up to 4 tables for each light source that should be set up. Each of these tables should contain the properties of its associated light source, see LocalLight structure.


"render/SetStencilReferenceValue"
render.SetStencilReferenceValue( number referenceValue ) 
 Description
Sets the reference value which will be used for all stencil operations. This is an unsigned integer.

 Arguments

 number referenceValue


Reference value.


"render/SetStencilWriteMask"
render.SetStencilWriteMask( number mask ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Sets the unsigned 8-bit write bitflag mask to be used for any writes to the stencil buffer.

 Arguments

 number mask


The mask bitflag.

 Examples
 Example
A brief demonstration of masks

hook.Add( PostDrawOpaqueRenderables, Stencil Tutorial Example, function()
	--[[
        To understand this tutorial you need to already understand the basics
         of binary and bitwise operations.

        It would also help to understand hexadecimal notation, since Lua
         doesnt have a bitmask input, but I will include binary notation in
         comments to help.
	--]]

	-- Reset everything to known good
	-- render.SetStencilWriteMask( 0xFF )
	-- render.SetStencilTestMask( 0xFF )
	render.SetStencilReferenceValue( 0 )
	-- render.SetStencilCompareFunction( STENCIL_ALWAYS )
	render.SetStencilPassOperation( STENCIL_KEEP )
	-- render.SetStencilFailOperation( STENCIL_KEEP )
	render.SetStencilZFailOperation( STENCIL_KEEP )
	render.ClearStencil()

	-- Enable stencils
	render.SetStencilEnable( true )
	-- Force everything to fail
	render.SetStencilCompareFunction( STENCIL_NEVER )
	-- Save all the things we dont draw
	render.SetStencilFailOperation( STENCIL_REPLACE )

	-- Set the reference value to 00011100
	render.SetStencilReferenceValue( 0x1C )
	-- Set the write mask to 01010101
	-- Any writes to the stencil buffer will be bitwise ANDed with this mask.
	-- With our current reference value, the result will be 00010100.
	render.SetStencilWriteMask( 0x55 )

	-- Fail to draw our entities.
	for _, ent in pairs( ents.FindByClass( sent_stencil_test ) ) do
		ent:DrawModel()
	end

	-- Set the test mask to 11110011.
	-- Any time a pixel is read out of the stencil buffer it will be bitwise ANDed with this mask.
	render.SetStencilTestMask( 0xF3 )
	-- Set the reference value to 00011100 &amp; 01010101 &amp; 11110011
	render.SetStencilReferenceValue( 0x10 )
	-- Pass if ( the masked buffer value matches the unmasked reference value
	render.SetStencilCompareFunction( STENCIL_EQUAL )

	-- Draw our entities
	render.ClearBuffersObeyStencil( 0, 148, 133, 255, false );

	-- Let everything render normally again
	render.SetStencilEnable( false )
end )


 Examples
 Example
A somewhat more complicated mask example

hook.Add( PostDrawOpaqueRenderables, Stencil Tutorial Example, function()
	--[[
        To understand this tutorial you need to already understand the basics
         of binary and bitwise operations.

        It would also help to understand hexadecimal notation, since Lua
         doesnt have a bitmask input, but I will include binary notation in
         comments to help.
	--]]

	-- Reset everything to known good
	-- render.SetStencilWriteMask( 0xFF )
	-- render.SetStencilTestMask( 0xFF )
	render.SetStencilReferenceValue( 0 )
	-- render.SetStencilCompareFunction( STENCIL_ALWAYS )
	render.SetStencilPassOperation( STENCIL_KEEP )
	-- render.SetStencilFailOperation( STENCIL_KEEP )
	render.SetStencilZFailOperation( STENCIL_KEEP )
	render.ClearStencil()

	-- Enable stencils
	render.SetStencilEnable( true )

	-- Only write to the upper 4 bits of the stencil buffer
	render.SetStencilWriteMask( 0xF0 )
	-- Wipe the stencil buffer to be 0001111. This is not affected by the write mask.
	render.ClearStencilBufferRectangle( 0, 0, ScrW(), ScrH(), 0x0F )

	-- Always fail
	render.SetStencilCompareFunction( STENCIL_NEVER )
	-- Dont read any bits from the stencil buffer
	render.SetStencilTestMask( 0x00 )
	-- When an operation fails, read the current value from the stencil buffer, add
	--  one to it and ) then write it back to the buffer
	-- This is not affected by the test mask, but it is affected by the write mask
	-- This means we will read 00001111, ) then write 00010000.
	-- However, due to the write mask, this wont affect the last four bits already
	--  in the buffer, resulting in 00011111.
	render.SetStencilFailOperation( STENCIL_INCR )

	-- Add something interesting to the stencil buffer
	for _, ent in pairs( ents.FindByClass( sent_stencil_test ) ) do
		ent:DrawModel()
	end


	-- Go back to reading the full value from the stencil buffer
	render.SetStencilTestMask( 0xFF )
	-- Set the reference value to 00011111
	render.SetStencilReferenceValue( 0x1F )
	-- Render the result
	render.SetStencilCompareFunction( STENCIL_EQUAL )
	render.ClearBuffersObeyStencil( 0, 148, 133, 255, false );

	-- Let everything render normally again
	render.SetStencilEnable( false )
end )


"render/SetShadowColor"
render.SetShadowColor( number red, number green, number blue ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Sets the shadow color.

 Arguments

 number red


The red channel of the shadow color.

 Arguments

 number green


The green channel of the shadow color.

 Arguments

 number blue


The blue channel of the shadow color.


"render/SetStencilZFailOperation"
render.SetStencilZFailOperation( number zFailOperation ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the operation to be performed on the stencil buffer values if the stencil test is passed but the depth buffer test fails.

 Arguments

 number zFailOperation


Z fail operation function, see STENCILOPERATION_ Enums

 Examples
 Example
This shows how to reveal hidden sections of entities, wallhack style

hook.Add( PostDrawOpaqueRenderables, Stencil Tutorial Example, function()

	-- Reset everything to known good
	render.SetStencilWriteMask( 0xFF )
	render.SetStencilTestMask( 0xFF )
	render.SetStencilReferenceValue( 0 )
	-- render.SetStencilCompareFunction( STENCIL_ALWAYS )
	render.SetStencilPassOperation( STENCIL_KEEP )
	render.SetStencilFailOperation( STENCIL_KEEP )
	-- render.SetStencilZFailOperation( STENCIL_KEEP )
	render.ClearStencil()

	-- Enable stencils
	render.SetStencilEnable( true )
	-- Set the reference value to 1. This is what the compare function tests against
	render.SetStencilReferenceValue( 1 )
	-- Always draw everything
	render.SetStencilCompareFunction( STENCIL_ALWAYS )
	-- If something would draw to the screen but is behind something, set the pixels it draws to 1
	render.SetStencilZFailOperation( STENCIL_REPLACE )

	-- Draw our entities. They will draw as normal
	for _, ent in pairs( ents.FindByClass( sent_stencil_test ) ) do
		ent:DrawModel()
	end

	-- Now, only draw things that have their pixels set to 1. This is the hidden parts of the stencil tests.
	render.SetStencilCompareFunction( STENCIL_EQUAL )
	-- Flush the screen. This will draw teal over all hidden sections of the stencil tests
	render.ClearBuffersObeyStencil( 0, 148, 133, 255, false );

	-- Let everything render normally again
	render.SetStencilEnable( false )
end )
Output:


"render/SetStencilTestMask"
render.SetStencilTestMask( number mask ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Sets the unsigned 8-bit test bitflag mask to be used for any stencil testing.

 Arguments

 number mask


The mask bitflag.

 Examples
 Example
A brief demonstration of masks

hook.Add( PostDrawOpaqueRenderables, Stencil Tutorial Example, function()
	--[[
        To understand this tutorial you need to already understand the basics
         of binary and bitwise operations.

        It would also help to understand hexadecimal notation, since Lua
         doesnt have a bitmask input, but I will include binary notation in
         comments to help.
	--]]

	-- Reset everything to known good
	-- render.SetStencilWriteMask( 0xFF )
	-- render.SetStencilTestMask( 0xFF )
	render.SetStencilReferenceValue( 0 )
	-- render.SetStencilCompareFunction( STENCIL_ALWAYS )
	render.SetStencilPassOperation( STENCIL_KEEP )
	-- render.SetStencilFailOperation( STENCIL_KEEP )
	render.SetStencilZFailOperation( STENCIL_KEEP )
	render.ClearStencil()

	-- Enable stencils
	render.SetStencilEnable( true )
	-- Force everything to fail
	render.SetStencilCompareFunction( STENCIL_NEVER )
	-- Save all the things we dont draw
	render.SetStencilFailOperation( STENCIL_REPLACE )

	-- Set the reference value to 00011100
	render.SetStencilReferenceValue( 0x1C )
	-- Set the write mask to 01010101
	-- Any writes to the stencil buffer will be bitwise ANDed with this mask.
	-- With our current reference value, the result will be 00010100.
	render.SetStencilWriteMask( 0x55 )

	-- Fail to draw our entities.
	for _, ent in pairs( ents.FindByClass( sent_stencil_test ) ) do
		ent:DrawModel()
	end

	-- Set the test mask to 11110011.
	-- Any time a pixel is read out of the stencil buffer it will be bitwise ANDed with this mask.
	render.SetStencilTestMask( 0xF3 )
	-- Set the reference value to 00011100 &amp; 01010101 &amp; 11110011
	render.SetStencilReferenceValue( 0x10 )
	-- Pass if ( the masked buffer value matches the unmasked reference value
	render.SetStencilCompareFunction( STENCIL_EQUAL )

	-- Draw our entities
	render.ClearBuffersObeyStencil( 0, 148, 133, 255, false );

	-- Let everything render normally again
	render.SetStencilEnable( false )
end )


 Examples
 Example
A somewhat more complicated mask example

hook.Add( PostDrawOpaqueRenderables, Stencil Tutorial Example, function()
	--[[
        To understand this tutorial you need to already understand the basics
         of binary and bitwise operations.

        It would also help to understand hexadecimal notation, since Lua
         doesnt have a bitmask input, but I will include binary notation in
         comments to help.
	--]]

	-- Reset everything to known good
	-- render.SetStencilWriteMask( 0xFF )
	-- render.SetStencilTestMask( 0xFF )
	render.SetStencilReferenceValue( 0 )
	-- render.SetStencilCompareFunction( STENCIL_ALWAYS )
	render.SetStencilPassOperation( STENCIL_KEEP )
	-- render.SetStencilFailOperation( STENCIL_KEEP )
	render.SetStencilZFailOperation( STENCIL_KEEP )
	render.ClearStencil()

	-- Enable stencils
	render.SetStencilEnable( true )

	-- Only write to the upper 4 bits of the stencil buffer
	render.SetStencilWriteMask( 0xF0 )
	-- Wipe the stencil buffer to be 0001111. This is not affected by the write mask.
	render.ClearStencilBufferRectangle( 0, 0, ScrW(), ScrH(), 0x0F )

	-- Always fail
	render.SetStencilCompareFunction( STENCIL_NEVER )
	-- Dont read any bits from the stencil buffer
	render.SetStencilTestMask( 0x00 )
	-- When an operation fails, read the current value from the stencil buffer, add
	--  one to it and ) then write it back to the buffer
	-- This is not affected by the test mask, but it is affected by the write mask
	-- This means we will read 00001111, ) then write 00010000.
	-- However, due to the write mask, this wont affect the last four bits already
	--  in the buffer, resulting in 00011111.
	render.SetStencilFailOperation( STENCIL_INCR )

	-- Add something interesting to the stencil buffer
	for _, ent in pairs( ents.FindByClass( sent_stencil_test ) ) do
		ent:DrawModel()
	end


	-- Go back to reading the full value from the stencil buffer
	render.SetStencilTestMask( 0xFF )
	-- Set the reference value to 00011111
	render.SetStencilReferenceValue( 0x1F )
	-- Render the result
	render.SetStencilCompareFunction( STENCIL_EQUAL )
	render.ClearBuffersObeyStencil( 0, 148, 133, 255, false );

	-- Let everything render normally again
	render.SetStencilEnable( false )
end )


"render/SetViewPort"
render.SetViewPort( number x, number y, number w, number h ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Changes the view port position and size.



NOTE


This function will override values of ScrW and ScrH with the ones you set.




BUG


Arguments are clamped to the clients screen bounds, disallowing render targets bigger than the screen. render.PushRenderTarget doesnt suffer from this.



 Arguments

 number x


X origin of the view port.

 Arguments

 number y


Y origin of the view port.

 Arguments

 number w


Width of the view port.

 Arguments

 number h


Height of the view port.

 Examples
 Example
Renders a screen with a dimension of 32 X 32 and resets the render system to normal.

local oldW, oldH = ScrW(), ScrH()
local oldRT = render.GetRenderTarget()

render.SetRenderTarget( RTName )
render.Clear( 0,0,0,255 )
render.SetViewPort( 0,0,32,32 )
	render.RenderView( CamData )
	render.SetRenderTarget( oldRT )
render.SetViewPort( 0,0,oldW,oldH )


"render/SetToneMappingScaleLinear"
render.SetToneMappingScaleLinear( Vector vec ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 Vector vec


"render/SetWriteDepthToDestAlpha"
render.SetWriteDepthToDestAlpha( boolean enable ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 boolean enable


"render/SetStencilPassOperation"
render.SetStencilPassOperation( number passOperation ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the operation to be performed on the stencil buffer values if the compare function was successful.

 Arguments

 number passOperation


Pass operation function, see STENCILOPERATION_ Enums

 Examples
 Example
This uses the pass operation to blank out everything but what we just drew

hook.Add( PostDrawOpaqueRenderables, Stencil Tutorial Example, function()

	-- Reset everything to known good
	render.SetStencilWriteMask( 0xFF )
	render.SetStencilTestMask( 0xFF )
	render.SetStencilReferenceValue( 0 )
	-- render.SetStencilCompareFunction( STENCIL_ALWAYS )
	-- render.SetStencilPassOperation( STENCIL_KEEP )
	render.SetStencilFailOperation( STENCIL_KEEP )
	render.SetStencilZFailOperation( STENCIL_KEEP )
	render.ClearStencil()

	-- Enable stencils
	render.SetStencilEnable( true )
	-- Set the reference value to 1. This is what the compare function tests against
	render.SetStencilReferenceValue( 1 )
	-- Only draw things if ( their pixels are NOT 1. Currently this is everything.
	render.SetStencilCompareFunction( STENCIL_NOTEQUAL )
	-- If something draws to the screen, set the pixels it draws to 1
	render.SetStencilPassOperation( STENCIL_REPLACE )

	-- Draw our entities. They will draw as normal
	for _, ent in pairs( ents.FindByClass( sent_stencil_test ) ) do
		ent:DrawModel()
	end

	-- At this point, we cannot draw on top of anything that we have already drawn.
	-- So, if ( we flush the screen, our entities will still be there.
	render.ClearBuffersObeyStencil( 0, 148, 133, 255, false );

	-- Let everything render normally again
	render.SetStencilEnable( false )
end )
Output:


"render/SupportsPixelShaders_2_0"
render.SupportsPixelShaders_2_0(  ) 
 Description
Returns if the current settings and the system allow the usage of pixel shaders 2.0.

 Returns

 boolean


Whether Pixel Shaders 2.0 are supported or not.


"render/TurnOnToneMapping"
render.TurnOnToneMapping(  ) 
 Description
Enables HDR tone mapping which influences the brightness.


"render/SetStencilFailOperation"
render.SetStencilFailOperation( number failOperation ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the operation to be performed on the stencil buffer values if the compare function was not successful.
Note that this takes place before depth testing.

 Arguments

 number failOperation


Fail operation function, see STENCILOPERATION_ Enums

 Examples
 Example
This is one of the most useful things stencils can do - not render something to the screen and then allow you to draw with the shape it would have been if it had rendered.
You can see in the output screenshot that a partially obscured entity will still write its entire shape to the stencil buffer.

hook.Add( PostDrawOpaqueRenderables, Stencil Tutorial Example, function()

	-- Reset everything to known good
	render.SetStencilWriteMask( 0xFF )
	render.SetStencilTestMask( 0xFF )
	render.SetStencilReferenceValue( 0 )
	-- render.SetStencilCompareFunction( STENCIL_ALWAYS )
	render.SetStencilPassOperation( STENCIL_KEEP )
	-- render.SetStencilFailOperation( STENCIL_KEEP )
	render.SetStencilZFailOperation( STENCIL_KEEP )
	render.ClearStencil()

	-- Enable stencils
	render.SetStencilEnable( true )
	-- Set the reference value to 1. This is what the compare function tests against
	render.SetStencilReferenceValue( 1 )
	-- Only draw things if ( their pixels are currently 1. Currently this is nothing.
	render.SetStencilCompareFunction( STENCIL_EQUAL )
	-- If something fails to draw to the screen, set the pixels it would have drawn to 1
	-- This includes if ( its behind something.
	render.SetStencilFailOperation( STENCIL_REPLACE )

	-- Draw our entities. They will not draw, because everything is 0
	for _, ent in pairs( ents.FindByClass( sent_stencil_test ) ) do
		ent:DrawModel()
	end

	-- If we were to re-draw our entities, wed see them, but otherwise theyre invisible.
	-- If we flush the screen, we can show the holes theyve left in the stencil buffer
	render.ClearBuffersObeyStencil( 0, 148, 133, 255, false );

	-- Let everything render normally again
	render.SetStencilEnable( false )
end )
Output:


"render/SupportsHDR"
render.SupportsHDR(  ) 
 Description
Returns whether the game supports HDR, i.e. if the DirectX level is higher than or equal to 8.

 Returns

 boolean


supportsHDR


"render/SupportsVertexShaders_2_0"
render.SupportsVertexShaders_2_0(  ) 
 Description
Returns if the current settings and the system allow the usage of vertex shaders 2.0.

 Returns

 boolean


Whether Vertex Shaders 2.0 are supported or not.


"render/UpdateFullScreenDepthTexture"
render.UpdateFullScreenDepthTexture(  ) 
 Description
Updates the texture returned by render.GetFullScreenDepthTexture.
Silently fails if render.SupportsPixelShaders_2_0 returns false.


"render/StartBeam"
render.StartBeam( number segmentCount ) 
 Description
Start a new beam draw operation.



NOTE


This is a rendering function that requires a 3D rendering context.This means that it will only work in hooks with a 3D rendering context.


 Arguments

 number segmentCount


Amount of beam segments that are about to be drawn.


"render/SupportsPixelShaders_1_4"
render.SupportsPixelShaders_1_4(  ) 
 Description
Returns if the current settings and the system allow the usage of pixel shaders 1.4.

 Returns

 boolean


Whether Pixel Shaders 1.4 are supported or not.


"render/SuppressEngineLighting"
render.SuppressEngineLighting( boolean suppressLighting ) 
 Description
Suppresses or enables any engine lighting for any upcoming render operation.

 Arguments

 boolean suppressLighting


True to suppress false to enable.


"render/Spin"
render.Spin(  ) 
 Description
Swaps the frame buffers/cycles the frame. In other words, this updates the screen.
If you take a really long time during a single frame render, it is a good idea to use this and let the user know that the game isnt stuck.

 Examples
 Example

-- Restore RT
render.SetRenderTarget( OldRT )

-- Render our result buffer to the screen
matFSB:SetFloat( $alpha, 1 )
matFSB:SetTexture( $basetexture, texFSB )

render.SetMaterial( matFSB )
render.DrawScreenQuad()

cam.Start2D()
	local add = ( i / ( math.pi*2 ) ) * ( 1 / passes )
	local percent = string.format( %.1f, ( mul - ( 1 / passes ) + add ) * 100 )
	draw.DrawText( percent .. %, GModWorldtip, view.w - 100, view.h - 100, Color( 0, 0, 0, 255 ), TEXT_ALIGN_CENTER )
	draw.DrawText( percent .. %, GModWorldtip, view.w - 101, view.h - 101, Color( 255, 255, 255, 255 ), TEXT_ALIGN_CENTER )
cam.End2D()

render.Spin()
Output:


"render/UpdatePowerOfTwoTexture"
render.UpdatePowerOfTwoTexture(  ) 
 Description
Updates the power of two texture.

 Returns

 ITexture


Returns render.GetPowerOfTwoTexture.


"render/UpdateRefractTexture"
render.UpdateRefractTexture(  ) 
 Description
Pretty much alias of render.UpdatePowerOfTwoTexture but does not return the texture.


"saverestore/AddRestoreHook"
saverestore.AddRestoreHook( string identifier, function callback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Adds a restore/load hook for the Half-Life 2 save system.

 Arguments

 string identifier


The unique identifier for this hook.

 Arguments

 function callback


The function to be called when an engine save is being loaded. It has one argument:
IRestore save - The restore object to be used to read data from save file that is being loaded

You can also use those functions to read data:
saverestore.ReadVar
saverestore.ReadTable
saverestore.LoadEntity



 Examples
 Example
Example usage.

saverestore.AddRestoreHook( HookNameHere, function( save )
	PrintTable( saverestore.ReadTable( save ) )
end )
Output:

If you used example from saverestore.AddSaveHook
1 = Test


"saverestore/AddSaveHook"
saverestore.AddSaveHook( string identifier, function callback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Adds a save hook for the Half-Life 2 save system. You can this to carry data through level transitions in Half-Life 2.

 Arguments

 string identifier


The unique identifier for this hook.

 Arguments

 function callback


The function to be called when an engine save is being saved. It has one argument:
ISave save - The save object to be used to write data to the save file that is being saved

You can also use those functions to save data:
saverestore.WriteVar
saverestore.WriteTable
saverestore.SaveEntity



 Examples
 Example
Example usage.

saverestore.AddSaveHook( HookNameHere, function( save )
	saverestore.WriteTable( { test }, save )
end )


"resource/AddFile"
resource.AddFile( string path ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Adds the specified and all related files to the files the client should download.
For convenience, this function will automatically add any other files that are related to the selected one, and throw an error if it cant find them. For example, a .vmt file will automatically add the .vtf with the same name, and a .mdl file will automatically add all .vvd, .ani, .dx80.vtx, .dx90.vtx, .sw.vtx, .phy and .jpg files with the same name, with a separate error for each missing file. If you do not want it to do this, use resource.AddSingleFile.



NOTE


Theres a 8192 downloadable file limit. If you need more, consider using Workshop addons - resource.AddWorkshop. You should also consider the fact that you have way too many downloads. This limit is shared among all resource.Add functions.




NOTE


Running this function using a path relative to the main garrysmod/ folder will not work for files in addons and gamemodes. Instead, the files must be added relative to their respective content folders. For example, a sound file from an addon would use the path sound/[FILENAME_AND_EXTENSION], despite the file being located in addons/[ADDON_NAME]/sound/[FILENAME_AND_EXTENSION]


 Arguments

 string path


Virtual path of the file to be added, relative to garrysmod/. Do not add .bz2 to the filepath. Do not put gamemodes/&lt;gamemodename&gt;/content/ or addons/&lt;addonname&gt;/ into the path.

 Examples
 Example
Example of usage.

resource.AddFile( materials/my/material.vmt ) -- Automatically adds materials/my/material.vtf
resource.AddFile( models/my/model.mdl ) -- Automatically adds models/my/model.vtx and the rest
resource.AddFile( sound/my/sound.wav ) -- Be careful, theres no S in the sound.


"render/UpdateScreenEffectTexture"
render.UpdateScreenEffectTexture(  ) 
 Description
Copies the entire screen to the screen effect texture, which can be acquired via render.GetScreenEffectTexture. This function is mainly intended to be used in GM:RenderScreenspaceEffects


"resource/AddSingleFile"
resource.AddSingleFile( string path ) 
 Description
Adds the specified file to the files the client should download.



NOTE


Theres a 8192 downloadable file limit. If you need more, consider using Workshop addons - resource.AddWorkshop. You should also consider the fact that you have way too many downloads. This limit is shared among all resource.Add functions.


 Arguments

 string path


Path of the file to be added, relative to garrysmod/


"resource/AddWorkshop"
resource.AddWorkshop( string workshopid ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Adds a workshop addon for the client to download before entering the server.
Having the raw files from a workshop item does not count as having already downloaded it.
So players who previously downloaded a map through Fast Download will have to re-download it if you use the workshop.
You should try to only add addons that have custom content ( models, sounds, etc ).
Gamemodes that are workshop enabled are automatically added to this list - so theres no need to add them.
The servers current map is also automatically added, if it is loaded from a workshop addon.



WARNING


This will not install the addon on your server, see Workshop for Dedicated Servers for installing Steam Workshop addons onto your servers


 Arguments

 string workshopid


The workshop id of the file. This cannot be a collection.

 Examples
 Example
Adds the Achievement Viewer addon (workshop id 104606562).
Any clients that join will download this addon if they havent previously downloaded it from the workshop or from the server (via the workshop).
You get the ID from the URL of the workshop addon.
For example, heres the URL of the Achievement Viewer addons page:
http://steamcommunity.com/sharedfiles/filedetails/?id=104606562
The ID is 104606562.

resource.AddWorkshop( 104606562 )
Output:

Players joining the server will now be forced to download the Achievement Viewer addon.


"saverestore/LoadEntity"
saverestore.LoadEntity( Entity ent, IRestore save ) 
 Description
Loads Entity:GetTable from the save game file that is being loaded and merges it with the given entitys Entity:GetTable.

 Arguments

 Entity ent


The entity which will receive the loaded values from the save.

 Arguments

 IRestore save


The restore object to read the Entity:GetTable from.


"saverestore/PreRestore"
saverestore.PreRestore(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Called by the engine just before saverestore.LoadGlobal is.


"saverestore/ReadVar"
saverestore.ReadVar( IRestore save ) 
 Description
Loads a variable from the save game file that is being loaded.
Variables will be read in the save order you have saved them.

 Arguments

 IRestore save


The restore object to read variables from.

 Returns

 any


The variable that was read, if any.


"saverestore/ReadTable"
saverestore.ReadTable( IRestore save ) 
 Description
Reads a table from the save game file that is being loaded.

 Arguments

 IRestore save


The restore object to read the table from.

 Returns

 table


The table that has been read, if any


"saverestore/PreSave"
saverestore.PreSave(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Called by the engine just before saverestore.SaveGlobal is.


"saverestore/SaveGlobal"
saverestore.SaveGlobal( ISave save ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Called by engine when a save is being saved.
This handles saving gamemode and calls all of the hooks added with saverestore.AddSaveHook.

 Arguments

 ISave save


The save object to write data into the save file.


"saverestore/LoadGlobal"
saverestore.LoadGlobal( IRestore save ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Called by engine when a save is being loaded.
This handles loading gamemode and calls all of the hooks added with saverestore.AddRestoreHook.

 Arguments

 IRestore save


The restore object to read data from the save file with.


"saverestore/WritableKeysInTable"
saverestore.WritableKeysInTable( table table ) 
 Description
Returns how many writable keys are in the given table.

 Arguments

 table table


The table to test.

 Returns

 number


The number of keys that can be written with saverestore.WriteTable.


"Schedule/AddTask"
Schedule:AddTask( string taskname, number taskdata ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it. Adds a task to the schedule.
See also NPC:StartEngineTask and NPC:RunEngineTask.

 Arguments

 string taskname



 Arguments

 number taskdata


Task data as a float


"saverestore/WriteTable"
saverestore.WriteTable( table table, ISave save ) 
 Description
Write a table to a save game file that is being saved.

 Arguments

 table table


The table to write

 Arguments

 ISave save


The save object to write the table to.


"saverestore/SaveEntity"
saverestore.SaveEntity( Entity ent, ISave save ) 
 Description
Saves entitys Entity:GetTable to the save game file that is being saved.

 Arguments

 Entity ent


The entity to save Entity:GetTable of.

 Arguments

 ISave save


The save object to save Entity:GetTable to.


"Schedule/EngTask"
Schedule:EngTask( string taskname, number taskdata ) 
 Description
Adds an engine task to the schedule.

 Arguments

 string taskname


Task name.

 Arguments

 number taskdata


Task data.


"saverestore/WriteVar"
saverestore.WriteVar( any value, ISave save ) 
 Description
Writes a variable to the save game file that is being saved.

 Arguments

 any value


The value to save.It can be one of the following types: number, boolean, string, Entity, Angle, Vector or table.

 Arguments

 ISave save


The save object to write the variable to.


"Schedule/NumTasks"
Schedule:NumTasks(  ) 
 Description
Returns the number of tasks in the schedule.

 Returns

 number


The number of tasks in this schedule.


"scripted_ents/GetMember"
scripted_ents.GetMember( string class, string name ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Retrieves a member of entitys table.

 Arguments

 string class


Entitys class name

 Arguments

 string name


Name of member to retrieve

 Returns

 any


The member or nil if failed


"scripted_ents/GetList"
scripted_ents.GetList(  ) 
 Description
Returns a copy of the list of all ENT tables registered

 Returns

 table


A table of ENT structures


"Schedule/Init"
Schedule:Init( string debugName ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Initialises the Schedule. Called by ai_schedule.New when the Schedule is created.
 Arguments

 string debugName


The name passed from ai_schedule.New.


"Schedule/GetTask"
Schedule:GetTask( number num ) 
 Description
Returns the task at the given index.

 Arguments

 number num


Task index.


"Schedule/AddTaskEx"
Schedule:AddTaskEx( string start, string run, number data ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 string start


 Arguments

 string run


 Arguments

 number data


"scripted_ents/GetSpawnable"
scripted_ents.GetSpawnable(  ) 
 Description
Returns a list of all ENT tables which contain either ENT.Spawnable or ENT.AdminSpawnable

 Returns

 table


A table of ENT structures


"scripted_ents/Alias"
scripted_ents.Alias( string alias, string classname ) 
 Description
Defines an alias string that can be used to refer to another classname

 Arguments

 string alias


A new string which can be used to refer to another classname

 Arguments

 string classname


The classname the alias should refer to


"scripted_ents/GetType"
scripted_ents.GetType( string classname ) 
 Description
Returns the type of a class, this will one of the following: anim, ai, brush, point.

 Arguments

 string classname


The classname to check

 Returns

 string


type


"search/AddProvider"
search.AddProvider( function provider, string id=nil ) 
 Description
Adds a search result provider. For examples, see gamemodes/sandbox/gamemode/cl_search_models.lua

 Arguments

 function provider


Provider function. It has one argument: string searchQuery
You must return a list of tables structured like this:

 string text - Text to Copy to clipboard
 function func - Function to use/spawn the item
 Panel icon - A panel to add to spawnmenu
 table words - A table of words?


 Arguments

 string id=nil


If provided, ensures that only one provider exists with the given ID at a time.


"scripted_ents/Register"
scripted_ents.Register( table ENT, string classname ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Registers an ENT table with a classname. Reregistering an existing classname will automatically update the functions of all existing entities of that class.



BUG


Sub-tables provided in the first argument will not carry over their metatable, and will receive a BaseClass key if the table was merged with the bases. Userdata references, which includes Vectors, Angles, Entities, etc. will not be copied.



 Arguments

 table ENT


The ENT table to register

 Arguments

 string classname


The classname to register

 Examples
 Example
local ENT = scripted_ents.Get( gmod_button )
local oldUse = ENT.Use
function ENT:Use( activator, caller, type, value )
 print( tostring( self.Entity ).. just got pressed! )
 oldUse( self,activator, caller, type, value )
end
scripted_ents.Register( ENT,gmod_button )


"search/GetResults"
search.GetResults( string query ) 
 Description
Retrieves search results.

 Arguments

 string query


Search query

 Returns

 table


A table of results ( Maximum 1024 items )


"PathFollower/GetClosestPosition"
PathFollower:GetClosestPosition( Vector position ) 
 Description
The closest position along the path to a position

 Arguments

 Vector position


The point were querying for

 Returns

 Vector


The closest position on the path


"scripted_ents/Get"
scripted_ents.Get( string classname ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns a copy of the ENT table for a class, including functions defined by the base class

 Arguments

 string classname


The classname of the ENT table to return, can be an alias

 Returns

 table


entTable

 Examples
 Example
Use of PrintTable function to print the contents of base_entity SENT table.

PrintTable( scripted_ents.Get( base_entity ) )
Output:

AdminOnly	=	false
Base	=	base_entity
ClassName	=	base_entity
Folder	=	entities/base_entity
Initialize	=	function: 0x2a205b50
OnRestore	=	function: 0x2a6d4b90
Spawnable	=	false
Think	=	function: 0x2a153780
Type	=	anim


"serverlist/PlayerList"
serverlist.PlayerList( string ip, function callback ) 
 Description
Queries a server for its player list.

 Arguments

 string ip


The IP address of the server, including the port.

 Arguments

 function callback


The function to be called if and when the request finishes. Function has one argument, a table containing tables with player info.
Each table with player info has next fields:
number time - The amount of time the player is playing on the server, in seconds
string name - The player name
number score - The players score


"scripted_ents/GetStored"
scripted_ents.GetStored( string classname ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the actual ENT table for a class. Modifying functions/variables in this table will change newly spawned entities

 Arguments

 string classname


The classname of the ENT table to return

 Returns

 table


entTable

 Examples
 Example
Modifies all newly spawned gmod_buttons to print a message on use

local ENT = scripted_ents.GetStored( gmod_button ).t
local oldUse = ENT.Use
function ENT:Use( activator, caller, type, value )
 print( tostring( self.Entity ).. just got pressed! )
 oldUse( self,activator, caller, type, value )
end


"scripted_ents/OnLoaded"
scripted_ents.OnLoaded(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Called after all ENTS have been loaded and runs baseclass.Set on each one.
You can retrieve all the currently registered ENTS with scripted_ents.GetList.



NOTE


This is not called after an ENT auto refresh, and thus the inherited baseclass functions retrieved with baseclass.Get will not be updated


"sound/AddSoundOverrides"
sound.AddSoundOverrides( string filepath ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Overrides sounds defined inside of a txt file; typically used for adding map-specific sounds.

 Arguments

 string filepath


Path to the script file to load.

 Examples
 Example
Adds and overrides all sounds defined in scripts/override_test.txt

sound.AddSoundOverrides( scripts/override_test.txt )
Output:

SoundEmitter: adding map sound overrides from scripts/override_test.txt [1 total, 1 replacements, 0 duplicated replacements]
(Displayed in the console)


"sound/GetProperties"
sound.GetProperties( string name ) 
 Description
Returns properties of the soundscript.

 Arguments

 string name


The name of the sound script

 Returns

 table


The properties of the soundscript. See SoundData structure


"sound/Add"
sound.Add( table soundData ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Creates a sound script. It can also override sounds, which seems to only work when set on the server.

 Arguments

 table soundData


The sounds properties. See SoundData structure

 Examples
 Example
Creates a sound script. It will automatically vary in pitch and be played in a given audio channel to better control which sounds mix with which sounds and how.
In this example, the file location could be: ( Choose one )

 garrysmod/sound/vehicles/enzo/idle.wav
 garrysmod/gamemodes/MyCoolGameMode/content/sound/vehicles/enzo/idle.wav
 garrysmod/addons/myCoolAddon/sound/vehicles/enzo/idle.wav
 garrysmod/addons/myCoolAddon/gamemodes/MyCoolGameMode/content/sound/vehicles/enzo/idle.wav

sound.Add( {
	name = enzo_engine_idle,
	channel = CHAN_STATIC,
	volume = 1.0,
	level = 80,
	pitch = {95, 110},
	sound = vehicles/enzo/idle.wav
} )
Output:

You can now play your custom sound script with Entity:EmitSound like so:
Entity( 1 ):EmitSound( enzo_engine_idle )


"serverlist/Query"
serverlist.Query( table data ) 
 Description
Queries the master server for server list.

 Arguments

 table data


The information about what kind of servers we want. See ServerQueryData structure.


"serverlist/AddCurrentServerToFavorites"
serverlist.AddCurrentServerToFavorites(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Adds current server the player is on to their favorites.


"scripted_ents/IsBasedOn"
scripted_ents.IsBasedOn( string name, string base ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Checks if name is based on base

 Arguments

 string name


Entitys class name to be checked

 Arguments

 string base


Base class name to be checked

 Returns

 boolean


Returns true if class name is based on base, else false.

 Examples
 Example
See if gmod_hands is based on base_anim.

print( scripted_ents.IsBasedOn( gmod_hands, base_anim ) )
Output:

true


"sound/GetTable"
sound.GetTable(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns a list of all registered sound scripts.

 Returns

 table


The list/array of all registered sound scripts ( No other information is provided )

 Examples
 Example
Writes all the sound scripts to a file in the data folder for easy searching.

file.Write( soundscripts.txt,table.concat( sound.GetTable(),\n ) )
Output:

data/soundscripts.txt:
...
Event.HostageKilled
PhxMetal.ImpactHard
PhxMetal.ImpactSoft
EpicMetal.ImpactHard
EpicMetal.ImpactSoft
EpicMetal_Heavy.ImpactHard
EpicMetal_Heavy.ImpactSoft
Egg.Crack
Phx.HoverLight
Phx.HoverStandard
Phx.HoverHeavy
Phx.Afterburner1
Phx.Afterburner2
Phx.Afterburner3
Phx.Afterburner4
Phx.Afterburner5
Phx.Turbine
Phx.Alien1
Phx.Alien2
Phx.Jet1
Phx.Jet2
Phx.Jet3
Phx.Jet4
Phx_Rubber_Tire.Strain
Explo.ww2bomb
AI_BaseNPC.BodyDrop_Heavy
AI_BaseNPC.BodyDrop_Light
AI_BaseNPC.SwishSound
AI_BaseNPC.SentenceStop
BaseCombatCharacter.CorpseGib
BaseCombatCharacter.StopWeaponSounds
BaseCombatCharacter.AmmoPickup
...


"sound/Generate"
sound.Generate( string indentifier, number samplerate, number length, function callback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Creates a sound from a function.



BUG


This function cannot generate sounds that have a duration of less than 1 second.



 Arguments

 string indentifier


An unique identified for the sound. You cannot override already existing ones.

 Arguments

 number samplerate


The sample rate of the sound. Must be 11025, 22050 or 44100.

 Arguments

 number length


The length in seconds of the sound to generate.

 Arguments

 function callback


A function which will be called to generate every sample on the sound. This function gets the current sample number passed as the first argument. The return value must be between -1.0 and 1.0. Other values will wrap back to the -1 to 1 range and basically clip. There are 65535 possible quantifiable values between -1 and 1.

 Examples
 Example
Plays a 2000 Hz sine wave at maximum volume

local frequency = 2000 -- Hz
local samplerate = 44100

local function data( t )
    return math.sin( t * math.pi * 2 / samplerate * frequency )
end

test_sound_id = test_sound_id and test_sound_id + 1 or 10

sound.Generate   ( testgen .. test_sound_id, samplerate, 2, data )
surface.PlaySound( testgen .. test_sound_id )


"sound/Play"
sound.Play( string Name, Vector Pos, number Level, number Pitch, number Volume ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example




 Description
Plays a sound from the specified position in the world.
If you want to play a sound without a position, such as a UI sound, use surface.PlaySound instead.

 Arguments

 string Name


A string path to the sound.

 Arguments

 Vector Pos


A vector describing where the sound should play.

 Arguments

 number Level


Sound level in decibels. 75 is normal. Ranges from 20 to 180, where 180 is super loud. This affects how far away the sound will be heard.

 Arguments

 number Pitch


An integer describing the sound pitch. Range is from 0 to 255. 100 is normal pitch.

 Arguments

 number Volume


A float ranging from 0-1 describing the output volume of the sound.

 Examples
 Example
Plays an explosion sound at the (0, 0, 0) map coordinates.

sound.Play( ambient/explosions/exp1.wav, Vector( 0, 0, 0 ) )


"spawnmenu/ActivateTool"
spawnmenu.ActivateTool( string tool ) 
 Description
Activates a tool, opens context menu and brings up the tool gun.

 Arguments

 string tool


Tool class/file name


"sound/PlayURL"
sound.PlayURL( string url, string flags, function callback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
For offline file playback, see sound.PlayFile.



BUG





 Arguments

 string url


The URL of the sound to play

 Arguments

 string flags


Flags for the sound. Can be one or more of following, separated by a space ( ):

 3d - Makes the sound 3D, so you can set its position
 mono - Forces the sound to have only one channel
 noplay - Forces the sound not to play as soon as this function is called
 noblock - Disables streaming in blocks. It is more resource-intensive, but it is required for IGModAudioChannel:SetTime.

If you dont want to use any of the above, you can just leave it as .

 Arguments

 function callback


Callback function that is called as soon as the the stream is loaded. It has next arguments:
IGModAudioChannel soundchannel - The sound channel
number errorID - ID of an error, if an error has occured
string errorName - Name of an error, if an error has occured



 Examples
 Example
Example usage of the function.

sound.PlayURL ( URL, 3d, function( station )
	if ( IsValid( station ) ) then

		station:SetPos( LocalPlayer():GetPos() )
	
		station:Play()

	else

		LocalPlayer():ChatPrint( Invalid URL! )

	end
end )


"spawnmenu/AddToolMenuOption"
spawnmenu.AddToolMenuOption( string tab, string category, string class, string name, string cmd, string config, function cpanel, table table={} ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Examples

10.1 Example




 Description
Adds an option to the right side of the spawnmenu

 Arguments

 string tab


The spawnmenu tab to add into (for example Utilities)

 Arguments

 string category


The category to add into (for example Admin)

 Arguments

 string class


Unique identifier of option to add

 Arguments

 string name


The nice name of item

 Arguments

 string cmd


Command to execute when the item is selected

 Arguments

 string config


Config name, used in older versions to load tool settings UI from a file. No longer works.

This feature is deprecated.
You should avoid using it as it may be removed in a future version.

 Arguments

 function cpanel


A function to build the context panel. The function has one argument:

 Panel pnl - A DForm that will be shown in the context menu


 Arguments

 table table={}


Allows to override the table that will be added to the tool list. Some of the fields will be overwritten by this function.

 Examples
 Example
Adds a new option to the menu with a slider to change the gravity

hook.Add( PopulateToolMenu, CustomMenuSettings, function()
	spawnmenu.AddToolMenuOption( Utilities, Stuff, Custom_Menu, My Custom Menu, , , function( panel )
		panel:ClearControls()
		panel:NumSlider( Gravity, sv_gravity, 0, 600 )
		-- Add stuff here
	end )
end )
Output:


"spawnmenu/AddContentType"
spawnmenu.AddContentType( string name, function constructor ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Registers a new content type that is saveable into spawnlists.
Created/called by spawnmenu.CreateContentIcon.

 Arguments

 string name


An unique name of the content type.

 Arguments

 function constructor


A function that is called whenever we need create a new panel for this content type.
It has two arguments:
Panel container - The container/parent of the new panel
table data - Data for the content type passed from spawnmenu.CreateContentIcon



 Examples
 Example
A simple header content type.

spawnmenu.AddContentType( header, function( container, obj )

	if ( !obj.text or type( obj.text )!= string ) then return end

	local label = vgui.Create( ContentHeader, container )
	label:SetText( obj.text )
	
	container:Add( label )
	
end )


"spawnmenu/AddCreationTab"
spawnmenu.AddCreationTab( string name, function function, string material=icon16/exclamation.png, number order=1000, string tooltip=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example




 Description
Inserts a new tab into the CreationMenus table, which will be used by the creation menu to generate its tabs (Spawnlists, Weapons, Entities, etc.)

 Arguments

 string name


What text will appear on the tab (I.E Spawnlists).

 Arguments

 function function


The function called to generate the content of the tab.

 Arguments

 string material=icon16/exclamation.png


Path to the material that will be used as an icon on the tab.

 Arguments

 number order=1000


The order in which this tab should be shown relative to the other tabs on the creation menu.

 Arguments

 string tooltip=nil


The tooltip to be shown for this tab.

 Examples
 Example
An excerpt from the Dupe creation menu tab.

spawnmenu.AddCreationTab( #spawnmenu.category.dupes, function()

    HTML = vgui.Create( DHTML );
        JS_Language( HTML )
        HTML:SetAllowLua( true );
        HTML:OpenURL( asset://garrysmod/html/dupes.html );
        HTML:Call( SetDupeSaveState(  .. tostring( DupeInClipboard )..  ); );        

    return HTML

end, icon16/control_repeat_blue.png, 200 )
Output:

A new tab named Dupes will be placed in the creation menu.


"spawnmenu/ActivateToolPanel"
spawnmenu.ActivateToolPanel( number tab, Panel cp ) 
 Description
Activates tools context menu in specified tool tab.

 Arguments

 number tab


The tabID of the tab to open the context menu in

 Arguments

 Panel cp


The control panel to open


"sound/PlayFile"
sound.PlayFile( string path, string flags, function callback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
For external file/stream playback, see sound.PlayURL.



BUG


This fails for looping .wav files in 3D mode.





BUG


This fails with unicode file names.



 Arguments

 string path


The path to the file to play.

Unlike other sound functions and structures, the path is relative to garrysmod/ instead of garrysmod/sound/

 Arguments

 string flags


Flags for the sound. Can be one or more of following, separated by a space ( ):

 3d - Makes the sound 3D, so you can set its position
 mono - Forces the sound to have only one channel
 noplay - Forces the sound not to play as soon as this function is called
 noblock - Disables streaming in blocks. It is more resource-intensive, but it is required for IGModAudioChannel:SetTime.

If you dont want to use any of the above, you can just leave it as .

 Arguments

 function callback


Callback function that is called as soon as the the stream is loaded. It has next arguments:
IGModAudioChannel soundchannel - The sound channel. Will be nil if an error occured.
number errorID - ID of an error if an error has occured. Will be nil, otherwise.
string errorName - Name of an error if an error has occured. Will be nil, otherwise.



 Examples
 Example
Plays the Vortal Combat soundtrack from Half-Life 2: Episode 2

sound.PlayFile( sound/music/vlvx_song22.mp3, , function( station )
	if ( IsValid( station ) ) then station:Play() end
end )


"spawnmenu/AddToolTab"
spawnmenu.AddToolTab( string name, string label=name, string icon=icon16/wrench.png ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Adds a new tool tab to the right side of the spawnmenu via the SANDBOX:AddToolMenuTabs hook.
This function is a inferior duplicate of spawnmenu.GetToolMenu, just without its return value.

 Arguments

 string name


The internal name of the tab. This is used for sorting.

 Arguments

 string label=name


The nice name of the tab (Tip: language.Add)

 Arguments

 string icon=icon16/wrench.png


The filepath to the icon of the tab. Should be a .png

 Examples
 Example
Creates a new tab named, Tab name! with a unique name and a wrench icon.

hook.Add( AddToolMenuTabs, myHookClass, function()
	spawnmenu.AddToolTab( Tab name!, #Unique_Name, icon16/wrench.png )
end )


"spawnmenu/ActiveControlPanel"
spawnmenu.ActiveControlPanel(  ) 
 Description
Returns currently opened control panel of a tool, post process effect or some other menu in spawnmenu.

 Returns

 Panel


The currently opened control panel, if any.


"spawnmenu/ClearToolMenus"
spawnmenu.ClearToolMenus(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"spawnmenu/DoSaveToTextFiles"
spawnmenu.DoSaveToTextFiles( table spawnlists ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Calls spawnmenu.SaveToTextFiles.

 Arguments

 table spawnlists


A table containing spawnlists.


"spawnmenu/GetContentType"
spawnmenu.GetContentType( string contentType ) 
 Description
Returns the function to create an vgui element for a specified content type

 Arguments

 string contentType


 Returns

 function


The panel creation function


"spawnmenu/GetCreationTabs"
spawnmenu.GetCreationTabs(  ) 
 Description
Gets the CreationMenus table, which was filled with creation menu tabs from spawnmenu.AddCreationTab.

 Returns

 table


The CreationMenus table. See the CreationMenus structure.


"spawnmenu/GetCustomPropTable"
spawnmenu.GetCustomPropTable(  ) 
 Description
Similar to spawnmenu.GetPropTable, but only returns spawnlists created by addons via spawnmenu.AddPropCategory.
These spawnlists are shown in a separate menu in-game.

 Returns

 table


See spawnmenu.GetPropTable for table format.


"spawnmenu/GetPropTable"
spawnmenu.GetPropTable(  ) 
 Description
Returns a table of all prop categories and their props in the spawnmenu.
Note that if the spawnmenu has not been populated, this will return an empty table.
This will not return spawnlists created by addons, see spawnmenu.GetCustomPropTable for that.

 Returns

 table


Table of all the prop categories and props in the following format:

{
	[settings/spawnlist/001-construction props.txt] =
{
		name = Construction Props,
		icon = icon16/page.png,
		id = 1,
		parentid = 0,
		needsapp = ,
		contents =
{
			{
				model = models/Cranes/crane_frame.mdl,
				type = model
			}

			-- etc.
		},
	}

	-- etc.
}


"spawnmenu/GetToolMenu"
spawnmenu.GetToolMenu( string name, string label=name, string icon=icon16/wrench.png ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Adds a new tool tab (or returns an existing one by name) to the right side of the spawnmenu via the SANDBOX:AddToolMenuTabs hook.

 Arguments

 string name


The internal name of the tab. This is used for sorting.

 Arguments

 string label=name


The nice name of the tab

 Arguments

 string icon=icon16/wrench.png


The filepath to the icon of the tab. Should be a .png

 Returns

 table


A table of tables representing categories and items in the left part of the tab. See example below to example structure.

 Examples
 Example
Prints out the contents of the default Tool Tab.

PrintTable( spawnmenu.GetToolMenu( Main ) )
Output:

1:
		1:
				CPanelFunction	=	function: 0x48a60408
				Command	=	gmod_tool axis
				Controls	=	axis
				ItemName	=	axis
				Text	=	#tool.axis.name
		2:
				CPanelFunction	=	function: 0x48a6b218
				Command	=	gmod_tool ballsocket
				Controls	=	ballsocket
				ItemName	=	ballsocket
				Text	=	#tool.ballsocket.name
		3:
				CPanelFunction	=	function: 0x48a8be48
				Command	=	gmod_tool elastic
				Controls	=	elastic
				ItemName	=	elastic
				Text	=	#tool.elastic.name
		4:
				CPanelFunction	=	function: 0x48ab5998
				Command	=	gmod_tool hydraulic
				Controls	=	hydraulic
				ItemName	=	hydraulic
				Text	=	#tool.hydraulic.name
...
		ItemName	=	Constraints
		Text	=	#spawnmenu.tools.constraints
2:
		1:
				CPanelFunction	=	function: 0x3a4235c8
				Command	=	gmod_tool balloon
				Controls	=	balloon
				ItemName	=	balloon
				Text	=	#tool.balloon.name
...
		ItemName	=	Construction
		Text	=	#spawnmenu.tools.construction
...


"spawnmenu/PopulateFromTextFiles"
spawnmenu.PopulateFromTextFiles( function callback ) 
 Description
Loads spawnlists from text files.

 Arguments

 function callback


The function to call. Arguments are ( strFilename, strName, tabContents, icon, id, parentid, needsapp )


"spawnmenu/AddToolCategory"
spawnmenu.AddToolCategory( string tab, string RealName, string PrintName ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Used to create a new category in the list inside of a spawnmenu ToolTab.
You must call this function from SANDBOX:AddToolMenuCategories for it to work properly.

 Arguments

 string tab


The ToolTab name, as created with spawnmenu.AddToolTab.

You can also use the default ToolTab names Main and Utilities.

 Arguments

 string RealName


The identifier name

 Arguments

 string PrintName


The displayed name

 Examples
 Example
Adds the Constraints category to the Main ToolTab. See lua\includes\modules\spawnmenu.lua.

spawnmenu.AddToolCategory( Main, Constraints, #spawnmenu.tools.constraints )


 Examples
 Example
Adds the User category to the Utilities ToolTab. See lua\autorun\utilities_menu.lua.

spawnmenu.AddToolCategory( Utilities, User, #spawnmenu.utilities.user )


"spawnmenu/CreateContentIcon"
spawnmenu.CreateContentIcon( string type, Panel parent, table data ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Creates a new content icon.

 Arguments

 string type


The type of the content icon.

 Arguments

 Panel parent


The parent to add the content icon to.

 Arguments

 table data


The data to send to the content icon in spawnmenu.AddContentType

 Returns

 Panel


The created content icon, if it was returned by spawnmenu.AddContentType


"sql/Query"
sql.Query( string query ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Performs a query on the local SQLite database, returns a table as result set, nil if result is empty and false on error.

 Arguments

 string query


The query to execute.

 Returns

 table


false is returned if there is an error, nil if the query returned no data.

 Examples
 Example
Functions that are examples of saving and creating information into the database.

function CreateTable()
     sql.Query( CREATE TABLE player_data( SteamID TEXT, Money INTEGER ) )
end

function NewPlayerToDataBase( ply )
     sql.Query( INSERT INTO player_data( SteamID, Money ) VALUES( ..ply:SteamID().., 0 ) )
end

function SavePlayerToDatabase( ply, Money )
     sql.Query( UPDATE player_data SET Money=..Money.. WHERE SteamID=..ply:SteamID().. )
end


"spawnmenu/PopulateFromEngineTextFiles"
spawnmenu.PopulateFromEngineTextFiles(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Calls spawnmenu.PopulateFromTextFiles.


"spawnmenu/AddPropCategory"
spawnmenu.AddPropCategory( string filename, string name, table contents, string icon, number id=1000, number parentID=0, string needsApp= ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Examples

9.1 Example




 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.

You should never try to modify players customized spawnlists.
Used to populate prop categories in the spawnmenu tree. This function should generally be called within SANDBOX:PopulatePropMenu.

 Arguments

 string filename


The filename of the list. This name has to be unique, but doesnt have to actually exist. If a player saves changes made to this list, it will be saved under this name.

 Arguments

 string name


The name of the category e.g. Comic Props.

 Arguments

 table contents


A table of entries for the spawn menu. It must be numerically indexed.
Each member of the table is a sub-table containing a type member, and other members depending on the type.

 string type - header - a simple header for organization
 string text - The text that the header will display


 string type - model - spawns a model where the player is looking
 string model - The path to the model file
 number skin - The skin for the model to use (optional)
 string body - The bodygroups for the model (optional)
 number wide - The width of the spawnicon (optional)
 number tall - The height of the spawnicon (optional)


 string type - entity - spawns an entity where the player is looking (appears in the Entities tab by default)
 string spawnname - The filename of the entity, for example sent_ball
 string nicename - The name of the entity to display
 string material - The icon to display, this should be set to entities/&lt;sent_name&gt;.png
 boolean admin - Whether the entity is only spawnable by admins (optional)


 string type - vehicle - spawns a vehicle where the player is looking (appears in the Vehicles tab by default)
 string spawnname - The filename of the vehicle
 string nicename - The name of the vehicle to display
 string material - The icon to display
 boolean admin - Whether the vehicle is only spawnable by admins (optional)


 string type - npc - spawns an NPC where the player is looking (appears in the NPCs tab by default)
 string spawnname - The spawn name of the NPC
 string nicename - The name to display
 string material - The icon to display
 table weapon - A table of potential weapons (each a string) to give to the NPC. When spawned, one of these will be chosen randomly each time.
 boolean admin - Whether the NPC is only spawnable by admins (optional)


 string type - weapon - When clicked, gives the player a weapon; when middle-clicked, spawns a weapon where the player is looking (appears in the Weapons tab by default)
 string spawnname - The spawn name of the weapon
 string nicename - The name to display
 string material - The icon to display
 boolean admin - Whether the weapon is only spawnable by admins (optional)



 Arguments

 string icon


The icon to use in the tree.

 Arguments

 number id=1000


The unique ID number for the spawnlist category. Used to make sub categories. See parentID parameter below. If not set, it will be automatically set to ever increasing number, starting with 1000.

 Arguments

 number parentID=0


The unique ID of the parent category. This will make the category a subcategory of that given. 0 makes this a base category (such as Builder).

 Arguments

 string needsApp=


The needed game for this prop category, if one is needed. If the specified game is not mounted, the category isnt shown. This uses the shortcut name, e.g. cstrike, and not the Steam AppID.

 Examples
 Example
Create a spawn menu with two icons for each type

hook.Add( PopulatePropMenu, Add Two Of Each, function()
	
	local contents = {}

	
	-- Props
	table.insert( contents, {
		type = header,
		text = Props
	} )
	table.insert( contents, {
		type = model,
		model = models/props_c17/oildrum001.mdl
	} )
	table.insert( contents, {
		type = model,
		model = models/props_wasteland/cargo_container01.mdl,
		skin = 1,
		wide = 128,
		tall = 64
	} )

	-- Entities
	table.insert( contents, {
		type = header,
		text = Entities
	} )
	table.insert( contents, {
		type = entity,
		spawnname = sent_ball,
		nicename = Bouncy Ball,
		material = entities/sent_ball.png
	} )
	table.insert( contents, {
		type = entity,
		spawnname = combine_mine,
		nicename = Hopper Mine,
		material = entities/combine_mine.png
	} )

	-- Vehicles
	table.insert( contents, {
		type = header,
		text = Vehicles
	} )
	table.insert( contents, {
		type = vehicle,
		spawnname = Airboat,
		nicename = Half-Life 2 Airboat,
		material = entities/Airboat.png
	} )
	table.insert( contents, {
		type = vehicle,
		spawnname = Chair_Office2,
		nicename = Executives Chair,
		material = entities/Chair_Office2.png
	} )

	-- NPCs
	table.insert( contents, {
		type = header,
		text = NPCs
	} )
	table.insert( contents, {
		type = npc,
		spawnname = npc_citizen,
		nicename = A random citizen,
		material = entities/npc_citizen.png,
		weapon = { weapon_smg1, weapon_crowbar }

	} )
	table.insert( contents, {
		type = npc,
		spawnname = npc_headcrab,
		nicename = Headhumper,
		material = entities/npc_headcrab.png
	} )

	-- Weapons
	table.insert( contents, {
		type = header,
		text = Weapons
	} )
	table.insert( contents, {
		type = weapon,
		spawnname = weapon_crowbar,
		nicename = Crowbar,
		material = entities/weapon_crowbar.png,
	} )
	table.insert( contents, {
		type = weapon,
		spawnname = weapon_smg1,
		nicename = SMG,
		material = entities/weapon_smg1.png,
	} )

	spawnmenu.AddPropCategory( TwoOfEach, Two of each type, contents, icon16/box.png )
end )
Output:


"sql/Begin"
sql.Begin(  ) 
 Description
Tells the engine a set of queries is coming. Will wait until sql.Commit is called to run them.
This is most useful when you run more than 100+ queries.

This is equivalent to sql.Query( BEGIN )


"spawnmenu/GetTools"
spawnmenu.GetTools(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Gets a table of tools on the client.

 Returns

 table


A table with groups of tools, along with information on each tool.

 Examples
 Example
Prints the output

PrintTable( spawnmenu.GetTools() )
Output:

1:
        Icon    =   icon16/wrench.png
        Items:
                1:
                        1:
                                CPanelFunction  =   function: 0x341391a8
                                Command =   gmod_tool axis
                                Controls    =   axis
                                ItemName    =   axis
                                Text    =   #tool.axis.name
                        2:
                                CPanelFunction  =   function: 0x341c7368
                                Command =   gmod_tool ballsocket
                                Controls    =   ballsocket
                                ItemName    =   ballsocket
                                Text    =   #tool.ballsocket.name
                        3:
                                CPanelFunction  =   function: 0x343826e8
                                Command =   gmod_tool elastic
                                Controls    =   elastic
                                ItemName    =   elastic
                                Text    =   #tool.elastic.name
                        ...
                        ItemName    =   Constraints
                        Text    =   #spawnmenu.tools.constraints
                2:
                        1:
                                CPanelFunction  =   function: 0x342138f0
                                Command =   gmod_tool balloon
                                Controls    =   balloon
                                ItemName    =   balloon
                                Text    =   #tool.balloon.name
                        2:
                                CPanelFunction  =   function: 0x340d7628
                                Command =   gmod_tool button
                                Controls    =   button
                                ItemName    =   button
                                Text    =   #tool.button.name
                        3:
                                CPanelFunction  =   function: 0x34302670
                                Command =   gmod_tool duplicator
                                Controls    =   duplicator
                                ItemName    =   duplicator
                                Text    =   #tool.duplicator.name
                        ...
                        ItemName    =   Construction
                        Text    =   #spawnmenu.tools.construction
               ...
        Label   =   #spawnmenu.tools_tab
        Name    =   AAAAAAA_Main
2:
        Icon    =   icon16/page_white_wrench.png
        Items:
                1:
                        1:
                                CPanelFunction  =   function: 0x34236090
                                Command =   
                                Controls    =   
                                ItemName    =   User_Cleanup
                                Text    =   #spawnmenu.utilities.cleanup
                        2:
                                CPanelFunction  =   function: 0x34236418
                                Command =   
                                Controls    =   
                                ItemName    =   PhysgunSettings
                                Text    =   #spawnmenu.utilities.physgunsettings
                        3:
                                CPanelFunction  =   function: 0x34232640
                                Command =   
                                Controls    =   
                                ItemName    =   Undo
                                Text    =   #spawnmenu.utilities.undo
                        ItemName    =   User
                        Text    =   #spawnmenu.utilities.user
               ...
        Label   =   #spawnmenu.utilities_tab
        Name    =   Utilities


"spawnmenu/SetActiveControlPanel"
spawnmenu.SetActiveControlPanel( Panel pnl ) 
 Description
Sets currently active control panel to be returned by spawnmenu.ActiveControlPanel.

 Arguments

 Panel pnl


The panel to set.


"sql/Commit"
sql.Commit(  ) 
 Description
Tells the engine to execute a series of queries queued for execution, must be preceded by sql.Begin

This is equivalent to sql.Query( COMMIT )


"sql/QueryRow"
sql.QueryRow( string query, number row=1 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Performs the query like sql.Query, but returns the first row found.

Basically equivalent tosql.Query( *query* LIMIT 1 )
 Arguments

 string query


The input query

 Arguments

 number row=1


The row number. Say we receive back 5 rows, putting 3 as this argument will give us row #3.

 Returns

 table


The returned row.


"sql/QueryValue"
sql.QueryValue( string query ) 
 Description
Performs the query like sql.QueryRow, but returns the first value found.

 Arguments

 string query


The input query.

 Returns

 any


The returned value; the engine automatically converts numerical output to Lua numbers.


"spawnmenu/SaveToTextFiles"
spawnmenu.SaveToTextFiles( table spawnlists ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Saves a table of spawnlists to files.

 Arguments

 table spawnlists


A table containing spawnlists.


"sql/TableExists"
sql.TableExists( string tableName ) 
 Description
Returns if the table with the specified name exists.

 Arguments

 string tableName


The name of the table to check.

 Returns

 boolean


exists


"Stack/Push"
Stack:Push( any object ) 
 Description
Push an item onto the stack

 Arguments

 any object


The item you want to push


"sql/LastError"
sql.LastError(  ) 
 Description
Returns the last error from a SQLite query.

 Returns

 string


error


"Stack/Pop"
Stack:Pop( number amount=1 ) 
 Description
Pop an item from the stack

 Arguments

 number amount=1


Amount of items you want to pop.


"Stack/Size"
Stack:Size(  ) 
 Description
Returns the size of the stack

 Returns

 number


The size of the stack


"spawnmenu/SwitchToolTab"
spawnmenu.SwitchToolTab( number id ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.
Supposed to open specified tool tab in spawnmenu, in reality does nothing.

 Arguments

 number id


The tab ID to open


"Stack/Top"
Stack:Top(  ) 
 Description
Get the item at the top of the stack

 Returns

 any


The item at the top of the stack


"sql/SQLStr"
sql.SQLStr( string string, boolean bNoQuotes=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Escapes dangerous characters and symbols from user input used in an SQLite SQL Query.



NOTE


this function is not meant to be used with external database engines such as MySQL. Escaping strings with inadequate functions is dangerous!


 Arguments

 string string


The string to be escaped.

 Arguments

 boolean bNoQuotes=false


Set this as true, and the function will not wrap the input string in apostrophes.

 Returns

 string


The escaped input.


"steamworks/FileInfo"
steamworks.FileInfo( string workshopItemID, function resultCallback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Retrieves info about supplied Steam Workshop addon.

 Arguments

 string workshopItemID


The ID of Steam Workshop item.

 Arguments

 function resultCallback


The function to process retrieved data. The first and only argument is a table, containing all the info.

 Examples
 Example
Retries all info of gm_construct_Beta Steam Workshop addon.

steamworks.FileInfo( 21197, function( result ) PrintTable( result ) end )
Output:

created = 1333727232
description = removed, too long
tags = fun, water, map, build
id = 21197
owner = 76561198017133973
previewsize = 213278
previewid = 559813303754221947
updated = 1347588992
ownername = HighVoltage
title = Gm_construct_Beta
disabled = false
installed = true
banned = false
size = 12060498
fileid = 596981587425748684


"steamworks/GetList"
steamworks.GetList( string type, table tags, number offset, number numRetrieve, number days, string userID, function resultCallback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Examples

9.1 Example




 Description
Retrieves a customized list of Steam Workshop addons.

 Arguments

 string type


The type of items to retrieve.

 Arguments

 table tags


A table of tags to match.

 Arguments

 number offset


How much of results to skip from first one. Mainly used for pages.

 Arguments

 number numRetrieve


How much addons to retrieve.

 Arguments

 number days


When getting Most Popular content from Steam, this determines a time period. ( 7 = most popular addons in last 7 days, 1 = most popular addons today, etc )

 Arguments

 string userID


0 to retrieve all addons, 1 to retrieve addons only published by you.

 Arguments

 function resultCallback


The function to process retrieved data. The first and only argument is a table, containing all the info.

 Examples
 Example
Retrieves top 10 of Steam Workshop addons.

steamworks.GetList( , nil, nil, 10, nil, 0, function( data ) PrintTable( data ) end )
Output:

A printed into console table:
totalresults = 1748
numresults = 10
results:
1 = 21197
2 = 72122655
3 = 68207248
4 = 71921341
5 = 79927494
6 = 12692
7 = 21174
8 = 72145362
9 = 16221

10 = 22104


"steamworks/Download"
steamworks.Download( string workshopPreviewID, boolean uncompress, function resultCallback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Downloads a file from the supplied addon and saves it as a .cache file in garrysmod/cache folder.
This is mostly used to download the preview image of the addon, but the game seems to also use it to download replays and saves.
In case the retrieved file is an image and you need the IMaterial, use AddonMaterial with the path supplied from the callback.

 Arguments

 string workshopPreviewID


The Preview ID of workshop item.

 Arguments

 boolean uncompress


Whether to uncompress the file or not, assuming it was compressed with LZMA.

You will usually want to set this to true.

 Arguments

 function resultCallback


The function to process retrieved data. The first and only argument is a string, containing path to the saved file.

 Examples
 Example
Downloads and saves icon of Gm_construct_Beta Steam Workshop addon.

steamworks.FileInfo( 21197, function( result )
	steamworks.Download( result.previewid, true, function( name )
		print( name )
	end ) 
end )
Output:

Something like this will be printed into console: cache/559813303754221947.cache


"steamworks/ApplyAddons"
steamworks.ApplyAddons(  ) 
 Description
Refreshes clients addons.

 Examples
 Example
Subscribes to gm_construct_beta and reloads addons.

steamworks.Subscribe( 21197 )
steamworks.ApplyAddons()


"steamworks/OpenWorkshop"
steamworks.OpenWorkshop(  ) 
 Description
Opens the workshop website in the steam overlay browser.

 Examples
 Example
An alternative to this function.

gui.OpenURL( http://steamcommunity.com/app/4000/workshop/ )


"steamworks/IsSubscribed"
steamworks.IsSubscribed( string workshopItemID ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns whenever the client is subscribed to the specified Steam Workshop item.

 Arguments

 string workshopItemID


The ID of the Steam Workshop item.

 Returns

 boolean


Is the client subscribed to the addon or not.

 Examples
 Example
Checks if client is subscribed to Gm_construct_Beta Steam Workshop addon.

print( steamworks.IsSubscribed( 21197 ) )
Output:

If client is subscribed true is printed into console, false otherwise.


"steamworks/GetPlayerName"
steamworks.GetPlayerName( string steamID64 ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use the callback of steamworks.RequestPlayerInfo instead.
Retrieves players name by his 64bit SteamID.
You must call steamworks.RequestPlayerInfo a decent amount of time before calling this function.

 Arguments

 string steamID64


The 64bit Steam ID ( aka Community ID ) of the player

 Returns

 string


The name of that player

 Examples
 Example
Retrieves name of local player.

steamworks.RequestPlayerInfo( LocalPlayer():SteamID64() )
timer.Simple( 1, function() -- this is not instant!
	print( steamworks.GetPlayerName( LocalPlayer():SteamID64() ) )
end )
Output:

A name of local player is printed into console.


"steamworks/Publish"
steamworks.Publish( table tags, string filename, string image, string name, string desc ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Publishes dupes, saves or demos to workshop.

 Arguments

 table tags


The workshop tags to apply

 Arguments

 string filename


Path to the file to upload

 Arguments

 string image


Path to the image to use as icon

 Arguments

 string name


Name of the Workshop submission

 Arguments

 string desc


Description of the Workshop submission


"steamworks/SetFilePlayed"
steamworks.SetFilePlayed( string workshopid ) 
 Description
Sets whether you have played this addon or not. This will be shown to the user in the Steam Workshop itself:


 Arguments

 string workshopid


The Steam Workshop item ID

 Returns

 string


Whatever you have put in as first argument


"steamworks/SetFileCompleted"
steamworks.SetFileCompleted( string workshopid ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 string workshopid


The Steam Workshop item id

 Returns

 string


Whatever you have put in as first argument


"steamworks/RequestPlayerInfo"
steamworks.RequestPlayerInfo( string steamID64, function callback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Requests information of the player with SteamID64 for later use with steamworks.GetPlayerName.

 Arguments

 string steamID64


The 64bit Steam ID of player.

 Arguments

 function callback


A callback function with only 1 argument - string name.

 Examples
 Example
Gets and prints the steam name of the local player

steamworks.RequestPlayerInfo( LocalPlayer():SteamID64(), function( steamName )
		print( steamName )
end )
Output:

The local players name


"steamworks/SetShouldMountAddon"
steamworks.SetShouldMountAddon( string workshopItemID, boolean shouldMount ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets if an addon should be enabled or disabled. Call steamworks.ApplyAddons afterwards to update.

 Arguments

 string workshopItemID


The ID of the Steam Workshop item we should enable/disable

 Arguments

 boolean shouldMount


true to enable the item, false to disable.

 Examples
 Example
Enables the Gm_construct_Beta Steam Workshop addon and reloads addons afterwards

steamworks.SetShouldMountAddon( 21197, true )
steamworks.ApplyAddons()
Output:

Enabled the gm_construct_beta addon, if installed.


"steamworks/Unsubscribe"
steamworks.Unsubscribe( string workshopItemID ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Unsubscribes to the specified workshop addon. Call steamworks.ApplyAddons afterwards to update.
This function should never be called without a users consent and should not be called if the addon is currently in use (aka: the user is not in the main menu) as it may result in unexpected behaviour.

 Arguments

 string workshopItemID


The ID of the Steam Workshop item we should unsubscribe from.

 Examples
 Example
Unsubscribes from the Gm_construct_Beta Steam Workshop addon, if subscribed, and reloads addons afterwards

steamworks.Unsubscribe( 21197 )
steamworks.ApplyAddons()
Output:

Unsubscribes from the gm_construct_beta addon, if subscribed.


"steamworks/ViewFile"
steamworks.ViewFile( string workshopItemID ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Opens the workshop website for specified Steam Workshop item in the Steam overlay browser.

 Arguments

 string workshopItemID


The ID of workshop item.

 Examples
 Example
Opens web page of Gm_construct_Beta Steam Workshop addon in Steam overlay browser.

steamworks.ViewFile( 21197 )


"steamworks/ShouldMountAddon"
steamworks.ShouldMountAddon( string workshopItemID ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns whenever the specified Steam Workshop addon will be mounted or not.

 Arguments

 string workshopItemID


The ID of the Steam Workshop

 Returns

 boolean


Will the workshop item be mounted or not

 Examples
 Example
Checks if the client has enabled Gm_construct_Beta Steam Workshop addon.

print( steamworks.ShouldMountAddon( 21197 ) )
Output:

If client has enabled the addon true is printed into console, false otherwise.


"steamworks/Subscribe"
steamworks.Subscribe( string workshopItemID ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Subscribes to the specified workshop addon. Call steamworks.ApplyAddons afterwards to update.

 Arguments

 string workshopItemID


The ID of the Steam Workshop item we should subscribe to

 Examples
 Example
Subscribes to the Gm_construct_Beta Steam Workshop addon and reloads addons afterwards

steamworks.Subscribe( 21197 )
steamworks.ApplyAddons()
Output:

Subscribes to gm_construct_beta addon, if not already.


"steamworks/Vote"
steamworks.Vote( string workshopItemID, boolean upOrDown ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Makes the user vote for the specified addon
 Arguments

 string workshopItemID


The ID of workshop item.

 Arguments

 boolean upOrDown


Sets if the user should vote up/down. True makes them upvote, false down

 Examples
 Example
Give the Gm_construct_Beta Steam Workshop item a thumbs up.

steamworks.Vote( 21197, true )


"string/dump"
string.dump( function func, boolean stripDebugInfo=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns the binary bytecode of the given function.



NOTE


This does not work with functions created in C/C++. An error will be thrown if it is


 Arguments

 function func


The function to get the bytecode of

 Arguments

 boolean stripDebugInfo=false


True to strip the debug data, false to keep it

 Returns

 string


Bytecode


"steamworks/VoteInfo"
steamworks.VoteInfo( string workshopItemID, function resultCallback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Retrieves vote info of supplied addon.

 Arguments

 string workshopItemID


The ID of workshop item.

 Arguments

 function resultCallback


The function to process retrieved data. The first and only argument is a table, containing all the info.

 Examples
 Example
Retrieves vote info of Gm_construct_Beta Steam Workshop addon.

steamworks.VoteInfo( 21197, function( result ) PrintTable( result ) end )
Output:

A table printed into console:
score = 0.97182178497314
total = 2952
down = 36

up = 2916


"string/byte"
string.byte( string string, number startPos=1, number endPos=startPos ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Returns the given strings characters in their numeric ASCII representation.

 Arguments

 string string


The string to get the chars from.

 Arguments

 number startPos=1


The first character of the string to get the byte of.

 Arguments

 number endPos=startPos


The last character of the string to get the byte of.

 Returns

 vararg


Numerical bytes

 Examples
 Example
Prints the first 4 numerical bytes from the string Hello, World!

print( string.byte( Hello, World!, 1, 4 ) )
Output:

72
101
108

108


"string/char"
string.char( vararg bytes ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Takes the given numerical bytes and converts them to a string.

 Arguments

 vararg bytes


The bytes to create the string from.

 Returns

 string


String built from given bytes

 Examples
 Example
Prints a string consisting of the bytes 72, 101, 108, 108, 111

print( string.char( 72, 101, 108, 108, 111 ) )
Output:

Hello
 Examples
 Example
Helper function to create a random string.

function string.Random( length )

	local length = tonumber( length )

    if ( length &lt; 1 ) then return end

    local result =  -- The empty string we start with

    for i = 1, length do

        result = result .. string.char( math.random( 32, 126 ) )

    end

    return result

end

print( string.Random( 10 ) )
Output:

oEjkv2?h:T


"string/Comma"
string.Comma( number InputNumber ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Inserts commas for every third digit.

 Arguments

 number InputNumber


The input number to commafy

 Returns

 string


Prettystring

 Examples
 Example
Demonstrates the use of string.Comma

MsgN( string.Comma( 123456789 ) )
Output:

123,456,789


"string/EndsWith"
string.EndsWith( string str, string end ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns whether or not the second passed string matches the end of the first.

 Arguments

 string str


The string whose end is to be checked.

 Arguments

 string end


The string to be matched with the end of the first.

 Returns

 boolean


true if the first string ends with the second, or the second is empty, otherwise false.

 Examples
 Example
Looks for arguments at the end of a string.

local endswith = string.EndsWith( Supercalifragilisticexpialidocious, docious )
if ( endswith ) then
	print( Marry Poppins )
end
Output:

Marry Poppins


"string/format"
string.format( string format, vararg formatParameters ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Formats the specified values into the string given.

 Arguments

 string format


The string to be formatted.

Follows this format: http://www.cplusplus.com/reference/cstdio/printf/

 Arguments

 vararg formatParameters


Values to be formatted into the string.

 Returns

 string


The formatted string


"string/FromColor"
string.FromColor( table color ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Creates a string from a Color variable.

 Arguments

 table color


The color to put in the string.

 Returns

 string


Output

 Examples
 Example
Demonstrates the use of string.FromColor

MsgN( string.FromColor( Color( 255, 0, 255, 125 ) ) )
Output:

255 0 255 125


"string/GetChar"
string.GetChar( string str, number index ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Use either string.sub(str, index, index) or str[index]. Returns char value from the specified index in the supplied string.
 Arguments

 string str


The string that you will be searching with the supplied index.

 Arguments

 number index


The indexs value of the string to be returned.

 Returns

 string


str

 Examples
 Example
Looks index in the supplied string and returns value of that index.

local char = ABC
print( string.GetChar( char, 2 ) )
Output:


B


"string/find"
string.find( string haystack, string needle, number startPos=1, boolean noPatterns=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Returns
8 Returns
9 Examples

9.1 Example




 Description
Attempts to find the specified substring in a string, uses Patterns by default.

 Arguments

 string haystack


The string to search in.

 Arguments

 string needle


The string to find, can contain patterns if enabled.

 Arguments

 number startPos=1


The position to start the search from, can be negative start position will be relative to the end position.

 Arguments

 boolean noPatterns=false


Disable patterns.

 Returns

 number


Starting position of the found text, or nil if the text wasnt found

 Returns

 number


Ending position of found text, or nil if the text wasnt found

 Returns

 string


Matched text for each group if patterns are enabled and used, or nil if the text wasnt found

 Examples
 Example
Change the word heck to **** in chat messages

hook.Add( PlayerSay, NoHeckHere, function( ply, text )
	local heckStart, heckEnd = string.find( text:lower(), heck )
	if ( heckStart ) then
		local civilText = string.sub( text, 1, heckStart - 1 ) .. **** .. string.sub( text, heckEnd + 1 )
		return civilText
	end
end )


"string/GetFileFromFilename"
string.GetFileFromFilename( string pathString ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns file name and extension.

 Arguments

 string pathString


The string eg. file-path to get the file-name from.

 Returns

 string


The file name

 Examples
 Example
Returns the file name.

print( string.GetFileFromFilename( garrysmod/lua/modules/string.lua ) )
Output:

string.lua


"string/gfind"
string.gfind( string data, string pattern ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

This function is removed in Lua versions later than what GMod is currently using. Use string.gmatch instead.Returns an iterator function that is called for every complete match of the pattern, all sub matches will be passed as to the loop.
 Arguments

 string data


The string to search in

 Arguments

 string pattern


The pattern to search for

 Returns

 function


The iterator function that can be used in a for-in loop

 Examples
 Example
Example usage of the function

local s = my awesome stuff 12
for w in string.gfind( s, ( %a ) ) do
    Msg( w )
end
Output:

In your console:
myawesomestuff


"string/FormattedTime"
string.FormattedTime( number float, string format=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Returns the time as a formatted string or as a table if no format is given.

 Arguments

 number float


The time in seconds to format.

 Arguments

 string format=nil


An optional formatting to use. If no format it specified, a table will be returned instead.

 Returns

 string


Returns the time as a formatted string only if a format was specified.
Returns a table only if no format was specified. The table will contain these fields:
number ms - milliseconds
number s - seconds
number m - minutes
number h - hours



 Examples
 Example
Formats the time in seconds

local time = string.FormattedTime( 90, %02i:%02i:%02i )
print( time )
Output:

01:30:00
 Examples
 Example
Returns a table with the time separated by units.

local time = string.FormattedTime( 90 )
PrintTable( time )
Output:

ms = 0
m = 1
s = 30

h = 0


"string/JavascriptSafe"
string.JavascriptSafe( string str ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Escapes special characters for JavaScript in a string, making the string safe for inclusion in to JavaScript strings.

 Arguments

 string str


The string that should be escaped.

 Returns

 string


The escaped string.

 Examples
 Example
Executes JavaScript on a panel using user input safely.

local user_input = The users input lives in this variable

local Panel = vgui.Create( DHTML )
Panel:SetURL( example.com/something.html )
Panel:Center()
Panel:SetSize( 100, 100 )
Panel:RunJavascript( MyJavaScriptFunction(  .. string.JavascriptSafe( user_input ) ..  ) )


"string/gsub"
string.gsub( string string, string pattern, string replacement, number maxReplaces=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Returns
8 Examples

8.1 Example




 Description
This functions main purpose is to replace certain character sequences in a string using Patterns.

 Arguments

 string string


String which should be modified.

 Arguments

 string pattern


The pattern that defines what should be matched and eventually be replaced.

 Arguments

 string replacement


In case of a string the matches sequence will be replaced with it.
In case of a table, the matched sequence will be used as key and the table will tested for the key, if a value exists it will be used as replacement.

In case of a function all matches will be passed as parameters to the function, the return value(s) of the function will then be used as replacement.

 Arguments

 number maxReplaces=nil


Maximum number of replacements to be made.

 Returns

 string


replaceResult

 Returns

 number


replaceCount

 Examples
 Example
Replaces hello with hi in the string hello there!

string.gsub( hello there!, hello, hi )
Output:

hi there!


"string/Explode"
string.Explode( string separator, string str, boolean use_patterns ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Splits a string up wherever it finds the given separator.
This is the reverse of string.Implode.

 Arguments

 string separator


The string will be separated wherever this sequence is found.

 Arguments

 string str


The string to split up.

 Arguments

 boolean use_patterns


Set this to true if your separator is a pattern.

 Returns

 table


Exploded string as a numerical sequential table.

 Examples
 Example
Splits a sentence into a table of the words in it.

local sentence = hello there my name is Player1
local words = string.Explode(  , sentence )
PrintTable( words )
Output:

1 = hello
2 = there
3 = my
4 = name
5 = is
6 = Player1
 Examples
 Example
Uses Explode to sort through words that a player says.

hook.Add( PlayerSay, GiveHealth, function( ply, text )
	local playerInput = string.Explode(  , text )

	if ( playerInput[1] == !givehealth ) then 

		if ( tonumber( playerInput[2] ) ) then

			ply:SetHealth( tonumber( playerInput[2] ) )

			print( ply:Nick() ..  set their health to  .. playerInput[2] )

		end

	end

end )
Output:

Player1 set their health to 100.


"string/Implode"
string.Implode( string separator=, table pieces ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You really should just use table.concat.
Joins the values of a table together to form a string.
This is the reverse of string.Explode and is functionally identical to table.concat, but with less features.

 Arguments

 string separator=


The separator to insert between each piece.

 Arguments

 table pieces


The table of pieces to concatenate. The keys for these must be numeric and sequential.

 Returns

 string


Imploded pieces

 Examples
 Example
Joins all values of a table with a space

local tab = { one, two, three }


print( string.Implode(  , tab ) )
Output:

one two three


"string/Left"
string.Left( string str, number num ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns everything left of supplied place of that string.

 Arguments

 string str


The string to extract from.

 Arguments

 number num


Amount of chars relative to the beginning (starting from 1).

 Returns

 string


Returns a string containing a specified number of characters from the left side of a string.

 Examples
 Example
Extracts garry from garrys mod string.

local text = garrys mod
print( string.Left( text, 5 ) )
Output:


garry


"string/gmatch"
string.gmatch( string data, string pattern ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Using Patterns, returns an iterator which will return either one value if no capture groups are defined, or any capture group matches.

 Arguments

 string data


The string to search in

 Arguments

 string pattern


The pattern to search for

 Returns

 function


The iterator function that can be used in a for-in loop

 Examples
 Example
Explodes the string for each space and comma in the string

str = qwe,a cde
for s in string.gmatch( str, [^%s,]+ ) do
    print( s )
end
Output:

qwe
a
cde


"string/lower"
string.lower( string str ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Changes any upper-case letters in a string to lower-case letters.

 Arguments

 string str


The string to convert.

 Returns

 string


The original string, with all uppercase letters replaced with their lowercase variants.

 Examples
 Example
Demonstrates the use of this function.

print( string.lower( ABCDEFG ) )
print( string.lower( AbCdefG ) )
print( string.lower( abcdefg ) )
print( string.lower( 1234567890 ) )
Output:

abcdefgabcdefgabcdefg1234567890
 Examples
 Example
Demonstrates a common use for string.lower - case-insensitive user input.

-- All keys in this table must be lowercase:
local products = {}

products.apple = Buy an apple!
products.banana = Buy a bunch of bananas!
products.tomato = Theres also tomatoes.

-- This function is case-insensitive, meaning APPLE, apple, and APPle are all the same.
function GetProduct( userinput )
	return userinput, products[string.lower( userinput )]
end

-- Demonstration:
print( GetProduct( apple ) )
print( GetProduct( Apple ) )
print( GetProduct( APPLE ) )
print()
print( GetProduct( banana ) )
print( GetProduct( BaNaNa ) )
Output:

apple	Buy an apple!
Apple	Buy an apple!
APPLE	Buy an apple!

banana	Buy a bunch of bananas!
BaNaNa	Buy a bunch of bananas!


"string/match"
string.match( string string, string pattern, number startPosition=1 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Finds a Pattern in a string.

 Arguments

 string string


String which should be searched in for matches.

 Arguments

 string pattern


The pattern that defines what should be matched.

 Arguments

 number startPosition=1


The start index to start the matching from, can be negative to start the match from a position relative to the end.

 Returns

 vararg


Matched text(s)

 Examples
 Example
local toMatch = this is a sample text
print( string.match( toMatch, sample ) )
-- regex works
print( string.match( toMatch, ^[a-z] ) )
print( string.match( toMatch, ^this ) )
print( string.match( toMatch, ^..is ) )
print( string.match( toMatch, text$ ) )
-- entire string
print( string.match( toMatch, ^.*$ ) )
-- nil
print( string.match( toMatch, this$ ) )
print( string.match( toMatch, nil ) )
Output:

sample  
t  
this  
this  
text  
this is a sample text  
nil  
nil


"string/GetPathFromFilename"
string.GetPathFromFilename( string Inputstring ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the path only from a files path.

 Arguments

 string Inputstring


String to get path from.

 Returns

 string


Path

 Examples
 Example
Demonstrates the use of string.GetPathFromFilename

MsgN( string.GetPathFromFilename( garrysmod/lua/modules/string.lua ) )
Output:

garrysmod/lua/modules/


"string/NiceTime"
string.NiceTime( number num ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Formats the supplied number (in seconds) to the highest possible time unit.

 Arguments

 number num


The number to format, in seconds.

 Returns

 string


A nicely formatted time string.

 Examples
 Example
print( string.NiceTime( 600 ) )
print( string.NiceTime( 630 ) )
print( string.NiceTime( 660 ) )
print( string.NiceTime( 4356 ) )
print( string.NiceTime( 43545456 ) )
Output:

10 minutes  
10 minutes  
11 minutes  
1 hour
1 year


"string/len"
string.len( string str ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Counts the number of characters in the string (length). This is equivalent to using the length operator (#).

 Arguments

 string str


The string to find the length of.

 Returns

 number


Length of the string

 Examples
 Example
Demonstrates the use of this function.

print( string.len( hi ) )
print( string.len( drakehawke ) )
print( string.len(  ) )
print( string.len( test ) == #test )
Output:

2100true


"string/GetExtensionFromFilename"
string.GetExtensionFromFilename( string file ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns extension of the file.

 Arguments

 string file


String eg. file-path to get the file extensions from.

 Returns

 string


fileExtension

 Examples
 Example
Prints the extension of the file.

print( string.GetExtensionFromFilename( garrysmod/lua/modules/string.lua ) )
Output:


lua


"string/Replace"
string.Replace( string str, string find, string replace ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Replaces all occurrences of the supplied second string.

 Arguments

 string str


The string we are seeking to replace an occurrence(s).

 Arguments

 string find


What we are seeking to replace.

 Arguments

 string replace


What to replace find with.

 Returns

 string


string

 Examples
 Example
Replaces the word Garrys by Hers.

local text = Garrys Mod
print( string.Replace( text, Garrys, Hers ) )
Output:


Hers Mod


"string/reverse"
string.reverse( string str ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Reverses a string.

 Arguments

 string str


The string to be reversed.

 Returns

 string


reversed string

 Examples
 Example
Reverse abcdef.

print( string.reverse( abcdef ) )
Output:

fedcba


"string/PatternSafe"
string.PatternSafe( string str ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Escapes all special characters within a string, making the string safe for inclusion in a Lua pattern.

 Arguments

 string str


The string to be sanitized

 Returns

 string


The string that has been sanitized for inclusion in Lua patterns

 Examples
 Example
Replaces all occurrences of 100% in a string with 0% and prints it.
We call string.PatternSafe here as % is a special character when used in Lua patterns.

local result = string.gsub( You scored 100%!, 
							string.PatternSafe( 100% ), 
							string.PatternSafe( 0% ) )

print( result )
Output:

You scored 0%!


"string/Split"
string.Split( string Inputstring, string Separator ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Splits the string into a table of strings, separated by the second argument.

 Arguments

 string Inputstring


String to split

 Arguments

 string Separator


Character(s) to split with.

 Returns

 table


Split table

 Examples
 Example
Demonstrates the use of this function.

local mystring = This is some text
PrintTable( string.Split( mystring,   ) )
Output:

1 = This
2 = is
3 = some
4 = text


"string/SetChar"
string.SetChar( string InputString, number Index, string ReplacementChar ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Sets the character at the specific index of the string.

 Arguments

 string InputString


The input string

 Arguments

 number Index


The character index, 1 is the first from left.

 Arguments

 string ReplacementChar


String to replace with.

 Returns

 string


ModifiedString

 Examples
 Example
Demonstrates the use of SetChar

local str = Apples
MsgN( string.SetChar( str, 3, g ) )
Output:

Apgles


"string/NiceSize"
string.NiceSize( number bytes ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Converts a digital filesize to human-readable text.

 Arguments

 number bytes


The filesize in bytes.

 Returns

 string


The human-readable filesize, in Bytes/KB/MB/GB (whichever is appropriate).

 Examples
 Example
Example output of this function.

print( string.NiceSize( 64512 ) )
Output:

63 KB


"string/StartWith"
string.StartWith( string inputStr, string start ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns whether or not the first string starts with the second.

 Arguments

 string inputStr


String to check.

 Arguments

 string start


String to check with.

 Returns

 boolean


Whether the first string starts with the second.

 Examples
 Example
Demonstrates the use of string.StartWith

print( string.StartWith( hello there, hell ) )
Output:

true


"string/rep"
string.rep( string str, number repetitions, string separator= ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Repeats a string by the provided number, with an optional separator.

 Arguments

 string str


The string to convert.

 Arguments

 number repetitions


Timer to repeat, this values gets rounded internally.

 Arguments

 string separator=


String that will separate the repeated piece. Notice that it doesnt add this string to the start or the end of the result, only between the repeated parts.

 Returns

 string


Repeated string.

 Examples
 Example
Repeating abc 5 times.

print( string.rep( abc, 5 ) )
Output:

abcabcabcabcabc
 Examples
 Example
Repeating hello world 3 times, with the separator   (space).

print( string.rep( hello world, 3,   ) )
Output:

hello world hello world hello world


"string/StripExtension"
string.StripExtension( string Inputstring ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Removes the extension of a path.

 Arguments

 string Inputstring


The path to change.

 Returns

 string


Modifiedstring

 Examples
 Example
Demonstrates the use of string.StripExtension

MsgN( string.StripExtension( garrysmod/lua/modules/string.lua ) )
Output:

garrysmod/lua/modules/string


"string/Right"
string.Right( string str, number num ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns the last n-th characters of the string.

 Arguments

 string str


The string to extract from.

 Arguments

 number num


Amount of chars relative to the end (starting from 1).

 Returns

 string


Returns a string containing a specified number of characters from the right side of a string.

 Examples
 Example
Extracts mod from garrys mod string.

local text = garrys mod
print( string.Right( text, 3 ) )
Output:


mod


"string/sub"
string.sub( string string, number StartPos, number EndPos=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Returns a sub-string, starting from the character at position StartPos of the string (inclusive), and optionally ending at the character at position EndPos of the string (also inclusive). If EndPos is not given, the rest of the string is returned.

 Arguments

 string string


The string youll take a sub-string out of.

 Arguments

 number StartPos


The position of the first character that will be included in the sub-string.

 Arguments

 number EndPos=nil


The position of the last character to be included in the sub-string. It can be negative to count from the end.

 Returns

 string


The substring.

 Examples
 Example
Demonstrates the use of this function.

local mystring = Some random text
print( string.sub( mystring, 1, 4 ) )
Output:

Some


"string/ToTable"
string.ToTable( string str ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Splits the string into characters and creates a sequential table of characters.



WARNING


As a result of the UTF-8 encoding, non-ASCII characters will be split into more than one character in the output table. Each character value in the output table will always be 1 byte.


 Arguments

 string str


The string youll turn into a table.

 Returns

 table


A sequential table where each value is a character from the given string

 Examples
 Example
Demonstrates the use of this function.

local mystring = text
PrintTable( string.ToTable( mystring ) )
Output:

1 = t
2 = e
3 = x
4 = t
 Examples
 Example
Demonstrates how this function behaves with non-ASCII characters - in this case, Greek letters.

for k,v in ipairs( string.ToTable( abcd &#x3B1;&#x3B2;&#x3B3;&#x3B4; ) ) do
	print( k, bit.tohex( string.byte( v ) ), v )
end
Output:

1	00000061	a
2	00000062	b
3	00000063	c
4	00000064	d
5	00000020	 
6	000000ce	?
7	000000b1	?
8	000000ce	?
9	000000b2	?
10	000000ce	?
11	000000b3	?
12	000000ce	?
13	000000b4	?


"string/ToMinutesSecondsMilliseconds"
string.ToMinutesSecondsMilliseconds( number time ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns given time in MM:SS:MS format.

 Arguments

 number time


Time in seconds

 Returns

 string


Formatted time

 Examples
 Example
Example of using this function

print( string.ToMinutesSecondsMilliseconds( 61.128 ) )
Output:

01:01:13


"string/Trim"
string.Trim( string Inputstring, string Char=  ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Removes leading and trailing matches of a string.

 Arguments

 string Inputstring


The string to trim.

 Arguments

 string Char= 


String to match.

 Returns

 string


Modified string

 Examples
 Example
Demonstrates the use of string.Trim without second argument.

MsgN( string.Trim(  hi whatsup  ) )
Output:

hi whatsup


"string/ToMinutesSeconds"
string.ToMinutesSeconds( number time ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns given time in MM:SS format.

 Arguments

 number time


Time in seconds

 Returns

 string


Formatted time

 Examples
 Example
Example of using this function

print( string.ToMinutesSeconds( 61 ) )
Output:

01:01


"string/TrimRight"
string.TrimRight( string str, string char=  ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Removes trailing spaces/passed character from a string.

 Arguments

 string str


String to remove from

 Arguments

 string char= 


Custom character to remove, default is a space

 Returns

 string


Trimmed string


"string/ToColor"
string.ToColor( string Inputstring ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Fetches a Color type from a string.

 Arguments

 string Inputstring


The string to convert from.

 Returns

 table


The output Color structure

 Examples
 Example
Demonstrates the use of string.ToColor

PrintTable( string.ToColor( 255 0 255 125 ) )
Output:

r = 255
g = 0
b = 255
a = 125


"string/upper"
string.upper( string str ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Changes any lower-case letters in a string to upper-case letters.

 Arguments

 string str


The string to convert.

 Returns

 string


A string representing the value of a string converted to upper-case.

 Examples
 Example
Demonstrates the use of this function.

print( string.upper( ABCDEFG ) )
print( string.upper( AbCdefG ) )
print( string.upper( abcdefg ) )
print( string.upper( 1234567890 ) )
Output:

ABCDEFGABCDEFGABCDEFG1234567890


"surface/CreateFont"
surface.CreateFont( string fontName, table fontData ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Creates a new font.
To prevent the font from displaying incorrectly when using the outline setting, set antialias to false. This will ensure the text properly fills out the entire outline.
Be sure to check the List of Default Fonts first! Those fonts can be used without using this function.



WARNING


Due to the static nature of fonts, do NOT create the font more than once. You should only be creating them once, it is recommended to create them at the top of your script. Do not use this function within GM:HUDPaint!


Validation required.
This page contains possibly incorrect or incomplete information. Further testing is required.
 Arguments

 string fontName


The new font name.

 Arguments

 table fontData


The font properties. See the FontData structure.

 Examples
 Example
Creates a font with all the defaults showing (any of the fields could be left out for an equivalent font)

surface.CreateFont( TheDefaultSettings, {
	font = Arial, --  Use the font-name which is shown to you by your operating system Font Viewer, not the file name
	extended = false,
	size = 13,
	weight = 500,
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false,
} )


"string/TrimLeft"
string.TrimLeft( string str, string char=  ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Removes leading spaces/characters from a string.

 Arguments

 string str


String to trim

 Arguments

 string char= 


Custom character to remove

 Returns

 string


Trimmed string


"surface/DrawOutlinedRect"
surface.DrawOutlinedRect( number x, number y, number w, number h ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Draws a hollow box with a border width of 1 px.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 number x


The start x integer coordinate.

 Arguments

 number y


The start y integer coordinate.

 Arguments

 number w


The integer width.

 Arguments

 number h


The integer height.

 Examples
 Example
Draws a 100x100 outlined rectangle in top left corner.

surface.SetDrawColor( Color( 255, 255, 255, 255 ) )
surface.DrawOutlinedRect( 0, 0, 100, 100 )


 Examples
 Example
A convenience function to draw an outlined rect with given color and thickness

function draw.OutlinedBox( x, y, w, h, thickness, clr )
	surface.SetDrawColor( clr )
	for i=0, thickness - 1 do
		surface.DrawOutlinedRect( x + i, y + i, w - i * 2, h - i * 2 )
	end
end

// Usage
hook.Add( HUDPaint, , function()
	draw.OutlinedBox( 0, 0, 100, 100, 2, Color( 255, 255, 255 ) )
end )


"surface/DrawRect"
surface.DrawRect( number x, number y, number width, number height ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Draws a solid rectangle on the screen.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 number x


The X integer co-ordinate.

 Arguments

 number y


The Y integer co-ordinate.

 Arguments

 number width


The integer width of the rectangle.

 Arguments

 number height


The integer height of the rectangle.

 Examples
 Example
Draws a white 100 by 100 rectangle, 25 pixels from the top left of the screen.

hook.Add( HUDPaint, MyRect, function()
    surface.SetDrawColor( 255,255,255,255 )
    surface.DrawRect( 25, 25, 100, 100 )
end )
Output:


"surface/DrawCircle"
surface.DrawCircle( number originX, number originY, number radius, number r, number g, number b, number a=255 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments


 Description
Draws a hollow circle, made of dots. For a filled circle, see examples for surface.DrawPoly.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 number originX


The center x integer coordinate.

 Arguments

 number originY


The center y integer coordinate.

 Arguments

 number radius


The radius of the circle.

 Arguments

 number r


The red value of the color to draw the circle with, or a Color structure.

 Arguments

 number g


The green value of the color to draw the circle with. Unused if a Color structure was given.

 Arguments

 number b


The blue value of the color to draw the circle with. Unused if a Color structure was given.

 Arguments

 number a=255


The alpha value of the color to draw the circle with. Unused if a Color structure was given.


"surface/DisableClipping"
surface.DisableClipping( boolean disable ) 
 Description
Enables or disables the clipping used by the VGUI that limits the drawing operations to a panels bounds.
See also DisableClipping and Panel:NoClipping.

 Arguments

 boolean disable


True to disable, false to enable the clipping


"surface/DrawLine"
surface.DrawLine( number startX, number startY, number endX, number endY ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Draws a line from one point to another.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 number startX


The start x integer coordinate.

 Arguments

 number startY


The start y integer coordinate.

 Arguments

 number endX


The end x integer coordinate.

 Arguments

 number endY


The end y integer coordinate.

 Examples
 Example
This example will draw a pixel perfect circle in the middle of your screen.

hook.Add( HUDPaint, Circle, function()
	local center = Vector( ScrW() / 2, ScrH() / 2, 0 )
	local scale = Vector( 100, 100, 0 )
	local segmentdist = 360 / ( 2 * math.pi * math.max( scale.x, scale.y ) / 2 )
	surface.SetDrawColor( 255, 0, 0, 255 )
 
	for a = 0, 360 - segmentdist, segmentdist do
		surface.DrawLine( center.x + math.cos( math.rad( a ) ) * scale.x, center.y - math.sin( math.rad( a ) ) * scale.y, center.x + math.cos( math.rad( a + segmentdist ) ) * scale.x, center.y - math.sin( math.rad( a + segmentdist ) ) * scale.y )
	end
end )


"surface/DrawPoly"
surface.DrawPoly( table vertices ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Draws a textured polygon (secretly a triangle fan) with a maximum of 256 vertices.
Only works properly with convex polygons. You may try to render concave polygons, but there is no guarantee that things wont get messed up.
Unlike most surface library functions, non-integer coordinates are not rounded.



WARNING


You must reset the drawing color and texture before calling the function to ensure consistent results. See examples below.




NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 table vertices


A table containing integer vertices. See the PolygonVertex structure.

The vertices must be in clockwise order.

 Examples
 Example
Draws a red triangle in the top left corner of the screen.

local triangle =
{
	{ x = 100, y = 200 },
	{ x = 150, y = 100 },
	{ x = 200, y = 200 }

}


hook.Add( HUDPaint, PolygonTest, function()
	
	surface.SetDrawColor( 255, 0, 0, 255 )
	draw.NoTexture()
	surface.DrawPoly( triangle )

end )
Output:


 Examples
 Example
A helper function to draw a circle using surface.DrawPoly.

function draw.Circle( x, y, radius, seg )
	local cir = {}


	table.insert( cir, { x = x, y = y, u = 0.5, v = 0.5 } )
	for i = 0, seg do
		local a = math.rad( ( i / seg ) * -360 )
		table.insert( cir, { x = x + math.sin( a ) * radius, y = y + math.cos( a ) * radius, u = math.sin( a ) / 2 + 0.5, v = math.cos( a ) / 2 + 0.5 } )
	end

	local a = math.rad( 0 ) -- This is needed for non absolute segment counts
	table.insert( cir, { x = x + math.sin( a ) * radius, y = y + math.cos( a ) * radius, u = math.sin( a ) / 2 + 0.5, v = math.cos( a ) / 2 + 0.5 } )

	surface.DrawPoly( cir )
end

hook.Add( HUDPaint, PolygonCircleTest, function()
	
	surface.SetDrawColor( 0, 0, 0, 200 )
	draw.NoTexture()
	draw.Circle( ScrW() / 2, ScrH() / 2, 200, math.sin( CurTime() ) * 20 + 25 )

	--Usage:
	--draw.Circle( x, y, radius, segments )

end )


"surface/DrawTexturedRect"
surface.DrawTexturedRect( number x, number y, number width, number height ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Draw a textured rectangle with the given position and dimensions on the screen, using the current active texture set with surface.SetMaterial. It is also affected by surface.SetDrawColor.
See also render.SetMaterial and render.DrawScreenQuadEx.
See also surface.DrawTexturedRectUV.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 number x


The X integer co-ordinate.

 Arguments

 number y


The Y integer co-ordinate.

 Arguments

 number width


The integer width of the rectangle.

 Arguments

 number height


The integer height of the rectangle.

 Examples
 Example
Draws a 512x512 textured rectangle with the wireframe texture.

local ourMat = Material( models/wireframe ) -- Calling Material() every frame is quite expensive

hook.Add( HUDPaint, example_hook, function()
	surface.SetDrawColor( 255, 255, 255, 255 )
	surface.SetMaterial( ourMat  ) -- If you use Material, cache it!
	surface.DrawTexturedRect( 0, 0, 512, 512 )
end )


"surface/DrawTexturedRectRotated"
surface.DrawTexturedRectRotated( number x, number y, number width, number height, number rotation ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example


8 Examples

8.1 Example




 Description
Draw a textured rotated rectangle with the given position and dimensions and angle on the screen, using the current active texture.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 number x


The X integer co-ordinate, representing the center of the rectangle.

 Arguments

 number y


The Y integer co-ordinate, representing the center of the rectangle.

 Arguments

 number width


The integer width of the rectangle.

 Arguments

 number height


The integer height of the rectangle.

 Arguments

 number rotation


The rotation of the rectangle, in degrees.

 Examples
 Example
A function that allows you to override the origin of rotation.
x0 and y0 are relative to the center of the rectangle.

function surface.DrawTexturedRectRotatedPoint( x, y, w, h, rot, x0, y0 )
	
	local c = math.cos( math.rad( rot ) )
	local s = math.sin( math.rad( rot ) )
	
	local newx = y0 * s - x0 * c
	local newy = y0 * c + x0 * s
	
	surface.DrawTexturedRectRotated( x + newx, y + newy, w, h, rot )
	
end


 Examples
 Example
Draws a simple red forever rotating box.

function draw.RotatedBox( x, y, w, h, ang, color )
	draw.NoTexture()
	surface.SetDrawColor( color or color_white )
	surface.DrawTexturedRectRotated( x, y, w, h, ang )
end

hook.Add( HUDPaint, my_rotated_box, function()
	draw.RotatedBox( 100, 100, 100, 100, CurTime()% 360, Color( 255, 0, 0 ) )
end )


"surface/GetAlphaMultiplier"
surface.GetAlphaMultiplier(  ) 
 Description
Returns the current alpha multiplier affecting drawing operations.


Next Update ChangeThis feature is only available in the next update.
 Returns

 number


The multiplier ranging from 0 to 1.


"surface/DrawTexturedRectUV"
surface.DrawTexturedRectUV( number x, number y, number width, number height, number startU, number startV, number endU, number endV ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Examples

10.1 Example


11 Examples

11.1 Example




 Description
Draws a textured rectangle with a repeated or partial texture.
u and v refer to texture coordinates.

 (u, v) = (0, 0) is the top left
 (u, v) = (1, 0) is the top right
 (u, v) = (1, 1) is the bottom right
 (u, v) = (0, 1) is the bottom left

Using a start point of (1, 0) and an end point to (0, 1), you can draw an image flipped horizontally, same goes with other directions. Going above 1 will tile the texture. Negative values are allowed as well.
Heres a helper image: http://i.imgur.com/SIKlpp4.png



NOTE


If you are using a .png image, you need supply the noclamp flag as second parameter for Material if you intend to use tiling.




NOTE


If you find that surface.DrawTexturedRectUV is getting your texture coordinates (u0, v0), (u1, v1) wrong and youre rendering with a material created with CreateMaterial, try adjusting them with the following code:

local du = 0.5 / 32 -- half pixel anticorrection
local dv = 0.5 / 32 -- half pixel anticorrection
local u0, v0 = ( u0 - du ) / ( 1 - 2 * du ), ( v0 - dv ) / ( 1 - 2 * dv )
local u1, v1 = ( u1 - du ) / ( 1 - 2 * du ), ( v1 - dv ) / ( 1 - 2 * dv )

Explanation:
surface.DrawTexturedRectUV tries to correct the texture coordinates by half a pixel (something to do with sampling) and computes the correction using IMaterial::GetMappingWidth()/GetMappingHeight(). If the material was created without a $basetexture, then GetMappingWidth()/GetMappingHeight() uses the width and height of the error material (which is 32x32).




NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.




BUG


The UV offsets might require (sub-)pixel correction for accurate tiling results.



 Arguments

 number x


The X integer coordinate.

 Arguments

 number y


The Y integer coordinate.

 Arguments

 number width


The integer width of the rectangle.

 Arguments

 number height


The integer height of the rectangle.

 Arguments

 number startU


The U texture mapping of the rectangle origin.

 Arguments

 number startV


The V texture mapping of the rectangle origin.

 Arguments

 number endU


The U texture mapping of the rectangle end.

 Arguments

 number endV


The V texture mapping of the rectangle end.

 Examples
 Example
Demonstrates the function usage.

local mat = Material( gui/tool.png )
hook.Add( HUDPaint, DrawTexturedRectUV_example1, function()
	surface.SetDrawColor( color_white )
	surface.SetMaterial( mat )

	surface.DrawTexturedRect( 25, 25, 100, 100 )
	surface.DrawTexturedRectUV( 25, 130, 100, 100, 0, 0, 1, 1 ) -- Exactly same as above line

	-- Draws right half of the texture
	-- Note that we also change the width of the rectangle to avoid stetcing of the texture
	-- This is for demonstration purposes, you can do whatever it is you need
	surface.DrawTexturedRectUV( 130, 130, 50, 100, 0.5, 0, 1, 1 )
end )


 Examples
 Example
Paints repeated texture over a panel

function PANEL:Paint( w, h )
	-- Size of your texture, texW - width, texH - height
	local texW = 16
	local texH = 16

	surface.SetMaterial( Material( icon16/box.png, noclamp ) )
	surface.SetDrawColor( color_white )
	surface.DrawTexturedRectUV( 0, 0, w, h, 0, 0, w / texW, h / texH )
end


"surface/GetHUDTexture"
surface.GetHUDTexture( string name ) 
 Description
Gets the HUD texture with the specified name.

 Arguments

 string name


The name of the texture.

 Returns

 ITexture


text


"surface/GetTextSize"
surface.GetTextSize( string text ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Returns the width and height (in pixels) of the given text, but only if the font has been set with surface.SetFont.

 Arguments

 string text


The string to check the size of.

 Returns

 number


Width of the provided text

 Returns

 number


Height of the provided text

 Examples
 Example
Prints out the size of Hello World in the Trebuchet24 font.

surface.SetFont( Trebuchet24 )

local message = Hello World
local width, height = surface.GetTextSize( message )

print( Text width:  .. width .. , text height:  .. height )
Output:

Text width: 100, text height: 24


 Examples
 Example
Get text height very quickly. No tables or spare variables used.

local message = Hello World

surface.SetFont( Trebuchet24 )
local height = select( 2, surface.GetTextSize( message ) )

print( height )
Output:

24


"surface/GetDrawColor"
surface.GetDrawColor(  ) 
 Description
Returns the current color affecting draw operations.



BUG


The returned color will not have the color metatable.



Next Update ChangeThis feature is only available in the next update.
 Returns

 table


The color that drawing operations will use as a Color structure.


"surface/GetTextColor"
surface.GetTextColor(  ) 
 Description
Returns the current color affecting text draw operations.



BUG


The returned color will not have the color metatable.



Next Update ChangeThis feature is only available in the next update.
 Returns

 table


The color that text drawing operations will use as a Color structure.


"surface/GetTextureID"
surface.GetTextureID( string name/path ) 
 Description
Returns the texture id of the material with the given name/path.



NOTE


This function will not work with .png or .jpg images. For that, see Material


 Arguments

 string name/path


Name or path of the texture.

 Returns

 number


The texture ID


"surface/PlaySound"
surface.PlaySound( string soundfile ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Play a sound file directly on the client (such as UI sounds, etc).

 Arguments

 string soundfile


The path to the sound file, which can be relative to the sound/ folder.

 Examples
 Example
Play a sound contained in addons/myaddon/sound/mysound.wav

surface.PlaySound( mysound.wav )


 Examples
 Example
Plays the ammo pickup sound.

surface.PlaySound( items/ammo_pickup.wav )


"surface/DrawText"
surface.DrawText( string text ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Draw the specified text on the screen, using the previously set position, font and color.



NOTE


This is a rendering function that requires a 2D rendering context.This means that it will only work in hooks with a 2D rendering context.


 Arguments

 string text


The text to be rendered.

 Examples
 Example
Draws Hello World on the screen. All functions in this example must be called for the draw to work flawlessly.

hook.Add( HUDPaint, drawsometext, function()
	surface.SetFont( Default )
	surface.SetTextColor( 255, 255, 255 )
	surface.SetTextPos( 128, 128 ) 
	surface.DrawText( Hello World )
end )


"surface/ScreenWidth"
surface.ScreenWidth(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use ScrW instead.
Returns the width of the current clients screen.

 Returns

 number


screenWidth

 Examples
 Example
Prints out the current width of the screen.

MsgN( Screen width:  .. surface.ScreenWidth() )
Output:

Screen width: 1920


"surface/SetAlphaMultiplier"
surface.SetAlphaMultiplier( number multiplier ) 
 Description
Sets the alpha multiplier that will influence all upcoming drawing operations.

 Arguments

 number multiplier


The multiplier ranging from 0 to 1.


"surface/SetFont"
surface.SetFont( string fontName ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Set the current font to be used for text operations later.
The fonts must first be created with surface.CreateFont or be one of the Default Fonts.

 Arguments

 string fontName


The name of the font to use.

 Examples
 Example
Draws Hello World on the screen, with the Default font.

hook.Add( HUDPaint, HUDPaint_DrawABox, function()
	surface.SetDrawColor( 0, 0, 0, 128 ) -- Set color for background
	surface.DrawRect( 100, 100, 128, 20 ) -- Draw background

	surface.SetTextColor( 255, 255, 255 ) -- Set text color
	surface.SetTextPos( 136, 104 ) -- Set text position, top left corner
	surface.SetFont( Default ) -- Set the font
	surface.DrawText( Hello World ) -- Draw the text
end )


"surface/GetTextureSize"
surface.GetTextureSize( number textureID ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns


 Description
Returns the size of the texture with the associated texture ID.

 Arguments

 number textureID


The texture ID, returned by surface.GetTextureID.

 Returns

 number


The texture width.

 Returns

 number


The texture height.


"surface/ScreenHeight"
surface.ScreenHeight(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use ScrH instead.
Returns the height of the current clients screen.

 Returns

 number


screenHeight

 Examples
 Example
Prints out the current height of the screen.

MsgN( Screen height:  .. surface.ScreenHeight() )
Output:

Screen height: 1080


"surface/SetTextColor"
surface.SetTextColor( number r, number g, number b, number a=255 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Set the color of any future text to be drawn, can be set by either using r, g, b, a as separate values or by a Color structure. Using a color structure is not recommended to be created procedurally.

 Arguments

 number r


The red value of color, or a Color structure.

 Arguments

 number g


The green value of color

 Arguments

 number b


The blue value of color

 Arguments

 number a=255


The alpha value of color

 Examples
 Example
Draws Hello World, in white, near the top left of the screen.

hook.Add( HUDPaint, HUDPaint_DrawABox, function()
	surface.SetDrawColor( 0, 0, 0, 128 ) -- Set color for background
	surface.DrawRect( 100, 100, 128, 20 ) -- Draw background

	surface.SetTextColor( 255, 255, 255 ) -- Set text color
	surface.SetTextPos( 136, 104 ) -- Set text position, top left corner
	surface.SetFont( Default ) -- Set the font
	surface.DrawText( Hello World ) -- Draw the text
end )


"surface/SetTextPos"
surface.SetTextPos( number x, number y ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Set the top-left position to draw any future text at.

 Arguments

 number x


The X integer co-ordinate.

 Arguments

 number y


The Y integer co-ordinate.

 Examples
 Example
Draws Hello World on the screen, around top-left of the screen.

hook.Add( HUDPaint, HUDPaint_DrawABox, function()
	surface.SetDrawColor( 0, 0, 0, 128 ) -- Set color for background
	surface.DrawRect( 100, 100, 128, 20 ) -- Draw background

	surface.SetTextColor( 255, 255, 255 ) -- Set text color
	surface.SetTextPos( 136, 104 ) -- Set text position, top left corner
	surface.SetFont( Default ) -- Set the font
	surface.DrawText( Hello World ) -- Draw the text
end )


"surface/SetMaterial"
surface.SetMaterial( IMaterial material ) 
 Description
Sets the material to be used in all upcoming draw operations using the surface library.
Not to be confused with render.SetMaterial.
See also surface.SetTexture.



WARNING


Material function calls are expensive to be done inside this function or inside rendering context, you should be caching the results of Material calls


 Arguments

 IMaterial material


The material to be used.


"surface/SetDrawColor"
surface.SetDrawColor( number r, number g, number b, number a=255 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Set the color of any future shapes to be drawn, can be set by either using r, g, b, a as separate values or by a Color structure. Using a color structure is not recommended to be created procedurally.

 Arguments

 number r


The red value of color, or a Color structure.

 Arguments

 number g


The green value of color. Unused if a Color structure was given.

 Arguments

 number b


The blue value of color. Unused if a Color structure was given.

 Arguments

 number a=255


The alpha value of color. Unused if a Color structure was given.


"surface/SetTexture"
surface.SetTexture( number textureID ) 
 Description
Sets the texture to be used in all upcoming draw operations using the surface library.
See also surface.SetMaterial for an IMaterial alternative.

 Arguments

 number textureID


The ID of the texture to draw with returned by surface.GetTextureID.


"system/IsWindowed"
system.IsWindowed(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns whether the game is being run in a window or in fullscreen (you can change this by opening the menu, clicking Options, then clicking the Video tab, and changing the Display Mode using the dropdown menu):


 Returns

 boolean


Is the game running in a window?

 Examples
 Example
If the game is windowed, then the game window will flash

if ( system.IsWindowed() then
	system.FlashWindow()
end


"system/BatteryPower"
system.BatteryPower(  ) 
 Description
Returns the current battery power.

 Returns

 number


0-100 if on battery power.

If plugged in, the value will be 255 regardless of charging state.


"system/HasFocus"
system.HasFocus(  ) 
 Description
Returns whether or not the game window has focus.
Returns true 100% of the time on OS X.



NOTE


This function does not work on dedicated servers and will instead return no value.




BUG


This will return true when minimized in windowed-mode.



 Returns

 boolean


Whether or not the game window has focus.


"system/IsWindows"
system.IsWindows(  ) 
 Description
Returns whether the current OS is Windows.

 Returns

 boolean


Whether the system the game runs on is Windows or not.


"system/IsLinux"
system.IsLinux(  ) 
 Description
Returns whether the current OS is Linux.

 Returns

 boolean


Whether or not the game is running on Linux.


"system/IsOSX"
system.IsOSX(  ) 
 Description
Returns whether the current OS is OSX.

 Returns

 boolean


Whether or not the game is running on OSX.


"system/FlashWindow"
system.FlashWindow(  ) 
 Description
Flashes the window. Currently works only on Windows.


"system/AppTime"
system.AppTime(  ) 
 Description
Returns the total uptime of the current application as reported by Steam.
This will return a similar value to SysTime.



NOTE


This function does not work on Dedicated Servers and will instead return no value.


 Returns

 number


Seconds of game uptime as an integer.


"system/SteamTime"
system.SteamTime(  ) 
 Description



NOTE


This function does not work on Dedicated Servers and will instead return no value.


 Returns

 number


Current Steam-synchronized Unix time.


"system/UpTime"
system.UpTime(  ) 
 Description
Returns the amount of seconds since the Steam user last moved their mouse.
This is a direct binding to ISteamUtils-&gt;GetSecondsSinceComputerActive, and is most likely related to Steams automatic Away online status.



NOTE


This function does not work on Dedicated Servers and will instead return no value.


 Returns

 number


The amount of seconds since the Steam user last moved their mouse.


"table/Add"
table.Add( table target, table source ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Adds the contents from one table into another. The target table will be modified.
See also table.Inherit and table.Merge.

 Arguments

 table target


The table to insert the new values into.

 Arguments

 table source


The table to retrieve the values from.

 Returns

 table


The target table.

 Examples
 Example
Demonstrates the use of this function. Note that duplicate values will be added.

local Test1 = {One,Two,Three, Four}

local Test2 = {Four, Five, Six}

table.Add( Test1, Test2 )
print( table.concat( Test1,   ) )
Output:


One Two Three Four Four Five Six


"table/Copy"
table.Copy( table originalTable ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Creates a deep copy and returns that copy.



WARNING


This function does NOT copy userdata, such as Vectors and Angles!


 Arguments

 table originalTable


The table to be copied.

 Returns

 table


A deep copy of the original table

 Examples
 Example
Creates a deep copy of table A

B = table.Copy( A )


"system/GetCountry"
system.GetCountry(  ) 
 Description
Returns the country code of this computer, determined by the localisation settings of the OS.



NOTE


This function does not work on Dedicated Servers and will instead return no value.


 Returns

 string


"table/ClearKeys"
table.ClearKeys( table table, boolean saveKeys=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Changes all keys to sequential integers. This creates a new table object and does not affect the original.

 Arguments

 table table


The original table to modify.

 Arguments

 boolean saveKeys=false


Save the keys within each member table. This will insert a new field __key into each value, and should not be used if the table contains non-table values.

 Returns

 table


Table with integer keys.

 Examples
 Example
Changes all the tables keys to integer values

local Table = {One = A, Two = B, Three = C}

local Table2 = table.ClearKeys( Table )
PrintTable( Table2 )
Output:


1 = A
2 = C

3 = B
 Examples
 Example
Clears a table of its keys, and preserves the old key names within each member.

local tbl =
{
	FirstMember = { Name = John Smith, Age  = 25 },
	SecondMember = { Name = Jane Doe, Age = 42 },
	ThirdMember = { Name = Joe Bloggs, Age = 39 }

}

print( ===== Before ===== )
PrintTable( tbl )
local tbl2 = table.ClearKeys( tbl, true )
print( ===== After ===== )
PrintTable( tbl2 )
Output:

===== Before =====
FirstMember:
		Name	=	John Smith
		Age	=	25
SecondMember:
		Name	=	Jane Doe
		Age	=	42
ThirdMember:
		Name	=	Joe Bloggs
		Age	=	39
===== After =====
1:
		Age	=	25
		Name	=	John Smith
		__key	=	FirstMember
2:
		Age	=	39
		Name	=	Joe Bloggs
		__key	=	ThirdMember
3:
		Age	=	42
		Name	=	Jane Doe
		__key	=	SecondMember


"table/concat"
table.concat( table tbl, string concatenator=, number startPos=1, number endPos=#tbl ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example




 Description
Concatenates the contents of a table to a string.

 Arguments

 table tbl


The table to concatenate.

 Arguments

 string concatenator=


A seperator to insert between strings

 Arguments

 number startPos=1


The key to start at

 Arguments

 number endPos=#tbl


The key to end at

 Returns

 string


Concatenated values

 Examples
 Example
Demonstrates the use of this function.

local Table = { A, simple, table.concat, test }

print( table.concat( Table ) )
print( table.concat( Table,   ) )
print( table.concat( Table,  , 3, 4 ) )
Output:

Asimpletable.concattest
A simple table.concat test
table.concat test


"table/FindNext"
table.FindNext( table tbl, any value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Instead, iterate the table using ipairs or increment from the previous index using next. Non-numerically indexed tables are not ordered.
Returns the value positioned after the supplied value in a table. If it isnt found then the first element in the table is returned

 Arguments

 table tbl


Table to search

 Arguments

 any value


Value to return element after

 Returns

 any


Found element

 Examples
 Example
Print the next element after the b value of the table

local tbl = {a, b, c}


print( table.FindNext( tbl, b ) )
Output:

c in console


"table/CopyFromTo"
table.CopyFromTo( table source, table target ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Empties the target table, and merges all values from the source table into it.

 Arguments

 table source


The table to copy from.

 Arguments

 table target


The table to write to.

 Examples
 Example
Demonstrates the use of this function.

local Test1 = {A = String keys, B = Table 1}

local Test2 = {Numeric keys, Table 2}

table.CopyFromTo( Test2, Test1 )
PrintTable( Test1 )
Output:


1 = Numeric keys

2 = Table 2


"table/ForceInsert"
table.ForceInsert( table tab={}, any value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Inserts a value in to the given table even if the table is non-existent

 Arguments

 table tab={}


Table to insert value in to

 Arguments

 any value


Value to insert

 Returns

 table


The supplied or created table


"table/Count"
table.Count( table tbl ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Counts the amount of keys in a table. This should only be used when a table is not numerically and sequentially indexed. For those tables, consider the length operator.

 Arguments

 table tbl


The table to count the keys of.

 Returns

 number


The number of keyvalue pairs. This includes non-numeric and non-sequential keys, unlike the length (#) operator.

 Examples
 Example
There are 4 keys in this table. So it will output 4

Table = { A = 1, B = 2, C = 3, D = 4 }


print( table.Count( Table ) )
Output:

4


"table/foreach"
table.foreach( table tbl, function callback ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

This was deprecated in Lua 5.1 and removed in 5.2. You should use pairs() instead. Iterates for each key-value pair in the table, calling the function with the key and value of the pair. If the function returns anything, the loop is broken.

 Arguments

 table tbl


The table to iterate over.

 Arguments

 function callback


The function to run for each key and value.

 Examples
 Example
Demonstrates the use of this function.

local food = { Cake, Pies, Delicious = Cookies, Awesome = Pizza }

table.foreach( food, function( key, value )
 print( tostring( key ) .. .. value )
end )
Output:

1 Cake
2 Pies
Awesome Pizza
Delicious Cookies
 Examples
 Example
Demonstrates the breaking effect if the callback returns a value.

local tbl = { One, Two, Three, Four }

table.foreach( tbl, function( key, value )
   print( key, value )
   if ( key == 2 ) then return true end
end )
Output:

1    One
2    Two


"table/ForEach"
table.ForEach( table tab, function callback ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use pairs() instead. Iterates over a table and calls the given function for each key and value found. Unlike table.foreach, this ignores the value returned by the function.
 Arguments

 table tab


Table to iterate over.

 Arguments

 function callback


Function to call for every key-value pair. Arguments passed are:

 any key
 any value


"table/foreachi"
table.foreachi( table table, function func ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

This was deprecated in Lua 5.1 and removed in 5.2. You should use ipairs() instead. Iterates for each numeric index in the table in order.

 Arguments

 table table


The table to iterate over.

 Arguments

 function func


The function to run for each index.


"table/GetFirstKey"
table.GetFirstKey( table tab ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.
Instead, expect the first key to be 1.

Non-numerically indexed tables are not ordered and do not have a first key.
Returns the first key found in the given table

 Arguments

 table tab


Table to retrieve key from

 Returns

 any


Key


"table/GetFirstValue"
table.GetFirstValue( table tab ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.
Instead, index the table with a key of 1.

Non-numerically indexed tables are not ordered and do not have a first key.
Returns the first value found in the given table

 Arguments

 table tab


Table to retrieve value from

 Returns

 any


Value


"table/FindPrev"
table.FindPrev( table tbl, any value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Instead, iterate your table with ipairs, storing the previous value and checking for the target. Non-numerically indexed tables are not ordered.
Returns the value positioned before the supplied value in a table. If it isnt found then the last element in the table is returned

 Arguments

 table tbl


Table to search

 Arguments

 any value


Value to return element before

 Returns

 any


Found element

 Examples
 Example
Print the previous item the value b of the table

local tbl = {a, b, c}


print( table.FindPrev( tbl, b ) )
Output:

a in console


"table/DeSanitise"
table.DeSanitise( table tbl ) 
 Description
Converts a table that has been sanitised with table.Sanitise back to its original form

 Arguments

 table tbl


Table to be de-sanitised

 Returns

 table


De-sanitised table


"table/GetKeys"
table.GetKeys( table tabl ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns all keys of a table.

 Arguments

 table tabl


The table to get keys of

 Returns

 table


Table of keys

 Examples
 Example
Example usage

local tabl =
{
one = A,
two = B,
}

PrintTable( table.GetKeys( tabl ) )
Output:

1	=	one
2	=	two


"table/getn"
table.getn( table tbl ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

This function was deprecated in Lua 5.1 and is removed in 5.2. Use the length (#) operator instead. Returns the length of the table.
 Arguments

 table tbl


The table to check.

 Returns

 number


Sequential length.


"table/Empty"
table.Empty( table tbl ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Removes all values from a table.

 Arguments

 table tbl


The table to empty.

 Examples
 Example
Demonstrates the use of this function.

local Table = {String Value, Another value, Var = Non-integer key}

table.Empty( Table )
print( table.Count( Table ) )
Output:

0


"table/GetLastKey"
table.GetLastKey( table tab ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Instead, use the result of the length (#) operator, ensuring it is not zero. Non-numerically indexed tables are not ordered and do not have a last key.
Returns the last key found in the given table

 Arguments

 table tab


Table to retrieve key from

 Returns

 any


Key


"table/CollapseKeyValue"
table.CollapseKeyValue( table input ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Collapses a table with keyvalue structure

 Arguments

 table input


Input table

 Returns

 table


Output table

 Examples
 Example
Example usage

local output = table.CollapseKeyValue( {
	{ Key = mykey1, Value = myvalue1 },
	{ Key = 123, Value = 1345 },
	{ Key = 1345, Value = myvalue1 },
} )
Output:

local output =
{
	[ mykey1 ] = myvalue1,
	[ 123 ] = 1345,
	[ 1345 ] = myvalue1,
}


"table/GetLastValue"
table.GetLastValue( table tab ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Instead, index the table with the result of the length (#) operator, ensuring it is not zero. Non-numerically indexed tables are not ordered and do not have a last key.
Returns the last value found in the given table

 Arguments

 table tab


Table to retrieve value from

 Returns

 any


Value


"table/GetWinningKey"
table.GetWinningKey( table inputTable ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Returns a key of the supplied table with the highest number value.

 Arguments

 table inputTable


The table to search in.

 Returns

 any


winningKey

 Examples
 Example
Code that looks up the most favourite fruit from a table where the fruits name is the key, and its number value determines how much favourite it is (the higher value, the better).

favouriteFruit = { banana = 4, strawberry = 4, blueberry = 2, apple = 6 }

print( table.GetWinningKey( favouriteFruit ) )
Output:

apple
 Examples
 Example
A code that demonstrates a situation where there are two keys with the same value in the supplied table. String keys in the table represent the fruit name, and their number values determine how favourite it is (the higher value, the better).

favouriteFruit = { apple = 1, banana = 7, strawberry = 3, blueberry = 7 }

print( table.GetWinningKey( favouriteFruit ) )
Output:

banana


"table/HasValue"
table.HasValue( table tbl, any value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Checks if a table has a value.



WARNING


This function is very inefficient for large tables (O(n)) and should probably not be called in things that run each frame. Instead, consider a table structure such as example 2 below.




NOTE


For optimization, functions that look for a value by sorting the table should never be needed if you work on a table that you built yourself.


 Arguments

 table tbl


Table to check

 Arguments

 any value


Value to search for

 Returns

 boolean


Returns true if the table has that value, false otherwise

 Examples
 Example
Creates a table with values 123 and test and checks to see it the table holds value apple

local mytable = {123, test}

print( table.HasValue( mytable, apple ), table.HasValue( mytable, test ) )
Output:

false	true
 Examples
 Example
Example usage of O(1) associative array structure

local mytable = { [123] = true, test = true }

print( mytable[apple], mytable[test] )
Output:

nil	true


"table/Inherit"
table.Inherit( table target, table base ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Copies any missing data from base to target, and sets the targets BaseClass member to the base tables pointer.
See table.Merge, which overrides existing values and doesnt add a BaseClass member.
See also table.Add, which simply adds values of one table to another.



BUG


Sub-tables arent inherited. The targets table value will take priority.



 Arguments

 table target


Table to copy data to

 Arguments

 table base


Table to copy data from

 Returns

 table


Target

 Examples
 Example
Example of how this function works.

local table1 = { A, Golden }

local table2 = { Two, Orange, Apple }

table.Inherit( table1, table2 )
PrintTable( table1 )
Output:

1	=	A
2	=	Golden
3	=	Apple
BaseClass:
		1	=	Two
		2	=	Orange
		3	=	Apple


"table/KeysFromValue"
table.KeysFromValue( table tab, any value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns a table of keys containing the supplied value

 Arguments

 table tab


Table to search

 Arguments

 any value


Value to search for

 Returns

 table


Keys


"table/KeyFromValue"
table.KeyFromValue( table tab, any value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns the first key found to be containing the supplied value

 Arguments

 table tab


Table to search

 Arguments

 any value


Value to search for

 Returns

 any


Key


"table/IsSequential"
table.IsSequential( table tab ) 
 Description
Returns whether or not the tables keys are sequential

 Arguments

 table tab


Table to check

 Returns

 boolean


Is sequential


"table/insert"
table.insert( table tbl, number position=nil, any value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Inserts a value into a table at the end of the table or at the given position.

 Arguments

 table tbl


The table to insert the variable into.

 Arguments

 number position=nil


The position in the table to insert the variable.

 Arguments

 any value


The variable to insert into the table.

 Returns

 number


The index the object was placed at.

 Examples
 Example
Demonstrates the use of this function.

sentence = { hello, there, my, name, is, drakehawke }

table.insert( sentence, lol )
table.insert( sentence, 6, not )

PrintTable( sentence )
Output:

1	=	hello
2	=	there
3	=	my
4	=	name
5	=	is
6	=	not
7	=	drakehawke
8	=	lol


"table/maxn"
table.maxn( table tbl ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the highest numerical key.

 Arguments

 table tbl


The table to search.

 Returns

 number


The highest numerical key.

 Examples
 Example
Demonstrates how this differs from the # operator.

local tbl = {One, Two, [6] = Six, [42] = Answer to life, the universe, and everything}


PrintTable( tbl )
print( \n .. #tbl )
print( table.maxn( tbl ) )
Output:

1	=	One
2	=	Two
6	=	Six
42	=	Answer to life, the universe, and everything

2
42

Whereas the length operator (#) returns the highest sequential index, this returns the value of the highest numeric index.


"table/Random"
table.Random( table haystack ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns
5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Returns a random value from the supplied table.



NOTE


This function iterates over the given table twice, therefore with sequential tables you should instead use following:

mytable[ math.random( #mytable ) ]

 Arguments

 table haystack


The table to choose from.

 Returns

 any


A random value from the table.

 Returns

 any


The key associated with the random value.

 Examples
 Example
A simple example of this function using two tables.

color = { green, red, blue, yellow }

object = { car, house, bike }


print( I have a  .. table.Random( color ) ..   .. table.Random( object ) .. . )
Output:

I have a green house.
 Examples
 Example
Example of using the alternative with sequential tables for performance reasons.

websites = {facepunch.com, google.com, steampowered.com}

print( I think the best website ever is  .. websites[math.random( 1, #websites )] .. . )
Output:

I think the best website ever is google.com.


"table/remove"
table.remove( table tbl, number index=#tbl ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Removes a value from a table and shifts any other values down to fill the gap.

 Arguments

 table tbl


The table to remove the value from.

 Arguments

 number index=#tbl


The index of the value to remove.

 Returns

 any


The value that was removed.

 Examples
 Example
Demonstrates the use of this function.

sentence = { hello, there, my, name, is, Player1 }

print( table.remove( sentence ) ) -- Using no second arg removes the last value
print( table.remove( sentence, 2 ) )
PrintTable( sentence )
Output:

Player1
there
1 = hello
2 = my
3 = name
4 = is


"table/Sanitise"
table.Sanitise( table tab ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Converts Vectors, Angles and booleans to be able to be converted to and from key-values. table.DeSanitise does the opposite

 Arguments

 table tab


Table to sanitise

 Returns

 table


Sanitised table

 Examples
 Example
Example of what this function does.

local table1 = { A, Golden, Angle( 1, 2, 3 ), Vector( 1, 2, 3 ) }


PrintTable( table.Sanitise( table1 ) )
Output:

1	=	A
2	=	Golden
3:
		__type	=	Angle
		p	=	1
		r	=	3
		y	=	2
4:
		__type	=	Vector
		x	=	1
		y	=	2
		z	=	3


"table/Merge"
table.Merge( table destination, table source ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Merges the contents of the second table with the content in the first one.
See table.Inherit, which doesnt override existing values.
See also table.Add, which simply adds values of one table to another.

 Arguments

 table destination


The table you want the source table to merge with

 Arguments

 table source


The table you want to merge with the destination table

 Returns

 table


Destination table

 Examples
 Example
Merges the content of the second table with the first one, overwriting any matching key/value pairs in the destination with the sources version and prints the resulting merge.

local destination = {[1] = A, [2] = Golden, [3] = Apple}

local source = {[1] = Two, [2] = Orange}

table.Merge( destination, source )
PrintTable( destination )
Output:

1	=	Two
2	=	Orange
3	=	Apple


"table/RemoveByValue"
table.RemoveByValue( table tbl, any val ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Removes the first instance of a given value from the specified table with table.remove, then returns the key that the value was found at.

 Arguments

 table tbl


The table that will be searched.

 Arguments

 any val


The value to find within the table.

 Returns

 any


The key at which the value was found, or false if the value was not found.


"table/Reverse"
table.Reverse( table tbl ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns a reversed copy of a sequential table. Any non-sequential and non-numeric keyvalue pairs will not be copied.

 Arguments

 table tbl


Table to reverse.

 Returns

 table


A reversed copy of the table.

 Examples
 Example
Creates a table and reverses it.

local tbl = { One, Two, Three, four = 4, [5] = 5 }


PrintTable( tbl )
print(  )
PrintTable( table.Reverse( tbl ) )
Output:

1	=	One
2	=	Two
3	=	Three
four	=	4
5	=	5

1	=	Three
2	=	Two
3	=	One


"table/SortByMember"
table.SortByMember( table tab, any memberKey, boolean ascending=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Examples

5.1 Example




 Description
Sorts a table by a named member

 Arguments

 table tab


Table to sort

 Arguments

 any memberKey


The key used to identify the member

 Arguments

 boolean ascending=false


Whether or not the order should be ascending

 Examples
 Example
Orders a table by a member and prints it

local tab =
{
    {Name = Bill, Age = 13},
    {Name = Jill, Age = 14},
    {Name = Phil, Age = 8}

}

table.SortByMember( tab, Age )

for k, v in ipairs( tab ) do
    print( v.Name )
end
Output:

Jill
Bill

Phil


"table/SortByKey"
table.SortByKey( table tab, boolean descending=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns a list of keys sorted based on values of those keys.
For normal sorting see table.sort.

 Arguments

 table tab


Table to sort. All values of this table must be of same type.

 Arguments

 boolean descending=false


Should the order be descending?

 Returns

 table


A table of keys sorted by values from supplied table.

 Examples
 Example
Example usage of the function.

local t = {}

t[h] = 2 -- Lowest value
t[a] = 150 -- Highest value
t[x] = 30

PrintTable( table.SortByKey( t ) )
PrintTable( table.SortByKey( t , true ) )
Output:

1 = a
2 = x
3 = h
1 = h
2 = x
3 = a


"Task/Init"
Task:Init(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Initialises the AI task. Called by ai_task.New.


"table/sort"
table.sort( table tbl, function sorter ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Sorts a table either ascending or by the given sort function.

 Arguments

 table tbl


The table to sort.

 Arguments

 function sorter


If specified, the function will be called with 2 parameters each.

Return true in this function if you want the first parameter to come first in the sorted array.

 Examples
 Example
Sorting table by an integer

local TABLE =
{
	{Jeff,8},
	{Peter,17},
	{Shay,11},
	{Janine,1}

}


table.sort( TABLE,function( a, b ) return a[2] &gt; b[2] end )
Output:

Table going from highest number to lowest (1: Peter, 2: Shay, 3: Jeff, 4: Janine)
 Examples
 Example
Sorting a player table by a NWInt

local PLAYERS = player.GetAll()

table.sort( PLAYERS,function( a, b ) return a:GetNWInt( Score ) &gt; b:GetNWInt( Score ) end )
Output:

Player table sorted by score going from highest to lowest


"table/SortDesc"
table.SortDesc( table tbl ) 
 Description
Sorts a table in reverse order from table.sort

 Arguments

 table tbl


The table to sort in descending order.

 Returns

 table


sorted


"table/ToString"
table.ToString( table tbl, string displayName, boolean niceFormatting ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Converts a table into a string

 Arguments

 table tbl


The table to iterate over.

 Arguments

 string displayName


Optional. A name for the table.

 Arguments

 boolean niceFormatting


Adds new lines and tabs to the string.

 Returns

 string


The table formatted as a string.

 Examples
 Example
Demonstrates the use of this function.

local Table = { Red = Apple, Green = Celery, Yellow = Banana}

local String = table.ToString( Table, Fruit and Vegetable, true )
print( String )
Output:

Fruit and Vegetable	=	{
		Red	=	Apple,
		Green	=	Celery,
		Yellow	=	Banana,
}


"table/LowerKeyNames"
table.LowerKeyNames( table tbl ) 
 Description
Returns a copy of the input table with all string keys converted to be lowercase recursively

 Arguments

 table tbl


Table to convert

 Returns

 table


New table


"Task/IsEngineType"
Task:IsEngineType(  ) 
 Description
Determines if the task is an engine task (TYPE_ENGINE, 1).


"Task/InitFunctionName"
Task:InitFunctionName( string startname, string runname, number taskdata ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Initialises the AI task as NPC method-based.

 Arguments

 string startname


The name of the NPC method to call on task start.

 Arguments

 string runname


The name of the NPC method to call on task run.

 Arguments

 number taskdata


"Task/Start_FName"
Task:Start_FName( NPC target ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Starts the AI task as an NPC method.
 Arguments

 NPC target


The NPC to start the task on.


"Task/InitEngine"
Task:InitEngine( string taskname, number taskdata ) 
 Description
Initialises the AI task as an engine task.

 Arguments

 string taskname


The name of the task.

 Arguments

 number taskdata


"Task/IsFNameType"
Task:IsFNameType(  ) 
 Description
Determines if the task is an NPC method-based task (TYPE_FNAME, 2).


"team/AddScore"
team.AddScore( number index, number increment ) 
 Description
Increases the score of the given team

 Arguments

 number index


Index of the team

 Arguments

 number increment


Amount to increase the teams score by


"team/BestAutoJoinTeam"
team.BestAutoJoinTeam(  ) 
 Description
Returns the team index of the team with the least players. Falls back to TEAM_UNASSIGNED

 Returns

 number


Team index


"team/GetPlayers"
team.GetPlayers( number teamIndex ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns a table with all player of the specified team.

 Arguments

 number teamIndex


The team index.

 Returns

 table


A table of Players that belong to the requested team.

 Examples
 Example
Prints all the players in a players team.

PrintTable( team.GetPlayers( ply:Team() ) )
Output:

List of players.


"team/GetClass"
team.GetClass( number index ) 
 Description
Returns the selectable classes for the given team. This can be added to with team/SetClass

 Arguments

 number index


Index of the team

 Returns

 table


Selectable classes


"team/GetAllTeams"
team.GetAllTeams(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns a table consisting of information on every defined team

 Returns

 table


Team info

 Examples
 Example
Prints all Jobs/Teams on the server. The list in printed from lowest to highest. Information about join able to the player, the score of the team and the colors.

PrintTable( team.GetAllTeams() )
Output:

0:
		Color:
				a	=	255
				b	=	100
				g	=	255
				r	=	255
		Joinable	=	false
		Name	=	Joining/Connecting
		Score	=	0


"Task/Run"
Task:Run( NPC target ) 
 Description
Runs the AI task.

 Arguments

 NPC target


The NPC to run the task on.


"Task/Run_FName"
Task:Run_FName( NPC target ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Runs the AI task as an NPC method. This requires the task to be of type TYPE_FNAME.
 Arguments

 NPC target


The NPC to run the task on.


"team/GetColor"
team.GetColor( number teamIndex ) 
 Description
Returns the teams color.

 Arguments

 number teamIndex


The team index.

 Returns

 table


The teams color as a Color structure.


"team/GetName"
team.GetName( number teamIndex ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the name of the team.

 Arguments

 number teamIndex


The team index.

 Returns

 string


The team name. If the team is not defined, returns an empty string.

 Examples
 Example
Gets the teams string name.

print( team.GetName( Entity( 1 ):Team() ) )


"Task/Start"
Task:Start( NPC target ) 
 Description
Starts the AI task.

 Arguments

 NPC target


The NPC to start the task on.


"team/GetScore"
team.GetScore( number teamIndex ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the score of the team.

 Arguments

 number teamIndex


The team index.

 Returns

 number


score

 Examples
 Example
Gets the teams score, can be a number 1 or 2 depending on how many teams youve set up.

print( team.GetScore( ply:Team() ),team.GetScore( 1 ) )
Output:

1


"team/GetSpawnPoints"
team.GetSpawnPoints( number index ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns a table of valid spawnpoint entities the team can use. These are set with team.SetSpawnPoint.

 Arguments

 number index


Index of the team

 Returns

 table


Valid spawnpoint entities

 Examples
 Example
Prints a random spawnpoint entity for TEAM_RED

print( table.Random( team.GetSpawnPoints( TEAM_RED ) ) )
Output:

Spawnpoint Entity


"team/SetScore"
team.SetScore( number index, number score ) 
 Description
Sets the score of the given team

 Arguments

 number index


Index of the team

 Arguments

 number score


The teams new score


"team/GetSpawnPoint"
team.GetSpawnPoint( number index ) 
 Description
Returns a table of valid spawnpoint classes the team can use. These are set with team.SetSpawnPoint.

 Arguments

 number index


Index of the team

 Returns

 table


Valid spawnpoint classes


"team/Joinable"
team.Joinable( number index ) 
 Description
Returns if a team is joinable or not. This is set in team.SetUp.

 Arguments

 number index


The index of the team.

 Returns

 boolean


True if the team is joinable. False otherwise.


"team/TotalFrags"
team.TotalFrags( Entity Entity or number ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Gets the total frags in a team.

 Arguments

 Entity Entity or number


Entity or number.

 Returns

 number


index

 Examples
 Example
Gets the total frags in a team.

print( team.TotalFrags( ply:Team() ),team.TotalFrags( 1 ) )
Output:

1


"team/SetColor"
team.SetColor( number teamIndex, table color ) 
 Description
Sets the teams color.

 Arguments

 number teamIndex


The team index.

 Arguments

 table color


The teams new color as a Color structure.


"team/NumPlayers"
team.NumPlayers( number teamIndex ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the amount of players in a team.

 Arguments

 number teamIndex


The team index.

 Returns

 number


playerCount

 Examples
 Example
Prints the amount of players in a players team

print( team.NumPlayers( ply:Team() ) )
Output:

The number of players in plys team.


"team/SetClass"
team.SetClass( number index, any classes ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets valid classes for use by a team. Classes can be created using player_manager.RegisterClass

 Arguments

 number index


Index of the team

 Arguments

 any classes


A class ID or table of class IDs

 Examples
 Example
Allows TEAM_RED to access the Soldier class

team.SetClass( TEAM_RED, {Soldier} )


"team/SetUp"
team.SetUp( number teamIndex, string teamName, table teamColor, boolean isJoinable=true ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Creates a new team.

 Arguments

 number teamIndex


The team index.

 Arguments

 string teamName


The team name.

 Arguments

 table teamColor


The team color. Uses the Color structure.

 Arguments

 boolean isJoinable=true


Whether the team is joinable or not.

 Examples
 Example
Create team 2 with name Mingebags and color red

team.SetUp( 2, Mingebags, Color( 255, 0, 0 ) )


"timer/Simple"
timer.Simple( number delay, function func ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example


5 Examples

5.1 Example




 Description
Creates a simple timer that runs the given function after a specified delay.
For a more advanced version that you can control after creation, see timer.Create.



NOTE


Timers use CurTime for timing.




WARNING


Timers wont advance while the client is timing out from the server.


 Arguments

 number delay


How long until the function should be ran (in seconds). Use 0 to have the function run in the next GM:Think.

 Arguments

 function func


The function to run after the specified delay.

 Examples
 Example
Print Hello World after 5 seconds.

timer.Simple( 5, function() print( Hello World ) end )
Output:

Hello World
 Examples
 Example
Spawns 5 zombies and creates a timer.Simple that removes them in 11, 12, 13, 14, and 15 seconds.

for i = 1, 5 do
	local zombie = ents.Create( npc_zombie )
	zombie:SetPos( Vector( i*40, 0 , 250 ) )
	zombie:Spawn()

	timer.Simple( 10 + i, function() zombie:Remove() end  )
end
Output:

--11 seconds into game 1st zombie disappears
--12 seconds into game 2nd zombie disappears

etc.


"timer/Exists"
timer.Exists( string identifier ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns whenever the given timer exists or not.

 Arguments

 string identifier


Identifier of the timer.

 Returns

 boolean


Returns true if the timer exists, false if it doesnt

 Examples
 Example
Checks it the timer exists

if ( timer.Exists( TimerName ) ) then

	-- The timer exists
	print( The timer exists )
	
else
	-- The timer doesnt exist
	print( The timer does not exist! )

	-- Create a timer
	timer.Create( TimerName, 1, 0, function() print( Im a Timer ) end )
end
Output:

The timer does not exist!
Im a Timer
Im a Timer
Im a Timer

Im a Timer


"team/TotalDeaths"
team.TotalDeaths( number teamIndex ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the sum of deaths of all players of the team.

 Arguments

 number teamIndex


The team index.

 Returns

 number


deathCount

 Examples
 Example
Gets the total deaths in a team.

print( team.TotalDeaths( ply:Team() ),team.TotalDeaths( 1 ) )
Output:

2


"timer/Pause"
timer.Pause( any identifier ) 
 Description
Pauses the given timer.

 Arguments

 any identifier


Identifier of the timer.

 Returns

 boolean


false if the timer didnt exist or was already paused, true otherwise.


"timer/RepsLeft"
timer.RepsLeft( any identifier ) 
 Description
Returns amount of repetitions/executions left before the timer destroys itself.

 Arguments

 any identifier


Identifier of the timer.

 Returns

 number


The amount of executions left.


"timer/Create"
timer.Create( string identifier, number delay, number repetitions, function func ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example


7 Examples

7.1 Example




 Description
Creates a new timer that will repeat its function given amount of times.
This function also requires the timer to be named, which allows you to control it after it was created via the timer library.
For a simple one-time timer with no identifiers, see timer.Simple.



NOTE


Timers use CurTime for timing.




WARNING


Timers wont advance while the client is timing out from the server.


 Arguments

 string identifier


Identifier of the timer to create. Must be unique. If a timer already exists with the same identifier, that timer will be updated to the new settings and reset.

 Arguments

 number delay


The delay interval in seconds. If the delay is too small, the timer will fire on the next frame/tick.

 Arguments

 number repetitions


The number of times to repeat the timer. Enter 0 for infinite repetitions.

 Arguments

 function func


Function called when timer has finished the countdown.

 Examples
 Example
Creates a timer that has a 1 second delay and is only ran once (UniqueName1), a timer that has a 2 second delay and is ran continuously (UniqueName2), etc.
This shows the different ways you can interact with functions.

local function PrintSomething( text )
	print( text )
end

local function PrintNoArguments()
	print( fun with timers! )
end

local function CreateSomeTimers()
	timer.Create( UniqueName1, 1, 1, function() print( inside ) end )
	timer.Create( UniqueName2, 2, 0, function() PrintSomething( outside ) end )
	timer.Create( UniqueName3, 5, 1, PrintNoArguments )
end
hook.Add( Initialize, Timer Example, CreateSomeTimers )
Output:

inside -- 1 second
outside -- 2 seconds
outside -- 4 seconds
fun with timers! -- 5 seconds
outside -- 6 seconds

outside -- 8 seconds
 Examples
 Example
Creates a timer that has 0.01 second delay, to demonstrate that the minimum delay of a timer is locked at the tickrate period (1/66 seconds).
(As the example below shows, by setting the delay rate to 1/100 (0.01 seconds), the difference in time between the iterations of the timer should be 0.01 seconds, but instead, it is 0.149 (1/66) seconds).

local tick = {} 
local tick_key = 1 

local function MinimumTimerDelay()	
	local current_time = CurTime() 
	if ( tick_key &gt; 1 ) then 
		print( Timer Iteration # .. tick_key - 1 ..  had a delay of  .. current_time - tick[tick_key - 1] )
	end
	tick[tick_key] = current_time 
	tick_key = tick_key + 1	
end

local function Timer()
	timer.Create( Timer Delay, ( 1/100 ), 10, MinimumTimerDelay ) 
end

hook.Add( Initialize, Commence Timers, Timer )
Output:

Timer Iteration #1 had a delay of 0.014999389648438
Timer Iteration #2 had a delay of 0.014999389648438
Timer Iteration #3 had a delay of 0.014999389648438
Timer Iteration #4 had a delay of 0.0150146484375
Timer Iteration #5 had a delay of 0.014999389648438
Timer Iteration #6 had a delay of 0.014999389648438
Timer Iteration #7 had a delay of 0.014999389648438
Timer Iteration #8 had a delay of 0.014999389648438

Timer Iteration #9 had a delay of 0.014999389648438


"timer/Adjust"
timer.Adjust( any identifier, number delay, number repetitions, function func ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description
Adjusts the timer if the timer with the given identifier exists.

 Arguments

 any identifier


Identifier of the timer to adjust.

 Arguments

 number delay


The delay interval in seconds.

 Arguments

 number repetitions


Repetitions. Use 0 for infinite.

 Arguments

 function func


The new function.

 Returns

 boolean


true if succeeded


"timer/Destroy"
timer.Destroy( string identifier ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should be using timer.Remove instead. Stops and destroys the given timer. Alias of timer.Remove.
 Arguments

 string identifier


Identifier of the timer to destroy.


"Tool/GetBone"
Tool:GetBone( number id ) 
 Description
Retrieves a physics bone number previously stored using Tool:SetObject.

 Arguments

 number id


The id of the object which was set in Tool:SetObject.


"timer/Start"
timer.Start( any identifier ) 
 Description
Restarts the given timer.



NOTE


Timers use CurTime for timing.




WARNING


Timers wont advance while the client is timing out from the server.


 Arguments

 any identifier


Identifier of the timer.

 Returns

 boolean


true if the timer exists, false if it doesnt.


"timer/Remove"
timer.Remove( string identifier ) 
 Description
Stops and removes a timer created by timer.Create.

 Arguments

 string identifier


Identifier of the timer to remove.


"team/SetSpawnPoint"
team.SetSpawnPoint( number index, any classes ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Sets valid spawnpoint classes for use by a team.



NOTE


GM.TeamBased must be set to true for this to work


 Arguments

 number index


Index of the team

 Arguments

 any classes


A spawnpoint classname or table of spawnpoint classnames

 Examples
 Example
Allows TEAM_BLUE to spawn at terrorist spawn points

team.SetSpawnPoint( TEAM_BLUE, {info_terror} )


"timer/Check"
timer.Check(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version. This function does nothing.


"team/Valid"
team.Valid( number index ) 
 Description
Returns true if the given team index is valid

 Arguments

 number index


Index of the team

 Returns

 boolean


Is valid


"Tool/GetClientInfo"
Tool:GetClientInfo( string name ) 
 Description
Attempts to grab a clientside tool ConVar.

 Arguments

 string name


Name of the convar to retrieve. The function will automatically add the mytoolfilename_ part to it.

 Returns

 string


The value of the requested ConVar.


"timer/UnPause"
timer.UnPause( any identifier ) 
 Description
Unpauses the timer.

 Arguments

 any identifier


Identifier of the timer.

 Returns

 boolean


false if the timer didnt exist or was already running, true otherwise.


"Tool/ClearObjects"
Tool:ClearObjects(  ) 
 Description
Clears all objects previously set with Tool:SetObject.


"timer/Toggle"
timer.Toggle( any identifier ) 
 Description
Runs either timer.Pause or timer.UnPause based on the timers current status.

 Arguments

 any identifier


Identifier of the timer.

 Returns

 boolean


status of the timer.


"Tool/GetClientNumber"
Tool:GetClientNumber( string name, number default=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Attempts to grab a clientside tool ConVar.

 Arguments

 string name


Name of the convar to retrieve. The function will automatically add the mytoolfilename_ part to it.

 Arguments

 number default=0


The default value to return in case the lookup fails.

 Returns

 number


The value of the requested ConVar.


"umsg/Angle"
umsg.Angle( Angle angle ) 
 Description
Writes an angle to the usermessage.

 Arguments

 Angle angle


The angle to be sent.


"umsg/Bool"
umsg.Bool( boolean bool ) 
 Description
Writes a bool to the usermessage.

 Arguments

 boolean bool


The bool to be sent.


"timer/TimeLeft"
timer.TimeLeft( any identifier ) 
 Description
Returns amount of time left (in seconds) before the timer executes its function.



NOTE


If the timer is paused, the amount will be negative.


 Arguments

 any identifier


Identifier of the timer.

 Returns

 number


The amount of time left (in seconds).


"timer/Stop"
timer.Stop( any identifier ) 
 Description
Stops the given timer and rewinds it.

 Arguments

 any identifier


Identifier of the timer.

 Returns

 boolean


false if the timer didnt exist or was already stopped, true otherwise.


"umsg/End"
umsg.End(  ) 
 Description
Dispatches the usermessage to the client(s).


"umsg/Char"
umsg.Char( number char ) 
 Description
Writes a signed char to the usermessage.

 Arguments

 number char


The char to be sent.


"Tool/SetStage"
Tool:SetStage( number stage ) 
 Description
Sets the current stage of the tool. Does nothing clientside.
See also Tool:SetOperation.

 Arguments

 number stage


The new stage to set.


"umsg/Long"
umsg.Long( number int ) 
 Description
Writes a signed int (32 bit) to the usermessage.

 Arguments

 number int


The int to be sent.


"Tool/GetOwner"
Tool:GetOwner(  ) 
 Description
Returns the owner of this tool.

 Returns

 Entity


Player using the tool


"umsg/Vector"
umsg.Vector( Vector vector ) 
 Description
Writes a Vector to the usermessage.

 Arguments

 Vector vector


The vector to be sent.


"Tool/GetEnt"
Tool:GetEnt( number id ) 
 Description
Retrieves an Entity previously stored using Tool:SetObject.

 Arguments

 number id


The id of the object which was set in Tool:SetObject.


"umsg/Start"
umsg.Start( string name, Player filter ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should be using net library instead
Starts a new usermessage.



WARNING


Usermessages have a limit of only 256 bytes!


 Arguments

 string name


The name of the message to be sent.

 Arguments

 Player filter


If passed a player object, it will only be sent to the player, if passed a CRecipientFilter of players, it will be sent to all specified players, if passed nil (or another invalid value), the message will be sent to all players.


"umsg/Entity"
umsg.Entity( Entity entity ) 
 Description
Writes an entity object to the usermessage.

 Arguments

 Entity entity


The entity to be sent.


"Tool/SetObject"
Tool:SetObject( number id, Entity ent, Vector pos, PhysObj phys, number bone, Vector norm ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments


 Description
Stores an Entity for later use in the tool.

 Arguments

 number id


The id of the object to store.

 Arguments

 Entity ent


The entity to store.

 Arguments

 Vector pos


The position to store. 



NOTE


this position is in global space and is internally converted to local space relative to the object, so when you retrieve it later it will be corrected to the objects new position



 Arguments

 PhysObj phys


The physics object to store.

 Arguments

 number bone


The hit bone to store.

 Arguments

 Vector norm


The hit normal to store.


"umsg/String"
umsg.String( string string ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Writes a null terminated string to the usermessage.

 Arguments

 string string


The string to be sent.

 Examples
 Example
An easy way to send any string to the client or clients

umsg.Start( Example_SendString ) -- With umsg.Start( Example_SendString,pl ) Must get pl value the player entity.
	umsg.String( Custom Text )
umsg.End()


"Tool/GetServerInfo"
Tool:GetServerInfo( string name ) 
 Description
Attempts to grab a serverside tool ConVar.
This will not do anything on client, despite the function being defined shared.

 Arguments

 string name


Name of the convar to retrieve. The function will automatically add the mytoolfilename_ part to it.

 Returns

 string


The value of the requested ConVar.


"umsg/PoolString"
umsg.PoolString( string string ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Inferior version of util.AddNetworkString
The string specified will be networked to the client and receive a identifying number, which will be sent instead of the string to optimize networking.

 Arguments

 string string


The string to be pooled.


"Tool/GetOperation"
Tool:GetOperation(  ) 
 Description
Returns the current operation of the tool set by Tool:SetOperation.

 Returns

 number


The current operation the tool is at.


"Tool/NumObjects"
Tool:NumObjects(  ) 
 Description
Returns the amount of stored objects ( Entitys ) the tool has.

 Returns

 number


The amount of stored objects, or Tool:GetStage clientide.


"Tool/SetOperation"
Tool:SetOperation( number operation ) 
 Description
Sets the current operation of the tool. Does nothing clientside. See also Tool:SetStage.
Operations and stages work as follows:

 Operation 1
 Stage 1
 Stage 2
 Stage 3

 Operation 2
 Stage 1
 Stage 2
 Stage ...


 Arguments

 number operation


The new operation ID to set.


"umsg/Float"
umsg.Float( number float ) 
 Description
Writes a float to the usermessage.

 Arguments

 number float


The float to be sent.


"umsg/VectorNormal"
umsg.VectorNormal( Vector normal ) 
 Description
Writes a vector normal to the usermessage.

 Arguments

 Vector normal


The vector normal to be sent.


"Tool/GetStage"
Tool:GetStage(  ) 
 Description
Returns the current stage of the tool set by Tool:SetStage.

 Returns

 number


The current stage of the current operation the tool is at.


"umsg/Short"
umsg.Short( number short ) 
 Description
Writes a signed short (16 bit) to the usermessage.

 Arguments

 number short


The short to be sent.


"undo/AddFunction"
undo.AddFunction( function func, vararg arguments ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
Adds a function to call when the current undo block is undone

 Arguments

 function func


The function to call

 Arguments

 vararg arguments


Arguments to pass to the function (after the undo info table)

 Examples
 Example
This example creates a prop_physics, and adds it to the players undo list. A message will be printed to console about it.

prop = ents.Create( prop_physics )
prop:SetModel( models/props_junk/wood_crate001a.mdl )
prop:Spawn()
undo.Create( prop )
 undo.AddEntity( prop )
 undo.AddFunction( function( tab, arg2 )
 print( tab.Owner:GetName().. removed prop ..tab.Entities[1]:GetModel().., code: ..arg2 )
 end, 556 )
 undo.SetPlayer( ply )
undo.Finish()
Output:

PlayerName removed prop models/props_junk/wood_crate001a.mdl, code: 556 will be printed


"undo/AddEntity"
undo.AddEntity( Entity ent ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Adds an entity to the current undo block

 Arguments

 Entity ent


The entity to add

 Examples
 Example
This example creates a prop_physics, and adds it to the players undo list.

prop = ents.Create( prop_physics )
prop:SetModel( models/props_junk/wood_crate001a.mdl )
prop:Spawn()

undo.Create( prop )
	undo.AddEntity( prop )
	undo.SetPlayer( Player )
undo.Finish()


"undo/Create"
undo.Create( string name ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Begins a new undo entry

 Arguments

 string name


Name of the undo message to show to players

 Examples
 Example
This example creates a prop_physics, and adds it to Players undo list.

prop = ents.Create( prop_physics )
prop:SetModel( models/props_junk/wood_crate001a.mdl )
prop:Spawn()
undo.Create( prop )
 undo.AddEntity( prop )
 undo.SetPlayer( Player )
undo.Finish()


"undo/Do_Undo"
undo.Do_Undo( table tab ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Processes an undo block (in table form). This is used internally by the undo manager when a player presses Z.

 Arguments

 table tab


The undo block to process as an Undo structure

 Returns

 number


Number of removed entities

 Examples
 Example
This example removes two entities, and informs player 1 that they just Undone Prop!

local tab = {}

tab.Owner = Entity( 1 )
tab.Name = prop
tab.Entities = {Entity( 56 ),Entity( 57 )}

undo.Do_Undo( tab )


"undo/Finish"
undo.Finish(  ) 
 Description
Completes an undo entry, and registers it with the players client


 Examples
 Example
This example creates a prop_physics, and adds it to the players undo list.

prop = ents.Create( prop_physics )
prop:SetModel( models/props_junk/wood_crate001a.mdl )
prop:Spawn()
undo.Create( prop )
 undo.AddEntity( prop )
 undo.SetPlayer( Player )
undo.Finish()


"undo/GetTable"
undo.GetTable(  ) 
 Description
Serverside, returns a table containing all undo blocks of all players. Clientside, returns a table of the local players undo blocks.

 Returns

 table


The undo table.


"undo/ReplaceEntity"
undo.ReplaceEntity( Entity from, Entity to ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Replaces any instance of the from reference with the to reference, in any existing undo block. Returns true if something was replaced

 Arguments

 Entity from


The old entity

 Arguments

 Entity to


The new entity to replace the old one

 Returns

 boolean


somethingReplaced

 Examples
 Example
When an entity is ragdolled, this will replace any instances of the entity with its ragdoll.

function GM:CreateEntityRagdoll( entity, ragdoll )
 // Replace the entity with the ragdoll in cleanups etc
 undo.ReplaceEntity( entity, ragdoll )
 cleanup.ReplaceEntity( entity, ragdoll )
end


"undo/SetupUI"
undo.SetupUI(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Adds a hook (CPanelPaint) to the control panel paint function so we can determine when it is being drawn.


"undo/MakeUIDirty"
undo.MakeUIDirty(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Makes the UI dirty - it will re-create the controls the next time it is viewed. We also take this opportun


"utf8/charpattern"
Not a function
This is NOT a function, its the pattern (a string, not a function) [%z\x01-\x7F\xC2-\xF4][\x80-\xBF]*which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.


"undo/SetPlayer"
undo.SetPlayer( Player ply ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the player which the current undo block belongs to

 Arguments

 Player ply


The player responsible for undoing the block

 Examples
 Example
This example creates a prop_physics, and adds it to the players undo list.

prop = ents.Create( prop_physics )
prop:SetModel( models/props_junk/wood_crate001a.mdl )
prop:Spawn()
undo.Create( prop )
 undo.AddEntity( prop )
 undo.SetPlayer( ply )
undo.Finish()


"usermessage/IncomingMessage"
usermessage.IncomingMessage( string name, bf_read msg ) 
 Description
Called by the engine when a usermessage arrives, this method calls the hook function specified by usermessage.Hook if any.

 Arguments

 string name


The message name.

 Arguments

 bf_read msg


The message.


"utf8/char"
utf8.char( vararg codepoints ) 
 Description
Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.

 Arguments

 vararg codepoints


Unicode code points to be converted in to a UTF-8 string.

 Returns

 string


UTF-8 string generated from given arguments.


"utf8/codes"
utf8.codes( string string ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns an iterator (like string.gmatch) which returns both the position and codepoint of each utf8 character in the string. It raises an error if it meets any invalid byte sequence.

 Arguments

 string string


The string that you will get the codes from.

 Returns

 function


The iterator (to be used in a for loop).

 Examples
 Example
Demonstrates usage of the function.

for p, c in utf8.codes( ( &#x361; &#x35C;&#x296; &#x361; ) ) do
    print( p,c )
end
Output:

1    40    
2    32    
3    865    
5    176    
7    32    
8    860    
10    662    
12    32    
13    865    
15    176    
17    41


"usermessage/Hook"
usermessage.Hook( string name, function callback, vararg preArgs=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should be using net library instead
Sets a hook for the specified to be called when a usermessage with the specified name arrives.



WARNING


Usermessages have a limit of only 256 bytes!


 Arguments

 string name


The message name to hook to.

 Arguments

 function callback


The function to be called if the specified message was received.
Parameters (Optional):

 bf_read msg
 vararg preArgs


 Arguments

 vararg preArgs=nil


Arguments that are passed to the callback function when the hook is called. *ring ring*


"util.worldpicker/Active"
util.worldpicker.Active(  ) 
 Description
Returns if the user is currently picking an entity.

 Returns

 boolean


Is world picking


"util.worldpicker/Start"
util.worldpicker.Start( function callback ) 
 Description
Starts picking an entity in the world. This will suppress the next mouse click, and instead use it as a direction in the trace sent to the callback.

 Arguments

 function callback


Function to call after an entity choice has been made. Argument is:

table tr - TraceResult structure from the mouse press. tr.Entity will return the entity clicked


"util.worldpicker/Finish"
util.worldpicker.Finish( table tr ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Finishes the world picking. This is called when a user presses their mouse after calling util.worldpicker.Start.

 Arguments

 table tr


TraceResult structure from the mouse press


"undo/SetCustomUndoText"
undo.SetCustomUndoText( string customText ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets a custom undo text for the current undo block

 Arguments

 string customText


The text to display when the undo block is undone

 Examples
 Example
This example creates a prop_physics, adds it to the players undo list, and sets a custom undo text

local prop = ents.Create( prop_physics )
prop:SetModel( models/props_junk/wood_crate001a.mdl )
prop:Spawn()
undo.Create( prop )
 undo.AddEntity( prop )
 undo.SetPlayer( Player )
 undo.SetCustomUndoText( Undone a crate prop )
undo.Finish()


"utf8/len"
utf8.len( string string, number startPos=1, number endPos=-1 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Returns
7 Examples

7.1 Example




 Description
Returns the number of UTF-8 sequences in the given string between positions startPos and endPos (both inclusive). If it finds any invalid UTF-8 byte sequence, returns false as well as the position of the first invalid byte.

 Arguments

 string string


The string to calculate the length of.

 Arguments

 number startPos=1


The starting position to get the length from.

 Arguments

 number endPos=-1


The ending position to get the length from.

 Returns

 number


The number of UTF-8 characters in the string. If there are invalid bytes, this will be false.

 Returns

 number


The position of the first invalid byte. If there were no invalid bytes, this will be nil.

 Examples
 Example
Demonstrates output of this function compared to string.len when given a string that contains Russian text.

print( string.len( &#x41C;&#x451;&#x43D;&#x451;&#x43C; ) )
print( utf8.len( &#x41C;&#x451;&#x43D;&#x451;&#x43C; ) )
Output:

11
5


"util/Compress"
util.Compress( string str ) 
 Description
Compresses the given string using the LZMA algorithm.
Use with net.WriteData and net.ReadData for networking and util.Decompress to decompress the data.

 Arguments

 string str


String to compress.

 Returns

 string


The compressed string, or nil if the input string was zero length ().


"usermessage/GetTable"
usermessage.GetTable(  ) 
 Description
Returns a table of every usermessage hook

 Returns

 table


hooks


"util/BlastDamageInfo"
util.BlastDamageInfo( CTakeDamageInfo dmg, Vector damageOrigin, number damageRadius ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Applies spherical damage based on damage info to all entities in the specified radius.

 Arguments

 CTakeDamageInfo dmg


The information about the damage

 Arguments

 Vector damageOrigin


Center of the spherical damage

 Arguments

 number damageRadius


The radius in which entities will be damaged.


"util/CRC"
util.CRC( string stringToHash ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Generates the CRC checksum of the specified string.

 Arguments

 string stringToHash


The string to calculate the checksum of.

 Returns

 string


The unsigned 32 bit checksum.

 Examples
 Example
Prints out the CRC-32 checksum of a.

print( util.CRC( a ) )
Output:

3904355907


"util/AimVector"
util.AimVector( Angle ViewAngles, number ViewFOV, number x, number y, number scrWidth, number scrHeight ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Returns


 Description
Function used to calculate aim vector from 2D screen position. It is used in SuperDOF calculate Distance.
Essentially a generic version of gui.ScreenToVector.

 Arguments

 Angle ViewAngles


View angles

 Arguments

 number ViewFOV


View Field of View

 Arguments

 number x


Mouse X position

 Arguments

 number y


Mouse Y position

 Arguments

 number scrWidth


Screen width

 Arguments

 number scrHeight


Screen height

 Returns

 Vector


Calculated aim vector


"util/AddNetworkString"
util.AddNetworkString( string str ) 
 Description
Adds the specified string to a string table, which will cache it and network it to all clients automatically.
Whenever you want to create a net message with net.Start, you must add the name of that message as a networked string via this function.
If the passed string already exists, nothing will happen and the ID of the existing item will be returned.



NOTE


Due to the way string tables work, its preferable to call this function as soon as the server starts up, such as in GM:Initialize or even bare in a lua file outside of a function.




NOTE


The string table used for this function does not interfere with the engine string tables and has 2048 slots.


 Arguments

 string str


Adds the specified string to the string table.

 Returns

 number


The id of the string that was added to the string table.

Same as calling util.NetworkStringToID.


"util/BlastDamage"
util.BlastDamage( Entity inflictor, Entity attacker, Vector damageOrigin, number damageRadius, number damage ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments


 Description
Applies explosion damage to all entities in the specified radius.

 Arguments

 Entity inflictor


The entity that caused the damage.

 Arguments

 Entity attacker


The entity that attacked.

 Arguments

 Vector damageOrigin


The center of the explosion

 Arguments

 number damageRadius


The radius in which entities will be damaged.

 Arguments

 number damage


The amount of damage to be applied.


"utf8/force"
utf8.force( string string ) 
 Description
Forces a string to contain only valid UTF-8 data. Invalid sequences are replaced with U+FFFD (the Unicode replacement character).
This is a lazy way for users to ensure a string contains only valid UTF-8 data.

 Arguments

 string string


The string that will become a valid UTF-8 string.

 Returns

 string


The UTF-8 string.


"utf8/codepoint"
utf8.codepoint( string string, number startPos=1, number endPos=1 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Returns the codepoints (as numbers) from all characters in the given string that start between byte position startPos and endPos. It raises an error if it meets any invalid byte sequence. This functions similarly to string.byte.

 Arguments

 string string


The string that you will get the code(s) from.

 Arguments

 number startPos=1


The starting byte of the string to get the codepoint of.

 Arguments

 number endPos=1


The ending byte of the string to get the codepoint of.

 Returns

 vararg


The codepoint number(s).

 Examples
 Example
Demonstrates usage of the function.

print( utf8.codepoint( &#x41C;&#x451;&#x43D;&#x451;&#x43C;, 1, -1 ) )
Output:

1052	1105	1085	1105	1084


"util/DateStamp"
util.DateStamp(  ) 
 Description
Returns the current date formatted like 2012-10-31 18-00-00

 Returns

 string


date


"util/Base64Encode"
util.Base64Encode( string str ) 
 Description
Encodes the specified string to base64.

 Arguments

 string str


String to encode.

 Returns

 string


Base 64 encoded string.


"util/DecalEx"
util.DecalEx( IMaterial material, Entity ent, Vector position, Vector normal, table color, number w, number h ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments


 Description
Performs a trace and paints a decal to the surface hit.



NOTE


This function has trouble spanning across multiple brushes on the map.


 Arguments

 IMaterial material


The name of the decal to paint. Can be retrieved with util.DecalMaterial.

 Arguments

 Entity ent


The entity to apply the decal to

 Arguments

 Vector position


The position of the decal.

 Arguments

 Vector normal


The direction of the decal.

 Arguments

 table color


The color of the decal. Uses the Color structure.

This only works when used on a brush model and only if the decal material has set $vertexcolor to 1.

 Arguments

 number w


The width scale of the decal.

 Arguments

 number h


The height scale of the decal.


"utf8/offset"
utf8.offset( string string, number n, number startPos=1 when n&gt;=0, -1 otherwise ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Returns the byte-index of the nth UTF-8-character after the given startPos (nil if none). startPos defaults to 1 when n is positive and -1 when n is negative. If n is zero, this function instead returns the byte-index of the UTF-8-character startPos lies within.

 Arguments

 string string


The string that you will get the byte position from.

 Arguments

 number n


The position to get the beginning byte position from.

 Arguments

 number startPos=1 when n&gt;=0, -1 otherwise


The offset for n.

 Returns

 number


Starting byte-index of the given position.

 Examples
 Example
Returns the byte-index where the character at the 5th byte begins.

print( utf8.offset( ( &#x361; &#x35C;&#x296; &#x361; ), 5 ) )
Output:

7


"util/DecalMaterial"
util.DecalMaterial( string decalName ) 
 Description
Gets the full material path by the decal name. Used with util.DecalEx.

 Arguments

 string decalName


Name of the decal.

 Returns

 string


Material path of the decal.


"util/GetModelInfo"
util.GetModelInfo( string mdl ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns a table containing the info about the model. It seems to be not working serverside, but still exists serverside.



NOTE


This function will silently fail if used on models with following strings in them:

 _shared
 _anims
 _gestures
 _anim
 _postures
 _gst
 _pst
 _shd
 _ss
 _anm
 _include


 Arguments

 string mdl


Model path

 Returns

 table


The model info as a table with the following keys:

number SkinCount - Identical to Entity:SkinCount.
string KeyValues - Valve key-value formatted info about the model ( Constraint Info, etc )


 Examples
 Example
Example usage of the function. We use util.KeyValuesToTablePreserveOrder in order to preserve multiple keys with the same name.

local ModelInfo = util.GetModelInfo( models/combine_gate_vehicle.mdl )
print( ModelInfo.SkinCount ) // 1
PrintTable( util.KeyValuesToTablePreserveOrder( ModelInfo.KeyValues ) ) // A
Output:

1:
		Key	=	solid
		Value:
				1:
						Key	=	index
						Value	=	0
				2:
						Key	=	name
						Value	=	Vehicle_Gate.Gate2_L
				3:
						Key	=	mass
						Value	=	1
				4:
						Key	=	surfaceprop
						Value	=	metal
				5:
						Key	=	damping
						Value	=	0
				6:
						Key	=	rotdamping
						Value	=	0
				7:
						Key	=	inertia
						Value	=	1
				8:
						Key	=	volume
						Value	=	68522.9296875

.......

6:
		Key	=	editparams
		Value:
				1:
						Key	=	rootname
						Value	=	
				2:
						Key	=	totalmass
						Value	=	1


"util/Effect"
util.Effect( string effectName, CEffectData effectData, boolean allowOverride=true, any ignorePredictionOrRecipientFilter=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Examples

6.1 Example




 Description
Creates an effect with the specified data.



NOTE


When dispatching an effect from the server, some values may be clamped for networking optimizations. Visit the Set accessors on CEffectData to see which ones are affected.




NOTE


You will need to couple this function with IsFirstTimePredicted should you use this in a predicted hook.


 Arguments

 string effectName


The name of the effect to create.

 Arguments

 CEffectData effectData


The effect data describing the effect.

 Arguments

 boolean allowOverride=true


Whether Lua-defined effects should override engine-defined effects with the same name for this/single function call.

 Arguments

 any ignorePredictionOrRecipientFilter=nil


Can either be a boolean to ignore the prediction filter or a CRecipientFilter.

Set this to true if you wish to call this function in multiplayer from server.

 Examples
 Example
Creates a HelicopterMegaBomb effect at the origin of the map. ( 0, 0, 0 )

local vPoint = Vector( 0, 0, 0 )
local effectdata = EffectData()
effectdata:SetOrigin( vPoint )
util.Effect( HelicopterMegaBomb, effectdata )


"util/Decompress"
util.Decompress( string compressedString, number maxSize=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Decompresses the given string using LZMA algorithm. Used to decompress strings previously compressed with util.Compress.

 Arguments

 string compressedString


The compressed string to decompress.

 Arguments

 number maxSize=nil


The maximal size in bytes it will decompress.

 Returns

 string


The original, decompressed string or an empty string on failure or invalid input.


"util/Decal"
util.Decal( string name, Vector start, Vector end, Entity filter=NULL ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments

5.1 Built in Decals




 Description
Performs a trace and paints a decal to the surface hit.

 Arguments

 string name


The name of the decal to paint.

 Arguments

 Vector start


The start of the trace.

 Arguments

 Vector end


The end of the trace.

 Arguments

 Entity filter=NULL


If set, the decal will not be able to be placed on given entity. Can also be a table of entities.

  Built in Decals 
Heres a list of all the decal names that should be possible to use by default.

 BeerSplash
 BirdPoop
 Blood
 BulletProof
 Cross
 Dark
 ExplosiveGunshot
 Eye
 FadingScorch
 GlassBreak
 Impact.Antlion
 Impact.BloodyFlesh
 Impact.Concrete
 Impact.Glass
 Impact.Metal
 Impact.Sand
 Impact.Wood
 Light
 ManhackCut
 Nought
 Noughtsncrosses
 PaintSplatBlue
 PaintSplatGreen
 PaintSplatPink
 Scorch
 SmallScorch
 Smile
 Splash.Large
 YellowBlood


"util/GetPData"
util.GetPData( string steamID, string name, string default ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Gets PData of an offline player using their SteamID



WARNING


This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). Its recommended that you dont use it. See the related wiki page for more information.


 Arguments

 string steamID


SteamID of the player

 Arguments

 string name


Variable name to get the value of

 Arguments

 string default


The default value, in case theres nothing stored

 Returns

 string


The stored value


"util/GetSurfaceData"
util.GetSurfaceData( number id ) 
 Description
Returns data of a surface property at given ID.

 Arguments

 number id


Surface property ID. You can get it from TraceResult structure.

 Returns

 table


The data or no value if there is no valid surface property at given index.

See SurfacePropertyData structure


"util/IntersectRayWithPlane"
util.IntersectRayWithPlane( Vector rayOrigin, Vector rayDirection, Vector planePosition, Vector planeNormal ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns


 Description

 Arguments

 Vector rayOrigin


Origin/start position of the ray.

 Arguments

 Vector rayDirection


The direction of the ray.

 Arguments

 Vector planePosition


Any position of the plane.

 Arguments

 Vector planeNormal


The normal vector of the plane.

 Returns

 Vector


The position of intersection, nil if not hit.


"util/GetPixelVisibleHandle"
util.GetPixelVisibleHandle(  ) 
 Description
Creates a new PixVis handle. See util.PixelVisible.

 Returns

 pixelvis handle t


PixVis


"util/IntersectRayWithOBB"
util.IntersectRayWithOBB( Vector rayStart, Vector rayDelta, Vector boxOrigin, Angle boxAngles, Vector boxMins, Vector boxMaxs ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Returns
9 Returns
10 Returns


 Description
Performs a ray box intersection and returns position, normal and the fraction.

 Arguments

 Vector rayStart


Origin/start position of the ray.

 Arguments

 Vector rayDelta


The ray vector itself. This can be thought of as: the ray end point relative to the start point.

Note that in this implementation, the ray is not infinite - its only a segment.

 Arguments

 Vector boxOrigin


The center of the box.

 Arguments

 Angle boxAngles


The angles of the box.

 Arguments

 Vector boxMins


The min position of the box.

 Arguments

 Vector boxMaxs


The max position of the box.

 Returns

 Vector


Hit position, nil if not hit.

 Returns

 Vector


Normal/direction vector, nil if not hit.

 Returns

 number


Fraction of trace used, nil if not hit.


"util/DistanceToLine"
util.DistanceToLine( Vector lineStart, Vector lineEnd, Vector pointPos ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Returns
7 Returns


 Description
Gets the distance between a line and a point in 3d space.

 Arguments

 Vector lineStart


Start of the line.

 Arguments

 Vector lineEnd


End of the line.

 Arguments

 Vector pointPos


The position of the point.

 Returns

 number


Distance from line.

 Returns

 Vector


Nearest point on line.

 Returns

 number


Distance along line from start.


"util/GetSunInfo"
util.GetSunInfo(  ) 
 Description
Gets information about the sun position and obstruction or nil if there is no sun.

 Returns

 table


The sun info. See SunInfo structure


"util/GetUserGroups"
util.GetUserGroups(  ) 
 Description
Returns a table of all SteamIDs that have a usergroup.



NOTE


This returns the original usergroups table, changes done to this table are not retroactive and will only affect newly connected users


 Returns

 table


The table of users. The table consists of SteamID-Table pairs, where the table has 2 fields:
string name - Players name

string group - The players user group


"util/IsInWorld"
util.IsInWorld( Vector position ) 
 Description
Checks if a certain position in within the world bounds.

 Arguments

 Vector position


Position to check.

 Returns

 boolean


Whether the vector is in world.


"util/IsSkyboxVisibleFromPoint"
util.IsSkyboxVisibleFromPoint( Vector position ) 
 Description
Check whether the skybox is visibile from the point specified.



NOTE


This will always return true in fullbright maps


 Arguments

 Vector position


The position to check the skybox visibility from.

 Returns

 boolean


Whether the skybox is visible from the position.


"util/IsValidModel"
util.IsValidModel( string modelName ) 
 Description
Checks if the specified model is valid.
A model is considered invalid in following cases:

 Starts with a space or maps
 Doesnt start with models
 Contains any of the following:
 _gestures
 _animations
 _postures
 _gst
 _pst
 _shd
 _ss
 _anm
 .bsp
 cs_fix

 On server: If the model isnt precached, if the model file doesnt exist on the disk
 If precache failed
 Model is the error model

 Arguments

 string modelName


Name/Path of the model to check.

 Returns

 boolean


Whether the model is valid or not. Returns false clientside if the model is not precached by the server.


"util/IsValidPhysicsObject"
util.IsValidPhysicsObject( Entity ent, number physobj ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Checks if given numbered physics object of given entity is valid or not. Most useful for ragdolls.

 Arguments

 Entity ent


The entity

 Arguments

 number physobj


Number of the physics object to test

 Returns

 boolean


true is valid, false otherwise


"util/IsValidRagdoll"
util.IsValidRagdoll( string ragdollName ) 
 Description
Checks if the specified model name points to a valid ragdoll.

 Arguments

 string ragdollName


Name/Path of the ragdoll model to check.

 Returns

 boolean


Returns true if the specified model name points to a valid ragdoll; otherwise false.


"util/GetPlayerTrace"
util.GetPlayerTrace( Player ply, Vector dir=ply:GetAimVector() ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Utility function to quickly generate a trace table that starts at the players view position, and ends 16384 units along a specified direction.

 Arguments

 Player ply


The player the trace should be based on

 Arguments

 Vector dir=ply:GetAimVector()


The direction of the trace

 Returns

 table


The trace data. See Trace structure

 Examples
 Example
Prints the entitys model the local player is looking at to console

local tr = util.TraceLine( util.GetPlayerTrace( LocalPlayer() ) )
if ( IsValid( tr.Entity ) then print( I saw a ..tr.Entity:GetModel() ) end

local trground = util.TraceLine( util.GetPlayerTrace( LocalPlayer(), Vector( 0,0,-1 ) ) )
if ( IsValid( trground.Entity ) then print( Im standing on a ..trground.Entity:GetModel() ) end


"util/GetSurfacePropName"
util.GetSurfacePropName( number id ) 
 Description
Returns the name of a surface property at given ID.
See also util.GetSurfaceData and util.GetSurfaceIndex for opposite function.

 Arguments

 number id


Surface property ID. You can get it from TraceResult structure.

 Returns

 string


The name or an empty string if there is no valid surface property at given index.


"util/NetworkIDToString"
util.NetworkIDToString( number stringTableID ) 
 Description
Returns the networked string associated with the given ID from the string table.

 Arguments

 number stringTableID


ID to get the associated string from.

 Returns

 string


The networked string, or nil if it wasnt found.


"util/KeyValuesToTable"
util.KeyValuesToTable( string keyValues, boolean usesEscapeSequences=false, boolean preserveKeyCase=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Converts a KeyValue string to a Lua table.



NOTE


Table keys will not repeat, see util.KeyValuesToTablePreserveOrder.


 Arguments

 string keyValues


The KeyValue string to convert.

 Arguments

 boolean usesEscapeSequences=false


If set to true, will replace \t, \n, \ and \\ in the input text with their escaped variants

 Arguments

 boolean preserveKeyCase=false


Whether we should preserve key case or not.

 Returns

 table


The converted table

 Examples
 Example
Example usage and output of this function. Note how theres only one solid key in the table despite the fact that input string contains multiple.

local ModelInfo = util.GetModelInfo( models/combine_gate_vehicle.mdl )
PrintTable( util.KeyValuesToTable( ModelInfo.KeyValues ) )
Output:

editparams:
		rootname	=	
		totalmass	=	1
solid:
		damping	=	0
		index	=	4
		inertia	=	1
		mass	=	1
		name	=	Vehicle_Gate.Gate1_L
		rotdamping	=	0
		surfaceprop	=	metal
		volume	=	68522.8828125


"util/GetSurfaceIndex"
util.GetSurfaceIndex( string surfaceName ) 
 Description
Returns the matching surface property index for the given surface property name.
See also util.GetSurfaceData and util.GetSurfacePropName for opposite function.

 Arguments

 string surfaceName


The name of the surface.

 Returns

 number


The surface property index, or -1 if name doesnt correspond to a valid surface property.


"util/IsModelLoaded"
util.IsModelLoaded( string modelName ) 
 Description
Checks if the model is loaded in the game.

 Arguments

 string modelName


Name/Path of the model to check.

 Returns

 boolean


Returns true if the model is loaded in the game; otherwise false.


"util/LocalToWorld"
util.LocalToWorld( Entity ent, Vector lpos, number bonenum ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Returns a vector in world coordinates based on an entity and local coordinates

 Arguments

 Entity ent


The entity lpos is local to

 Arguments

 Vector lpos


Coordinates local to the ent

 Arguments

 number bonenum


The bonenumber of the ent lpos is local to

 Returns

 Vector


wpos


"util/NetworkStringToID"
util.NetworkStringToID( string networkString ) 
 Description
Returns the networked ID associated with the given string from the string table.

 Arguments

 string networkString


String to get the associated networked ID from.

 Returns

 number


The networked ID of the string, or 0 if it hasnt been networked with util.AddNetworkString.


"util/ParticleTracer"
util.ParticleTracer( string name, Vector startPos, Vector endPos, boolean doWhiz ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments


 Description
Creates a tracer effect with the given parameters.

 Arguments

 string name


The name of the tracer effect.

 Arguments

 Vector startPos


The start position of the tracer.

 Arguments

 Vector endPos


The end position of the tracer.

 Arguments

 boolean doWhiz


Play the hit miss(whiz) sound.


"util/JSONToTable"
util.JSONToTable( string json ) 
 Description
Converts a JSON string to a Lua table.



WARNING


This function converts keys to numbers whenever possible.




BUG


This will attempt cast the string keys inf, nan, true, and false to their respective Lua values. This completely ignores nulls in arrays.



 Arguments

 string json


The JSON string to convert.

 Returns

 table


The table containing converted information. Returns nothing on failure.


"util/IsValidProp"
util.IsValidProp( string modelName ) 
 Description
Checks if the specified prop is valid.

 Arguments

 string modelName


Name/Path of the model to check.

 Returns

 boolean


Returns true if the specified prop is valid; otherwise false.


"util/NiceFloat"
util.NiceFloat( number float ) 
 Description
Formats a float by stripping off extra 0s and .s

 Arguments

 number float


The float to format

 Returns

 string


Formatted float


"util/ParticleTracerEx"
util.ParticleTracerEx( string name, Vector startPos, Vector endPos, boolean doWhiz, number entityIndex, number attachmentIndex ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments


 Description
Creates a tracer effect with the given parameters.

 Arguments

 string name


The name of the tracer effect.

 Arguments

 Vector startPos


The start position of the tracer.

 Arguments

 Vector endPos


The end position of the tracer.

 Arguments

 boolean doWhiz


Play the hit miss(whiz) sound.

 Arguments

 number entityIndex


Entity index of the emitting entity.

 Arguments

 number attachmentIndex


Attachment index to be used as origin.


"util/KeyValuesToTablePreserveOrder"
util.KeyValuesToTablePreserveOrder( string keyvals, boolean usesEscapeSequences=false, boolean preserveKeyCase=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Similar to util.KeyValuesToTable but it also preserves order of keys.

 Arguments

 string keyvals


The key value string

 Arguments

 boolean usesEscapeSequences=false


If set to true, will replace \t, \n, \ and \\ in the input text with their escaped variants

 Arguments

 boolean preserveKeyCase=false


Whether we should preserve key case or not.

 Returns

 table


The output table

 Examples
 Example
Example usage and output of this function. Note how there are multiple entries where they key is solid, just like in the input string.

local ModelInfo = util.GetModelInfo( models/combine_gate_vehicle.mdl )
PrintTable( util.KeyValuesToTablePreserveOrder( ModelInfo.KeyValues ) )
Output:

1:
		Key	=	solid
		Value:
				1:
						Key	=	index
						Value	=	0
				2:
						Key	=	name
						Value	=	Vehicle_Gate.Gate2_L
				3:
						Key	=	mass
						Value	=	1
				4:
						Key	=	surfaceprop
						Value	=	metal
				5:
						Key	=	damping
						Value	=	0
				6:
						Key	=	rotdamping
						Value	=	0
				7:
						Key	=	inertia
						Value	=	1
				8:
						Key	=	volume
						Value	=	68522.9296875
2:
		Key	=	solid
		Value:
				1:
						Key	=	index
						Value	=	1
				2:
						Key	=	name
						Value	=	Vehicle_Gate.Gate3_R
....


"util/PixelVisible"
util.PixelVisible( Vector position, number radius, pixelvis handle t PixVis ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns
6 Examples

6.1 Example




 Description
Returns the visibility of a sphere in the world.

 Arguments

 Vector position


The center of the visibility test.

 Arguments

 number radius


The radius of the sphere to check for visibility.

 Arguments

 pixelvis handle t PixVis


The PixVis handle created with util.GetPixelVisibleHandle.



WARNING


Dont use the same handle twice per tick or it will give unpredictable results.



 Returns

 number


Visibility, ranges from 0-1. 0 when none of the area is visible, 1 when all of it is visible.

 Examples
 Example
Draws a box when the center of the map is visible on your screen.

local PixVis
function SetupPixVis()
	PixVis = util.GetPixelVisibleHandle()
end
hook.Add( Initialize, SetupPixVis, SetupPixVis )
 
function TestPixelVisibility()
	local visible = util.PixelVisible( Vector( 0, 0, 0 ), 16, PixVis )
 
	if ( visible &amp;&amp; visible!= 0 ) then
		draw.RoundedBox( 10, 0, 0, 100, 100, Color( 0, 0, 0, 200 * visible ) )
	end
end
hook.Add( HUDPaint, TestPixelVisibility, TestPixelVisibility )


"util/PointContents"
util.PointContents( Vector position ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the contents of the position specified.

 Arguments

 Vector position


Position to get the contents sample from.

 Returns

 number


Contents bitflag, see CONTENTS_ Enums

 Examples
 Example
Check if the trace position is underwater.

local tr = Entity( 1 ):GetEyeTrace()
print( bit.band( util.PointContents( tr.HitPos ), CONTENTS_WATER ) == CONTENTS_WATER )


"util/PrecacheModel"
util.PrecacheModel( string modelName ) 
 Description
Precaches a model for later use. Model is cached after being loaded once.

 Arguments

 string modelName


The model to precache.


"util/ScreenShake"
util.ScreenShake( Vector pos, number amplitude, number frequency, number duration, number radius ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Examples

7.1 Example




 Description
Makes the screen shake

 Arguments

 Vector pos


The origin of the effect

 Arguments

 number amplitude


The strength of the effect

 Arguments

 number frequency


The frequency of the effect in hz

 Arguments

 number duration


The duration of the effect in seconds

 Arguments

 number radius


The range from the origin within which views will be affected, in Hammer Units

 Examples
 Example
This will shake the screen, from the position 0 0 0 and 5000 units away, with 5 amp, frequency 5, for 10 seconds.

util.ScreenShake( Vector( 0,0,0 ), 5, 5, 10, 5000 )


"util/PrecacheSound"
util.PrecacheSound( string soundName ) 
 Description
Precaches a sound for later use. Sound is cached after being loaded once.

 Arguments

 string soundName


The sound to precache.


"util/SharedRandom"
util.SharedRandom( string uniqueName, number min, number max, number additionalSeed=0 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Returns
7 Examples

7.1 Example




 Description
Generates a random float value that should be the same on client and server.



NOTE


This function is best used in a Predicted Hook


 Arguments

 string uniqueName


The seed for the random value

 Arguments

 number min


The minimum value of the random range

 Arguments

 number max


The maximum value of the random range

 Arguments

 number additionalSeed=0


The additional seed

 Returns

 number


The random float value

 Examples
 Example
Example usage of the function. Generates some random values.

print( util.SharedRandom( 23, 0, 100 ) )
print( util.SharedRandom( 23, 0, 100 ) )
print( util.SharedRandom( 23, 0, 100, 0 ) )
print( util.SharedRandom( 23, 0, 100, 1337 ) )
print( util.SharedRandom( lol, 0, 100, 1337 ) )
Output:

15.979786317786
15.979786317786
15.979786317786
24.08124470342
78.480193614252


"util/SteamIDFrom64"
util.SteamIDFrom64( string id ) 
 Description
Given a 64bit SteamID will return a STEAM_0: style Steam ID

 Arguments

 string id


The 64 bit Steam ID

 Returns

 string


STEAM_0 style Steam ID


"util/SpriteTrail"
util.SpriteTrail( Entity ent, number attachmentID, table color, boolean additive, number startWidth, number endWidth, number lifetime, number textureRes, string texture ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Arguments
6 Arguments
7 Arguments
8 Arguments
9 Arguments
10 Arguments
11 Returns
12 Examples

12.1 Example




 Description
Adds a trail to the specified entity.

 Arguments

 Entity ent


Entity to attach trail to

 Arguments

 number attachmentID


Attachment ID of the entitiys model to attach trail to. If you are not sure, set this to 0

 Arguments

 table color


Color of the trail, use Color

 Arguments

 boolean additive


Should the trail be additive or not

 Arguments

 number startWidth


Start width of the trail

 Arguments

 number endWidth


End width of the trail

 Arguments

 number lifetime


How long it takes to transition from startWidth to endWidth

 Arguments

 number textureRes


The resolution of trails texture. A good value can be calculated using this formula: 1 / ( startWidth + endWidth ) * 0.5

 Arguments

 string texture


Path to the texture to use as a trail.

 Returns

 Entity



 Examples
 Example
A console command that gives the player a red trail.

concommand.Add( givetrail, function( ply )
	local trail = util.SpriteTrail( ply, 0, Color( 255, 0, 0 ), false, 15, 1, 4, 1 / ( 15 + 1 ) * 0.5, trails/plasma )
	print( trail )
end )


"util/SteamIDTo64"
util.SteamIDTo64( string id ) 
 Description
Given a STEAM_0 style Steam ID will return a 64bit Steam ID

 Arguments

 string id


The STEAM_0 style id

 Returns

 string


64bit Steam ID


"util/StringToType"
util.StringToType( string str, string typename ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Converts a string to the specified type.
This can be useful when dealing with ConVars.

 Arguments

 string str


The string to convert

 Arguments

 string typename


The type to attempt to convert the string to. This can be vector, angle, float, int, bool, or string (case insensitive).

 Returns

 any


The result of the conversion, or nil if a bad type is specified.

 Examples
 Example
Creates a vector from a string representation.

local vec = util.StringToType( 5 6 75, Vector )
Output:

A vector with components (5, 6, 75)


"util/TableToJSON"
util.TableToJSON( table table, boolean prettyPrint=false ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Converts a table to a JSON string.



WARNING


All integers will be converted to decimals (5 -&gt; 5.0).




WARNING


All keys are strings in the JSON format, so all keys will be converted to strings!




BUG


This will produce invalid JSON if the provided table contains nan or inf values.



 Arguments

 table table


Table to convert.

 Arguments

 boolean prettyPrint=false


Format and indent the JSON.

 Returns

 string


JSON

 Examples
 Example
Writes the positions and angles of every player to a txt document called playerstuff.txt

local Players = {}

for k, v in pairs( ents.GetAll() ) do
	if ( v:IsPlayer() then -- Is a player
		Players[k] = { pos = v:GetPos(), ang = v:GetAngles() }

	end
end
	
local tab = util.TableToJSON( Players ) -- Convert the player table to JSON
file.CreateDir( jsontest ) -- Create the directory
file.Write( jsontest/playerstuff.txt, tab ) -- Write to .txt


"util/RemovePData"
util.RemovePData( string steamID, string name ) 
 Description
Removes PData of offline player using his SteamID



WARNING


This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). Its recommended that you dont use it. See the related wiki page for more information.


 Arguments

 string steamID


SteamID of the player

 Arguments

 string name


Variable name to remove


"util/SetPData"
util.SetPData( string steamID, string name, any value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Sets PData for offline player using his SteamID



WARNING


This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). Its recommended that you dont use it. See the related wiki page for more information.


 Arguments

 string steamID


SteamID of the player

 Arguments

 string name


Variable name to store the value in

 Arguments

 any value


The value to store


"util/QuickTrace"
util.QuickTrace( Vector origin, Vector endpos, Entity filter=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Performs a trace with the given origin, direction and filter.

 Arguments

 Vector origin


The origin of the trace.

 Arguments

 Vector endpos


The end point of the trace, relative to the start.

This is the direction of the trace times the distance of the trace.

 Arguments

 Entity filter=nil


Entity which should be ignored by the trace. Can also be a table of entities or a function - see Trace structure.

 Returns

 table


Trace result. See TraceResult structure.


"util/TraceEntity"
util.TraceEntity( table tracedata, Entity ent ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Runs a trace using the entitys collisionmodel between two points. This does not take the entitys angles into account and will trace its unrotated collisionmodel.



NOTE


Clientside entities will not be hit by traces.


 Arguments

 table tracedata


Trace data. See Trace structure

 Arguments

 Entity ent


The entity to use

 Returns

 table


Trace result. See TraceResult structure

 Examples
 Example
From sandbox/gamemode/prop_tools.lua, this checks if there are any entities inside our entity

local trace = { start = ent:GetPos(), endpos = ent:GetPos(), filter = ent }

local tr = util.TraceEntity( trace, ent ) 
if ( tr.Hit ) then
 -- Do stuff
end


"util/RelativePathToFull"
util.RelativePathToFull( string file ) 
 Description
Returns the absolute system path the file relative to /garrysmod/.

 Arguments

 string file


The file to get the absolute path of.

 Returns

 string


absolutePath


"Vector/Angle"
Vector:Angle(  ) 
 Description
Returns an angle representing the normal of the vector.

 Returns

 Angle


The angle/direction of the vector.


"util/TableToKeyValues"
util.TableToKeyValues( table table ) 
 Description
Converts the given table into a key value string.

 Arguments

 table table


The table to convert.

 Returns

 string


KeyValueString


"util/Timer"
util.Timer( number startdelay=0 ) 
 Description
Creates a timer object.

 Arguments

 number startdelay=0


How long you want the timer to be.

 Returns

 table


A timer object. It has next methods:

Reset() - Resets the timer to nothing
Start( time ) - Starts the timer, call with end time
Started() - Returns true if the timer has been started
Elapsed() - Returns true if the time has elapsed


"Vector/AngleEx"
Vector:AngleEx( Vector up ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the angle of the vector, but instead of assuming that up is Vector( 0, 0, 1 ) (Like Vector:Angle does) you can specify which direction is up for the angle.

 Arguments

 Vector up


The up direction vector

 Returns

 Angle


The angle

 Examples
 Example
Shows usage of the function

print( Vector( 0, 0, 100 ):AngleEx( Vector( 0, 0, 0 ) ) )
Output:

Angle( -90.000, -0.000, 0.000 )


"Vector/Distance"
Vector:Distance( Vector otherVector ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the pythagorean distance between the vector and the other vector.
This is a relatively expensive process since it uses the square root. It is recommended that you use Vector:DistToSqr whenever possible.

 Arguments

 Vector otherVector


The vector to get the distance to.

 Returns

 number


Distance between the vectors.

 Examples
 Example
Gets the distance from A to B.

print( Vector( 0, 0, 0 ):Distance( Vector( 2, 3, 4 ) ) )
Output:

5.3851647377014


"util/TraceHull"
util.TraceHull( table TraceData ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example


5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Performs an AABB hull (axis-aligned bounding box, aka not rotated) trace with the given trace data.



NOTE


Clientside entities will not be hit by traces.




NOTE


This function may not always give desired results clientside due to certain physics mechanisms not existing on the client. Use it serverside for accurate results.


 Arguments

 table TraceData


The trace data to use. See HullTrace structure

 Returns

 table


Trace result. See TraceResult structure

 Examples
 Example
From a SWEP:PrimaryAttack()

local tr = util.TraceHull( {
	start = self.Owner:GetShootPos(),
	endpos = self.Owner:GetShootPos() + ( self.Owner:GetAimVector() * 100 ),
	filter = self.Owner,
	mins = Vector( -10, -10, -10 ),
	maxs = Vector( 10, 10, 10 ),
	mask = MASK_SHOT_HULL
} )


 Examples
 Example
Visual representation of a Hull Trace.

function ENT:Draw()

	self:DrawModel()
	
	local ent = self
	
	local mins = ent:OBBMins()
	local maxs = ent:OBBMaxs()
	local startpos = ent:GetPos()
	local dir = ent:GetUp()
	local len = 128

	local tr = util.TraceHull( {
		start = startpos,
		endpos = startpos + dir * len,
		maxs = maxs,
		mins = mins,
		filter = ent
	} )
	
	render.DrawLine( tr.HitPos, startpos + dir * len, color_white, true )
	render.DrawLine( startpos, tr.HitPos, Color( 0, 0, 255 ), true )
	
	local clr = color_white
	if ( tr.Hit ) then
		clr = Color( 255, 0, 0 )
	end

	render.DrawWireframeBox( startpos, Angle( 0, 0, 0 ), mins, maxs, Color( 255, 255, 255 ), true )
	render.DrawWireframeBox( tr.HitPos, Angle( 0, 0, 0 ), mins, maxs, clr, true )

end
Output:


 Examples
 Example
Trace a player sized hull to detect if a player can spawn here without getting stuck inside anything.

local pos = Entity( 1 ):GetPos() -- Choose your position.

local tr =
{
	start = pos,
	endpos = pos,
	mins = Vector( -16, -16, 0 ),
	maxs = Vector( 16, 16, 71 )
}


local hullTrace = util.TraceHull( tr )
if ( hullTrace.Hit ) then
    -- Find a new spawnpoint
end


"util/TypeToString"
util.TypeToString( any input ) 
 Description
Converts a type to a (nice, but still parsable) string

 Arguments

 any input


What to convert

 Returns

 string


Converted string


"Vector/Cross"
Vector:Cross( Vector otherVector ) 
 Description
Calculates the cross product of this vector and the passed one.
The cross product of two vectors is a 3-dimensional vector with a direction perpendicular (at right angles) to both of them (according to the right-hand rule), and magnitude equal to the area of parallelogram they span. This is defined as the product of the magnitudes, the sine of the angle between them, and unit (normal) vector n defined by the right-hand rule:

a  b = |a| |b| sin(&#x3B8;) n&#x302;

where a and b are vectors, and n&#x302; is a unit vector (magnitude of 1) perpendicular to both.

 Arguments

 Vector otherVector


Vector to calculate the cross product with.

 Returns

 Vector


The cross product of the two vectors.


"util/Stack"
util.Stack(  ) 
 Description
Returns a new Stack object

 Returns

 Stack


A brand new stack object


"Vector/Div"
Vector:Div( number divisor ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Divide the vector by the given number, that means x, y and z are divided by that value. This will change the value of the original vector, see example 2 for division without changing the value.

 Arguments

 number divisor


The value to divide the vector with.

 Examples
 Example
Divides a vector by 255.

a = Vector( 255, 130, 0 )
a:Div( 255 )
print( a )
Output:

1 0.509804 0
 Examples
 Example
If you dont want to set your vector to the result, and just return a new vector as the result. You can use a  /  operator to divide a vector with a divisor.

a = Vector( 255, 255, 255 )
print( a/255 )
Output:

1 1 1


"util/TraceLine"
util.TraceLine( table TraceData ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Performs a trace with the given trace data.



NOTE


Clientside entities will not be hit by traces.


 Arguments

 table TraceData


The trace data to use. See Trace structure

 Returns

 table


Trace result. See TraceResult structure.

Can return nil if game.GetWorld or its physics object is invalid. This will be the case for any traces done before GM:InitPostEntity is called.

 Examples
 Example
Using a function callback as filter.

local tr = util.TraceLine( {
	start = LocalPlayer():EyePos(),
	endpos = LocalPlayer():EyePos() + EyeAngles():Forward() * 10000,
	filter = function( ent ) if ( ent:GetClass() == prop_physics ) then return true end end
} )

print( tr.HitPos, tr.Entity )
Output:

The trace will only hit prop_physics or world.


"Vector/DistToSqr"
Vector:DistToSqr( Vector otherVec ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
Returns the squared distance of 2 vectors, this is faster than Vector:Distance as calculating the square root is an expensive process.

 Arguments

 Vector otherVec


The vector to calculate the distance to.

 Returns

 number


Squared distance to the vector

 Examples
 Example
Checks if a player is within `dist` units of another player in the most efficient way possible.

function PlayerWithinBounds( ply,otherPly, dist )
	return ply:GetPos():DistToSqr( otherPly:GetPos() ) &lt; ( dist*dist )
	-- This is computationally faster than:
	-- ply:GetPos():Distance( otherPly:GetPos() ) &lt; dist
end
print( PlayerWithinBounds( Entity( 1 ),Entity( 2 ),500 ) )
Output:

true


"util/TimerCycle"
util.TimerCycle(  ) 
 Description
Returns the time since this function has been last called

 Returns

 number


Time since this function has been last called in ms


"Vector/Add"
Vector:Add( Vector vector ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Adds the values of the argument vector to the orignal vector. This functions the same as vector1 + vector2 without creating a new vector object, skipping object construction and garbage collection.

 Arguments

 Vector vector


The vector to add.

 Examples
 Example
Adds the components of the vectors together.

a = Vector( 1, 1, 1 )
a:Add( Vector( 1, 2, 3 ) )
print( a )
Output:

2 3 4
 Examples
 Example
If you dont want to set your vector to the result, and just return a new vector as the result. You can use a + operator to add two vectors together. The original vector will remain unchanged.

a = Vector( 1, 1, 1 )
print( a + Vector( 1, 2, 3 ) )
Output:

2 3 4


"util/TraceEntityHull"
util.TraceEntityHull( Entity ent1, Entity ent2 ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

This function is broken and returns the same values all the time
Traces from one entity to another.

 Arguments

 Entity ent1


The first entity to trace from

 Arguments

 Entity ent2


The second entity to trace to

 Returns

 table


Trace result. See TraceResult structure


"util/tobool"
util.tobool( any input ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

You should use tobool instead.
Converts string or a number to a bool, if possible. Alias of tobool.

 Arguments

 any input


A string or a number to convert.

 Returns

 boolean


False if the input is equal to the string or boolean false, if the input is equal to the string or number 0, or if the input is nil. Returns true otherwise.


"Vector/Dot"
Vector:Dot( Vector otherVector ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example


5 Examples

5.1 Example


6 Examples

6.1 Example




 Description
Returns the dot product of this vector and the passed one.
The dot product of two vectors is the product of their magnitudes (lengths), and the cosine of the angle between them:

a  b = |a| |b| cos(&#x3B8;)

where a and b are vectors. See Vector:Length for obtaining magnitudes.
A dot product returns just the cosine of the angle if both vectors are normalized, and zero if the vectors are at right angles to each other.

 Arguments

 Vector otherVector


The vector to calculate the dot product with

 Returns

 number


The dot product between the two vectors

 Examples
 Example
Get the angle of two opposite normalized vectors.

local a = Vector( 0, 1, 0 )
local b = Vector( 0, -1, 0 )

local dot = a:Dot( b ) -- returns the cos( ang ) of the two vectors because theyre both of length 1
print( Radians, math.acos( dot ) ) -- the inverse of the cosine to get the angle
print( Degrees, math.deg( math.acos( dot ) ) ) -- Convert radians to degrees
Output:

Radians 3.1415926535898
Degrees 180
 Examples
 Example
Calculates whether the player is looking in the direction of an entity. This is often faster than traces, but it produces a slightly different result.
The player is looking in the direction of the entity if the angle between the aimvector and the vector from the player to the entity is less than 45 degrees (or pi / 8 radians).

local directionAng = math.pi / 8 
local aimvector = ply:GetAimVector()
-- The vector that goes from the players shoot pos to the entitys position
local entVector = ent:GetPos() - ply:GetShootPos() 
local dot = aimvector:Dot( entVector ) / entVector:Length()
print( dot &lt; directionAng )
Output:

This script will say if the player is looking in the direction of the entity.
 Examples
 Example
A function to make sure the player is looking somewhere.

function IsLookingAt( ply, targetVec )
 return ply:GetAimVector():Dot( ( targetVec - ply:GetPos() + Vector( 70 ) ):GetNormalized() ) &lt; 0.95 
end
Output:

Returns true if ply is looking at (or close to) the target.


"Vector/GetNormalized"
Vector:GetNormalized(  ) 
 Description
Returns a normalized version of the vector. Normalized means vector with same direction but with length of 1.
This does not affect the vector you call it on; to do this, use Vector:Normalize.

 Returns

 Vector


Normalized version of the vector.


"Vector/IsZero"
Vector:IsZero(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Checks whenever all fields of the vector are 0.

 Returns

 boolean


Do all fields of the vector equal 0 or not

 Examples
 Example
Confirm that the Vector is indeed 0.

a = Vector( 0, 0, 0 )
print( a:IsZero() )
Output:

true


"Vector/DotProduct"
Vector:DotProduct( Vector Vector ) 
Contents

1 Description
2 Arguments
3 Returns
4 Examples

4.1 Example




 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

This is an alias of Vector:Dot. Use that instead.Returns the dot product of the two vectors.
 Arguments

 Vector Vector


The other vector.

 Returns

 number


Dot Product

 Examples
 Example
A function to make sure the player is looking somewhere.

function IsLookingAt( ply, targetVec )
 return ply:GetAimVector():DotProduct( ( targetVec - ply:GetPos() + Vector( 70 ) ):GetNormalized() ) &lt; 0.95 
end
Output:

Returns true if ply is looking at (or close to) the target.


"Vector/IsEqualTol"
Vector:IsEqualTol( Vector compare, number tolerance ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns if the vector is equal to another vector with the given tolerance.

 Arguments

 Vector compare


The vector to compare to.

 Arguments

 number tolerance


The tolerance range.

 Returns

 boolean


Are the vectors equal or not.


"Vector/GetNormal"
Vector:GetNormal(  ) 
 Description
This feature is deprecated.
You should avoid using it as it may be removed in a future version.

Use Vector:GetNormalized instead.
Returns a normalized version of the vector. This is a alias of Vector:GetNormalized.

 Returns

 Vector


Normalized version of the vector.


"Vector/Length"
Vector:Length(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the Euclidean length of the vector: &#x221A;x + y + z

 Returns

 number


Length of the vector.

 Examples
 Example
Gets the length of the vector.

print( Vector( 15, 16, 17 ):Length() )
Output:

27.748874664307.


"Vector/LengthSqr"
Vector:LengthSqr(  ) 
 Description
Returns the squared length of the vector, x + y + z.
This is faster than Vector:Length as calculating the square root is an expensive process.

 Returns

 number


Squared length of the vector


"Vector/Length2DSqr"
Vector:Length2DSqr(  ) 
 Description
Returns the squared length of the vectors x and y value, x + y.
This is faster than Vector:Length2D as calculating the square root is an expensive process.

 Returns

 number


Squared length of the vector in two dimensions


"Vector/Normalize"
Vector:Normalize(  ) 
 Description
Normalizes the given vector. This changes the vector you call it on, if you want to return a normalized copy without affecting the original, use Vector:GetNormalized.

 Examples
 Example
Normalizes Vector(4, 3, 2).

local test = Vector( 4, 3, 2 )
test:Normalize()
MsgN( test )
Output:

0.7428 0.5571 0.3714.


"Vector/ToColor"
Vector:ToColor(  ) 
 Description
Translates the vector normalized vector ( length is 1 ) into a Color structure.
x * 255 -&gt; r
y * 255 -&gt; g
z * 255 -&gt; b

 Returns

 table


The created Color structure.


"Vehicle/BoostTimeLeft"
Vehicle:BoostTimeLeft(  ) 
 Description
Returns the remaining boosting time left.

 Returns

 number


The remaining boosting time left


"Vehicle/CheckExitPoint"
Vehicle:CheckExitPoint( number yaw, number distance, Vector endPoint ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 number yaw


 Arguments

 number distance


 Arguments

 Vector endPoint


 Returns

 boolean


"Vector/Sub"
Vector:Sub( Vector vector ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Substracts the values of the second vector from the orignal vector, this function can be used to avoid garbage collection.

 Arguments

 Vector vector


The other vector.

 Examples
 Example
Subtracts vector As components with the other vector.

a = Vector( 5, 6, 7 )
a:Sub( Vector( 1, 2, 3 ) )
print( a )
Output:

4 4 4
 Examples
 Example
If you dont want to set your vector to the result, and just return a new vector as the result. You can use a  -  operator to subtract two vectors from each other.

a = Vector( 5, 6, 7 )
print( a-Vector( 1, 2, 3 ) )
Output:

4 4 4


"Vector/Length2D"
Vector:Length2D(  ) 
 Description
Returns the length of the vector in two dimensions, without the Z axis.

 Returns

 number


Length of the vector in two dimensions, &#x221A;x + y


"Vehicle/EnableEngine"
Vehicle:EnableEngine( boolean enable ) 
 Description
Sets whether the engine is enabled or disabled, i.e. can be started or not.

 Arguments

 boolean enable


Enable or disable the engine


"Vector/Set"
Vector:Set( Vector vector ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Copies the values from the second vector to the first vector.

 Arguments

 Vector vector


The vector to copy from.

 Examples
 Example
Sets vector B to vector As value.

a = Vector( 1, 2, 3 )
b = Vector()
b:Set( a )
print( b )
Output:

1, 2, 3.


"Vehicle/GetCameraDistance"
Vehicle:GetCameraDistance(  ) 
 Description
Returns third person camera distance.

 Returns

 number


Camera distance


"Vector/Mul"
Vector:Mul( number multiplier ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example


4 Examples

4.1 Example




 Description
Scales the vector by the given number, that means x, y and z are multiplied by that value.

 Arguments

 number multiplier


The value to scale the vector with.

 Examples
 Example
Scales a vector by 250.

a = Vector( 1, 1, 1 )
a:Mul( 250 )
print( a )
Output:

250 250 250
 Examples
 Example
If you dont want to set your vector to the result, and just return a new vector as the result. You can use a  *  operator to multiply a vector with a scalar.

a = Vector( 1, 1, 1 )
print( a*250 )
Output:

250 250 250


"Vector/Rotate"
Vector:Rotate( Angle rotation ) 
 Description
Rotates a vector by the given angle.
Doesnt return anything, but rather changes the original vector.

 Arguments

 Angle rotation


The angle to rotate the vector by.


"Vehicle/GetPassengerSeatPoint"
Vehicle:GetPassengerSeatPoint( number role ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns


 Description
Returns the seat position and angle of a given passenger seat.

 Arguments

 number role


The passenger role. ( 1 is the driver )

 Returns

 Vector


The seat position

 Returns

 Angle


The seat angle


"Vector/ToScreen"
Vector:ToScreen(  ) 
 Description
Returns where on the screen the specified position vector would appear. A related function is gui.ScreenToVector, which converts a 2D coordinate to a 3D direction.



NOTE


Should be called from a 3D rendering environment or after cam.Start3D or it may not work correctly.




BUG


Errors in a render hook can make this value incorrect until the player restarts their game.





BUG


cam.Start3D or 3D context cam.Start with non-default parameters incorrectly sets the reference FOV for this function, causing incorrect return values. This can be fixed by creating and ending a default 3D context (cam.Start3D with no arguments).



 Returns

 table


The created ToScreenData structure.


"Vector/WithinAABox"
Vector:WithinAABox( Vector boxStart, Vector boxEnd ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Returns whenever the given vector is in a box created by the 2 other vectors.

 Arguments

 Vector boxStart


The first vector.

 Arguments

 Vector boxEnd


The second vector.

 Returns

 boolean


Is the vector in the box or not

 Examples
 Example
Checks if player is within a certain area on the map.

-- Position to test, we get the position of first player on the server
local testPos = Entity( 1 ):GetPos()

-- Positions to test, in this case we test if ( the player is in spawn area of gm_construct
local pos1 = Vector( 1119, 895, 63 )
local pos2 = Vector( 656, -896, -144 )

-- This will return true if ( the player is within the tested area
print( testPos:WithinAABox( pos1, pos2 ) )


"Vehicle/GetThirdPersonMode"
Vehicle:GetThirdPersonMode(  ) 
 Description
Returns if vehicle has thirdperson mode enabled or not.

 Returns

 boolean


Returns true if third person mode enabled, false otherwise


"Vehicle/GetHLSpeed"
Vehicle:GetHLSpeed(  ) 
 Description
Returns the current speed of the vehicle in Half-Life Hammer Units (in/s). Same as Entity:GetVelocity + Vector:Length.

 Returns

 number


The speed of the vehicle


"Vehicle/GetDriver"
Vehicle:GetDriver(  ) 
 Description
Gets the driver of the vehicle, returns NULL if no driver is present.

 Returns

 Entity


The driver of the vehicle


"Vehicle/GetSteeringDegrees"
Vehicle:GetSteeringDegrees(  ) 
 Description
Returns the maximum steering degree of the vehicle

 Returns

 number


The maximum steering degree of the vehicle


"Vehicle/GetRPM"
Vehicle:GetRPM(  ) 
 Description
Returns the current RPM of the vehicle. This value is fake and doesnt actually affect the vehicle movement.

 Returns

 number


The RPM.


"Vector/Zero"
Vector:Zero(  ) 
 Description
Sets x, y and z to 0.


"Vehicle/GetAmmo"
Vehicle:GetAmmo(  ) 
Contents

1 Description
2 Returns
3 Returns
4 Returns


 Description
Returns information about the ammo of the vehicle

 Returns

 number


Ammo type of the vehicle ammo

 Returns

 number


Clip size

 Returns

 number


Count


"Vehicle/GetMaxSpeed"
Vehicle:GetMaxSpeed(  ) 
 Description
Returns the max speed of the vehicle in MPH.

 Returns

 number


The max speed of the vehicle in MPH


"Vehicle/GetOperatingParams"
Vehicle:GetOperatingParams(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns some info about the vehicle.

 Returns

 table


The operating params. See OperatingParams structure.

 Examples
 Example
Example output on a default Half-Life 2 Jeep.

PrintTable( Entity( 1 ):GetVehicle():GetOperatingParams() )
Output:


RPM	=	19.902961730957
gear	=	0
isTorqueBoosting	=	false
speed	=	-0.67361652851105
steeringAngle	=	0
wheelsInContact	=	4


"Vehicle/GetThrottle"
Vehicle:GetThrottle(  ) 
 Description
Returns the current throttle of the vehicle.

 Returns

 number


The current throttle of the vehicle


"Vehicle/GetSpeed"
Vehicle:GetSpeed(  ) 
 Description
Returns the current speed of the vehicle in MPH.

 Returns

 number


The speed of the vehicle in MPH


"Vehicle/GetPassenger"
Vehicle:GetPassenger( number passenger ) 
 Description
Gets the passenger of the vehicle, returns NULL if no drivers is present.

 Arguments

 number passenger


The index of the passenger

 Returns

 Entity


The passenger


"Vehicle/GetVehicleClass"
Vehicle:GetVehicleClass(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the vehicle class name. This is only useful for Sandbox spawned vehicles or any vehicle that properly sets the vehicle class with Vehicle:SetVehicleClass.

 Returns

 string


The class name of the vehicle.

 Examples
 Example
Prints the spawn menu name of the vehicle the player is currently in.

local c = Entity( 1 ):GetVehicle():GetVehicleClass()
if ( !list.Get( Vehicles )[ c ] ) then return end
local t = list.Get( Vehicles )[ c ]
print( t.Name )


"Vehicle/GetVehicleParams"
Vehicle:GetVehicleParams(  ) 
 Description
Returns the vehicle parameters of given vehicle.

 Returns

 table


The vehicle parameters. See VehicleParams structure


"Vehicle/GetVehicleViewPosition"
Vehicle:GetVehicleViewPosition( number role=0 ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns
5 Returns


 Description
Returns the view position and forward angle of a given passenger seat.

 Arguments

 number role=0


The passenger role. 0 is the driver. This parameter seems to be ignored by the game engine and is therefore optional.

 Returns

 Vector


The view position, will be 0, 0, 0 on failure

 Returns

 Angle


The view angles, will be 0, 0, 0 on failure

 Returns

 number


The field of view, will be 0 on failure


"Vehicle/GetSteering"
Vehicle:GetSteering(  ) 
 Description
Returns the current steering of the vehicle.

 Returns

 number


The current steering of the vehicle.


"Vehicle/GetWheelContactPoint"
Vehicle:GetWheelContactPoint( number wheel ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns
5 Returns


 Description
Returns the wheel contact point.

 Arguments

 number wheel


The wheel to check

 Returns

 Vector


The contact position

 Returns

 number


The Surface Properties ID of hit surface.

 Returns

 boolean


Whether the wheel is on ground or not


"Vehicle/GetWheelBaseHeight"
Vehicle:GetWheelBaseHeight( number wheel ) 
 Description
Returns the base wheel height.

 Arguments

 number wheel


The wheel to get the base wheel height of.

 Returns

 number


The base wheel height.


"Vehicle/GetWheel"
Vehicle:GetWheel( number wheel ) 
 Description
Returns the PhysObj of given wheel.

 Arguments

 number wheel


The wheel to retrieve

 Returns

 PhysObj


The wheel


"Vehicle/GetWheelTotalHeight"
Vehicle:GetWheelTotalHeight( number wheel ) 
 Description
Returns the total wheel height.

 Arguments

 number wheel


The wheel to get the base wheel height of.

 Returns

 number


The total wheel height.


"Vehicle/GetWheelCount"
Vehicle:GetWheelCount(  ) 
 Description
Returns the wheel count of the vehicle

 Returns

 number


The amount of wheels


"Vehicle/HasBrakePedal"
Vehicle:HasBrakePedal(  ) 
 Description
Returns whether this vehicle has a brake pedal. See Vehicle:SetHasBrakePedal.

 Returns

 boolean


Whether this vehicle has a brake pedal or not.


"Vehicle/IsBoosting"
Vehicle:IsBoosting(  ) 
 Description
Returns whether this vehicle is currently boosting or not.

 Returns

 boolean


Whether this vehicle is currently boosting or not.


"Vehicle/IsVehicleBodyInWater"
Vehicle:IsVehicleBodyInWater(  ) 
 Description
Returns whether this vehicles engine is underwater or not. ( Internally the attachment point engine or vehicle_engine is checked )

 Returns

 boolean


Whether this vehicles engine is underwater or not.


"Vehicle/SetBoost"
Vehicle:SetBoost( number boost ) 
 Description
Sets the boost. It is possible that this function does not work while the vehicle has a valid driver in it.

 Arguments

 number boost


The new boost value


"Vehicle/HasBoost"
Vehicle:HasBoost(  ) 
 Description
Returns whether this vehicle has boost at all.

 Returns

 boolean


Whether this vehicle has boost at all.


"Vehicle/IsEngineStarted"
Vehicle:IsEngineStarted(  ) 
 Description
Returns whether the engine is started or not.

 Returns

 boolean


Whether the engine is started or not.


"Vehicle/IsValidVehicle"
Vehicle:IsValidVehicle(  ) 
 Description
Returns true if the vehicle object is a valid or not. This will return false when Vehicle functions are not usable on the vehicle.

 Returns

 boolean


Is the vehicle a valid vehicle or not


"Vehicle/ReleaseHandbrake"
Vehicle:ReleaseHandbrake(  ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.


"Vehicle/IsEngineEnabled"
Vehicle:IsEngineEnabled(  ) 
 Description
Returns whether the engine is enabled or not, i.e. whether it can be started.

 Returns

 boolean


Whether the engine is enabled


"Vehicle/SetHandbrake"
Vehicle:SetHandbrake( boolean handbrake ) 
 Description
This article is a stub.
Please help the Garrys Mod wiki by adding to it.
 Arguments

 boolean handbrake


"Vehicle/SetSteeringDegrees"
Vehicle:SetSteeringDegrees( number steeringDegrees ) 
 Description
Sets the maximum steering degrees of the vehicle

 Arguments

 number steeringDegrees


The new maximum steering degree


"Vehicle/SetSpringLength"
Vehicle:SetSpringLength( number wheel, number length ) 
 Description
Sets spring length of given wheel

 Arguments

 number wheel


The wheel to change spring length of

 Arguments

 number length


The new spring length


"Vehicle/SetVehicleEntryAnim"
Vehicle:SetVehicleEntryAnim( boolean bOn ) 
 Description
Sets whether the entry or exit camera animation should be played or not.

 Arguments

 boolean bOn


Whether the entry or exit camera animation should be played or not.


"Vehicle/SetSteering"
Vehicle:SetSteering( number front, number rear ) 
 Description
Sets the steering of the vehicle.

Validation required.
This page contains possibly incorrect or incomplete information. Further testing is required.The correct range, 0 to 1 or -1 to 1
 Arguments

 number front


Angle of the front wheels (-1 to 1)

 Arguments

 number rear


Angle of the rear wheels (-1 to 1)


"Vehicle/SetMaxThrottle"
Vehicle:SetMaxThrottle( number maxThrottle ) 
 Description
Sets maximum forward throttle

 Arguments

 number maxThrottle


The new maximum throttle.


"Vehicle/SetVehicleClass"
Vehicle:SetVehicleClass( string class ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.Sets the vehicle class name.
 Arguments

 string class


The vehicle class name to set


"Vehicle/SetVehicleParams"
Vehicle:SetVehicleParams( table params ) 
 Description
Sets the vehicle parameters for given vehicle.



NOTE


Not all variables from the VehicleParams structure can be set.




BUG


This modifies the vehicle engines maxSpeed to an incorrect value even when not being set by this function.



 Arguments

 table params


The new new vehicle parameters. See VehicleParams structure


"Vehicle/SetHasBrakePedal"
Vehicle:SetHasBrakePedal( boolean brakePedal ) 
 Description
Sets whether this vehicle has a brake pedal.

 Arguments

 boolean brakePedal


Whether this vehicle has a brake pedal


"Vehicle/SetMaxReverseThrottle"
Vehicle:SetMaxReverseThrottle( number maxRevThrottle ) 
 Description
Sets maximum reverse throttle

 Arguments

 number maxRevThrottle


The new maximum throttle. This number must be negative.


"Vehicle/SetThrottle"
Vehicle:SetThrottle( number throttle ) 
 Description
Sets the throttle of the vehicle. It is possible that this function does not work with a valid driver in it.

 Arguments

 number throttle


The new throttle.


"Vehicle/SetThirdPersonMode"
Vehicle:SetThirdPersonMode( boolean enable ) 
 Description
Sets the third person mode state.

 Arguments

 boolean enable


Enable or disable the third person mode for this vehicle


"Vehicle/SetCameraDistance"
Vehicle:SetCameraDistance( number distance ) 
 Description
Sets the third person camera distance of the vehicle.

 Arguments

 number distance


Camera distance to set to


"Vehicle/StartEngine"
Vehicle:StartEngine( boolean start ) 
 Description
Starts or stops the engine.

 Arguments

 boolean start


True to start, false to stop


"Vehicle/SetWheelFriction"
Vehicle:SetWheelFriction( number wheel, number friction ) 
 Description
Sets friction of given wheel. Validation required.
This page contains possibly incorrect or incomplete information. Further testing is required. This function may be broken.
 Arguments

 number wheel


The wheel to change the friction of

 Arguments

 number friction


The new friction to set


"vgui/Create"
vgui.Create( string classname, Panel parent=nil, string name=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Creates a panel by the specified classname.

 Arguments

 string classname


Classname of the panel to create. Valid classnames are listed at: VGUI Element List.

 Arguments

 Panel parent=nil


Parent of the created panel.

 Arguments

 string name=nil


Name of the created panel.

 Returns

 Panel


panel


"vgui/CreateFromTable"
vgui.CreateFromTable( table metatable, Panel parent=nil, string name=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Creates a panel from table.

 Arguments

 table metatable


Your PANEL table

 Arguments

 Panel parent=nil


Which panel to parent the newly created panel to

 Arguments

 string name=nil


Name of your panel

 Returns

 Panel


Created panel


"vgui/Register"
vgui.Register( string classname, table panelTable, string baseName ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
Registers a panel for later creation.

 Arguments

 string classname


Classname of the panel to create.

 Arguments

 table panelTable


The table containg the panel information.

 Arguments

 string baseName


Name of the base of the panel.

 Returns

 Panel


panel


"vgui/FocusedHasParent"
vgui.FocusedHasParent( Panel parent ) 
 Description
Returns whether the currently focused panel is a child of the given one.

 Arguments

 Panel parent


The parent panel to check the currently focused one against. This doesnt need to be a direct parent (focused panel can be a child of a child and so on).

 Returns

 boolean


Whether or not the focused panel is a child of the passed one.


"vgui/GetHoveredPanel"
vgui.GetHoveredPanel(  ) 
 Description
Returns the panel the cursor is hovering above.



WARNING


This returns a cached value that is only updated after rendering and before the next VGUI Think/Layout pass.
ie. it lags one frame behind panel layout and is completely unhelpful for PANEL:Paint if your panels are moving around under the mouse a lot every frame.


 Returns

 Panel


The panel that the user is currently hovering over with their cursor.


"vgui/RegisterFile"
vgui.RegisterFile( string file ) 
 Description
Registers a new VGUI panel from a file.

 Arguments

 string file


The file to register

 Returns

 table


A table containing info about the panel. Can be supplied to vgui.CreateFromTable


"vgui/CursorVisible"
vgui.CursorVisible(  ) 
 Description
Returns whenever the cursor is currently active and visible.

 Returns

 boolean


isCursorVisible


"vgui/RegisterTable"
vgui.RegisterTable( table panel, string base=Panel ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Registers a table to use as a panel. All this function does is assigns Base key to your table and returns the table.

 Arguments

 table panel


The PANEL table

 Arguments

 string base=Panel


A base for the panel

 Returns

 table


The PANEL table


"VMatrix/GetField"
VMatrix:GetField( number row, number column ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns


 Description
Returns a specific field in the matrix.

 Arguments

 number row


Row of the field whose value is to be retrieved, from 1 to 4

 Arguments

 number column


Column of the field whose value is to be retrieved, from 1 to 4

 Returns

 number


The value of the specified field


"vgui/CreateX"
vgui.CreateX( string class, Panel parent=nil, string name=nil ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments
5 Returns


 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Creates a engine panel.
 Arguments

 string class


Class of the panel to create

 Arguments

 Panel parent=nil


If specified, parents created panel to given one

 Arguments

 string name=nil


Name of the created panel

 Returns

 Panel


Created panel


"vgui/GetKeyboardFocus"
vgui.GetKeyboardFocus(  ) 
 Description
Returns the panel which is currently receiving keyboard input.

 Returns

 Panel


The panel with keyboard focus


"video/Record"
video.Record( table config ) 
Contents

1 Description
2 Arguments
3 Returns
4 Returns
5 Examples

5.1 Example




 Description
Attempts to create an IVideoWriter.

 Arguments

 table config


The video config. See VideoData structure.

 Returns

 IVideoWriter


The video object (returns false if there is an error)

 Returns

 string


The error string, if there is an error

 Examples
 Example
How to create a basic IVideoWriter, and how to use it

local config =
{
	container = webm,
	video = vp8,
	audio = vorbis,
	quality = 50,
	bitrate = 200,
	fps = 30,
	lockfps = 30,
	name = Test,
	width = 1280,
	height = 720
}

local iVideoWriter = video.Record( config )
iVideoWriter:SetRecordSound( true )

local function Record()
	iVideoWriter:AddFrame( FrameTime(), true )
end

function StartRecording()
	hook.Add( DrawOverlay, Record, Record )
end

function StopRecording()
	hook.Remove( DrawOverlay, Record )
	iVideoWriter:Finish()
end


"VMatrix/GetForward"
VMatrix:GetForward(  ) 
 Description
Gets the forward direction of the matrix.
ie. The first column of the matrix, excluding the w coordinate.

 Returns

 Vector


The forward direction of the matrix.


"VMatrix/GetRight"
VMatrix:GetRight(  ) 
 Description
Gets the right direction of the matrix.
ie. The second column of the matrix, negated, excluding the w coordinate.

 Returns

 Vector


The right direction of the matrix.


"VMatrix/GetTranslation"
VMatrix:GetTranslation(  ) 
 Description
Returns the absolute translation of the matrix.

 Returns

 Vector


Absolute translation of the matrix


"VMatrix/GetScale"
VMatrix:GetScale(  ) 
 Description
Returns the absolute scale of the matrix.

 Returns

 Vector


Absolute scale of the matrix


"VMatrix/GetInverseTR"
VMatrix:GetInverseTR(  ) 
 Description
Returns an inverted matrix without modifying the original matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.
Using this function on a matrix with modified scale may return an incorrect inverted matrix.
To get the inverse of a matrix that contains other modifications, see VMatrix:GetInverse.

 Returns

 VMatrix


The inverted matrix.


"VMatrix/InvertTR"
VMatrix:InvertTR(  ) 
 Description
Inverts the matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.
Using this function on a matrix with modified scale may return an incorrect inverted matrix.
To invert a matrix that contains other modifications, see VMatrix:Invert.


"VMatrix/Rotate"
VMatrix:Rotate( Angle rotation ) 
 Description
Rotates the matrix by the given angle.
Postmultiplies the matrix by a rotation matrix (A = AR).

 Arguments

 Angle rotation


Rotation.


"vgui/IsHoveringWorld"
vgui.IsHoveringWorld(  ) 
 Description
Returns whenever the cursor is hovering the world panel.

 Returns

 boolean


isHoveringWorld


"VMatrix/GetUp"
VMatrix:GetUp(  ) 
 Description
Gets the up direction of the matrix.
ie. The third column of the matrix, excluding the w coordinate.

 Returns

 Vector


The up direction of the matrix.


"vgui/GetWorldPanel"
vgui.GetWorldPanel(  ) 
 Description
Returns the global world panel which is the parent to all others.
See also GetHUDPanel.

 Returns

 Panel


The world panel


"VMatrix/GetInverse"
VMatrix:GetInverse(  ) 
 Description
Returns an inverted matrix without modifying the original matrix.
See also VMatrix:GetInverseTR.

 Returns

 VMatrix


The inverted matrix if possible, nil otherwise


"vgui/GetControlTable"
vgui.GetControlTable( string Panelname ) 
 Description
Gets the method table of this panel. Does not return parent methods!

 Arguments

 string Panelname


The name of the panel

 Returns

 table


methods


"VMatrix/Invert"
VMatrix:Invert(  ) 
 Description
Inverts the matrix.
If the matrix cannot be inverted, it does not get modified.
See also VMatrix:InvertTR.

 Returns

 boolean


Whether the matrix was inverted or not


"VMatrix/IsIdentity"
VMatrix:IsIdentity(  ) 
 Description
Returns whether the matrix is equal to Identity matrix or not.

 Returns

 boolean


Is the matrix an Identity matrix or not


"VMatrix/Identity"
VMatrix:Identity(  ) 
 Description
Initializes the matrix as Identity matrix.


"VMatrix/IsRotationMatrix"
VMatrix:IsRotationMatrix(  ) 
 Description
Returns whether the matrix is a rotation matrix or not.
Technically it checks if the forward, right and up vectors are orthogonal and normalized.

 Returns

 boolean


Is the matrix a rotation matrix or not


"VMatrix/Set"
VMatrix:Set( VMatrix src ) 
 Description
Copies values from the given matrix object.

 Arguments

 VMatrix src


The matrix to copy values from.


"VMatrix/ScaleTranslation"
VMatrix:ScaleTranslation( number scale ) 
 Description
Scales the absolute translation with the given value.

 Arguments

 number scale


Value to scale the translation with.


"VMatrix/GetAngles"
VMatrix:GetAngles(  ) 
 Description
Returns the absolute rotation of the matrix.

 Returns

 Angle


Absolute rotation of the matrix


"VMatrix/SetField"
VMatrix:SetField( number row, number column, number value ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Arguments


 Description
Sets a specific field in the matrix.

 Arguments

 number row


Row of the field to be set, from 1 to 4

 Arguments

 number column


Column of the field to be set, from 1 to 4

 Arguments

 number value


The value to set in that field


"VMatrix/SetAngles"
VMatrix:SetAngles( Angle angle ) 
 Description
Sets the absolute rotation of the matrix.

 Arguments

 Angle angle


New angles.


"VMatrix/SetRight"
VMatrix:SetRight( Vector forward ) 
 Description
Sets the right direction of the matrix.
ie. The second column of the matrix, negated, excluding the w coordinate.

 Arguments

 Vector forward


The right direction of the matrix.


"VMatrix/SetUp"
VMatrix:SetUp( Vector forward ) 
 Description
Sets the up direction of the matrix.
ie. The third column of the matrix, excluding the w coordinate.

 Arguments

 Vector forward


The up direction of the matrix.


"VMatrix/Translate"
VMatrix:Translate( Vector translation ) 
 Description
Translates the matrix by the given vector aka. adds the vector to the translation.
Postmultiplies the matrix by a translation matrix (A = AT).

 Arguments

 Vector translation


Vector to translate the matrix by.


"VMatrix/SetForward"
VMatrix:SetForward( Vector forward ) 
 Description
Sets the forward direction of the matrix.
ie. The first column of the matrix, excluding the w coordinate.

 Arguments

 Vector forward


The forward direction of the matrix.


"Weapon/AllowsAutoSwitchTo"
Weapon:AllowsAutoSwitchTo(  ) 
 Description
Returns whether the weapon allows to being switched to when a better ( Weapon:GetWeight ) weapon is being picked up.

 Returns

 boolean


Whether the weapon allows to being switched to.


"Weapon/AllowsAutoSwitchFrom"
Weapon:AllowsAutoSwitchFrom(  ) 
 Description
Returns whether the weapon allows to being switched from when a better ( Weapon:GetWeight ) weapon is being picked up.

 Returns

 boolean


Whether the weapon allows to being switched from.


"VMatrix/Scale"
VMatrix:Scale( Vector scale ) 
 Description
Scales the matrix by the given vector.
Postmultiplies the matrix by a scaling matrix (A = AS).

 Arguments

 Vector scale


Vector to scale with matrix with.


"Weapon/CallOnClient"
Weapon:CallOnClient( string functionName, string arguments= ) 
 Description
Calls a SWEP function on client.



WARNING


This uses the usermessage library internally, because of that, the combined length of the arguments of this function may not exceed 254 bytes/characters or the function will cease to function!


 Arguments

 string functionName


Name of function to call. If you want to call SWEP:MyFunc() on client, you type in MyFunc

 Arguments

 string arguments=


Arguments for the function, separated by spaces.



NOTE


Only the second argument is passed as argument and must be a string


"Weapon/DefaultReload"
Weapon:DefaultReload( number act ) 
 Description
Forces the weapon to reload while playing given animation.

 Arguments

 number act


Sequence to use as reload animation. Uses the ACT_ Enums.

 Returns

 boolean


Did reloading actually take place


"Weapon/GetMaxClip1"
Weapon:GetMaxClip1(  ) 
 Description
Returns maximum primary clip size

 Returns

 number


Maximum primary clip size


"Weapon/GetNextSecondaryFire"
Weapon:GetNextSecondaryFire(  ) 
 Description
Gets the next time the weapon can secondary fire. ( Can call WEAPON:SecondaryAttack )

 Returns

 number


The time, relative to CurTime


"VMatrix/SetTranslation"
VMatrix:SetTranslation( Vector translation ) 
 Description
Sets the absolute translation of the matrix.

 Arguments

 Vector translation


New translation.


"VMatrix/SetScale"
VMatrix:SetScale( Vector scale ) 
 Description
Modifies the scale of the matrix while preserving the rotation and translation.

 Arguments

 Vector scale


The scale to set.


"Weapon/GetSecondaryAmmoType"
Weapon:GetSecondaryAmmoType(  ) 
 Description
Gets the ammo type of the given weapons secondary fire.

 Returns

 number


The secondary ammo type ID.


"Weapon/GetPrimaryAmmoType"
Weapon:GetPrimaryAmmoType(  ) 
 Description
Gets the primary ammo type of the given weapon.

 Returns

 number


The ammo type ID.


"Weapon/GetActivity"
Weapon:GetActivity(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the sequence enumeration number that the weapon is playing.



BUG


This can return inconsistent results between the server and client.



 Returns

 number


Current activity, see ACT_ Enums. Returns 0 if the weapon doesnt have active sequence.

 Examples
 Example
This will return the ACT_ENUM that is currently active for the weapon.

local wep = Entity( 1 ):GetActiveWeapon()
 
if ( IsValid( wep ) ) then // Makes sure that wep exists
 
    print( wep:GetActivity() ) // Prints the sequence number
 
end


"Weapon/Clip1"
Weapon:Clip1(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns how much primary ammo is in the magazine.

 Returns

 number


The amount of primary ammo in the magazine.

 Examples
 Example
Prints the amount of primary ammo in the magazine of the weapon the 1st player has equipped.

print( player.GetByID( 1 ):GetActiveWeapon():Clip1() )
Output:

Will print 45 for fully loaded SMG1.


"Weapon/Clip2"
Weapon:Clip2(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns how much secondary ammo is in magazine.

 Returns

 number


The amount of secondary ammo in the magazine.

 Examples
 Example
Prints the amount of seconday ammo in the magazine of the weapon the 1st player has equipped.

print( player.GetByID( 1 ):GetActiveWeapon():Clip2() )
Output:

Will print -1 for all HL2 weapons.


"Weapon/GetMaxClip2"
Weapon:GetMaxClip2(  ) 
 Description
Returns maximum secondary clip size

 Returns

 number


Maximum secondary clip size


"VMatrix/ToTable"
VMatrix:ToTable(  ) 
 Description
Converts the matrix to a 4x4 table. See Matrix function.

 Returns

 table


The 4x4 table.


"Weapon/GetHoldType"
Weapon:GetHoldType(  ) 
 Description
Returns the hold type of the weapon.

 Returns

 string


The hold type of the weapon. You can find a list of default hold types here.


"Weapon/GetPrintName"
Weapon:GetPrintName(  ) 
 Description
Returns the non-internal name of the weapon, that should be for displaying.



NOTE


If that returns an untranslated message (#HL2_XX), use language.GetPhrase to see the nice name.




NOTE


If SWEP.PrintName is not set in the Weapon or the Weapon Base then &lt;MISSING SWEP PRINT NAME&gt; will be returned.


 Returns

 string


The nice name of the weapon.


"Weapon/GetSlotPos"
Weapon:GetSlotPos(  ) 
 Description
Returns slot position of the weapon

 Returns

 number


The slot position of the weapon


"Weapon/GetSlot"
Weapon:GetSlot(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Returns the slot of the weapon (slot numbers start from 0)

 Returns

 number


The slot of the weapon

 Examples
 Example
How you could use this function to check if a weapon slot was empty or not

local function IsSlotEmpty( ply, slot )

	slot = slot - 1 -- take away 1 from the slot number you want since it starts from 0

	local weptbl = ply:GetWeapons() -- get all the weapons the player has

	for k,v in pairs( weptbl ) do -- loop through them
		if ( v:GetSlot() == slot ) then return false end -- check if ( the slot is the slot you wanted to check, if ( it is, return false
	end

	return true -- otherwise return true

end


"Weapon/GetNextPrimaryFire"
Weapon:GetNextPrimaryFire(  ) 
 Description
Gets the next time the weapon can primary fire. ( Can call WEAPON:PrimaryAttack )

 Returns

 number


The time, relative to CurTime


"Weapon/GetWeaponViewModel"
Weapon:GetWeaponViewModel(  ) 
 Description
Returns the view model of the weapon.

 Returns

 string


The view model of the weapon.


"Weapon/HasAmmo"
Weapon:HasAmmo(  ) 
 Description
Returns whether the weapon has ammo left or not. It will return false when theres no ammo left in the magazine and when theres no reserve ammo left.



NOTE


This will return true for weapons like crowbar, gravity gun, etc.


 Returns

 boolean


Whether the weapon has ammo or not.


"Weapon/GetWeight"
Weapon:GetWeight(  ) 
 Description
Returns the weight of the weapon, which is used when deciding which Weapon is better by the engine.

 Returns

 number


The weapon weight.


"Weapon/LastShootTime"
Weapon:LastShootTime(  ) 
 Description
Returns the time since this weapon last fired a bullet with Entity:FireBullets in seconds. It is not networked.

 Returns

 number


The time in seconds when the last bullet was fired.


"Weapon/IsCarriedByLocalPlayer"
Weapon:IsCarriedByLocalPlayer(  ) 
 Description
Returns whenever the weapon is carried by the local player.

 Returns

 boolean


Is the weapon is carried by the local player or not


"Weapon/SendWeaponAnim"
Weapon:SendWeaponAnim( number act ) 
 Description
Forces weapon to play activity/animation.

 Arguments

 number act


Activity to play. See the ACT_ Enums (specifically ACT_VM_).


"Weapon/GetWeaponWorldModel"
Weapon:GetWeaponWorldModel(  ) 
 Description
Returns the world model of the weapon.

 Returns

 string


The world model of the weapon.


"Weapon/SetNextPrimaryFire"
Weapon:SetNextPrimaryFire( number time ) 
 Description
Sets when the weapon can fire again. Time should be based on CurTime.

 Arguments

 number time


Time when player should be able to use primary fire again


"Weapon/SetClip1"
Weapon:SetClip1( number ammo ) 
 Description
Lets you change the number of bullets in the given weapons primary clip.

 Arguments

 number ammo


The amount of bullets the clip should contain


"weapons/GetList"
weapons.GetList(  ) 
Contents

1 Description
2 Returns
3 Examples

3.1 Example




 Description
Get a list of all the registered SWEPs. This does not include weapons added to spawnmenu manually.

 Returns

 table


List of all the registered SWEPs

 Examples
 Example
Example structure.

PrintTable( weapons.GetList() )
Output:

1:
	Folder = weapons/weapon_myweapon
	ClassName = weapon_myweapon
	-- The rest of the SWEP table
2:
	Folder = weapons/weapon_myweapon2
	ClassName = weapon_myweapon2
	-- The rest of the SWEP table


"Weapon/SetLastShootTime"
Weapon:SetLastShootTime( number time=CurTime() ) 
 Description
Sets the time since this weapon last fired in seconds. Used in conjunction with Weapon:LastShootTime

 Arguments

 number time=CurTime()


The time in seconds when the last time the weapon was fired.


"Weapon/SetClip2"
Weapon:SetClip2( number ammo ) 
 Description
Lets you change the number of bullets in the given weapons secondary clip.

 Arguments

 number ammo


The amount of bullets the clip should contain


"Weapon/SetNextSecondaryFire"
Weapon:SetNextSecondaryFire( number time ) 
 Description
Sets when the weapon can alt-fire again. Time should be based on CurTime.

 Arguments

 number time


Time when player should be able to use secondary fire again


"Weapon/SetHoldType"
Weapon:SetHoldType( string name ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Sets the hold type of the weapon. This function also calls WEAPON:SetWeaponHoldType and properly networks it to all clients.



NOTE


This only works on scripted weapons.




BUG


Using this function on weapons held by bots will not network holdtype changes to clients if the world model is set to an empty string (SWEP.WorldModel = ).


 Arguments

 string name


Name of the hold type. You can find all default hold types here

 Examples
 Example
Puts a players hands down by its sides on reload.

function SWEP:Reload()
	self:SetHoldType( normal )
end


"Weapon/IsScripted"
Weapon:IsScripted(  ) 
 Description
Checks if the weapon is a SWEP or a built-in weapon.

 Returns

 boolean


Returns true if weapon is scripted ( SWEP ), false if not ( A built-in HL2 weapon )


"weapons/Get"
weapons.Get( string classname ) 
 Description
Get copy of weapon table by name. If all you need to do is access a variable from the weapon table, use weapons.GetStored instead.

 Arguments

 string classname


Class name of weapon to retrieve

 Returns

 table


The retrieved table or nil


"Weapon/IsWeaponVisible"
Weapon:IsWeaponVisible(  ) 
 Description
Returns whether the weapon is visible. The term visibility is not exactly what gets checked here, first it checks if the owner is a player, then checks if the active view model has EF_NODRAW flag NOT set.

 Returns

 boolean


Is visible or not


"weapons/GetStored"
weapons.GetStored( string weapon_class ) 
 Description
Gets the REAL weapon table, not a copy.

 Arguments

 string weapon_class


Weapon class to retrieve weapon table of

 Returns

 table


The weapon table


"widgets/RenderMe"
widgets.RenderMe( Entity ent ) 
Contents

1 Description
2 Arguments
3 Examples

3.1 Example




 Description
Renders a widget. Normally you wont need to call this.

 Arguments

 Entity ent


Widget entity to render

 Examples
 Example
Example usage in lua/entities/widget_base.lua

function ENT:Draw()

	widgets.RenderMe( self )
	
end


"widgets/PlayerTick"
widgets.PlayerTick( Player ply, CMoveData mv ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Examples

4.1 Example




 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt. Automatically called to update all widgets.
 Arguments

 Player ply


The player

 Arguments

 CMoveData mv


Player move data

 Examples
 Example
Thats how it is used in lua/includes/modules/widget.lua

hook.Add( PlayerTick, TickWidgets, function( pl, mv ) widgets.PlayerTick( pl, mv ) end )


"weapons/Register"
weapons.Register( table swep_table, string classname ) 
 Description
Used to register your SWEP with the engine.



BUG


Sub-tables provided in the first argument will not carry over their metatable, and will receive a BaseClass key if the table was merged with the bases. Userdata references, which includes Vectors, Angles, Entities, etc. will not be copied.



 Arguments

 table swep_table


The SWEP table

 Arguments

 string classname


Classname to assign to that swep


"weapons/OnLoaded"
weapons.OnLoaded(  ) 
 Description
This is an internal function or feature.
This means you will be able to use it, but you really shouldnt.
Called after all SWEPS have been loaded and runs baseclass.Set on each one.
You can retrieve all the currently registered SWEPS with weapons.GetList.



NOTE


This is not called after a SWEP auto refresh, and thus the inherited baseclass functions retrieved with baseclass.Get will not be updated


"weapons/IsBasedOn"
weapons.IsBasedOn( string name, string base ) 
Contents

1 Description
2 Arguments
3 Arguments
4 Returns
5 Examples

5.1 Example




 Description
Checks if name is based on base

 Arguments

 string name


Entitys class name to be checked

 Arguments

 string base


Base class name to be checked

 Returns

 boolean


Returns true if class name is based on base, else false.

 Examples
 Example
See if gmod_tool is based on weapon_base, and whether weapon_base is based on itself.

print( weapons.IsBasedOn( gmod_tool, weapon_base ), weapons.IsBasedOn( weapon_base, weapon_base ) )
Output:

true
false


